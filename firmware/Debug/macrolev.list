
macrolev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08040000  08040000  0000f098  2**0
                  CONTENTS
  1 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000c694  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000bc0  0800c834  0800c834  0000d834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800d3f4  0800d3f4  0000f098  2**0
                  CONTENTS
  5 .ARM          00000008  0800d3f4  0800d3f4  0000e3f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800d3fc  0800d3fc  0000f098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800d3fc  0800d3fc  0000e3fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800d400  0800d400  0000e400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         00000098  20000000  0800d404  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000f68  20000098  0800d49c  0000f098  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20001000  0800d49c  00010000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f098  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cd1d  00000000  00000000  0000f0c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005032  00000000  00000000  0002bde5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015a0  00000000  00000000  00030e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001126  00000000  00000000  000323b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fb1e  00000000  00000000  000334de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c3be  00000000  00000000  00052ffc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b8ae6  00000000  00000000  0006f3ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00127ea0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006588  00000000  00000000  00127ee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  0012e46c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000098 	.word	0x20000098
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c81c 	.word	0x0800c81c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000009c 	.word	0x2000009c
 80001dc:	0800c81c 	.word	0x0800c81c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <get_special_char>:
static char cmd_buffer[CFG_TUD_CDC_RX_BUFSIZE];
static uint8_t cmd_index = 0;
extern uint32_t started_at;

// Map ASCII codes to special character enum
static special_char_t get_special_char(char c) {
 80005dc:	b480      	push	{r7}
 80005de:	b083      	sub	sp, #12
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	4603      	mov	r3, r0
 80005e4:	71fb      	strb	r3, [r7, #7]
  switch (c) {
 80005e6:	79fb      	ldrb	r3, [r7, #7]
 80005e8:	2b0d      	cmp	r3, #13
 80005ea:	dc1d      	bgt.n	8000628 <get_special_char+0x4c>
 80005ec:	2b03      	cmp	r3, #3
 80005ee:	db26      	blt.n	800063e <get_special_char+0x62>
 80005f0:	3b03      	subs	r3, #3
 80005f2:	2b0a      	cmp	r3, #10
 80005f4:	d823      	bhi.n	800063e <get_special_char+0x62>
 80005f6:	a201      	add	r2, pc, #4	@ (adr r2, 80005fc <get_special_char+0x20>)
 80005f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005fc:	0800062f 	.word	0x0800062f
 8000600:	08000633 	.word	0x08000633
 8000604:	0800063f 	.word	0x0800063f
 8000608:	0800063f 	.word	0x0800063f
 800060c:	0800063f 	.word	0x0800063f
 8000610:	08000637 	.word	0x08000637
 8000614:	0800063f 	.word	0x0800063f
 8000618:	0800063b 	.word	0x0800063b
 800061c:	0800063f 	.word	0x0800063f
 8000620:	0800063f 	.word	0x0800063f
 8000624:	0800063b 	.word	0x0800063b
 8000628:	2b7f      	cmp	r3, #127	@ 0x7f
 800062a:	d004      	beq.n	8000636 <get_special_char+0x5a>
 800062c:	e007      	b.n	800063e <get_special_char+0x62>
  case 3:
    return SPECIAL_CTRL_C; // Ctrl+C
 800062e:	2302      	movs	r3, #2
 8000630:	e006      	b.n	8000640 <get_special_char+0x64>
  case 4:
    return SPECIAL_CTRL_D; // Ctrl+D
 8000632:	2303      	movs	r3, #3
 8000634:	e004      	b.n	8000640 <get_special_char+0x64>
  case '\b':
  case 127:
    return SPECIAL_BACKSPACE; // Backspace
 8000636:	2301      	movs	r3, #1
 8000638:	e002      	b.n	8000640 <get_special_char+0x64>
  case '\r':
  case '\n':
    return SPECIAL_ENTER; // Enter
 800063a:	2304      	movs	r3, #4
 800063c:	e000      	b.n	8000640 <get_special_char+0x64>
  default:
    return SPECIAL_NONE;
 800063e:	2300      	movs	r3, #0
  }
}
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr

0800064c <handle_special_char>:

// Handle special character actions
static void handle_special_char(special_char_t sc) {
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]
  switch (sc) {
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	3b01      	subs	r3, #1
 800065a:	2b03      	cmp	r3, #3
 800065c:	d840      	bhi.n	80006e0 <handle_special_char+0x94>
 800065e:	a201      	add	r2, pc, #4	@ (adr r2, 8000664 <handle_special_char+0x18>)
 8000660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000664:	08000675 	.word	0x08000675
 8000668:	080006e1 	.word	0x080006e1
 800066c:	0800069d 	.word	0x0800069d
 8000670:	080006b3 	.word	0x080006b3
  case SPECIAL_BACKSPACE:
    if (cmd_index > 0) {
 8000674:	4b1e      	ldr	r3, [pc, #120]	@ (80006f0 <handle_special_char+0xa4>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d033      	beq.n	80006e4 <handle_special_char+0x98>
      cmd_index--;
 800067c:	4b1c      	ldr	r3, [pc, #112]	@ (80006f0 <handle_special_char+0xa4>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	3b01      	subs	r3, #1
 8000682:	b2da      	uxtb	r2, r3
 8000684:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <handle_special_char+0xa4>)
 8000686:	701a      	strb	r2, [r3, #0]
      // Send backspace sequence: move cursor back, write space to erase, move cursor back again
      // This works properly with CR/LF terminals
      char backspace_seq[] = {'\b', ' ', '\b', '\0'};
 8000688:	4b1a      	ldr	r3, [pc, #104]	@ (80006f4 <handle_special_char+0xa8>)
 800068a:	60fb      	str	r3, [r7, #12]
      cdc_write_string_chunked(backspace_seq);
 800068c:	f107 030c 	add.w	r3, r7, #12
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f8d1 	bl	8000838 <cdc_write_string_chunked>
      cdc_write_flush_wait();
 8000696:	f000 f91a 	bl	80008ce <cdc_write_flush_wait>
    }
    break;
 800069a:	e023      	b.n	80006e4 <handle_special_char+0x98>
    //   cdc_write_string_chunked("\r\nStreaming stopped\r\n");
    //   cdc_write_string_chunked("Ready> ");
    // }
    break;
  case SPECIAL_CTRL_D:
    cdc_write_string_chunked("\r\nTerminal exit (Ctrl+D)\r\n");
 800069c:	4816      	ldr	r0, [pc, #88]	@ (80006f8 <handle_special_char+0xac>)
 800069e:	f000 f8cb 	bl	8000838 <cdc_write_string_chunked>
    // Optionally reset state or disconnect
    cdc_write_flush_wait();
 80006a2:	f000 f914 	bl	80008ce <cdc_write_flush_wait>
    tud_disconnect(); // Disconnect the USB CDC device from the host
 80006a6:	f006 fefb 	bl	80074a0 <tud_disconnect>
    cmd_index = 0;
 80006aa:	4b11      	ldr	r3, [pc, #68]	@ (80006f0 <handle_special_char+0xa4>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	701a      	strb	r2, [r3, #0]
    break;
 80006b0:	e019      	b.n	80006e6 <handle_special_char+0x9a>
  case SPECIAL_ENTER:
    cdc_write_string_chunked("\r\n");
 80006b2:	4812      	ldr	r0, [pc, #72]	@ (80006fc <handle_special_char+0xb0>)
 80006b4:	f000 f8c0 	bl	8000838 <cdc_write_string_chunked>
    cmd_buffer[cmd_index] = '\0';
 80006b8:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <handle_special_char+0xa4>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <handle_special_char+0xb4>)
 80006c0:	2100      	movs	r1, #0
 80006c2:	5499      	strb	r1, [r3, r2]
    if (cmd_index > 0) {
 80006c4:	4b0a      	ldr	r3, [pc, #40]	@ (80006f0 <handle_special_char+0xa4>)
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d005      	beq.n	80006d8 <handle_special_char+0x8c>
      process_command(cmd_buffer);
 80006cc:	480c      	ldr	r0, [pc, #48]	@ (8000700 <handle_special_char+0xb4>)
 80006ce:	f000 f91f 	bl	8000910 <process_command>
      cmd_index = 0;
 80006d2:	4b07      	ldr	r3, [pc, #28]	@ (80006f0 <handle_special_char+0xa4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	701a      	strb	r2, [r3, #0]
    }
    cdc_write_string_chunked("Ready> ");
 80006d8:	480a      	ldr	r0, [pc, #40]	@ (8000704 <handle_special_char+0xb8>)
 80006da:	f000 f8ad 	bl	8000838 <cdc_write_string_chunked>
    break;
 80006de:	e002      	b.n	80006e6 <handle_special_char+0x9a>
  default:
    break;
 80006e0:	bf00      	nop
 80006e2:	e000      	b.n	80006e6 <handle_special_char+0x9a>
    break;
 80006e4:	bf00      	nop
  }
}
 80006e6:	bf00      	nop
 80006e8:	3710      	adds	r7, #16
 80006ea:	46bd      	mov	sp, r7
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000f4 	.word	0x200000f4
 80006f4:	00082008 	.word	0x00082008
 80006f8:	0800c8cc 	.word	0x0800c8cc
 80006fc:	0800c8e8 	.word	0x0800c8e8
 8000700:	200000b4 	.word	0x200000b4
 8000704:	0800c8ec 	.word	0x0800c8ec

08000708 <cdc_task>:

  tud_cdc_write(msg, len);
  tud_cdc_write_flush(); // Make sure data is sent
}

void cdc_task(void) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b098      	sub	sp, #96	@ 0x60
 800070c:	af00      	add	r7, sp, #0
TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_ready(void) {
  return tud_cdc_n_ready(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_cdc_connected(void) {
  return tud_cdc_n_connected(0);
 800070e:	2000      	movs	r0, #0
 8000710:	f004 fe84 	bl	800541c <tud_cdc_n_connected>
 8000714:	4603      	mov	r3, r0
  if (tud_cdc_connected()) {
 8000716:	2b00      	cmp	r3, #0
 8000718:	d057      	beq.n	80007ca <cdc_task+0xc2>
TU_ATTR_ALWAYS_INLINE static inline void tud_cdc_set_wanted_char(char wanted) {
  tud_cdc_n_set_wanted_char(0, wanted);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_available(void) {
  return tud_cdc_n_available(0);
 800071a:	2000      	movs	r0, #0
 800071c:	f004 febc 	bl	8005498 <tud_cdc_n_available>
 8000720:	4603      	mov	r3, r0
    if (tud_cdc_available()) {
 8000722:	2b00      	cmp	r3, #0
 8000724:	d054      	beq.n	80007d0 <cdc_task+0xc8>
 8000726:	463b      	mov	r3, r7
 8000728:	653b      	str	r3, [r7, #80]	@ 0x50
 800072a:	2340      	movs	r3, #64	@ 0x40
 800072c:	64fb      	str	r3, [r7, #76]	@ 0x4c
TU_ATTR_ALWAYS_INLINE static inline int32_t tud_cdc_read_char(void) {
  return tud_cdc_n_read_char(0);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_read(void* buffer, uint32_t bufsize) {
  return tud_cdc_n_read(0, buffer, bufsize);
 800072e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000730:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8000732:	2000      	movs	r0, #0
 8000734:	f004 fec6 	bl	80054c4 <tud_cdc_n_read>
 8000738:	4603      	mov	r3, r0
      uint8_t buf[CFG_TUD_CDC_RX_BUFSIZE];
      uint32_t count = tud_cdc_read(buf, sizeof(buf));
 800073a:	65bb      	str	r3, [r7, #88]	@ 0x58
      for (uint32_t i = 0; i < count; i++) {
 800073c:	2300      	movs	r3, #0
 800073e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8000740:	e03e      	b.n	80007c0 <cdc_task+0xb8>
        char c = buf[i];
 8000742:	463a      	mov	r2, r7
 8000744:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8000746:	4413      	add	r3, r2
 8000748:	781b      	ldrb	r3, [r3, #0]
 800074a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
        special_char_t sc = get_special_char(c);
 800074e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff42 	bl	80005dc <get_special_char>
 8000758:	4603      	mov	r3, r0
 800075a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

        if (sc != SPECIAL_NONE) {
 800075e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000762:	2b00      	cmp	r3, #0
 8000764:	d005      	beq.n	8000772 <cdc_task+0x6a>
          handle_special_char(sc);
 8000766:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ff6e 	bl	800064c <handle_special_char>
 8000770:	e023      	b.n	80007ba <cdc_task+0xb2>
        } else if (c >= 32 && c <= 126 && cmd_index < sizeof(cmd_buffer) - 1) {
 8000772:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000776:	2b1f      	cmp	r3, #31
 8000778:	d91f      	bls.n	80007ba <cdc_task+0xb2>
 800077a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800077e:	2b7e      	cmp	r3, #126	@ 0x7e
 8000780:	d81b      	bhi.n	80007ba <cdc_task+0xb2>
 8000782:	4b15      	ldr	r3, [pc, #84]	@ (80007d8 <cdc_task+0xd0>)
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	2b3e      	cmp	r3, #62	@ 0x3e
 8000788:	d817      	bhi.n	80007ba <cdc_task+0xb2>
          cmd_buffer[cmd_index++] = c;
 800078a:	4b13      	ldr	r3, [pc, #76]	@ (80007d8 <cdc_task+0xd0>)
 800078c:	781b      	ldrb	r3, [r3, #0]
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	b2d1      	uxtb	r1, r2
 8000792:	4a11      	ldr	r2, [pc, #68]	@ (80007d8 <cdc_task+0xd0>)
 8000794:	7011      	strb	r1, [r2, #0]
 8000796:	461a      	mov	r2, r3
 8000798:	f897 1043 	ldrb.w	r1, [r7, #67]	@ 0x43
 800079c:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <cdc_task+0xd4>)
 800079e:	5499      	strb	r1, [r3, r2]
 80007a0:	f107 0343 	add.w	r3, r7, #67	@ 0x43
 80007a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80007a6:	2301      	movs	r3, #1
 80007a8:	647b      	str	r3, [r7, #68]	@ 0x44
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_char(char ch) {
  return tud_cdc_n_write_char(0, ch);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write(void const* buffer, uint32_t bufsize) {
  return tud_cdc_n_write(0, buffer, bufsize);
 80007aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80007ac:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 80007ae:	2000      	movs	r0, #0
 80007b0:	f004 feb4 	bl	800551c <tud_cdc_n_write>
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_str(char const* str) {
  return tud_cdc_n_write_str(0, str);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_flush(void) {
  return tud_cdc_n_write_flush(0);
 80007b4:	2000      	movs	r0, #0
 80007b6:	f004 fee5 	bl	8005584 <tud_cdc_n_write_flush>
      for (uint32_t i = 0; i < count; i++) {
 80007ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80007bc:	3301      	adds	r3, #1
 80007be:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80007c0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80007c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80007c4:	429a      	cmp	r2, r3
 80007c6:	d3bc      	bcc.n	8000742 <cdc_task+0x3a>
      }
    }
  } else {
    cmd_index = 0;
  }
}
 80007c8:	e002      	b.n	80007d0 <cdc_task+0xc8>
    cmd_index = 0;
 80007ca:	4b03      	ldr	r3, [pc, #12]	@ (80007d8 <cdc_task+0xd0>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	701a      	strb	r2, [r3, #0]
}
 80007d0:	bf00      	nop
 80007d2:	3760      	adds	r7, #96	@ 0x60
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	200000f4 	.word	0x200000f4
 80007dc:	200000b4 	.word	0x200000b4

080007e0 <tud_cdc_line_state_cb>:

void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts) {
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b084      	sub	sp, #16
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	71fb      	strb	r3, [r7, #7]
 80007ea:	460b      	mov	r3, r1
 80007ec:	71bb      	strb	r3, [r7, #6]
 80007ee:	4613      	mov	r3, r2
 80007f0:	717b      	strb	r3, [r7, #5]
  (void)itf;

  // Check if terminal is connecting (DTR asserted)
  if (dtr) {
 80007f2:	79bb      	ldrb	r3, [r7, #6]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d015      	beq.n	8000824 <tud_cdc_line_state_cb+0x44>
    // Give a small delay to ensure connection is stable
    for (volatile int i = 0; i < 10000; i++)
 80007f8:	2300      	movs	r3, #0
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	e002      	b.n	8000804 <tud_cdc_line_state_cb+0x24>
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	3301      	adds	r3, #1
 8000802:	60fb      	str	r3, [r7, #12]
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f242 720f 	movw	r2, #9999	@ 0x270f
 800080a:	4293      	cmp	r3, r2
 800080c:	ddf7      	ble.n	80007fe <tud_cdc_line_state_cb+0x1e>
      ;

    cdc_write_string_chunked("\r\n=== HE16 Configuration Interface ===\r\n");
 800080e:	4807      	ldr	r0, [pc, #28]	@ (800082c <tud_cdc_line_state_cb+0x4c>)
 8000810:	f000 f812 	bl	8000838 <cdc_write_string_chunked>
    cdc_write_string_chunked("Type 'help' for available commands\r\n");
 8000814:	4806      	ldr	r0, [pc, #24]	@ (8000830 <tud_cdc_line_state_cb+0x50>)
 8000816:	f000 f80f 	bl	8000838 <cdc_write_string_chunked>
    cdc_write_string_chunked("Ready> ");
 800081a:	4806      	ldr	r0, [pc, #24]	@ (8000834 <tud_cdc_line_state_cb+0x54>)
 800081c:	f000 f80c 	bl	8000838 <cdc_write_string_chunked>
    cdc_write_flush_wait();
 8000820:	f000 f855 	bl	80008ce <cdc_write_flush_wait>
  }
}
 8000824:	bf00      	nop
 8000826:	3710      	adds	r7, #16
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	0800c910 	.word	0x0800c910
 8000830:	0800c93c 	.word	0x0800c93c
 8000834:	0800c8ec 	.word	0x0800c8ec

08000838 <cdc_write_string_chunked>:

// Write string in chunks to avoid buffer overflow
static void cdc_write_string_chunked(const char *str) {
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  if (!str)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d03f      	beq.n	80008c6 <cdc_write_string_chunked+0x8e>
    return;

  size_t len = strlen(str);
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f7ff fcd4 	bl	80001f4 <strlen>
 800084c:	61b8      	str	r0, [r7, #24]
  size_t sent = 0;
 800084e:	2300      	movs	r3, #0
 8000850:	61fb      	str	r3, [r7, #28]
  const size_t chunk_size = CFG_TUD_CDC_EP_BUFSIZE - 8; // Leave some margin
 8000852:	2338      	movs	r3, #56	@ 0x38
 8000854:	617b      	str	r3, [r7, #20]

  while (sent < len) {
 8000856:	e031      	b.n	80008bc <cdc_write_string_chunked+0x84>
    size_t to_send = (len - sent > chunk_size) ? chunk_size : (len - sent);
 8000858:	69ba      	ldr	r2, [r7, #24]
 800085a:	69fb      	ldr	r3, [r7, #28]
 800085c:	1ad3      	subs	r3, r2, r3
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	4293      	cmp	r3, r2
 8000862:	bf28      	it	cs
 8000864:	4613      	movcs	r3, r2
 8000866:	613b      	str	r3, [r7, #16]

    // Wait for space in buffer
    while (tud_cdc_write_available() < to_send) {
 8000868:	e005      	b.n	8000876 <cdc_write_string_chunked+0x3e>
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 800086a:	2100      	movs	r1, #0
 800086c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000870:	f006 ff6e 	bl	8007750 <tud_task_ext>
}
 8000874:	bf00      	nop
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_available(void) {
  return tud_cdc_n_write_available(0);
 8000876:	2000      	movs	r0, #0
 8000878:	f004 ff06 	bl	8005688 <tud_cdc_n_write_available>
 800087c:	4602      	mov	r2, r0
 800087e:	693b      	ldr	r3, [r7, #16]
 8000880:	4293      	cmp	r3, r2
 8000882:	d8f2      	bhi.n	800086a <cdc_write_string_chunked+0x32>
      tud_task(); // Process USB tasks
    }

    tud_cdc_write(str + sent, to_send);
 8000884:	687a      	ldr	r2, [r7, #4]
 8000886:	69fb      	ldr	r3, [r7, #28]
 8000888:	4413      	add	r3, r2
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	693b      	ldr	r3, [r7, #16]
 800088e:	60bb      	str	r3, [r7, #8]
  return tud_cdc_n_write(0, buffer, bufsize);
 8000890:	68ba      	ldr	r2, [r7, #8]
 8000892:	68f9      	ldr	r1, [r7, #12]
 8000894:	2000      	movs	r0, #0
 8000896:	f004 fe41 	bl	800551c <tud_cdc_n_write>
    sent += to_send;
 800089a:	69fa      	ldr	r2, [r7, #28]
 800089c:	693b      	ldr	r3, [r7, #16]
 800089e:	4413      	add	r3, r2
 80008a0:	61fb      	str	r3, [r7, #28]
  return tud_cdc_n_write_available(0);
 80008a2:	2000      	movs	r0, #0
 80008a4:	f004 fef0 	bl	8005688 <tud_cdc_n_write_available>
 80008a8:	4602      	mov	r2, r0

    // Flush if buffer is getting full or we're done
    if (tud_cdc_write_available() < chunk_size || sent >= len) {
 80008aa:	697b      	ldr	r3, [r7, #20]
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d803      	bhi.n	80008b8 <cdc_write_string_chunked+0x80>
 80008b0:	69fa      	ldr	r2, [r7, #28]
 80008b2:	69bb      	ldr	r3, [r7, #24]
 80008b4:	429a      	cmp	r2, r3
 80008b6:	d301      	bcc.n	80008bc <cdc_write_string_chunked+0x84>
      cdc_write_flush_wait();
 80008b8:	f000 f809 	bl	80008ce <cdc_write_flush_wait>
  while (sent < len) {
 80008bc:	69fa      	ldr	r2, [r7, #28]
 80008be:	69bb      	ldr	r3, [r7, #24]
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d3c9      	bcc.n	8000858 <cdc_write_string_chunked+0x20>
 80008c4:	e000      	b.n	80008c8 <cdc_write_string_chunked+0x90>
    return;
 80008c6:	bf00      	nop
    }
  }
}
 80008c8:	3720      	adds	r7, #32
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <cdc_write_flush_wait>:

// Wait for flush to complete
static void cdc_write_flush_wait(void) {
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b082      	sub	sp, #8
 80008d2:	af00      	add	r7, sp, #0
  return tud_cdc_n_write_flush(0);
 80008d4:	2000      	movs	r0, #0
 80008d6:	f004 fe55 	bl	8005584 <tud_cdc_n_write_flush>
  tud_cdc_write_flush();

  // Wait for data to be sent
  uint32_t timeout = 0;
 80008da:	2300      	movs	r3, #0
 80008dc:	607b      	str	r3, [r7, #4]
  while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 80008de:	e008      	b.n	80008f2 <cdc_write_flush_wait+0x24>
  tud_task_ext(UINT32_MAX, false);
 80008e0:	2100      	movs	r1, #0
 80008e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008e6:	f006 ff33 	bl	8007750 <tud_task_ext>
}
 80008ea:	bf00      	nop
    tud_task();
    timeout++;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	3301      	adds	r3, #1
 80008f0:	607b      	str	r3, [r7, #4]
  return tud_cdc_n_write_available(0);
 80008f2:	2000      	movs	r0, #0
 80008f4:	f004 fec8 	bl	8005688 <tud_cdc_n_write_available>
 80008f8:	4603      	mov	r3, r0
  while (tud_cdc_write_available() < CFG_TUD_CDC_TX_BUFSIZE && timeout < 10000) {
 80008fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80008fc:	d804      	bhi.n	8000908 <cdc_write_flush_wait+0x3a>
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	f242 720f 	movw	r2, #9999	@ 0x270f
 8000904:	4293      	cmp	r3, r2
 8000906:	d9eb      	bls.n	80008e0 <cdc_write_flush_wait+0x12>
  }
}
 8000908:	bf00      	nop
 800090a:	3708      	adds	r7, #8
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <process_command>:

static void process_command(char *cmd) {
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  // Convert to lowercase for case-insensitive commands
  for (int i = 0; cmd[i]; i++) {
 8000918:	2300      	movs	r3, #0
 800091a:	617b      	str	r3, [r7, #20]
 800091c:	e018      	b.n	8000950 <process_command+0x40>
    if (cmd[i] >= 'A' && cmd[i] <= 'Z') {
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	687a      	ldr	r2, [r7, #4]
 8000922:	4413      	add	r3, r2
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	2b40      	cmp	r3, #64	@ 0x40
 8000928:	d90f      	bls.n	800094a <process_command+0x3a>
 800092a:	697b      	ldr	r3, [r7, #20]
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	4413      	add	r3, r2
 8000930:	781b      	ldrb	r3, [r3, #0]
 8000932:	2b5a      	cmp	r3, #90	@ 0x5a
 8000934:	d809      	bhi.n	800094a <process_command+0x3a>
      cmd[i] += 32;
 8000936:	697b      	ldr	r3, [r7, #20]
 8000938:	687a      	ldr	r2, [r7, #4]
 800093a:	4413      	add	r3, r2
 800093c:	781a      	ldrb	r2, [r3, #0]
 800093e:	697b      	ldr	r3, [r7, #20]
 8000940:	6879      	ldr	r1, [r7, #4]
 8000942:	440b      	add	r3, r1
 8000944:	3220      	adds	r2, #32
 8000946:	b2d2      	uxtb	r2, r2
 8000948:	701a      	strb	r2, [r3, #0]
  for (int i = 0; cmd[i]; i++) {
 800094a:	697b      	ldr	r3, [r7, #20]
 800094c:	3301      	adds	r3, #1
 800094e:	617b      	str	r3, [r7, #20]
 8000950:	697b      	ldr	r3, [r7, #20]
 8000952:	687a      	ldr	r2, [r7, #4]
 8000954:	4413      	add	r3, r2
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b00      	cmp	r3, #0
 800095a:	d1e0      	bne.n	800091e <process_command+0xe>
    }
  }

  // Get command name
  char *token = strtok(cmd, " ");
 800095c:	491c      	ldr	r1, [pc, #112]	@ (80009d0 <process_command+0xc0>)
 800095e:	6878      	ldr	r0, [r7, #4]
 8000960:	f00a fe74 	bl	800b64c <strtok>
 8000964:	60f8      	str	r0, [r7, #12]
  if (!token)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	2b00      	cmp	r3, #0
 800096a:	d02c      	beq.n	80009c6 <process_command+0xb6>
    return;

  char *args = strtok(NULL, ""); // Get rest of the string as arguments
 800096c:	4919      	ldr	r1, [pc, #100]	@ (80009d4 <process_command+0xc4>)
 800096e:	2000      	movs	r0, #0
 8000970:	f00a fe6c 	bl	800b64c <strtok>
 8000974:	60b8      	str	r0, [r7, #8]

  // Iterate over command table
  for (size_t i = 0; i < sizeof(command_table) / sizeof(command_table[0]); i++) {
 8000976:	2300      	movs	r3, #0
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	e01d      	b.n	80009b8 <process_command+0xa8>
    if (strcmp(token, command_table[i].name) == 0) {
 800097c:	4916      	ldr	r1, [pc, #88]	@ (80009d8 <process_command+0xc8>)
 800097e:	693a      	ldr	r2, [r7, #16]
 8000980:	4613      	mov	r3, r2
 8000982:	005b      	lsls	r3, r3, #1
 8000984:	4413      	add	r3, r2
 8000986:	009b      	lsls	r3, r3, #2
 8000988:	440b      	add	r3, r1
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	4619      	mov	r1, r3
 800098e:	68f8      	ldr	r0, [r7, #12]
 8000990:	f7ff fc26 	bl	80001e0 <strcmp>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d10b      	bne.n	80009b2 <process_command+0xa2>
      command_table[i].handler(args);
 800099a:	490f      	ldr	r1, [pc, #60]	@ (80009d8 <process_command+0xc8>)
 800099c:	693a      	ldr	r2, [r7, #16]
 800099e:	4613      	mov	r3, r2
 80009a0:	005b      	lsls	r3, r3, #1
 80009a2:	4413      	add	r3, r2
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	440b      	add	r3, r1
 80009a8:	3304      	adds	r3, #4
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	68b8      	ldr	r0, [r7, #8]
 80009ae:	4798      	blx	r3
      return;
 80009b0:	e00a      	b.n	80009c8 <process_command+0xb8>
  for (size_t i = 0; i < sizeof(command_table) / sizeof(command_table[0]); i++) {
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	3301      	adds	r3, #1
 80009b6:	613b      	str	r3, [r7, #16]
 80009b8:	693b      	ldr	r3, [r7, #16]
 80009ba:	2b07      	cmp	r3, #7
 80009bc:	d9de      	bls.n	800097c <process_command+0x6c>
    }
  }

  cdc_write_string_chunked("Unknown command. Type 'help' for available commands\r\n");
 80009be:	4807      	ldr	r0, [pc, #28]	@ (80009dc <process_command+0xcc>)
 80009c0:	f7ff ff3a 	bl	8000838 <cdc_write_string_chunked>
 80009c4:	e000      	b.n	80009c8 <process_command+0xb8>
    return;
 80009c6:	bf00      	nop
}
 80009c8:	3718      	adds	r7, #24
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	0800c964 	.word	0x0800c964
 80009d4:	0800c83c 	.word	0x0800c83c
 80009d8:	0800cf28 	.word	0x0800cf28
 80009dc:	0800c968 	.word	0x0800c968

080009e0 <cmd_help>:

static void cmd_help(char *args) {
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b084      	sub	sp, #16
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  (void)args;
  cdc_write_string_chunked("Available commands:\r\n");
 80009e8:	4816      	ldr	r0, [pc, #88]	@ (8000a44 <cmd_help+0x64>)
 80009ea:	f7ff ff25 	bl	8000838 <cdc_write_string_chunked>
  for (size_t i = 0; i < sizeof(command_table) / sizeof(command_table[0]); i++) {
 80009ee:	2300      	movs	r3, #0
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e01f      	b.n	8000a34 <cmd_help+0x54>
    cdc_write_string_chunked(command_table[i].name);
 80009f4:	4914      	ldr	r1, [pc, #80]	@ (8000a48 <cmd_help+0x68>)
 80009f6:	68fa      	ldr	r2, [r7, #12]
 80009f8:	4613      	mov	r3, r2
 80009fa:	005b      	lsls	r3, r3, #1
 80009fc:	4413      	add	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	440b      	add	r3, r1
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	4618      	mov	r0, r3
 8000a06:	f7ff ff17 	bl	8000838 <cdc_write_string_chunked>
    cdc_write_string_chunked(" ");
 8000a0a:	4810      	ldr	r0, [pc, #64]	@ (8000a4c <cmd_help+0x6c>)
 8000a0c:	f7ff ff14 	bl	8000838 <cdc_write_string_chunked>
    cdc_write_string_chunked(command_table[i].usage);
 8000a10:	490d      	ldr	r1, [pc, #52]	@ (8000a48 <cmd_help+0x68>)
 8000a12:	68fa      	ldr	r2, [r7, #12]
 8000a14:	4613      	mov	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4413      	add	r3, r2
 8000a1a:	009b      	lsls	r3, r3, #2
 8000a1c:	440b      	add	r3, r1
 8000a1e:	3308      	adds	r3, #8
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4618      	mov	r0, r3
 8000a24:	f7ff ff08 	bl	8000838 <cdc_write_string_chunked>
    cdc_write_string_chunked("\r\n");
 8000a28:	4809      	ldr	r0, [pc, #36]	@ (8000a50 <cmd_help+0x70>)
 8000a2a:	f7ff ff05 	bl	8000838 <cdc_write_string_chunked>
  for (size_t i = 0; i < sizeof(command_table) / sizeof(command_table[0]); i++) {
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	3301      	adds	r3, #1
 8000a32:	60fb      	str	r3, [r7, #12]
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	2b07      	cmp	r3, #7
 8000a38:	d9dc      	bls.n	80009f4 <cmd_help+0x14>
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	bf00      	nop
 8000a3e:	3710      	adds	r7, #16
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	0800c9a0 	.word	0x0800c9a0
 8000a48:	0800cf28 	.word	0x0800cf28
 8000a4c:	0800c964 	.word	0x0800c964
 8000a50:	0800c8e8 	.word	0x0800c8e8

08000a54 <cmd_show>:

static void cmd_show(char *args) {
 8000a54:	b590      	push	{r4, r7, lr}
 8000a56:	b0ad      	sub	sp, #180	@ 0xb4
 8000a58:	af04      	add	r7, sp, #16
 8000a5a:	6078      	str	r0, [r7, #4]
  (void)args;
  cdc_write_string_chunked("Current configuration:\r\n");
 8000a5c:	4863      	ldr	r0, [pc, #396]	@ (8000bec <cmd_show+0x198>)
 8000a5e:	f7ff feeb 	bl	8000838 <cdc_write_string_chunked>
  char buf[64]; // Buffer for formatted strings
  snprintf(buf, sizeof(buf), "Reverse Magnet Pole: %d\r\n", keyboard_user_config.reverse_magnet_pole);
 8000a62:	4b63      	ldr	r3, [pc, #396]	@ (8000bf0 <cmd_show+0x19c>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8000a6a:	4a62      	ldr	r2, [pc, #392]	@ (8000bf4 <cmd_show+0x1a0>)
 8000a6c:	2140      	movs	r1, #64	@ 0x40
 8000a6e:	f00a fc69 	bl	800b344 <sniprintf>
  cdc_write_string_chunked(buf);
 8000a72:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a76:	4618      	mov	r0, r3
 8000a78:	f7ff fede 	bl	8000838 <cdc_write_string_chunked>
  snprintf(buf, sizeof(buf), "Trigger Offset: %d\r\n", keyboard_user_config.trigger_offset);
 8000a7c:	4b5c      	ldr	r3, [pc, #368]	@ (8000bf0 <cmd_show+0x19c>)
 8000a7e:	785b      	ldrb	r3, [r3, #1]
 8000a80:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8000a84:	4a5c      	ldr	r2, [pc, #368]	@ (8000bf8 <cmd_show+0x1a4>)
 8000a86:	2140      	movs	r1, #64	@ 0x40
 8000a88:	f00a fc5c 	bl	800b344 <sniprintf>
  cdc_write_string_chunked(buf);
 8000a8c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fed1 	bl	8000838 <cdc_write_string_chunked>
  snprintf(buf, sizeof(buf), "Reset Threshold: %d\r\n", keyboard_user_config.reset_threshold);
 8000a96:	4b56      	ldr	r3, [pc, #344]	@ (8000bf0 <cmd_show+0x19c>)
 8000a98:	789b      	ldrb	r3, [r3, #2]
 8000a9a:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8000a9e:	4a57      	ldr	r2, [pc, #348]	@ (8000bfc <cmd_show+0x1a8>)
 8000aa0:	2140      	movs	r1, #64	@ 0x40
 8000aa2:	f00a fc4f 	bl	800b344 <sniprintf>
  cdc_write_string_chunked(buf);
 8000aa6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f7ff fec4 	bl	8000838 <cdc_write_string_chunked>
  snprintf(buf, sizeof(buf), "Rapid Trigger Offset: %d\r\n", keyboard_user_config.rapid_trigger_offset);
 8000ab0:	4b4f      	ldr	r3, [pc, #316]	@ (8000bf0 <cmd_show+0x19c>)
 8000ab2:	78db      	ldrb	r3, [r3, #3]
 8000ab4:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8000ab8:	4a51      	ldr	r2, [pc, #324]	@ (8000c00 <cmd_show+0x1ac>)
 8000aba:	2140      	movs	r1, #64	@ 0x40
 8000abc:	f00a fc42 	bl	800b344 <sniprintf>
  cdc_write_string_chunked(buf);
 8000ac0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff feb7 	bl	8000838 <cdc_write_string_chunked>
  snprintf(buf, sizeof(buf), "Tap Timeout: %d ms\r\n", keyboard_user_config.tap_timeout);
 8000aca:	4b49      	ldr	r3, [pc, #292]	@ (8000bf0 <cmd_show+0x19c>)
 8000acc:	889b      	ldrh	r3, [r3, #4]
 8000ace:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 8000ad2:	4a4c      	ldr	r2, [pc, #304]	@ (8000c04 <cmd_show+0x1b0>)
 8000ad4:	2140      	movs	r1, #64	@ 0x40
 8000ad6:	f00a fc35 	bl	800b344 <sniprintf>
  cdc_write_string_chunked(buf);
 8000ada:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000ade:	4618      	mov	r0, r3
 8000ae0:	f7ff feaa 	bl	8000838 <cdc_write_string_chunked>

  cdc_write_flush_wait();
 8000ae4:	f7ff fef3 	bl	80008ce <cdc_write_flush_wait>
  cdc_write_string_chunked("Keymaps:\r\n");
 8000ae8:	4847      	ldr	r0, [pc, #284]	@ (8000c08 <cmd_show+0x1b4>)
 8000aea:	f7ff fea5 	bl	8000838 <cdc_write_string_chunked>
  for (uint8_t layer = 0; layer < LAYERS_COUNT; layer++) {
 8000aee:	2300      	movs	r3, #0
 8000af0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8000af4:	e070      	b.n	8000bd8 <cmd_show+0x184>
    char layer_buf[16];
    snprintf(layer_buf, sizeof(layer_buf), "Layer %d:\r\n", layer);
 8000af6:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8000afa:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8000afe:	4a43      	ldr	r2, [pc, #268]	@ (8000c0c <cmd_show+0x1b8>)
 8000b00:	2110      	movs	r1, #16
 8000b02:	f00a fc1f 	bl	800b344 <sniprintf>
    cdc_write_string_chunked(layer_buf);
 8000b06:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	f7ff fe94 	bl	8000838 <cdc_write_string_chunked>
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8000b10:	2300      	movs	r3, #0
 8000b12:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 8000b16:	e056      	b.n	8000bc6 <cmd_show+0x172>
      for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
 8000b1e:	e049      	b.n	8000bb4 <cmd_show+0x160>
        uint16_t value = keyboard_user_config.keymaps[layer][row][col][0];
 8000b20:	f897 109f 	ldrb.w	r1, [r7, #159]	@ 0x9f
 8000b24:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8000b28:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8000b2c:	4830      	ldr	r0, [pc, #192]	@ (8000bf0 <cmd_show+0x19c>)
 8000b2e:	0089      	lsls	r1, r1, #2
 8000b30:	440a      	add	r2, r1
 8000b32:	0092      	lsls	r2, r2, #2
 8000b34:	4413      	add	r3, r2
 8000b36:	00db      	lsls	r3, r3, #3
 8000b38:	4403      	add	r3, r0
 8000b3a:	88db      	ldrh	r3, [r3, #6]
 8000b3c:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a
        char key_info[64];
        if (value >= 0x04 && value <= 0x1D) { // HID keycodes for 'a'-'z'
 8000b40:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8000b44:	2b03      	cmp	r3, #3
 8000b46:	d91c      	bls.n	8000b82 <cmd_show+0x12e>
 8000b48:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8000b4c:	2b1d      	cmp	r3, #29
 8000b4e:	d818      	bhi.n	8000b82 <cmd_show+0x12e>
          char ascii = 'a' + (value - 0x04);
 8000b50:	f8b7 309a 	ldrh.w	r3, [r7, #154]	@ 0x9a
 8000b54:	b2db      	uxtb	r3, r3
 8000b56:	335d      	adds	r3, #93	@ 0x5d
 8000b58:	f887 3099 	strb.w	r3, [r7, #153]	@ 0x99
          snprintf(key_info, sizeof(key_info), "Row %d, Col %d: 0x%02X ('%c')\r\n", row, col, value, ascii);
 8000b5c:	f897 409e 	ldrb.w	r4, [r7, #158]	@ 0x9e
 8000b60:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8000b64:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 8000b68:	f897 1099 	ldrb.w	r1, [r7, #153]	@ 0x99
 8000b6c:	f107 0008 	add.w	r0, r7, #8
 8000b70:	9102      	str	r1, [sp, #8]
 8000b72:	9201      	str	r2, [sp, #4]
 8000b74:	9300      	str	r3, [sp, #0]
 8000b76:	4623      	mov	r3, r4
 8000b78:	4a25      	ldr	r2, [pc, #148]	@ (8000c10 <cmd_show+0x1bc>)
 8000b7a:	2140      	movs	r1, #64	@ 0x40
 8000b7c:	f00a fbe2 	bl	800b344 <sniprintf>
        if (value >= 0x04 && value <= 0x1D) { // HID keycodes for 'a'-'z'
 8000b80:	e00e      	b.n	8000ba0 <cmd_show+0x14c>
        } else {
          snprintf(key_info, sizeof(key_info), "Row %d, Col %d: 0x%02X\r\n", row, col, value);
 8000b82:	f897 109e 	ldrb.w	r1, [r7, #158]	@ 0x9e
 8000b86:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8000b8a:	f8b7 209a 	ldrh.w	r2, [r7, #154]	@ 0x9a
 8000b8e:	f107 0008 	add.w	r0, r7, #8
 8000b92:	9201      	str	r2, [sp, #4]
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	460b      	mov	r3, r1
 8000b98:	4a1e      	ldr	r2, [pc, #120]	@ (8000c14 <cmd_show+0x1c0>)
 8000b9a:	2140      	movs	r1, #64	@ 0x40
 8000b9c:	f00a fbd2 	bl	800b344 <sniprintf>
        }
        cdc_write_string_chunked(key_info);
 8000ba0:	f107 0308 	add.w	r3, r7, #8
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f7ff fe47 	bl	8000838 <cdc_write_string_chunked>
      for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8000baa:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8000bae:	3301      	adds	r3, #1
 8000bb0:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
 8000bb4:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8000bb8:	2b03      	cmp	r3, #3
 8000bba:	d9b1      	bls.n	8000b20 <cmd_show+0xcc>
    for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8000bbc:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 8000bc6:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8000bca:	2b03      	cmp	r3, #3
 8000bcc:	d9a4      	bls.n	8000b18 <cmd_show+0xc4>
  for (uint8_t layer = 0; layer < LAYERS_COUNT; layer++) {
 8000bce:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 8000bd8:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8000bdc:	2b01      	cmp	r3, #1
 8000bde:	d98a      	bls.n	8000af6 <cmd_show+0xa2>
      }
    }
  }
}
 8000be0:	bf00      	nop
 8000be2:	bf00      	nop
 8000be4:	37a4      	adds	r7, #164	@ 0xa4
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd90      	pop	{r4, r7, pc}
 8000bea:	bf00      	nop
 8000bec:	0800c9b8 	.word	0x0800c9b8
 8000bf0:	20000420 	.word	0x20000420
 8000bf4:	0800c9d4 	.word	0x0800c9d4
 8000bf8:	0800c9f0 	.word	0x0800c9f0
 8000bfc:	0800ca08 	.word	0x0800ca08
 8000c00:	0800ca20 	.word	0x0800ca20
 8000c04:	0800ca3c 	.word	0x0800ca3c
 8000c08:	0800ca54 	.word	0x0800ca54
 8000c0c:	0800ca60 	.word	0x0800ca60
 8000c10:	0800ca6c 	.word	0x0800ca6c
 8000c14:	0800ca8c 	.word	0x0800ca8c

08000c18 <cmd_set>:

static void cmd_set(char *args) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  if (!args) {
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d103      	bne.n	8000c2e <cmd_set+0x16>
    cdc_write_string_chunked("Usage: set <parameter> <value>\r\n");
 8000c26:	484b      	ldr	r0, [pc, #300]	@ (8000d54 <cmd_set+0x13c>)
 8000c28:	f7ff fe06 	bl	8000838 <cdc_write_string_chunked>
    return;
 8000c2c:	e08e      	b.n	8000d4c <cmd_set+0x134>
  }
  char *param = strtok(args, " ");
 8000c2e:	494a      	ldr	r1, [pc, #296]	@ (8000d58 <cmd_set+0x140>)
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f00a fd0b 	bl	800b64c <strtok>
 8000c36:	60f8      	str	r0, [r7, #12]
  char *value = strtok(NULL, " ");
 8000c38:	4947      	ldr	r1, [pc, #284]	@ (8000d58 <cmd_set+0x140>)
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f00a fd06 	bl	800b64c <strtok>
 8000c40:	60b8      	str	r0, [r7, #8]
  if (param && value) {
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d07e      	beq.n	8000d46 <cmd_set+0x12e>
 8000c48:	68bb      	ldr	r3, [r7, #8]
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d07b      	beq.n	8000d46 <cmd_set+0x12e>
    if (strcmp(param, "reverse_magnet_pole") == 0) {
 8000c4e:	4943      	ldr	r1, [pc, #268]	@ (8000d5c <cmd_set+0x144>)
 8000c50:	68f8      	ldr	r0, [r7, #12]
 8000c52:	f7ff fac5 	bl	80001e0 <strcmp>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d10d      	bne.n	8000c78 <cmd_set+0x60>
      keyboard_user_config.reverse_magnet_pole = atoi(value);
 8000c5c:	68b8      	ldr	r0, [r7, #8]
 8000c5e:	f00a fb6c 	bl	800b33a <atoi>
 8000c62:	4603      	mov	r3, r0
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	4b3e      	ldr	r3, [pc, #248]	@ (8000d60 <cmd_set+0x148>)
 8000c68:	701a      	strb	r2, [r3, #0]
      cdc_write_string_chunked("Reverse Magnet Pole set to ");
 8000c6a:	483e      	ldr	r0, [pc, #248]	@ (8000d64 <cmd_set+0x14c>)
 8000c6c:	f7ff fde4 	bl	8000838 <cdc_write_string_chunked>
      cdc_write_string_chunked(value);
 8000c70:	68b8      	ldr	r0, [r7, #8]
 8000c72:	f7ff fde1 	bl	8000838 <cdc_write_string_chunked>
 8000c76:	e062      	b.n	8000d3e <cmd_set+0x126>
    } else if (strcmp(param, "trigger_offset") == 0) {
 8000c78:	493b      	ldr	r1, [pc, #236]	@ (8000d68 <cmd_set+0x150>)
 8000c7a:	68f8      	ldr	r0, [r7, #12]
 8000c7c:	f7ff fab0 	bl	80001e0 <strcmp>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d110      	bne.n	8000ca8 <cmd_set+0x90>
      keyboard_user_config.trigger_offset = atoi(value);
 8000c86:	68b8      	ldr	r0, [r7, #8]
 8000c88:	f00a fb57 	bl	800b33a <atoi>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	b2da      	uxtb	r2, r3
 8000c90:	4b33      	ldr	r3, [pc, #204]	@ (8000d60 <cmd_set+0x148>)
 8000c92:	705a      	strb	r2, [r3, #1]
      cdc_write_string_chunked("Trigger Offset set to ");
 8000c94:	4835      	ldr	r0, [pc, #212]	@ (8000d6c <cmd_set+0x154>)
 8000c96:	f7ff fdcf 	bl	8000838 <cdc_write_string_chunked>
      cdc_write_string_chunked(value);
 8000c9a:	68b8      	ldr	r0, [r7, #8]
 8000c9c:	f7ff fdcc 	bl	8000838 <cdc_write_string_chunked>
      cdc_write_string_chunked("\r\n");
 8000ca0:	4833      	ldr	r0, [pc, #204]	@ (8000d70 <cmd_set+0x158>)
 8000ca2:	f7ff fdc9 	bl	8000838 <cdc_write_string_chunked>
 8000ca6:	e04a      	b.n	8000d3e <cmd_set+0x126>
    } else if (strcmp(param, "reset_threshold") == 0) {
 8000ca8:	4932      	ldr	r1, [pc, #200]	@ (8000d74 <cmd_set+0x15c>)
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f7ff fa98 	bl	80001e0 <strcmp>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d110      	bne.n	8000cd8 <cmd_set+0xc0>
      keyboard_user_config.reset_threshold = atoi(value);
 8000cb6:	68b8      	ldr	r0, [r7, #8]
 8000cb8:	f00a fb3f 	bl	800b33a <atoi>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	4b27      	ldr	r3, [pc, #156]	@ (8000d60 <cmd_set+0x148>)
 8000cc2:	709a      	strb	r2, [r3, #2]
      cdc_write_string_chunked("Reset Threshold set to ");
 8000cc4:	482c      	ldr	r0, [pc, #176]	@ (8000d78 <cmd_set+0x160>)
 8000cc6:	f7ff fdb7 	bl	8000838 <cdc_write_string_chunked>
      cdc_write_string_chunked(value);
 8000cca:	68b8      	ldr	r0, [r7, #8]
 8000ccc:	f7ff fdb4 	bl	8000838 <cdc_write_string_chunked>
      cdc_write_string_chunked("\r\n");
 8000cd0:	4827      	ldr	r0, [pc, #156]	@ (8000d70 <cmd_set+0x158>)
 8000cd2:	f7ff fdb1 	bl	8000838 <cdc_write_string_chunked>
 8000cd6:	e032      	b.n	8000d3e <cmd_set+0x126>
    } else if (strcmp(param, "rapid_trigger_offset") == 0) {
 8000cd8:	4928      	ldr	r1, [pc, #160]	@ (8000d7c <cmd_set+0x164>)
 8000cda:	68f8      	ldr	r0, [r7, #12]
 8000cdc:	f7ff fa80 	bl	80001e0 <strcmp>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d110      	bne.n	8000d08 <cmd_set+0xf0>
      keyboard_user_config.rapid_trigger_offset = atoi(value);
 8000ce6:	68b8      	ldr	r0, [r7, #8]
 8000ce8:	f00a fb27 	bl	800b33a <atoi>
 8000cec:	4603      	mov	r3, r0
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	4b1b      	ldr	r3, [pc, #108]	@ (8000d60 <cmd_set+0x148>)
 8000cf2:	70da      	strb	r2, [r3, #3]
      cdc_write_string_chunked("Rapid Trigger Offset set to ");
 8000cf4:	4822      	ldr	r0, [pc, #136]	@ (8000d80 <cmd_set+0x168>)
 8000cf6:	f7ff fd9f 	bl	8000838 <cdc_write_string_chunked>
      cdc_write_string_chunked(value);
 8000cfa:	68b8      	ldr	r0, [r7, #8]
 8000cfc:	f7ff fd9c 	bl	8000838 <cdc_write_string_chunked>
      cdc_write_string_chunked("\r\n");
 8000d00:	481b      	ldr	r0, [pc, #108]	@ (8000d70 <cmd_set+0x158>)
 8000d02:	f7ff fd99 	bl	8000838 <cdc_write_string_chunked>
 8000d06:	e01a      	b.n	8000d3e <cmd_set+0x126>
    } else if (strcmp(param, "tap_timeout") == 0) {
 8000d08:	491e      	ldr	r1, [pc, #120]	@ (8000d84 <cmd_set+0x16c>)
 8000d0a:	68f8      	ldr	r0, [r7, #12]
 8000d0c:	f7ff fa68 	bl	80001e0 <strcmp>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d110      	bne.n	8000d38 <cmd_set+0x120>
      keyboard_user_config.tap_timeout = atoi(value);
 8000d16:	68b8      	ldr	r0, [r7, #8]
 8000d18:	f00a fb0f 	bl	800b33a <atoi>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	b29a      	uxth	r2, r3
 8000d20:	4b0f      	ldr	r3, [pc, #60]	@ (8000d60 <cmd_set+0x148>)
 8000d22:	809a      	strh	r2, [r3, #4]
      cdc_write_string_chunked("Tap Timeout set to ");
 8000d24:	4818      	ldr	r0, [pc, #96]	@ (8000d88 <cmd_set+0x170>)
 8000d26:	f7ff fd87 	bl	8000838 <cdc_write_string_chunked>
      cdc_write_string_chunked(value);
 8000d2a:	68b8      	ldr	r0, [r7, #8]
 8000d2c:	f7ff fd84 	bl	8000838 <cdc_write_string_chunked>
      cdc_write_string_chunked("\r\n");
 8000d30:	480f      	ldr	r0, [pc, #60]	@ (8000d70 <cmd_set+0x158>)
 8000d32:	f7ff fd81 	bl	8000838 <cdc_write_string_chunked>
 8000d36:	e002      	b.n	8000d3e <cmd_set+0x126>
    } else {
      cdc_write_string_chunked("Unknown parameter\r\n");
 8000d38:	4814      	ldr	r0, [pc, #80]	@ (8000d8c <cmd_set+0x174>)
 8000d3a:	f7ff fd7d 	bl	8000838 <cdc_write_string_chunked>
    }
    cmd_save(NULL); // Save changes to config
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f000 f826 	bl	8000d90 <cmd_save>
 8000d44:	e002      	b.n	8000d4c <cmd_set+0x134>

  } else {
    cdc_write_string_chunked("Usage: set <parameter> <value>\r\n");
 8000d46:	4803      	ldr	r0, [pc, #12]	@ (8000d54 <cmd_set+0x13c>)
 8000d48:	f7ff fd76 	bl	8000838 <cdc_write_string_chunked>
  }
}
 8000d4c:	3710      	adds	r7, #16
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	0800caa8 	.word	0x0800caa8
 8000d58:	0800c964 	.word	0x0800c964
 8000d5c:	0800cacc 	.word	0x0800cacc
 8000d60:	20000420 	.word	0x20000420
 8000d64:	0800cae0 	.word	0x0800cae0
 8000d68:	0800cafc 	.word	0x0800cafc
 8000d6c:	0800cb0c 	.word	0x0800cb0c
 8000d70:	0800c8e8 	.word	0x0800c8e8
 8000d74:	0800cb24 	.word	0x0800cb24
 8000d78:	0800cb34 	.word	0x0800cb34
 8000d7c:	0800cb4c 	.word	0x0800cb4c
 8000d80:	0800cb64 	.word	0x0800cb64
 8000d84:	0800cb84 	.word	0x0800cb84
 8000d88:	0800cb90 	.word	0x0800cb90
 8000d8c:	0800cba4 	.word	0x0800cba4

08000d90 <cmd_save>:

static void cmd_save(char *args) {
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  (void)args;

  keyboard_write_config(&keyboard_user_config, 0, sizeof keyboard_user_config);
 8000d98:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4806      	ldr	r0, [pc, #24]	@ (8000db8 <cmd_save+0x28>)
 8000da0:	f001 fc82 	bl	80026a8 <keyboard_write_config>
  keyboard_init_keys();
 8000da4:	f001 f9c6 	bl	8002134 <keyboard_init_keys>
  cdc_write_string_chunked("Configuration saved to flash\r\n");
 8000da8:	4804      	ldr	r0, [pc, #16]	@ (8000dbc <cmd_save+0x2c>)
 8000daa:	f7ff fd45 	bl	8000838 <cdc_write_string_chunked>
}
 8000dae:	bf00      	nop
 8000db0:	3708      	adds	r7, #8
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	20000420 	.word	0x20000420
 8000dbc:	0800cbb8 	.word	0x0800cbb8

08000dc0 <cmd_load>:

static void cmd_load(char *args) {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  (void)args;
  keyboard_init_keys();
 8000dc8:	f001 f9b4 	bl	8002134 <keyboard_init_keys>
  cdc_write_string_chunked("Configuration loaded from flash\r\n");
 8000dcc:	4803      	ldr	r0, [pc, #12]	@ (8000ddc <cmd_load+0x1c>)
 8000dce:	f7ff fd33 	bl	8000838 <cdc_write_string_chunked>
}
 8000dd2:	bf00      	nop
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	0800cbd8 	.word	0x0800cbd8

08000de0 <cmd_reset>:

static void cmd_reset(char *args) {
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b082      	sub	sp, #8
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  (void)args;
  // Reset to default values
  keyboard_write_config(&keyboard_default_user_config, 0, sizeof keyboard_default_user_config);
 8000de8:	f44f 7283 	mov.w	r2, #262	@ 0x106
 8000dec:	2100      	movs	r1, #0
 8000dee:	4806      	ldr	r0, [pc, #24]	@ (8000e08 <cmd_reset+0x28>)
 8000df0:	f001 fc5a 	bl	80026a8 <keyboard_write_config>
  keyboard_init_keys();
 8000df4:	f001 f99e 	bl	8002134 <keyboard_init_keys>
  cdc_write_string_chunked("Configuration reset to defaults\r\n");
 8000df8:	4804      	ldr	r0, [pc, #16]	@ (8000e0c <cmd_reset+0x2c>)
 8000dfa:	f7ff fd1d 	bl	8000838 <cdc_write_string_chunked>
}
 8000dfe:	bf00      	nop
 8000e00:	3708      	adds	r7, #8
 8000e02:	46bd      	mov	sp, r7
 8000e04:	bd80      	pop	{r7, pc}
 8000e06:	bf00      	nop
 8000e08:	0800cf88 	.word	0x0800cf88
 8000e0c:	0800cbfc 	.word	0x0800cbfc

08000e10 <cmd_setkey>:
static void cmd_setkey(char *args) {
 8000e10:	b590      	push	{r4, r7, lr}
 8000e12:	b08b      	sub	sp, #44	@ 0x2c
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if (!args) {
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d103      	bne.n	8000e26 <cmd_setkey+0x16>
    cdc_write_string_chunked("Usage: setkey <layer> <row> <col> <parameter> <value>\r\n");
 8000e1e:	4879      	ldr	r0, [pc, #484]	@ (8001004 <cmd_setkey+0x1f4>)
 8000e20:	f7ff fd0a 	bl	8000838 <cdc_write_string_chunked>
    return;
 8000e24:	e0ea      	b.n	8000ffc <cmd_setkey+0x1ec>
  }
  char *layer_str = strtok(args, " ");
 8000e26:	4978      	ldr	r1, [pc, #480]	@ (8001008 <cmd_setkey+0x1f8>)
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f00a fc0f 	bl	800b64c <strtok>
 8000e2e:	6278      	str	r0, [r7, #36]	@ 0x24
  char *adc_str = strtok(NULL, " ");
 8000e30:	4975      	ldr	r1, [pc, #468]	@ (8001008 <cmd_setkey+0x1f8>)
 8000e32:	2000      	movs	r0, #0
 8000e34:	f00a fc0a 	bl	800b64c <strtok>
 8000e38:	6238      	str	r0, [r7, #32]
  char *amux_str = strtok(NULL, " ");
 8000e3a:	4973      	ldr	r1, [pc, #460]	@ (8001008 <cmd_setkey+0x1f8>)
 8000e3c:	2000      	movs	r0, #0
 8000e3e:	f00a fc05 	bl	800b64c <strtok>
 8000e42:	61f8      	str	r0, [r7, #28]
  char *param = strtok(NULL, " ");
 8000e44:	4970      	ldr	r1, [pc, #448]	@ (8001008 <cmd_setkey+0x1f8>)
 8000e46:	2000      	movs	r0, #0
 8000e48:	f00a fc00 	bl	800b64c <strtok>
 8000e4c:	61b8      	str	r0, [r7, #24]
  char *value = strtok(NULL, " ");
 8000e4e:	496e      	ldr	r1, [pc, #440]	@ (8001008 <cmd_setkey+0x1f8>)
 8000e50:	2000      	movs	r0, #0
 8000e52:	f00a fbfb 	bl	800b64c <strtok>
 8000e56:	6178      	str	r0, [r7, #20]

  if (layer_str && adc_str && amux_str && param && value) {
 8000e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 80cb 	beq.w	8000ff6 <cmd_setkey+0x1e6>
 8000e60:	6a3b      	ldr	r3, [r7, #32]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	f000 80c7 	beq.w	8000ff6 <cmd_setkey+0x1e6>
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f000 80c3 	beq.w	8000ff6 <cmd_setkey+0x1e6>
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f000 80bf 	beq.w	8000ff6 <cmd_setkey+0x1e6>
 8000e78:	697b      	ldr	r3, [r7, #20]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f000 80bb 	beq.w	8000ff6 <cmd_setkey+0x1e6>
    uint8_t layer = atoi(layer_str);
 8000e80:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8000e82:	f00a fa5a 	bl	800b33a <atoi>
 8000e86:	4603      	mov	r3, r0
 8000e88:	74fb      	strb	r3, [r7, #19]
    uint8_t adc = atoi(adc_str);
 8000e8a:	6a38      	ldr	r0, [r7, #32]
 8000e8c:	f00a fa55 	bl	800b33a <atoi>
 8000e90:	4603      	mov	r3, r0
 8000e92:	74bb      	strb	r3, [r7, #18]
    uint8_t amux = atoi(amux_str);
 8000e94:	69f8      	ldr	r0, [r7, #28]
 8000e96:	f00a fa50 	bl	800b33a <atoi>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	747b      	strb	r3, [r7, #17]
    uint16_t val = (uint16_t)atoi(value);
 8000e9e:	6978      	ldr	r0, [r7, #20]
 8000ea0:	f00a fa4b 	bl	800b33a <atoi>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	81fb      	strh	r3, [r7, #14]

    if (layer < LAYERS_COUNT && adc < ADC_CHANNEL_COUNT && amux < AMUX_CHANNEL_COUNT) {
 8000ea8:	7cfb      	ldrb	r3, [r7, #19]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	f200 809e 	bhi.w	8000fec <cmd_setkey+0x1dc>
 8000eb0:	7cbb      	ldrb	r3, [r7, #18]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	f040 809a 	bne.w	8000fec <cmd_setkey+0x1dc>
 8000eb8:	7c7b      	ldrb	r3, [r7, #17]
 8000eba:	2b0f      	cmp	r3, #15
 8000ebc:	f200 8096 	bhi.w	8000fec <cmd_setkey+0x1dc>
      if (strcmp(param, "keymap") == 0) {
 8000ec0:	4952      	ldr	r1, [pc, #328]	@ (800100c <cmd_setkey+0x1fc>)
 8000ec2:	69b8      	ldr	r0, [r7, #24]
 8000ec4:	f7ff f98c 	bl	80001e0 <strcmp>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d116      	bne.n	8000efc <cmd_setkey+0xec>
        keyboard_keys[adc][amux].layers[layer].value[0] = val;
 8000ece:	7cb9      	ldrb	r1, [r7, #18]
 8000ed0:	7c78      	ldrb	r0, [r7, #17]
 8000ed2:	7cfa      	ldrb	r2, [r7, #19]
 8000ed4:	4c4e      	ldr	r4, [pc, #312]	@ (8001010 <cmd_setkey+0x200>)
 8000ed6:	4613      	mov	r3, r2
 8000ed8:	00db      	lsls	r3, r3, #3
 8000eda:	4413      	add	r3, r2
 8000edc:	2232      	movs	r2, #50	@ 0x32
 8000ede:	fb00 f202 	mul.w	r2, r0, r2
 8000ee2:	441a      	add	r2, r3
 8000ee4:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000ee8:	fb01 f303 	mul.w	r3, r1, r3
 8000eec:	4413      	add	r3, r2
 8000eee:	4423      	add	r3, r4
 8000ef0:	89fa      	ldrh	r2, [r7, #14]
 8000ef2:	80da      	strh	r2, [r3, #6]
        cdc_write_string_chunked("Keymap updated\r\n");
 8000ef4:	4847      	ldr	r0, [pc, #284]	@ (8001014 <cmd_setkey+0x204>)
 8000ef6:	f7ff fc9f 	bl	8000838 <cdc_write_string_chunked>
      if (strcmp(param, "keymap") == 0) {
 8000efa:	e07b      	b.n	8000ff4 <cmd_setkey+0x1e4>
      } else {
        if (strcmp(param, "is_enabled") == 0) {
 8000efc:	4946      	ldr	r1, [pc, #280]	@ (8001018 <cmd_setkey+0x208>)
 8000efe:	69b8      	ldr	r0, [r7, #24]
 8000f00:	f7ff f96e 	bl	80001e0 <strcmp>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d118      	bne.n	8000f3c <cmd_setkey+0x12c>
          keyboard_keys[adc][amux].is_enabled = val ? 1 : 0;
 8000f0a:	89fb      	ldrh	r3, [r7, #14]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	bf14      	ite	ne
 8000f10:	2301      	movne	r3, #1
 8000f12:	2300      	moveq	r3, #0
 8000f14:	b2d9      	uxtb	r1, r3
 8000f16:	7cbb      	ldrb	r3, [r7, #18]
 8000f18:	7c7a      	ldrb	r2, [r7, #17]
 8000f1a:	460c      	mov	r4, r1
 8000f1c:	493c      	ldr	r1, [pc, #240]	@ (8001010 <cmd_setkey+0x200>)
 8000f1e:	2032      	movs	r0, #50	@ 0x32
 8000f20:	fb00 f202 	mul.w	r2, r0, r2
 8000f24:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000f28:	fb00 f303 	mul.w	r3, r0, r3
 8000f2c:	4413      	add	r3, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	4622      	mov	r2, r4
 8000f32:	701a      	strb	r2, [r3, #0]
          cdc_write_string_chunked("Key enabled state updated\r\n");
 8000f34:	4839      	ldr	r0, [pc, #228]	@ (800101c <cmd_setkey+0x20c>)
 8000f36:	f7ff fc7f 	bl	8000838 <cdc_write_string_chunked>
      if (strcmp(param, "keymap") == 0) {
 8000f3a:	e05b      	b.n	8000ff4 <cmd_setkey+0x1e4>
        } else if (strcmp(param, "trigger_offset") == 0) {
 8000f3c:	4938      	ldr	r1, [pc, #224]	@ (8001020 <cmd_setkey+0x210>)
 8000f3e:	69b8      	ldr	r0, [r7, #24]
 8000f40:	f7ff f94e 	bl	80001e0 <strcmp>
 8000f44:	4603      	mov	r3, r0
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d114      	bne.n	8000f74 <cmd_setkey+0x164>
          keyboard_keys[adc][amux].actuation.trigger_offset = val;
 8000f4a:	7cbb      	ldrb	r3, [r7, #18]
 8000f4c:	7c7a      	ldrb	r2, [r7, #17]
 8000f4e:	89f9      	ldrh	r1, [r7, #14]
 8000f50:	b2cc      	uxtb	r4, r1
 8000f52:	492f      	ldr	r1, [pc, #188]	@ (8001010 <cmd_setkey+0x200>)
 8000f54:	2032      	movs	r0, #50	@ 0x32
 8000f56:	fb00 f202 	mul.w	r2, r0, r2
 8000f5a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000f5e:	fb00 f303 	mul.w	r3, r0, r3
 8000f62:	4413      	add	r3, r2
 8000f64:	440b      	add	r3, r1
 8000f66:	332c      	adds	r3, #44	@ 0x2c
 8000f68:	4622      	mov	r2, r4
 8000f6a:	701a      	strb	r2, [r3, #0]
          cdc_write_string_chunked("Trigger offset updated\r\n");
 8000f6c:	482d      	ldr	r0, [pc, #180]	@ (8001024 <cmd_setkey+0x214>)
 8000f6e:	f7ff fc63 	bl	8000838 <cdc_write_string_chunked>
      if (strcmp(param, "keymap") == 0) {
 8000f72:	e03f      	b.n	8000ff4 <cmd_setkey+0x1e4>
        } else if (strcmp(param, "reset_offset") == 0) {
 8000f74:	492c      	ldr	r1, [pc, #176]	@ (8001028 <cmd_setkey+0x218>)
 8000f76:	69b8      	ldr	r0, [r7, #24]
 8000f78:	f7ff f932 	bl	80001e0 <strcmp>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d114      	bne.n	8000fac <cmd_setkey+0x19c>
          keyboard_keys[adc][amux].actuation.reset_offset = val;
 8000f82:	7cbb      	ldrb	r3, [r7, #18]
 8000f84:	7c7a      	ldrb	r2, [r7, #17]
 8000f86:	89f9      	ldrh	r1, [r7, #14]
 8000f88:	b2cc      	uxtb	r4, r1
 8000f8a:	4921      	ldr	r1, [pc, #132]	@ (8001010 <cmd_setkey+0x200>)
 8000f8c:	2032      	movs	r0, #50	@ 0x32
 8000f8e:	fb00 f202 	mul.w	r2, r0, r2
 8000f92:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000f96:	fb00 f303 	mul.w	r3, r0, r3
 8000f9a:	4413      	add	r3, r2
 8000f9c:	440b      	add	r3, r1
 8000f9e:	332b      	adds	r3, #43	@ 0x2b
 8000fa0:	4622      	mov	r2, r4
 8000fa2:	701a      	strb	r2, [r3, #0]
          cdc_write_string_chunked("Reset offset updated\r\n");
 8000fa4:	4821      	ldr	r0, [pc, #132]	@ (800102c <cmd_setkey+0x21c>)
 8000fa6:	f7ff fc47 	bl	8000838 <cdc_write_string_chunked>
      if (strcmp(param, "keymap") == 0) {
 8000faa:	e023      	b.n	8000ff4 <cmd_setkey+0x1e4>
        } else if (strcmp(param, "rapid_trigger_offset") == 0) {
 8000fac:	4920      	ldr	r1, [pc, #128]	@ (8001030 <cmd_setkey+0x220>)
 8000fae:	69b8      	ldr	r0, [r7, #24]
 8000fb0:	f7ff f916 	bl	80001e0 <strcmp>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d114      	bne.n	8000fe4 <cmd_setkey+0x1d4>
          keyboard_keys[adc][amux].actuation.rapid_trigger_offset = val;
 8000fba:	7cbb      	ldrb	r3, [r7, #18]
 8000fbc:	7c7a      	ldrb	r2, [r7, #17]
 8000fbe:	89f9      	ldrh	r1, [r7, #14]
 8000fc0:	b2cc      	uxtb	r4, r1
 8000fc2:	4913      	ldr	r1, [pc, #76]	@ (8001010 <cmd_setkey+0x200>)
 8000fc4:	2032      	movs	r0, #50	@ 0x32
 8000fc6:	fb00 f202 	mul.w	r2, r0, r2
 8000fca:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000fce:	fb00 f303 	mul.w	r3, r0, r3
 8000fd2:	4413      	add	r3, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	332d      	adds	r3, #45	@ 0x2d
 8000fd8:	4622      	mov	r2, r4
 8000fda:	701a      	strb	r2, [r3, #0]
          cdc_write_string_chunked("Rapid trigger offset updated\r\n");
 8000fdc:	4815      	ldr	r0, [pc, #84]	@ (8001034 <cmd_setkey+0x224>)
 8000fde:	f7ff fc2b 	bl	8000838 <cdc_write_string_chunked>
      if (strcmp(param, "keymap") == 0) {
 8000fe2:	e007      	b.n	8000ff4 <cmd_setkey+0x1e4>
        } else {
          cdc_write_string_chunked("Unknown parameter\r\n");
 8000fe4:	4814      	ldr	r0, [pc, #80]	@ (8001038 <cmd_setkey+0x228>)
 8000fe6:	f7ff fc27 	bl	8000838 <cdc_write_string_chunked>
      if (strcmp(param, "keymap") == 0) {
 8000fea:	e003      	b.n	8000ff4 <cmd_setkey+0x1e4>
        }
      }
      // cmd_save(NULL); // Save changes to config
    } else {
      cdc_write_string_chunked("Invalid layer/row/col\r\n");
 8000fec:	4813      	ldr	r0, [pc, #76]	@ (800103c <cmd_setkey+0x22c>)
 8000fee:	f7ff fc23 	bl	8000838 <cdc_write_string_chunked>
  if (layer_str && adc_str && amux_str && param && value) {
 8000ff2:	e003      	b.n	8000ffc <cmd_setkey+0x1ec>
 8000ff4:	e002      	b.n	8000ffc <cmd_setkey+0x1ec>
    }
  } else {
    cdc_write_string_chunked("Usage: setkey <layer> <row> <col> <parameter> <value>\r\n");
 8000ff6:	4803      	ldr	r0, [pc, #12]	@ (8001004 <cmd_setkey+0x1f4>)
 8000ff8:	f7ff fc1e 	bl	8000838 <cdc_write_string_chunked>
  }
}
 8000ffc:	372c      	adds	r7, #44	@ 0x2c
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd90      	pop	{r4, r7, pc}
 8001002:	bf00      	nop
 8001004:	0800cc20 	.word	0x0800cc20
 8001008:	0800c964 	.word	0x0800c964
 800100c:	0800cc58 	.word	0x0800cc58
 8001010:	20000100 	.word	0x20000100
 8001014:	0800cc60 	.word	0x0800cc60
 8001018:	0800cc74 	.word	0x0800cc74
 800101c:	0800cc80 	.word	0x0800cc80
 8001020:	0800cafc 	.word	0x0800cafc
 8001024:	0800cc9c 	.word	0x0800cc9c
 8001028:	0800ccb8 	.word	0x0800ccb8
 800102c:	0800ccc8 	.word	0x0800ccc8
 8001030:	0800cb4c 	.word	0x0800cb4c
 8001034:	0800cce0 	.word	0x0800cce0
 8001038:	0800cba4 	.word	0x0800cba4
 800103c:	0800cd00 	.word	0x0800cd00

08001040 <cmd_showkey>:

static void cmd_showkey(char *args) {
 8001040:	b5b0      	push	{r4, r5, r7, lr}
 8001042:	b0aa      	sub	sp, #168	@ 0xa8
 8001044:	af02      	add	r7, sp, #8
 8001046:	6078      	str	r0, [r7, #4]
  if (!args) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d103      	bne.n	8001056 <cmd_showkey+0x16>
    cdc_write_string_chunked("Usage: showkey <layer> <adc> <amux>\r\n");
 800104e:	48a3      	ldr	r0, [pc, #652]	@ (80012dc <cmd_showkey+0x29c>)
 8001050:	f7ff fbf2 	bl	8000838 <cdc_write_string_chunked>
    return;
 8001054:	e203      	b.n	800145e <cmd_showkey+0x41e>
  }
  char *layer_str = strtok(args, " ");
 8001056:	49a2      	ldr	r1, [pc, #648]	@ (80012e0 <cmd_showkey+0x2a0>)
 8001058:	6878      	ldr	r0, [r7, #4]
 800105a:	f00a faf7 	bl	800b64c <strtok>
 800105e:	f8c7 0098 	str.w	r0, [r7, #152]	@ 0x98
  char *adc_str = strtok(NULL, " ");
 8001062:	499f      	ldr	r1, [pc, #636]	@ (80012e0 <cmd_showkey+0x2a0>)
 8001064:	2000      	movs	r0, #0
 8001066:	f00a faf1 	bl	800b64c <strtok>
 800106a:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  char *amux_str = strtok(NULL, " ");
 800106e:	499c      	ldr	r1, [pc, #624]	@ (80012e0 <cmd_showkey+0x2a0>)
 8001070:	2000      	movs	r0, #0
 8001072:	f00a faeb 	bl	800b64c <strtok>
 8001076:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

  if (layer_str && adc_str && amux_str) {
 800107a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 81ea 	beq.w	8001458 <cmd_showkey+0x418>
 8001084:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8001088:	2b00      	cmp	r3, #0
 800108a:	f000 81e5 	beq.w	8001458 <cmd_showkey+0x418>
 800108e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8001092:	2b00      	cmp	r3, #0
 8001094:	f000 81e0 	beq.w	8001458 <cmd_showkey+0x418>
    uint8_t layer = atoi(layer_str);
 8001098:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800109c:	f00a f94d 	bl	800b33a <atoi>
 80010a0:	4603      	mov	r3, r0
 80010a2:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
    uint8_t adc = atoi(adc_str);
 80010a6:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 80010aa:	f00a f946 	bl	800b33a <atoi>
 80010ae:	4603      	mov	r3, r0
 80010b0:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
    uint8_t amux = atoi(amux_str);
 80010b4:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 80010b8:	f00a f93f 	bl	800b33a <atoi>
 80010bc:	4603      	mov	r3, r0
 80010be:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d

    if (layer < LAYERS_COUNT && adc < ADC_CHANNEL_COUNT && amux < AMUX_CHANNEL_COUNT) {
 80010c2:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	f200 81c2 	bhi.w	8001450 <cmd_showkey+0x410>
 80010cc:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	f040 81bd 	bne.w	8001450 <cmd_showkey+0x410>
 80010d6:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 80010da:	2b0f      	cmp	r3, #15
 80010dc:	f200 81b8 	bhi.w	8001450 <cmd_showkey+0x410>
      char buf[128];
      snprintf(buf, sizeof(buf), "Available parameter for key of layer %d, adc %d, amux %d:\r\n", layer, adc, amux);
 80010e0:	f897 108f 	ldrb.w	r1, [r7, #143]	@ 0x8f
 80010e4:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80010e8:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 80010ec:	f107 000c 	add.w	r0, r7, #12
 80010f0:	9201      	str	r2, [sp, #4]
 80010f2:	9300      	str	r3, [sp, #0]
 80010f4:	460b      	mov	r3, r1
 80010f6:	4a7b      	ldr	r2, [pc, #492]	@ (80012e4 <cmd_showkey+0x2a4>)
 80010f8:	2180      	movs	r1, #128	@ 0x80
 80010fa:	f00a f923 	bl	800b344 <sniprintf>
      cdc_write_string_chunked(buf);
 80010fe:	f107 030c 	add.w	r3, r7, #12
 8001102:	4618      	mov	r0, r3
 8001104:	f7ff fb98 	bl	8000838 <cdc_write_string_chunked>
      if (keyboard_keys[adc][amux].layers[layer].type == KEY_TYPE_EMPTY) {
 8001108:	f897 108e 	ldrb.w	r1, [r7, #142]	@ 0x8e
 800110c:	f897 008d 	ldrb.w	r0, [r7, #141]	@ 0x8d
 8001110:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8001114:	4c74      	ldr	r4, [pc, #464]	@ (80012e8 <cmd_showkey+0x2a8>)
 8001116:	4613      	mov	r3, r2
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	4413      	add	r3, r2
 800111c:	2232      	movs	r2, #50	@ 0x32
 800111e:	fb00 f202 	mul.w	r2, r0, r2
 8001122:	441a      	add	r2, r3
 8001124:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001128:	fb01 f303 	mul.w	r3, r1, r3
 800112c:	4413      	add	r3, r2
 800112e:	4423      	add	r3, r4
 8001130:	3305      	adds	r3, #5
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d103      	bne.n	8001140 <cmd_showkey+0x100>
        cdc_write_string_chunked("This key is empty\r\n");
 8001138:	486c      	ldr	r0, [pc, #432]	@ (80012ec <cmd_showkey+0x2ac>)
 800113a:	f7ff fb7d 	bl	8000838 <cdc_write_string_chunked>
 800113e:	e18e      	b.n	800145e <cmd_showkey+0x41e>
        return;
      } else if (keyboard_keys[adc][amux].layers[layer].type == KEY_TYPE_NORMAL) {
 8001140:	f897 108e 	ldrb.w	r1, [r7, #142]	@ 0x8e
 8001144:	f897 008d 	ldrb.w	r0, [r7, #141]	@ 0x8d
 8001148:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800114c:	4c66      	ldr	r4, [pc, #408]	@ (80012e8 <cmd_showkey+0x2a8>)
 800114e:	4613      	mov	r3, r2
 8001150:	00db      	lsls	r3, r3, #3
 8001152:	4413      	add	r3, r2
 8001154:	2232      	movs	r2, #50	@ 0x32
 8001156:	fb00 f202 	mul.w	r2, r0, r2
 800115a:	441a      	add	r2, r3
 800115c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001160:	fb01 f303 	mul.w	r3, r1, r3
 8001164:	4413      	add	r3, r2
 8001166:	4423      	add	r3, r4
 8001168:	3305      	adds	r3, #5
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b01      	cmp	r3, #1
 800116e:	d121      	bne.n	80011b4 <cmd_showkey+0x174>
        snprintf(buf, sizeof(buf), "Keymap: 0x%04X\r\n", keyboard_keys[adc][amux].layers[layer].value[0]);
 8001170:	f897 108e 	ldrb.w	r1, [r7, #142]	@ 0x8e
 8001174:	f897 008d 	ldrb.w	r0, [r7, #141]	@ 0x8d
 8001178:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800117c:	4c5a      	ldr	r4, [pc, #360]	@ (80012e8 <cmd_showkey+0x2a8>)
 800117e:	4613      	mov	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	4413      	add	r3, r2
 8001184:	2232      	movs	r2, #50	@ 0x32
 8001186:	fb00 f202 	mul.w	r2, r0, r2
 800118a:	441a      	add	r2, r3
 800118c:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001190:	fb01 f303 	mul.w	r3, r1, r3
 8001194:	4413      	add	r3, r2
 8001196:	4423      	add	r3, r4
 8001198:	88db      	ldrh	r3, [r3, #6]
 800119a:	b29b      	uxth	r3, r3
 800119c:	f107 000c 	add.w	r0, r7, #12
 80011a0:	4a53      	ldr	r2, [pc, #332]	@ (80012f0 <cmd_showkey+0x2b0>)
 80011a2:	2180      	movs	r1, #128	@ 0x80
 80011a4:	f00a f8ce 	bl	800b344 <sniprintf>
        cdc_write_string_chunked(buf);
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	4618      	mov	r0, r3
 80011ae:	f7ff fb43 	bl	8000838 <cdc_write_string_chunked>
 80011b2:	e0d6      	b.n	8001362 <cmd_showkey+0x322>
      } else if (keyboard_keys[adc][amux].layers[layer].type == KEY_TYPE_MODIFIER) {
 80011b4:	f897 108e 	ldrb.w	r1, [r7, #142]	@ 0x8e
 80011b8:	f897 008d 	ldrb.w	r0, [r7, #141]	@ 0x8d
 80011bc:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 80011c0:	4c49      	ldr	r4, [pc, #292]	@ (80012e8 <cmd_showkey+0x2a8>)
 80011c2:	4613      	mov	r3, r2
 80011c4:	00db      	lsls	r3, r3, #3
 80011c6:	4413      	add	r3, r2
 80011c8:	2232      	movs	r2, #50	@ 0x32
 80011ca:	fb00 f202 	mul.w	r2, r0, r2
 80011ce:	441a      	add	r2, r3
 80011d0:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80011d4:	fb01 f303 	mul.w	r3, r1, r3
 80011d8:	4413      	add	r3, r2
 80011da:	4423      	add	r3, r4
 80011dc:	3305      	adds	r3, #5
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	2b02      	cmp	r3, #2
 80011e2:	d121      	bne.n	8001228 <cmd_showkey+0x1e8>
        snprintf(buf, sizeof(buf), "Modifier Keymap: 0x%04X\r\n", keyboard_keys[adc][amux].layers[layer].value[0]);
 80011e4:	f897 108e 	ldrb.w	r1, [r7, #142]	@ 0x8e
 80011e8:	f897 008d 	ldrb.w	r0, [r7, #141]	@ 0x8d
 80011ec:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 80011f0:	4c3d      	ldr	r4, [pc, #244]	@ (80012e8 <cmd_showkey+0x2a8>)
 80011f2:	4613      	mov	r3, r2
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	4413      	add	r3, r2
 80011f8:	2232      	movs	r2, #50	@ 0x32
 80011fa:	fb00 f202 	mul.w	r2, r0, r2
 80011fe:	441a      	add	r2, r3
 8001200:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001204:	fb01 f303 	mul.w	r3, r1, r3
 8001208:	4413      	add	r3, r2
 800120a:	4423      	add	r3, r4
 800120c:	88db      	ldrh	r3, [r3, #6]
 800120e:	b29b      	uxth	r3, r3
 8001210:	f107 000c 	add.w	r0, r7, #12
 8001214:	4a37      	ldr	r2, [pc, #220]	@ (80012f4 <cmd_showkey+0x2b4>)
 8001216:	2180      	movs	r1, #128	@ 0x80
 8001218:	f00a f894 	bl	800b344 <sniprintf>
        cdc_write_string_chunked(buf);
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff fb09 	bl	8000838 <cdc_write_string_chunked>
 8001226:	e09c      	b.n	8001362 <cmd_showkey+0x322>
      } else if (keyboard_keys[adc][amux].layers[layer].type == KEY_TYPE_CONSUMER_CONTROL) {
 8001228:	f897 108e 	ldrb.w	r1, [r7, #142]	@ 0x8e
 800122c:	f897 008d 	ldrb.w	r0, [r7, #141]	@ 0x8d
 8001230:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8001234:	4c2c      	ldr	r4, [pc, #176]	@ (80012e8 <cmd_showkey+0x2a8>)
 8001236:	4613      	mov	r3, r2
 8001238:	00db      	lsls	r3, r3, #3
 800123a:	4413      	add	r3, r2
 800123c:	2232      	movs	r2, #50	@ 0x32
 800123e:	fb00 f202 	mul.w	r2, r0, r2
 8001242:	441a      	add	r2, r3
 8001244:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001248:	fb01 f303 	mul.w	r3, r1, r3
 800124c:	4413      	add	r3, r2
 800124e:	4423      	add	r3, r4
 8001250:	3305      	adds	r3, #5
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	2b03      	cmp	r3, #3
 8001256:	d121      	bne.n	800129c <cmd_showkey+0x25c>
        snprintf(buf, sizeof(buf), "Consumer Control Keymap: 0x%04X\r\n", keyboard_keys[adc][amux].layers[layer].value[0]);
 8001258:	f897 108e 	ldrb.w	r1, [r7, #142]	@ 0x8e
 800125c:	f897 008d 	ldrb.w	r0, [r7, #141]	@ 0x8d
 8001260:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 8001264:	4c20      	ldr	r4, [pc, #128]	@ (80012e8 <cmd_showkey+0x2a8>)
 8001266:	4613      	mov	r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	4413      	add	r3, r2
 800126c:	2232      	movs	r2, #50	@ 0x32
 800126e:	fb00 f202 	mul.w	r2, r0, r2
 8001272:	441a      	add	r2, r3
 8001274:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001278:	fb01 f303 	mul.w	r3, r1, r3
 800127c:	4413      	add	r3, r2
 800127e:	4423      	add	r3, r4
 8001280:	88db      	ldrh	r3, [r3, #6]
 8001282:	b29b      	uxth	r3, r3
 8001284:	f107 000c 	add.w	r0, r7, #12
 8001288:	4a1b      	ldr	r2, [pc, #108]	@ (80012f8 <cmd_showkey+0x2b8>)
 800128a:	2180      	movs	r1, #128	@ 0x80
 800128c:	f00a f85a 	bl	800b344 <sniprintf>
        cdc_write_string_chunked(buf);
 8001290:	f107 030c 	add.w	r3, r7, #12
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff facf 	bl	8000838 <cdc_write_string_chunked>
 800129a:	e062      	b.n	8001362 <cmd_showkey+0x322>
      } else if (keyboard_keys[adc][amux].layers[layer].type == KEY_TYPE_MACRO) {
 800129c:	f897 108e 	ldrb.w	r1, [r7, #142]	@ 0x8e
 80012a0:	f897 008d 	ldrb.w	r0, [r7, #141]	@ 0x8d
 80012a4:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 80012a8:	4c0f      	ldr	r4, [pc, #60]	@ (80012e8 <cmd_showkey+0x2a8>)
 80012aa:	4613      	mov	r3, r2
 80012ac:	00db      	lsls	r3, r3, #3
 80012ae:	4413      	add	r3, r2
 80012b0:	2232      	movs	r2, #50	@ 0x32
 80012b2:	fb00 f202 	mul.w	r2, r0, r2
 80012b6:	441a      	add	r2, r3
 80012b8:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80012bc:	fb01 f303 	mul.w	r3, r1, r3
 80012c0:	4413      	add	r3, r2
 80012c2:	4423      	add	r3, r4
 80012c4:	3305      	adds	r3, #5
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	d14a      	bne.n	8001362 <cmd_showkey+0x322>
        cdc_write_string_chunked("Macro Keymap: ");
 80012cc:	480b      	ldr	r0, [pc, #44]	@ (80012fc <cmd_showkey+0x2bc>)
 80012ce:	f7ff fab3 	bl	8000838 <cdc_write_string_chunked>
        for (int i = 0; i < MAX_MACRO_LEN; i++) {
 80012d2:	2300      	movs	r3, #0
 80012d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80012d8:	e03c      	b.n	8001354 <cmd_showkey+0x314>
 80012da:	bf00      	nop
 80012dc:	0800cd18 	.word	0x0800cd18
 80012e0:	0800c964 	.word	0x0800c964
 80012e4:	0800cd40 	.word	0x0800cd40
 80012e8:	20000100 	.word	0x20000100
 80012ec:	0800cd7c 	.word	0x0800cd7c
 80012f0:	0800cd90 	.word	0x0800cd90
 80012f4:	0800cda4 	.word	0x0800cda4
 80012f8:	0800cdc0 	.word	0x0800cdc0
 80012fc:	0800cde4 	.word	0x0800cde4
          snprintf(buf, sizeof(buf), "0x%04X ", keyboard_keys[adc][amux].layers[layer].value[i]);
 8001300:	f897 108e 	ldrb.w	r1, [r7, #142]	@ 0x8e
 8001304:	f897 308d 	ldrb.w	r3, [r7, #141]	@ 0x8d
 8001308:	f897 208f 	ldrb.w	r2, [r7, #143]	@ 0x8f
 800130c:	4c55      	ldr	r4, [pc, #340]	@ (8001464 <cmd_showkey+0x424>)
 800130e:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8001312:	0040      	lsls	r0, r0, #1
 8001314:	2532      	movs	r5, #50	@ 0x32
 8001316:	fb05 f303 	mul.w	r3, r5, r3
 800131a:	4418      	add	r0, r3
 800131c:	4613      	mov	r3, r2
 800131e:	00db      	lsls	r3, r3, #3
 8001320:	4413      	add	r3, r2
 8001322:	18c2      	adds	r2, r0, r3
 8001324:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001328:	fb01 f303 	mul.w	r3, r1, r3
 800132c:	4413      	add	r3, r2
 800132e:	4423      	add	r3, r4
 8001330:	88db      	ldrh	r3, [r3, #6]
 8001332:	b29b      	uxth	r3, r3
 8001334:	f107 000c 	add.w	r0, r7, #12
 8001338:	4a4b      	ldr	r2, [pc, #300]	@ (8001468 <cmd_showkey+0x428>)
 800133a:	2180      	movs	r1, #128	@ 0x80
 800133c:	f00a f802 	bl	800b344 <sniprintf>
          cdc_write_string_chunked(buf);
 8001340:	f107 030c 	add.w	r3, r7, #12
 8001344:	4618      	mov	r0, r3
 8001346:	f7ff fa77 	bl	8000838 <cdc_write_string_chunked>
        for (int i = 0; i < MAX_MACRO_LEN; i++) {
 800134a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800134e:	3301      	adds	r3, #1
 8001350:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8001354:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8001358:	2b03      	cmp	r3, #3
 800135a:	ddd1      	ble.n	8001300 <cmd_showkey+0x2c0>
        }
        cdc_write_string_chunked("\r\n");
 800135c:	4843      	ldr	r0, [pc, #268]	@ (800146c <cmd_showkey+0x42c>)
 800135e:	f7ff fa6b 	bl	8000838 <cdc_write_string_chunked>
      }

      cdc_write_string_chunked(buf);
 8001362:	f107 030c 	add.w	r3, r7, #12
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff fa66 	bl	8000838 <cdc_write_string_chunked>
      snprintf(buf, sizeof(buf), "Enabled: %d\r\n", keyboard_keys[adc][amux].is_enabled);
 800136c:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8001370:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 8001374:	493b      	ldr	r1, [pc, #236]	@ (8001464 <cmd_showkey+0x424>)
 8001376:	2032      	movs	r0, #50	@ 0x32
 8001378:	fb00 f202 	mul.w	r2, r0, r2
 800137c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001380:	fb00 f303 	mul.w	r3, r0, r3
 8001384:	4413      	add	r3, r2
 8001386:	440b      	add	r3, r1
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	f107 000c 	add.w	r0, r7, #12
 800138e:	4a38      	ldr	r2, [pc, #224]	@ (8001470 <cmd_showkey+0x430>)
 8001390:	2180      	movs	r1, #128	@ 0x80
 8001392:	f009 ffd7 	bl	800b344 <sniprintf>
      cdc_write_string_chunked(buf);
 8001396:	f107 030c 	add.w	r3, r7, #12
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fa4c 	bl	8000838 <cdc_write_string_chunked>
      snprintf(buf, sizeof(buf), "Trigger Offset: %d\r\n", keyboard_keys[adc][amux].actuation.trigger_offset);
 80013a0:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80013a4:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 80013a8:	492e      	ldr	r1, [pc, #184]	@ (8001464 <cmd_showkey+0x424>)
 80013aa:	2032      	movs	r0, #50	@ 0x32
 80013ac:	fb00 f202 	mul.w	r2, r0, r2
 80013b0:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80013b4:	fb00 f303 	mul.w	r3, r0, r3
 80013b8:	4413      	add	r3, r2
 80013ba:	440b      	add	r3, r1
 80013bc:	332c      	adds	r3, #44	@ 0x2c
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	f107 000c 	add.w	r0, r7, #12
 80013c4:	4a2b      	ldr	r2, [pc, #172]	@ (8001474 <cmd_showkey+0x434>)
 80013c6:	2180      	movs	r1, #128	@ 0x80
 80013c8:	f009 ffbc 	bl	800b344 <sniprintf>
      cdc_write_string_chunked(buf);
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fa31 	bl	8000838 <cdc_write_string_chunked>
      snprintf(buf, sizeof(buf), "Reset Offset: %d\r\n", keyboard_keys[adc][amux].actuation.reset_offset);
 80013d6:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80013da:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 80013de:	4921      	ldr	r1, [pc, #132]	@ (8001464 <cmd_showkey+0x424>)
 80013e0:	2032      	movs	r0, #50	@ 0x32
 80013e2:	fb00 f202 	mul.w	r2, r0, r2
 80013e6:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80013ea:	fb00 f303 	mul.w	r3, r0, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	440b      	add	r3, r1
 80013f2:	332b      	adds	r3, #43	@ 0x2b
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	f107 000c 	add.w	r0, r7, #12
 80013fa:	4a1f      	ldr	r2, [pc, #124]	@ (8001478 <cmd_showkey+0x438>)
 80013fc:	2180      	movs	r1, #128	@ 0x80
 80013fe:	f009 ffa1 	bl	800b344 <sniprintf>
      cdc_write_string_chunked(buf);
 8001402:	f107 030c 	add.w	r3, r7, #12
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff fa16 	bl	8000838 <cdc_write_string_chunked>
      snprintf(buf, sizeof(buf), "Rapid Trigger Offset: %d\r\n", keyboard_keys[adc][amux].actuation.rapid_trigger_offset);
 800140c:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 8001410:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 8001414:	4913      	ldr	r1, [pc, #76]	@ (8001464 <cmd_showkey+0x424>)
 8001416:	2032      	movs	r0, #50	@ 0x32
 8001418:	fb00 f202 	mul.w	r2, r0, r2
 800141c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001420:	fb00 f303 	mul.w	r3, r0, r3
 8001424:	4413      	add	r3, r2
 8001426:	440b      	add	r3, r1
 8001428:	332d      	adds	r3, #45	@ 0x2d
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	f107 000c 	add.w	r0, r7, #12
 8001430:	4a12      	ldr	r2, [pc, #72]	@ (800147c <cmd_showkey+0x43c>)
 8001432:	2180      	movs	r1, #128	@ 0x80
 8001434:	f009 ff86 	bl	800b344 <sniprintf>
      cdc_write_string_chunked(buf);
 8001438:	f107 030c 	add.w	r3, r7, #12
 800143c:	4618      	mov	r0, r3
 800143e:	f7ff f9fb 	bl	8000838 <cdc_write_string_chunked>
      cdc_write_string_chunked("You can set these parameters using 'setkey' command\r\n");
 8001442:	480f      	ldr	r0, [pc, #60]	@ (8001480 <cmd_showkey+0x440>)
 8001444:	f7ff f9f8 	bl	8000838 <cdc_write_string_chunked>
      cdc_write_flush_wait();
 8001448:	f7ff fa41 	bl	80008ce <cdc_write_flush_wait>
    if (layer < LAYERS_COUNT && adc < ADC_CHANNEL_COUNT && amux < AMUX_CHANNEL_COUNT) {
 800144c:	bf00      	nop
  if (layer_str && adc_str && amux_str) {
 800144e:	e006      	b.n	800145e <cmd_showkey+0x41e>
    } else {
      cdc_write_string_chunked("Invalid layer/row/col\r\n");
 8001450:	480c      	ldr	r0, [pc, #48]	@ (8001484 <cmd_showkey+0x444>)
 8001452:	f7ff f9f1 	bl	8000838 <cdc_write_string_chunked>
  if (layer_str && adc_str && amux_str) {
 8001456:	e002      	b.n	800145e <cmd_showkey+0x41e>
    }
  } else {
    cdc_write_string_chunked("Usage: showkey <layer> <adc> <amux>\r\n");
 8001458:	480b      	ldr	r0, [pc, #44]	@ (8001488 <cmd_showkey+0x448>)
 800145a:	f7ff f9ed 	bl	8000838 <cdc_write_string_chunked>
  }
 800145e:	37a0      	adds	r7, #160	@ 0xa0
 8001460:	46bd      	mov	sp, r7
 8001462:	bdb0      	pop	{r4, r5, r7, pc}
 8001464:	20000100 	.word	0x20000100
 8001468:	0800cdf4 	.word	0x0800cdf4
 800146c:	0800c8e8 	.word	0x0800c8e8
 8001470:	0800cdfc 	.word	0x0800cdfc
 8001474:	0800c9f0 	.word	0x0800c9f0
 8001478:	0800ce0c 	.word	0x0800ce0c
 800147c:	0800ca20 	.word	0x0800ca20
 8001480:	0800ce20 	.word	0x0800ce20
 8001484:	0800cd00 	.word	0x0800cd00
 8001488:	0800cd18 	.word	0x0800cd18

0800148c <hid_task>:
static uint8_t modifiers = 0;
static uint8_t keycodes[6] = {0};
// static uint8_t is_screaming = 0;
static uint8_t consumer_report = 0;

void hid_task() {
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0

  if ((should_send_consumer_report || should_send_keyboard_report) && tud_hid_ready()) {
 8001492:	4b21      	ldr	r3, [pc, #132]	@ (8001518 <hid_task+0x8c>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d103      	bne.n	80014a2 <hid_task+0x16>
 800149a:	4b20      	ldr	r3, [pc, #128]	@ (800151c <hid_task+0x90>)
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d035      	beq.n	800150e <hid_task+0x82>

//--------------------------------------------------------------------+
// Application API (Single Port)
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_ready(void) {
  return tud_hid_n_ready(0);
 80014a2:	2000      	movs	r0, #0
 80014a4:	f004 fca6 	bl	8005df4 <tud_hid_n_ready>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d02f      	beq.n	800150e <hid_task+0x82>
    if (tud_suspended()) {
 80014ae:	f005 ffbd 	bl	800742c <tud_suspended>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d002      	beq.n	80014be <hid_task+0x32>
      tud_remote_wakeup();
 80014b8:	f005 ffcc 	bl	8007454 <tud_remote_wakeup>
        should_send_keyboard_report = 0;
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
      }
    }
  }
}
 80014bc:	e027      	b.n	800150e <hid_task+0x82>
      if (should_send_consumer_report) {
 80014be:	4b16      	ldr	r3, [pc, #88]	@ (8001518 <hid_task+0x8c>)
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d00f      	beq.n	80014e6 <hid_task+0x5a>
        should_send_consumer_report = 0;
 80014c6:	4b14      	ldr	r3, [pc, #80]	@ (8001518 <hid_task+0x8c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	701a      	strb	r2, [r3, #0]
 80014cc:	2302      	movs	r3, #2
 80014ce:	73fb      	strb	r3, [r7, #15]
 80014d0:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <hid_task+0x94>)
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	2302      	movs	r3, #2
 80014d6:	80fb      	strh	r3, [r7, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tud_hid_get_protocol(void) {
  return tud_hid_n_get_protocol(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_report(uint8_t report_id, void const* report, uint16_t len) {
  return tud_hid_n_report(0, report_id, report, len);
 80014d8:	88fb      	ldrh	r3, [r7, #6]
 80014da:	7bf9      	ldrb	r1, [r7, #15]
 80014dc:	68ba      	ldr	r2, [r7, #8]
 80014de:	2000      	movs	r0, #0
 80014e0:	f004 fcca 	bl	8005e78 <tud_hid_n_report>
 80014e4:	e013      	b.n	800150e <hid_task+0x82>
      } else if (should_send_keyboard_report) {
 80014e6:	4b0d      	ldr	r3, [pc, #52]	@ (800151c <hid_task+0x90>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d00f      	beq.n	800150e <hid_task+0x82>
        should_send_keyboard_report = 0;
 80014ee:	4b0b      	ldr	r3, [pc, #44]	@ (800151c <hid_task+0x90>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
 80014f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001524 <hid_task+0x98>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	2201      	movs	r2, #1
 80014fa:	717a      	strb	r2, [r7, #5]
 80014fc:	713b      	strb	r3, [r7, #4]
 80014fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001528 <hid_task+0x9c>)
 8001500:	603b      	str	r3, [r7, #0]
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
  return tud_hid_n_keyboard_report(0, report_id, modifier, keycode);
 8001502:	793a      	ldrb	r2, [r7, #4]
 8001504:	7979      	ldrb	r1, [r7, #5]
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	2000      	movs	r0, #0
 800150a:	f004 fd3b 	bl	8005f84 <tud_hid_n_keyboard_report>
}
 800150e:	bf00      	nop
 8001510:	3710      	adds	r7, #16
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	200000f5 	.word	0x200000f5
 800151c:	200000f6 	.word	0x200000f6
 8001520:	200000fe 	.word	0x200000fe
 8001524:	200000f7 	.word	0x200000f7
 8001528:	200000f8 	.word	0x200000f8

0800152c <hid_press_key>:

void hid_press_key(struct key *key, uint8_t layer) {
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 8001538:	78fa      	ldrb	r2, [r7, #3]
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	00db      	lsls	r3, r3, #3
 8001540:	4413      	add	r3, r2
 8001542:	440b      	add	r3, r1
 8001544:	3305      	adds	r3, #5
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	3b01      	subs	r3, #1
 800154a:	2b03      	cmp	r3, #3
 800154c:	f200 80f7 	bhi.w	800173e <hid_press_key+0x212>
 8001550:	a201      	add	r2, pc, #4	@ (adr r2, 8001558 <hid_press_key+0x2c>)
 8001552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001556:	bf00      	nop
 8001558:	0800158f 	.word	0x0800158f
 800155c:	08001569 	.word	0x08001569
 8001560:	080015cf 	.word	0x080015cf
 8001564:	080015ed 	.word	0x080015ed
  case KEY_TYPE_MODIFIER:
    modifiers |= key->layers[layer].value[0];
 8001568:	78fa      	ldrb	r2, [r7, #3]
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	4613      	mov	r3, r2
 800156e:	00db      	lsls	r3, r3, #3
 8001570:	4413      	add	r3, r2
 8001572:	440b      	add	r3, r1
 8001574:	88db      	ldrh	r3, [r3, #6]
 8001576:	b29b      	uxth	r3, r3
 8001578:	b2da      	uxtb	r2, r3
 800157a:	4b74      	ldr	r3, [pc, #464]	@ (800174c <hid_press_key+0x220>)
 800157c:	781b      	ldrb	r3, [r3, #0]
 800157e:	4313      	orrs	r3, r2
 8001580:	b2da      	uxtb	r2, r3
 8001582:	4b72      	ldr	r3, [pc, #456]	@ (800174c <hid_press_key+0x220>)
 8001584:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 8001586:	4b72      	ldr	r3, [pc, #456]	@ (8001750 <hid_press_key+0x224>)
 8001588:	2201      	movs	r2, #1
 800158a:	701a      	strb	r2, [r3, #0]
    break;
 800158c:	e0da      	b.n	8001744 <hid_press_key+0x218>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 800158e:	2300      	movs	r3, #0
 8001590:	75fb      	strb	r3, [r7, #23]
 8001592:	e018      	b.n	80015c6 <hid_press_key+0x9a>
      if (keycodes[i] == 0) {
 8001594:	7dfb      	ldrb	r3, [r7, #23]
 8001596:	4a6f      	ldr	r2, [pc, #444]	@ (8001754 <hid_press_key+0x228>)
 8001598:	5cd3      	ldrb	r3, [r2, r3]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d110      	bne.n	80015c0 <hid_press_key+0x94>
        keycodes[i] = key->layers[layer].value[0];
 800159e:	78fa      	ldrb	r2, [r7, #3]
 80015a0:	6879      	ldr	r1, [r7, #4]
 80015a2:	4613      	mov	r3, r2
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	4413      	add	r3, r2
 80015a8:	440b      	add	r3, r1
 80015aa:	88db      	ldrh	r3, [r3, #6]
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	7dfb      	ldrb	r3, [r7, #23]
 80015b0:	b2d1      	uxtb	r1, r2
 80015b2:	4a68      	ldr	r2, [pc, #416]	@ (8001754 <hid_press_key+0x228>)
 80015b4:	54d1      	strb	r1, [r2, r3]
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // } else if (i == 0 && key->state.velocity > keyboard_user_config.screaming_velocity_trigger) {
        //   is_screaming = 1;
        //   modifiers |= get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 80015b6:	4b66      	ldr	r3, [pc, #408]	@ (8001750 <hid_press_key+0x224>)
 80015b8:	2201      	movs	r2, #1
 80015ba:	701a      	strb	r2, [r3, #0]
        break;
 80015bc:	bf00      	nop
      }
    }
    break;
 80015be:	e0c1      	b.n	8001744 <hid_press_key+0x218>
    for (uint8_t i = 0; i < 6; i++) {
 80015c0:	7dfb      	ldrb	r3, [r7, #23]
 80015c2:	3301      	adds	r3, #1
 80015c4:	75fb      	strb	r3, [r7, #23]
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
 80015c8:	2b05      	cmp	r3, #5
 80015ca:	d9e3      	bls.n	8001594 <hid_press_key+0x68>
    break;
 80015cc:	e0ba      	b.n	8001744 <hid_press_key+0x218>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = key->layers[layer].value[0];
 80015ce:	78fa      	ldrb	r2, [r7, #3]
 80015d0:	6879      	ldr	r1, [r7, #4]
 80015d2:	4613      	mov	r3, r2
 80015d4:	00db      	lsls	r3, r3, #3
 80015d6:	4413      	add	r3, r2
 80015d8:	440b      	add	r3, r1
 80015da:	88db      	ldrh	r3, [r3, #6]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	b2da      	uxtb	r2, r3
 80015e0:	4b5d      	ldr	r3, [pc, #372]	@ (8001758 <hid_press_key+0x22c>)
 80015e2:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 80015e4:	4b5d      	ldr	r3, [pc, #372]	@ (800175c <hid_press_key+0x230>)
 80015e6:	2201      	movs	r2, #1
 80015e8:	701a      	strb	r2, [r3, #0]
    break;
 80015ea:	e0ab      	b.n	8001744 <hid_press_key+0x218>

  case KEY_TYPE_MACRO:
    // Count how many non-zero macro values we have (excluding modifiers)
    uint8_t macro_count = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 80015f0:	2300      	movs	r3, #0
 80015f2:	757b      	strb	r3, [r7, #21]
 80015f4:	e025      	b.n	8001642 <hid_press_key+0x116>
      if (key->layers[layer].value[i] != ____) {
 80015f6:	78fa      	ldrb	r2, [r7, #3]
 80015f8:	7d7b      	ldrb	r3, [r7, #21]
 80015fa:	6879      	ldr	r1, [r7, #4]
 80015fc:	0058      	lsls	r0, r3, #1
 80015fe:	4613      	mov	r3, r2
 8001600:	00db      	lsls	r3, r3, #3
 8001602:	4413      	add	r3, r2
 8001604:	4403      	add	r3, r0
 8001606:	440b      	add	r3, r1
 8001608:	88db      	ldrh	r3, [r3, #6]
 800160a:	b29b      	uxth	r3, r3
 800160c:	2b00      	cmp	r3, #0
 800160e:	d015      	beq.n	800163c <hid_press_key+0x110>
        // Check if this is a modifier
        uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[i]);
 8001610:	78fa      	ldrb	r2, [r7, #3]
 8001612:	7d7b      	ldrb	r3, [r7, #21]
 8001614:	6879      	ldr	r1, [r7, #4]
 8001616:	0058      	lsls	r0, r3, #1
 8001618:	4613      	mov	r3, r2
 800161a:	00db      	lsls	r3, r3, #3
 800161c:	4413      	add	r3, r2
 800161e:	4403      	add	r3, r0
 8001620:	440b      	add	r3, r1
 8001622:	88db      	ldrh	r3, [r3, #6]
 8001624:	b29b      	uxth	r3, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f9a0 	bl	800196c <get_bitmask_for_modifier>
 800162c:	4603      	mov	r3, r0
 800162e:	737b      	strb	r3, [r7, #13]
        if (!bitmask) {
 8001630:	7b7b      	ldrb	r3, [r7, #13]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d102      	bne.n	800163c <hid_press_key+0x110>
          macro_count++; // Only count non-modifier keys
 8001636:	7dbb      	ldrb	r3, [r7, #22]
 8001638:	3301      	adds	r3, #1
 800163a:	75bb      	strb	r3, [r7, #22]
    for (uint8_t i = 0; i < MAX_MACRO_LEN; i++) {
 800163c:	7d7b      	ldrb	r3, [r7, #21]
 800163e:	3301      	adds	r3, #1
 8001640:	757b      	strb	r3, [r7, #21]
 8001642:	7d7b      	ldrb	r3, [r7, #21]
 8001644:	2b03      	cmp	r3, #3
 8001646:	d9d6      	bls.n	80015f6 <hid_press_key+0xca>
        }
      }
    }

    // Find the first empty slot for the macro
    uint8_t start_slot = 0;
 8001648:	2300      	movs	r3, #0
 800164a:	753b      	strb	r3, [r7, #20]
    for (uint8_t i = 0; i < 6; i++) {
 800164c:	2300      	movs	r3, #0
 800164e:	74fb      	strb	r3, [r7, #19]
 8001650:	e00a      	b.n	8001668 <hid_press_key+0x13c>
      if (keycodes[i] == 0) {
 8001652:	7cfb      	ldrb	r3, [r7, #19]
 8001654:	4a3f      	ldr	r2, [pc, #252]	@ (8001754 <hid_press_key+0x228>)
 8001656:	5cd3      	ldrb	r3, [r2, r3]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <hid_press_key+0x136>
        start_slot = i;
 800165c:	7cfb      	ldrb	r3, [r7, #19]
 800165e:	753b      	strb	r3, [r7, #20]
        break;
 8001660:	e005      	b.n	800166e <hid_press_key+0x142>
    for (uint8_t i = 0; i < 6; i++) {
 8001662:	7cfb      	ldrb	r3, [r7, #19]
 8001664:	3301      	adds	r3, #1
 8001666:	74fb      	strb	r3, [r7, #19]
 8001668:	7cfb      	ldrb	r3, [r7, #19]
 800166a:	2b05      	cmp	r3, #5
 800166c:	d9f1      	bls.n	8001652 <hid_press_key+0x126>
      }
    }

    // Check if we have enough consecutive empty slots for the non-modifier keys
    uint8_t available_slots = 0;
 800166e:	2300      	movs	r3, #0
 8001670:	74bb      	strb	r3, [r7, #18]
    for (uint8_t i = start_slot; i < 6; i++) {
 8001672:	7d3b      	ldrb	r3, [r7, #20]
 8001674:	747b      	strb	r3, [r7, #17]
 8001676:	e00a      	b.n	800168e <hid_press_key+0x162>
      if (keycodes[i] == 0) {
 8001678:	7c7b      	ldrb	r3, [r7, #17]
 800167a:	4a36      	ldr	r2, [pc, #216]	@ (8001754 <hid_press_key+0x228>)
 800167c:	5cd3      	ldrb	r3, [r2, r3]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d109      	bne.n	8001696 <hid_press_key+0x16a>
        available_slots++;
 8001682:	7cbb      	ldrb	r3, [r7, #18]
 8001684:	3301      	adds	r3, #1
 8001686:	74bb      	strb	r3, [r7, #18]
    for (uint8_t i = start_slot; i < 6; i++) {
 8001688:	7c7b      	ldrb	r3, [r7, #17]
 800168a:	3301      	adds	r3, #1
 800168c:	747b      	strb	r3, [r7, #17]
 800168e:	7c7b      	ldrb	r3, [r7, #17]
 8001690:	2b05      	cmp	r3, #5
 8001692:	d9f1      	bls.n	8001678 <hid_press_key+0x14c>
 8001694:	e000      	b.n	8001698 <hid_press_key+0x16c>
      } else {
        break; // Stop counting if we hit a non-empty slot
 8001696:	bf00      	nop
      }
    }

    // Only proceed if we have enough slots for the non-modifier keys
    if (available_slots >= macro_count) {
 8001698:	7cba      	ldrb	r2, [r7, #18]
 800169a:	7dbb      	ldrb	r3, [r7, #22]
 800169c:	429a      	cmp	r2, r3
 800169e:	d350      	bcc.n	8001742 <hid_press_key+0x216>
      // Process macro values
      uint8_t macro_idx = 0;
 80016a0:	2300      	movs	r3, #0
 80016a2:	743b      	strb	r3, [r7, #16]
      for (uint8_t i = start_slot; i < 6 && macro_idx < MAX_MACRO_LEN; macro_idx++) {
 80016a4:	7d3b      	ldrb	r3, [r7, #20]
 80016a6:	73fb      	strb	r3, [r7, #15]
 80016a8:	e042      	b.n	8001730 <hid_press_key+0x204>
        if (key->layers[layer].value[macro_idx] != ____) {
 80016aa:	78fa      	ldrb	r2, [r7, #3]
 80016ac:	7c3b      	ldrb	r3, [r7, #16]
 80016ae:	6879      	ldr	r1, [r7, #4]
 80016b0:	0058      	lsls	r0, r3, #1
 80016b2:	4613      	mov	r3, r2
 80016b4:	00db      	lsls	r3, r3, #3
 80016b6:	4413      	add	r3, r2
 80016b8:	4403      	add	r3, r0
 80016ba:	440b      	add	r3, r1
 80016bc:	88db      	ldrh	r3, [r3, #6]
 80016be:	b29b      	uxth	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d032      	beq.n	800172a <hid_press_key+0x1fe>
          // Check if this is a modifier
          uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[macro_idx]);
 80016c4:	78fa      	ldrb	r2, [r7, #3]
 80016c6:	7c3b      	ldrb	r3, [r7, #16]
 80016c8:	6879      	ldr	r1, [r7, #4]
 80016ca:	0058      	lsls	r0, r3, #1
 80016cc:	4613      	mov	r3, r2
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4413      	add	r3, r2
 80016d2:	4403      	add	r3, r0
 80016d4:	440b      	add	r3, r1
 80016d6:	88db      	ldrh	r3, [r3, #6]
 80016d8:	b29b      	uxth	r3, r3
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 f946 	bl	800196c <get_bitmask_for_modifier>
 80016e0:	4603      	mov	r3, r0
 80016e2:	73bb      	strb	r3, [r7, #14]
          if (bitmask) {
 80016e4:	7bbb      	ldrb	r3, [r7, #14]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d00a      	beq.n	8001700 <hid_press_key+0x1d4>
            // Set modifier bit
            modifiers |= bitmask;
 80016ea:	4b18      	ldr	r3, [pc, #96]	@ (800174c <hid_press_key+0x220>)
 80016ec:	781a      	ldrb	r2, [r3, #0]
 80016ee:	7bbb      	ldrb	r3, [r7, #14]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	b2da      	uxtb	r2, r3
 80016f4:	4b15      	ldr	r3, [pc, #84]	@ (800174c <hid_press_key+0x220>)
 80016f6:	701a      	strb	r2, [r3, #0]
            should_send_keyboard_report = 1;
 80016f8:	4b15      	ldr	r3, [pc, #84]	@ (8001750 <hid_press_key+0x224>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
 80016fe:	e014      	b.n	800172a <hid_press_key+0x1fe>
          } else {
            // Place non-modifier key in keycodes array
            keycodes[i] = key->layers[layer].value[macro_idx];
 8001700:	78fa      	ldrb	r2, [r7, #3]
 8001702:	7c3b      	ldrb	r3, [r7, #16]
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	0058      	lsls	r0, r3, #1
 8001708:	4613      	mov	r3, r2
 800170a:	00db      	lsls	r3, r3, #3
 800170c:	4413      	add	r3, r2
 800170e:	4403      	add	r3, r0
 8001710:	440b      	add	r3, r1
 8001712:	88db      	ldrh	r3, [r3, #6]
 8001714:	b29a      	uxth	r2, r3
 8001716:	7bfb      	ldrb	r3, [r7, #15]
 8001718:	b2d1      	uxtb	r1, r2
 800171a:	4a0e      	ldr	r2, [pc, #56]	@ (8001754 <hid_press_key+0x228>)
 800171c:	54d1      	strb	r1, [r2, r3]
            i++; // Move to next keycodes slot
 800171e:	7bfb      	ldrb	r3, [r7, #15]
 8001720:	3301      	adds	r3, #1
 8001722:	73fb      	strb	r3, [r7, #15]
            should_send_keyboard_report = 1;
 8001724:	4b0a      	ldr	r3, [pc, #40]	@ (8001750 <hid_press_key+0x224>)
 8001726:	2201      	movs	r2, #1
 8001728:	701a      	strb	r2, [r3, #0]
      for (uint8_t i = start_slot; i < 6 && macro_idx < MAX_MACRO_LEN; macro_idx++) {
 800172a:	7c3b      	ldrb	r3, [r7, #16]
 800172c:	3301      	adds	r3, #1
 800172e:	743b      	strb	r3, [r7, #16]
 8001730:	7bfb      	ldrb	r3, [r7, #15]
 8001732:	2b05      	cmp	r3, #5
 8001734:	d805      	bhi.n	8001742 <hid_press_key+0x216>
 8001736:	7c3b      	ldrb	r3, [r7, #16]
 8001738:	2b03      	cmp	r3, #3
 800173a:	d9b6      	bls.n	80016aa <hid_press_key+0x17e>
          }
        }
      }
    }
    break;
 800173c:	e001      	b.n	8001742 <hid_press_key+0x216>

  default:
    break;
 800173e:	bf00      	nop
 8001740:	e000      	b.n	8001744 <hid_press_key+0x218>
    break;
 8001742:	bf00      	nop
  }
}
 8001744:	bf00      	nop
 8001746:	3718      	adds	r7, #24
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200000f7 	.word	0x200000f7
 8001750:	200000f6 	.word	0x200000f6
 8001754:	200000f8 	.word	0x200000f8
 8001758:	200000fe 	.word	0x200000fe
 800175c:	200000f5 	.word	0x200000f5

08001760 <hid_release_key>:

void hid_release_key(struct key *key, uint8_t layer) {
 8001760:	b590      	push	{r4, r7, lr}
 8001762:	b085      	sub	sp, #20
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 800176c:	78fa      	ldrb	r2, [r7, #3]
 800176e:	6879      	ldr	r1, [r7, #4]
 8001770:	4613      	mov	r3, r2
 8001772:	00db      	lsls	r3, r3, #3
 8001774:	4413      	add	r3, r2
 8001776:	440b      	add	r3, r1
 8001778:	3305      	adds	r3, #5
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	3b01      	subs	r3, #1
 800177e:	2b03      	cmp	r3, #3
 8001780:	f200 80a7 	bhi.w	80018d2 <hid_release_key+0x172>
 8001784:	a201      	add	r2, pc, #4	@ (adr r2, 800178c <hid_release_key+0x2c>)
 8001786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178a:	bf00      	nop
 800178c:	080017cb 	.word	0x080017cb
 8001790:	0800179d 	.word	0x0800179d
 8001794:	0800180d 	.word	0x0800180d
 8001798:	0800181b 	.word	0x0800181b
  case KEY_TYPE_MODIFIER:
    modifiers &= ~key->layers[layer].value[0];
 800179c:	78fa      	ldrb	r2, [r7, #3]
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4413      	add	r3, r2
 80017a6:	440b      	add	r3, r1
 80017a8:	88db      	ldrh	r3, [r3, #6]
 80017aa:	b29b      	uxth	r3, r3
 80017ac:	b25b      	sxtb	r3, r3
 80017ae:	43db      	mvns	r3, r3
 80017b0:	b25a      	sxtb	r2, r3
 80017b2:	4b4a      	ldr	r3, [pc, #296]	@ (80018dc <hid_release_key+0x17c>)
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	b25b      	sxtb	r3, r3
 80017b8:	4013      	ands	r3, r2
 80017ba:	b25b      	sxtb	r3, r3
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b47      	ldr	r3, [pc, #284]	@ (80018dc <hid_release_key+0x17c>)
 80017c0:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80017c2:	4b47      	ldr	r3, [pc, #284]	@ (80018e0 <hid_release_key+0x180>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	701a      	strb	r2, [r3, #0]
    break;
 80017c8:	e084      	b.n	80018d4 <hid_release_key+0x174>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 80017ca:	2300      	movs	r3, #0
 80017cc:	73fb      	strb	r3, [r7, #15]
 80017ce:	e019      	b.n	8001804 <hid_release_key+0xa4>
      if (keycodes[i] == key->layers[layer].value[0]) {
 80017d0:	7bfb      	ldrb	r3, [r7, #15]
 80017d2:	4a44      	ldr	r2, [pc, #272]	@ (80018e4 <hid_release_key+0x184>)
 80017d4:	5cd3      	ldrb	r3, [r2, r3]
 80017d6:	4618      	mov	r0, r3
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4413      	add	r3, r2
 80017e2:	440b      	add	r3, r1
 80017e4:	88db      	ldrh	r3, [r3, #6]
 80017e6:	b29b      	uxth	r3, r3
 80017e8:	4298      	cmp	r0, r3
 80017ea:	d108      	bne.n	80017fe <hid_release_key+0x9e>
        keycodes[i] = 0;
 80017ec:	7bfb      	ldrb	r3, [r7, #15]
 80017ee:	4a3d      	ldr	r2, [pc, #244]	@ (80018e4 <hid_release_key+0x184>)
 80017f0:	2100      	movs	r1, #0
 80017f2:	54d1      	strb	r1, [r2, r3]
        // if (is_screaming) {
        //   is_screaming = 0;
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 80017f4:	4b3a      	ldr	r3, [pc, #232]	@ (80018e0 <hid_release_key+0x180>)
 80017f6:	2201      	movs	r2, #1
 80017f8:	701a      	strb	r2, [r3, #0]
        break;
 80017fa:	bf00      	nop
      }
    }
    break;
 80017fc:	e06a      	b.n	80018d4 <hid_release_key+0x174>
    for (uint8_t i = 0; i < 6; i++) {
 80017fe:	7bfb      	ldrb	r3, [r7, #15]
 8001800:	3301      	adds	r3, #1
 8001802:	73fb      	strb	r3, [r7, #15]
 8001804:	7bfb      	ldrb	r3, [r7, #15]
 8001806:	2b05      	cmp	r3, #5
 8001808:	d9e2      	bls.n	80017d0 <hid_release_key+0x70>
    break;
 800180a:	e063      	b.n	80018d4 <hid_release_key+0x174>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = 0;
 800180c:	4b36      	ldr	r3, [pc, #216]	@ (80018e8 <hid_release_key+0x188>)
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 8001812:	4b36      	ldr	r3, [pc, #216]	@ (80018ec <hid_release_key+0x18c>)
 8001814:	2201      	movs	r2, #1
 8001816:	701a      	strb	r2, [r3, #0]
    break;
 8001818:	e05c      	b.n	80018d4 <hid_release_key+0x174>

  case KEY_TYPE_MACRO:
    // Process macro values for release
    for (uint8_t macro_idx = 0; macro_idx < MAX_MACRO_LEN; macro_idx++) {
 800181a:	2300      	movs	r3, #0
 800181c:	73bb      	strb	r3, [r7, #14]
 800181e:	e054      	b.n	80018ca <hid_release_key+0x16a>
      if (key->layers[layer].value[macro_idx] != ____) {
 8001820:	78fa      	ldrb	r2, [r7, #3]
 8001822:	7bbb      	ldrb	r3, [r7, #14]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	0058      	lsls	r0, r3, #1
 8001828:	4613      	mov	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	4413      	add	r3, r2
 800182e:	4403      	add	r3, r0
 8001830:	440b      	add	r3, r1
 8001832:	88db      	ldrh	r3, [r3, #6]
 8001834:	b29b      	uxth	r3, r3
 8001836:	2b00      	cmp	r3, #0
 8001838:	d044      	beq.n	80018c4 <hid_release_key+0x164>
        // Check if this is a modifier
        uint8_t bitmask = get_bitmask_for_modifier(key->layers[layer].value[macro_idx]);
 800183a:	78fa      	ldrb	r2, [r7, #3]
 800183c:	7bbb      	ldrb	r3, [r7, #14]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	0058      	lsls	r0, r3, #1
 8001842:	4613      	mov	r3, r2
 8001844:	00db      	lsls	r3, r3, #3
 8001846:	4413      	add	r3, r2
 8001848:	4403      	add	r3, r0
 800184a:	440b      	add	r3, r1
 800184c:	88db      	ldrh	r3, [r3, #6]
 800184e:	b29b      	uxth	r3, r3
 8001850:	4618      	mov	r0, r3
 8001852:	f000 f88b 	bl	800196c <get_bitmask_for_modifier>
 8001856:	4603      	mov	r3, r0
 8001858:	733b      	strb	r3, [r7, #12]
        if (bitmask) {
 800185a:	7b3b      	ldrb	r3, [r7, #12]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d00f      	beq.n	8001880 <hid_release_key+0x120>
          // Clear modifier bit
          modifiers &= ~bitmask;
 8001860:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8001864:	43db      	mvns	r3, r3
 8001866:	b25a      	sxtb	r2, r3
 8001868:	4b1c      	ldr	r3, [pc, #112]	@ (80018dc <hid_release_key+0x17c>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b25b      	sxtb	r3, r3
 800186e:	4013      	ands	r3, r2
 8001870:	b25b      	sxtb	r3, r3
 8001872:	b2da      	uxtb	r2, r3
 8001874:	4b19      	ldr	r3, [pc, #100]	@ (80018dc <hid_release_key+0x17c>)
 8001876:	701a      	strb	r2, [r3, #0]
          should_send_keyboard_report = 1;
 8001878:	4b19      	ldr	r3, [pc, #100]	@ (80018e0 <hid_release_key+0x180>)
 800187a:	2201      	movs	r2, #1
 800187c:	701a      	strb	r2, [r3, #0]
 800187e:	e021      	b.n	80018c4 <hid_release_key+0x164>
        } else {
          // Remove non-modifier key from keycodes array
          for (uint8_t i = 0; i < 6; i++) {
 8001880:	2300      	movs	r3, #0
 8001882:	737b      	strb	r3, [r7, #13]
 8001884:	e01b      	b.n	80018be <hid_release_key+0x15e>
            if (keycodes[i] == key->layers[layer].value[macro_idx]) {
 8001886:	7b7b      	ldrb	r3, [r7, #13]
 8001888:	4a16      	ldr	r2, [pc, #88]	@ (80018e4 <hid_release_key+0x184>)
 800188a:	5cd3      	ldrb	r3, [r2, r3]
 800188c:	461c      	mov	r4, r3
 800188e:	78fa      	ldrb	r2, [r7, #3]
 8001890:	7bbb      	ldrb	r3, [r7, #14]
 8001892:	6879      	ldr	r1, [r7, #4]
 8001894:	0058      	lsls	r0, r3, #1
 8001896:	4613      	mov	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4413      	add	r3, r2
 800189c:	4403      	add	r3, r0
 800189e:	440b      	add	r3, r1
 80018a0:	88db      	ldrh	r3, [r3, #6]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	429c      	cmp	r4, r3
 80018a6:	d107      	bne.n	80018b8 <hid_release_key+0x158>
              keycodes[i] = 0;
 80018a8:	7b7b      	ldrb	r3, [r7, #13]
 80018aa:	4a0e      	ldr	r2, [pc, #56]	@ (80018e4 <hid_release_key+0x184>)
 80018ac:	2100      	movs	r1, #0
 80018ae:	54d1      	strb	r1, [r2, r3]
              should_send_keyboard_report = 1;
 80018b0:	4b0b      	ldr	r3, [pc, #44]	@ (80018e0 <hid_release_key+0x180>)
 80018b2:	2201      	movs	r2, #1
 80018b4:	701a      	strb	r2, [r3, #0]
              break;
 80018b6:	e005      	b.n	80018c4 <hid_release_key+0x164>
          for (uint8_t i = 0; i < 6; i++) {
 80018b8:	7b7b      	ldrb	r3, [r7, #13]
 80018ba:	3301      	adds	r3, #1
 80018bc:	737b      	strb	r3, [r7, #13]
 80018be:	7b7b      	ldrb	r3, [r7, #13]
 80018c0:	2b05      	cmp	r3, #5
 80018c2:	d9e0      	bls.n	8001886 <hid_release_key+0x126>
    for (uint8_t macro_idx = 0; macro_idx < MAX_MACRO_LEN; macro_idx++) {
 80018c4:	7bbb      	ldrb	r3, [r7, #14]
 80018c6:	3301      	adds	r3, #1
 80018c8:	73bb      	strb	r3, [r7, #14]
 80018ca:	7bbb      	ldrb	r3, [r7, #14]
 80018cc:	2b03      	cmp	r3, #3
 80018ce:	d9a7      	bls.n	8001820 <hid_release_key+0xc0>
            }
          }
        }
      }
    }
    break;
 80018d0:	e000      	b.n	80018d4 <hid_release_key+0x174>

  default:
    break;
 80018d2:	bf00      	nop
  }
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd90      	pop	{r4, r7, pc}
 80018dc:	200000f7 	.word	0x200000f7
 80018e0:	200000f6 	.word	0x200000f6
 80018e4:	200000f8 	.word	0x200000f8
 80018e8:	200000fe 	.word	0x200000fe
 80018ec:	200000f5 	.word	0x200000f5

080018f0 <tud_hid_set_protocol_cb>:
// Invoked when received SET_PROTOCOL request
// protocol is either HID_PROTOCOL_BOOT (0) or HID_PROTOCOL_REPORT (1)

/// CALLBACKS

void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	460a      	mov	r2, r1
 80018fa:	71fb      	strb	r3, [r7, #7]
 80018fc:	4613      	mov	r3, r2
 80018fe:	71bb      	strb	r3, [r7, #6]
  (void)instance;
  (void)protocol;
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190a:	4770      	bx	lr

0800190c <tud_hid_report_complete_cb>:

void tud_hid_report_complete_cb(uint8_t instance, uint8_t const *report, uint16_t len) {
 800190c:	b480      	push	{r7}
 800190e:	b083      	sub	sp, #12
 8001910:	af00      	add	r7, sp, #0
 8001912:	4603      	mov	r3, r0
 8001914:	6039      	str	r1, [r7, #0]
 8001916:	71fb      	strb	r3, [r7, #7]
 8001918:	4613      	mov	r3, r2
 800191a:	80bb      	strh	r3, [r7, #4]
  (void)instance;
  (void)len;
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr

08001928 <tud_hid_get_report_cb>:
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t *buffer, uint16_t reqlen) {
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	603b      	str	r3, [r7, #0]
 8001930:	4603      	mov	r3, r0
 8001932:	71fb      	strb	r3, [r7, #7]
 8001934:	460b      	mov	r3, r1
 8001936:	71bb      	strb	r3, [r7, #6]
 8001938:	4613      	mov	r3, r2
 800193a:	717b      	strb	r3, [r7, #5]
  (void)instance;
  (void)report_type;
  (void)buffer;
  (void)reqlen;

  return 0;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr

0800194a <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const *buffer, uint16_t bufsize) {
 800194a:	b480      	push	{r7}
 800194c:	b083      	sub	sp, #12
 800194e:	af00      	add	r7, sp, #0
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	4603      	mov	r3, r0
 8001954:	71fb      	strb	r3, [r7, #7]
 8001956:	460b      	mov	r3, r1
 8001958:	71bb      	strb	r3, [r7, #6]
 800195a:	4613      	mov	r3, r2
 800195c:	717b      	strb	r3, [r7, #5]
  (void)instance;
  (void)report_type;
  (void)buffer;
  (void)bufsize;
}
 800195e:	bf00      	nop
 8001960:	370c      	adds	r7, #12
 8001962:	46bd      	mov	sp, r7
 8001964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001968:	4770      	bx	lr
	...

0800196c <get_bitmask_for_modifier>:
struct user_config keyboard_user_config = {0};

uint32_t keyboard_last_cycle_duration = 0;
extern uint8_t key_init_state; // Flag to check if keys are initialized
static uint8_t key_triggered = 0;
uint8_t get_bitmask_for_modifier(uint8_t keycode) {
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	71fb      	strb	r3, [r7, #7]
  switch (keycode) {
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	3be0      	subs	r3, #224	@ 0xe0
 800197a:	2b07      	cmp	r3, #7
 800197c:	d822      	bhi.n	80019c4 <get_bitmask_for_modifier+0x58>
 800197e:	a201      	add	r2, pc, #4	@ (adr r2, 8001984 <get_bitmask_for_modifier+0x18>)
 8001980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001984:	080019a5 	.word	0x080019a5
 8001988:	080019a9 	.word	0x080019a9
 800198c:	080019ad 	.word	0x080019ad
 8001990:	080019b1 	.word	0x080019b1
 8001994:	080019b5 	.word	0x080019b5
 8001998:	080019b9 	.word	0x080019b9
 800199c:	080019bd 	.word	0x080019bd
 80019a0:	080019c1 	.word	0x080019c1
  case HID_KEY_CONTROL_LEFT:
    return 0b00000001;
 80019a4:	2301      	movs	r3, #1
 80019a6:	e00e      	b.n	80019c6 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_LEFT:
    return 0b00000010;
 80019a8:	2302      	movs	r3, #2
 80019aa:	e00c      	b.n	80019c6 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_LEFT:
    return 0b00000100;
 80019ac:	2304      	movs	r3, #4
 80019ae:	e00a      	b.n	80019c6 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_LEFT:
    return 0b00001000;
 80019b0:	2308      	movs	r3, #8
 80019b2:	e008      	b.n	80019c6 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_CONTROL_RIGHT:
    return 0b00010000;
 80019b4:	2310      	movs	r3, #16
 80019b6:	e006      	b.n	80019c6 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_RIGHT:
    return 0b00100000;
 80019b8:	2320      	movs	r3, #32
 80019ba:	e004      	b.n	80019c6 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_RIGHT:
    return 0b01000000;
 80019bc:	2340      	movs	r3, #64	@ 0x40
 80019be:	e002      	b.n	80019c6 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_RIGHT:
    return 0b10000000;
 80019c0:	2380      	movs	r3, #128	@ 0x80
 80019c2:	e000      	b.n	80019c6 <get_bitmask_for_modifier+0x5a>
  default:
    return 0b00000000;
 80019c4:	2300      	movs	r3, #0
  }
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop

080019d4 <get_usage_consumer_control>:

uint16_t get_usage_consumer_control(uint16_t value) {
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	80fb      	strh	r3, [r7, #6]
  if (value > 0xFF) {
 80019de:	88fb      	ldrh	r3, [r7, #6]
 80019e0:	2bff      	cmp	r3, #255	@ 0xff
 80019e2:	d904      	bls.n	80019ee <get_usage_consumer_control+0x1a>
    return value & 0b0111111111111111;
 80019e4:	88fb      	ldrh	r3, [r7, #6]
 80019e6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	e000      	b.n	80019f0 <get_usage_consumer_control+0x1c>
  } else {
    return 0;
 80019ee:	2300      	movs	r3, #0
  }
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	370c      	adds	r7, #12
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr

080019fc <init_key>:

void init_key(uint8_t adc_channel, uint8_t amux_channel, uint8_t row, uint8_t column) {
 80019fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4604      	mov	r4, r0
 8001a04:	4608      	mov	r0, r1
 8001a06:	4611      	mov	r1, r2
 8001a08:	461a      	mov	r2, r3
 8001a0a:	4623      	mov	r3, r4
 8001a0c:	71fb      	strb	r3, [r7, #7]
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71bb      	strb	r3, [r7, #6]
 8001a12:	460b      	mov	r3, r1
 8001a14:	717b      	strb	r3, [r7, #5]
 8001a16:	4613      	mov	r3, r2
 8001a18:	713b      	strb	r3, [r7, #4]

  struct key *key = &keyboard_keys[adc_channel][amux_channel];
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	79ba      	ldrb	r2, [r7, #6]
 8001a1e:	2132      	movs	r1, #50	@ 0x32
 8001a20:	fb01 f202 	mul.w	r2, r1, r2
 8001a24:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8001a28:	fb01 f303 	mul.w	r3, r1, r3
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4a88      	ldr	r2, [pc, #544]	@ (8001c50 <init_key+0x254>)
 8001a30:	4413      	add	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]

  key->is_enabled = 1;
 8001a34:	693b      	ldr	r3, [r7, #16]
 8001a36:	2201      	movs	r2, #1
 8001a38:	701a      	strb	r2, [r3, #0]
  key->is_idle = 0;
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	711a      	strb	r2, [r3, #4]
  key->row = row;
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	797a      	ldrb	r2, [r7, #5]
 8001a44:	705a      	strb	r2, [r3, #1]
  key->column = column;
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	793a      	ldrb	r2, [r7, #4]
 8001a4a:	709a      	strb	r2, [r3, #2]

  key->calibration.cycles_count = 0;
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	75da      	strb	r2, [r3, #23]
 8001a52:	2200      	movs	r2, #0
 8001a54:	761a      	strb	r2, [r3, #24]
  key->calibration.idle_value = IDLE_VALUE_APPROX;
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	2200      	movs	r2, #0
 8001a5a:	f042 0208 	orr.w	r2, r2, #8
 8001a5e:	765a      	strb	r2, [r3, #25]
 8001a60:	2200      	movs	r2, #0
 8001a62:	f042 0207 	orr.w	r2, r2, #7
 8001a66:	769a      	strb	r2, [r3, #26]
  key->calibration.max_distance = MAX_DISTANCE_APPROX;
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	f062 020b 	orn	r2, r2, #11
 8001a70:	76da      	strb	r2, [r3, #27]
 8001a72:	2200      	movs	r2, #0
 8001a74:	f042 0201 	orr.w	r2, r2, #1
 8001a78:	771a      	strb	r2, [r3, #28]

  key->actuation.status = STATUS_RESET;
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
  key->actuation.trigger_offset = keyboard_user_config.trigger_offset;
 8001a82:	4b74      	ldr	r3, [pc, #464]	@ (8001c54 <init_key+0x258>)
 8001a84:	785a      	ldrb	r2, [r3, #1]
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  //  if ( (row == 1) && (column == 0)) {
  //	  key->actuation.trigger_offset = 42;
  //   }
  key->actuation.reset_offset = keyboard_user_config.trigger_offset - keyboard_user_config.reset_threshold;
 8001a8c:	4b71      	ldr	r3, [pc, #452]	@ (8001c54 <init_key+0x258>)
 8001a8e:	785a      	ldrb	r2, [r3, #1]
 8001a90:	4b70      	ldr	r3, [pc, #448]	@ (8001c54 <init_key+0x258>)
 8001a92:	789b      	ldrb	r3, [r3, #2]
 8001a94:	1ad3      	subs	r3, r2, r3
 8001a96:	b2da      	uxtb	r2, r3
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
  key->actuation.rapid_trigger_offset = keyboard_user_config.rapid_trigger_offset;
 8001a9e:	4b6d      	ldr	r3, [pc, #436]	@ (8001c54 <init_key+0x258>)
 8001aa0:	78da      	ldrb	r2, [r3, #3]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	75fb      	strb	r3, [r7, #23]
 8001aac:	e0c6      	b.n	8001c3c <init_key+0x240>
    if (keyboard_user_config.keymaps[i][row][column][0] != ____) {
 8001aae:	7df9      	ldrb	r1, [r7, #23]
 8001ab0:	797a      	ldrb	r2, [r7, #5]
 8001ab2:	793b      	ldrb	r3, [r7, #4]
 8001ab4:	4867      	ldr	r0, [pc, #412]	@ (8001c54 <init_key+0x258>)
 8001ab6:	0089      	lsls	r1, r1, #2
 8001ab8:	440a      	add	r2, r1
 8001aba:	0092      	lsls	r2, r2, #2
 8001abc:	4413      	add	r3, r2
 8001abe:	00db      	lsls	r3, r3, #3
 8001ac0:	4403      	add	r3, r0
 8001ac2:	88db      	ldrh	r3, [r3, #6]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	f000 80b6 	beq.w	8001c36 <init_key+0x23a>
      // Check if this is a macro (multiple non-zero elements)
      uint8_t macro_count = 0;
 8001aca:	2300      	movs	r3, #0
 8001acc:	75bb      	strb	r3, [r7, #22]
      for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001ace:	2300      	movs	r3, #0
 8001ad0:	757b      	strb	r3, [r7, #21]
 8001ad2:	e015      	b.n	8001b00 <init_key+0x104>
        if (keyboard_user_config.keymaps[i][row][column][j] != ____) {
 8001ad4:	7df8      	ldrb	r0, [r7, #23]
 8001ad6:	7979      	ldrb	r1, [r7, #5]
 8001ad8:	793a      	ldrb	r2, [r7, #4]
 8001ada:	7d7b      	ldrb	r3, [r7, #21]
 8001adc:	4c5d      	ldr	r4, [pc, #372]	@ (8001c54 <init_key+0x258>)
 8001ade:	0080      	lsls	r0, r0, #2
 8001ae0:	4401      	add	r1, r0
 8001ae2:	0089      	lsls	r1, r1, #2
 8001ae4:	440a      	add	r2, r1
 8001ae6:	0092      	lsls	r2, r2, #2
 8001ae8:	4413      	add	r3, r2
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	4423      	add	r3, r4
 8001aee:	88db      	ldrh	r3, [r3, #6]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d002      	beq.n	8001afa <init_key+0xfe>
          macro_count++;
 8001af4:	7dbb      	ldrb	r3, [r7, #22]
 8001af6:	3301      	adds	r3, #1
 8001af8:	75bb      	strb	r3, [r7, #22]
      for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001afa:	7d7b      	ldrb	r3, [r7, #21]
 8001afc:	3301      	adds	r3, #1
 8001afe:	757b      	strb	r3, [r7, #21]
 8001b00:	7d7b      	ldrb	r3, [r7, #21]
 8001b02:	2b03      	cmp	r3, #3
 8001b04:	d9e6      	bls.n	8001ad4 <init_key+0xd8>
        }
      }

      if (macro_count > 1) {
 8001b06:	7dbb      	ldrb	r3, [r7, #22]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d92b      	bls.n	8001b64 <init_key+0x168>
        // This is a macro - copy all values
        key->layers[i].type = KEY_TYPE_MACRO;
 8001b0c:	7dfa      	ldrb	r2, [r7, #23]
 8001b0e:	6939      	ldr	r1, [r7, #16]
 8001b10:	4613      	mov	r3, r2
 8001b12:	00db      	lsls	r3, r3, #3
 8001b14:	4413      	add	r3, r2
 8001b16:	440b      	add	r3, r1
 8001b18:	3305      	adds	r3, #5
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	701a      	strb	r2, [r3, #0]
        for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001b1e:	2300      	movs	r3, #0
 8001b20:	753b      	strb	r3, [r7, #20]
 8001b22:	e01b      	b.n	8001b5c <init_key+0x160>
          key->layers[i].value[j] = keyboard_user_config.keymaps[i][row][column][j];
 8001b24:	7dfd      	ldrb	r5, [r7, #23]
 8001b26:	797c      	ldrb	r4, [r7, #5]
 8001b28:	7939      	ldrb	r1, [r7, #4]
 8001b2a:	7d3b      	ldrb	r3, [r7, #20]
 8001b2c:	7dfa      	ldrb	r2, [r7, #23]
 8001b2e:	7d38      	ldrb	r0, [r7, #20]
 8001b30:	4e48      	ldr	r6, [pc, #288]	@ (8001c54 <init_key+0x258>)
 8001b32:	00ad      	lsls	r5, r5, #2
 8001b34:	442c      	add	r4, r5
 8001b36:	00a4      	lsls	r4, r4, #2
 8001b38:	4421      	add	r1, r4
 8001b3a:	0089      	lsls	r1, r1, #2
 8001b3c:	440b      	add	r3, r1
 8001b3e:	005b      	lsls	r3, r3, #1
 8001b40:	4433      	add	r3, r6
 8001b42:	88dc      	ldrh	r4, [r3, #6]
 8001b44:	6939      	ldr	r1, [r7, #16]
 8001b46:	0040      	lsls	r0, r0, #1
 8001b48:	4613      	mov	r3, r2
 8001b4a:	00db      	lsls	r3, r3, #3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	4403      	add	r3, r0
 8001b50:	440b      	add	r3, r1
 8001b52:	4622      	mov	r2, r4
 8001b54:	80da      	strh	r2, [r3, #6]
        for (uint8_t j = 0; j < MAX_MACRO_LEN; j++) {
 8001b56:	7d3b      	ldrb	r3, [r7, #20]
 8001b58:	3301      	adds	r3, #1
 8001b5a:	753b      	strb	r3, [r7, #20]
 8001b5c:	7d3b      	ldrb	r3, [r7, #20]
 8001b5e:	2b03      	cmp	r3, #3
 8001b60:	d9e0      	bls.n	8001b24 <init_key+0x128>
 8001b62:	e068      	b.n	8001c36 <init_key+0x23a>
        }
      } else {
        // Single key - check type
        uint16_t usage_consumer_control = get_usage_consumer_control(
 8001b64:	7df9      	ldrb	r1, [r7, #23]
 8001b66:	797a      	ldrb	r2, [r7, #5]
 8001b68:	793b      	ldrb	r3, [r7, #4]
 8001b6a:	483a      	ldr	r0, [pc, #232]	@ (8001c54 <init_key+0x258>)
 8001b6c:	0089      	lsls	r1, r1, #2
 8001b6e:	440a      	add	r2, r1
 8001b70:	0092      	lsls	r2, r2, #2
 8001b72:	4413      	add	r3, r2
 8001b74:	00db      	lsls	r3, r3, #3
 8001b76:	4403      	add	r3, r0
 8001b78:	88db      	ldrh	r3, [r3, #6]
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f7ff ff2a 	bl	80019d4 <get_usage_consumer_control>
 8001b80:	4603      	mov	r3, r0
 8001b82:	81fb      	strh	r3, [r7, #14]
            keyboard_user_config.keymaps[i][row][column][0]);
        if (usage_consumer_control) {
 8001b84:	89fb      	ldrh	r3, [r7, #14]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d011      	beq.n	8001bae <init_key+0x1b2>
          key->layers[i].type = KEY_TYPE_CONSUMER_CONTROL;
 8001b8a:	7dfa      	ldrb	r2, [r7, #23]
 8001b8c:	6939      	ldr	r1, [r7, #16]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	4413      	add	r3, r2
 8001b94:	440b      	add	r3, r1
 8001b96:	3305      	adds	r3, #5
 8001b98:	2203      	movs	r2, #3
 8001b9a:	701a      	strb	r2, [r3, #0]
          key->layers[i].value[0] = usage_consumer_control;
 8001b9c:	7dfa      	ldrb	r2, [r7, #23]
 8001b9e:	6939      	ldr	r1, [r7, #16]
 8001ba0:	4613      	mov	r3, r2
 8001ba2:	00db      	lsls	r3, r3, #3
 8001ba4:	4413      	add	r3, r2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	89fa      	ldrh	r2, [r7, #14]
 8001baa:	80da      	strh	r2, [r3, #6]
 8001bac:	e043      	b.n	8001c36 <init_key+0x23a>
        } else {
          uint8_t bitmask = get_bitmask_for_modifier(
              keyboard_user_config.keymaps[i][row][column][0]);
 8001bae:	7df9      	ldrb	r1, [r7, #23]
 8001bb0:	797a      	ldrb	r2, [r7, #5]
 8001bb2:	793b      	ldrb	r3, [r7, #4]
 8001bb4:	4827      	ldr	r0, [pc, #156]	@ (8001c54 <init_key+0x258>)
 8001bb6:	0089      	lsls	r1, r1, #2
 8001bb8:	440a      	add	r2, r1
 8001bba:	0092      	lsls	r2, r2, #2
 8001bbc:	4413      	add	r3, r2
 8001bbe:	00db      	lsls	r3, r3, #3
 8001bc0:	4403      	add	r3, r0
 8001bc2:	88db      	ldrh	r3, [r3, #6]
          uint8_t bitmask = get_bitmask_for_modifier(
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fed0 	bl	800196c <get_bitmask_for_modifier>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	737b      	strb	r3, [r7, #13]
          if (bitmask) {
 8001bd0:	7b7b      	ldrb	r3, [r7, #13]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d013      	beq.n	8001bfe <init_key+0x202>
            key->layers[i].type = KEY_TYPE_MODIFIER;
 8001bd6:	7dfa      	ldrb	r2, [r7, #23]
 8001bd8:	6939      	ldr	r1, [r7, #16]
 8001bda:	4613      	mov	r3, r2
 8001bdc:	00db      	lsls	r3, r3, #3
 8001bde:	4413      	add	r3, r2
 8001be0:	440b      	add	r3, r1
 8001be2:	3305      	adds	r3, #5
 8001be4:	2202      	movs	r2, #2
 8001be6:	701a      	strb	r2, [r3, #0]
            key->layers[i].value[0] = bitmask;
 8001be8:	7dfa      	ldrb	r2, [r7, #23]
 8001bea:	7b7b      	ldrb	r3, [r7, #13]
 8001bec:	b298      	uxth	r0, r3
 8001bee:	6939      	ldr	r1, [r7, #16]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	4413      	add	r3, r2
 8001bf6:	440b      	add	r3, r1
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	80da      	strh	r2, [r3, #6]
 8001bfc:	e01b      	b.n	8001c36 <init_key+0x23a>
          } else {
            key->layers[i].type = KEY_TYPE_NORMAL;
 8001bfe:	7dfa      	ldrb	r2, [r7, #23]
 8001c00:	6939      	ldr	r1, [r7, #16]
 8001c02:	4613      	mov	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4413      	add	r3, r2
 8001c08:	440b      	add	r3, r1
 8001c0a:	3305      	adds	r3, #5
 8001c0c:	2201      	movs	r2, #1
 8001c0e:	701a      	strb	r2, [r3, #0]
            key->layers[i].value[0] =
                keyboard_user_config.keymaps[i][row][column][0];
 8001c10:	7df8      	ldrb	r0, [r7, #23]
 8001c12:	7979      	ldrb	r1, [r7, #5]
 8001c14:	793b      	ldrb	r3, [r7, #4]
            key->layers[i].value[0] =
 8001c16:	7dfa      	ldrb	r2, [r7, #23]
                keyboard_user_config.keymaps[i][row][column][0];
 8001c18:	4c0e      	ldr	r4, [pc, #56]	@ (8001c54 <init_key+0x258>)
 8001c1a:	0080      	lsls	r0, r0, #2
 8001c1c:	4401      	add	r1, r0
 8001c1e:	0089      	lsls	r1, r1, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4423      	add	r3, r4
 8001c26:	88d8      	ldrh	r0, [r3, #6]
            key->layers[i].value[0] =
 8001c28:	6939      	ldr	r1, [r7, #16]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	00db      	lsls	r3, r3, #3
 8001c2e:	4413      	add	r3, r2
 8001c30:	440b      	add	r3, r1
 8001c32:	4602      	mov	r2, r0
 8001c34:	80da      	strh	r2, [r3, #6]
  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8001c36:	7dfb      	ldrb	r3, [r7, #23]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	75fb      	strb	r3, [r7, #23]
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	f67f af35 	bls.w	8001aae <init_key+0xb2>
          }
        }
      }
    }
  }
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	371c      	adds	r7, #28
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	20000100 	.word	0x20000100
 8001c54:	20000420 	.word	0x20000420

08001c58 <update_key_state>:

uint8_t update_key_state(struct key *key) {
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b088      	sub	sp, #32
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  struct state state;

  // Get a reading
  state.value = keyboard_user_config.reverse_magnet_pole ? 4095 - keyboard_read_adc() : keyboard_read_adc();
 8001c60:	4bab      	ldr	r3, [pc, #684]	@ (8001f10 <update_key_state+0x2b8>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d007      	beq.n	8001c78 <update_key_state+0x20>
 8001c68:	f000 fda4 	bl	80027b4 <keyboard_read_adc>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8001c72:	330f      	adds	r3, #15
 8001c74:	b29b      	uxth	r3, r3
 8001c76:	e002      	b.n	8001c7e <update_key_state+0x26>
 8001c78:	f000 fd9c 	bl	80027b4 <keyboard_read_adc>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	813b      	strh	r3, [r7, #8]

  if (key->calibration.cycles_count < CALIBRATION_CYCLES) {
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f8b3 3017 	ldrh.w	r3, [r3, #23]
 8001c86:	b29b      	uxth	r3, r3
 8001c88:	2b13      	cmp	r3, #19
 8001c8a:	d82f      	bhi.n	8001cec <update_key_state+0x94>
    // Calibrate idle value
    float delta = 0.6;
 8001c8c:	4ba1      	ldr	r3, [pc, #644]	@ (8001f14 <update_key_state+0x2bc>)
 8001c8e:	617b      	str	r3, [r7, #20]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8001c90:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c94:	edd7 7a05 	vldr	s15, [r7, #20]
 8001c98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c9c:	893b      	ldrh	r3, [r7, #8]
 8001c9e:	ee07 3a90 	vmov	s15, r3
 8001ca2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ca6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8001cb0:	b29b      	uxth	r3, r3
 8001cb2:	ee07 3a90 	vmov	s15, r3
 8001cb6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001cba:	edd7 7a05 	vldr	s15, [r7, #20]
 8001cbe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001cc2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001cca:	ee17 3a90 	vmov	r3, s15
 8001cce:	b29a      	uxth	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	f8a3 2019 	strh.w	r2, [r3, #25]
    key->calibration.cycles_count++;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	f8b3 3017 	ldrh.w	r3, [r3, #23]
 8001cdc:	b29b      	uxth	r3, r3
 8001cde:	3301      	adds	r3, #1
 8001ce0:	b29a      	uxth	r2, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f8a3 2017 	strh.w	r2, [r3, #23]

    return 0;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	e10d      	b.n	8001f08 <update_key_state+0x2b0>
  }

  // Calibrate idle value
  if (state.value > key->calibration.idle_value) {
 8001cec:	893a      	ldrh	r2, [r7, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8001cf4:	b29b      	uxth	r3, r3
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d929      	bls.n	8001d4e <update_key_state+0xf6>
    // opti possible sur float
    float delta = 0.8;
 8001cfa:	4b87      	ldr	r3, [pc, #540]	@ (8001f18 <update_key_state+0x2c0>)
 8001cfc:	61fb      	str	r3, [r7, #28]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8001cfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d02:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d0a:	893b      	ldrh	r3, [r7, #8]
 8001d0c:	ee07 3a90 	vmov	s15, r3
 8001d10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	ee07 3a90 	vmov	s15, r3
 8001d24:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d28:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d2c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d34:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d38:	ee17 3a90 	vmov	r3, s15
 8001d3c:	b29a      	uxth	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f8a3 2019 	strh.w	r2, [r3, #25]
    state.value = key->calibration.idle_value;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	813b      	strh	r3, [r7, #8]
  }

  // Do nothing if key is idle
  if (key->state.distance == 0 && state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f8b3 301f 	ldrh.w	r3, [r3, #31]
 8001d54:	b29b      	uxth	r3, r3
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d117      	bne.n	8001d8a <update_key_state+0x132>
 8001d5a:	893b      	ldrh	r3, [r7, #8]
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	3b0a      	subs	r3, #10
 8001d68:	429a      	cmp	r2, r3
 8001d6a:	db0e      	blt.n	8001d8a <update_key_state+0x132>
    if (key->idle_counter >= IDLE_CYCLES_UNTIL_SLEEP) {
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	78db      	ldrb	r3, [r3, #3]
 8001d70:	2b0e      	cmp	r3, #14
 8001d72:	d904      	bls.n	8001d7e <update_key_state+0x126>
      key->is_idle = 1;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	711a      	strb	r2, [r3, #4]
      return 0;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e0c4      	b.n	8001f08 <update_key_state+0x2b0>
    }
    key->idle_counter++;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	78db      	ldrb	r3, [r3, #3]
 8001d82:	3301      	adds	r3, #1
 8001d84:	b2da      	uxtb	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	70da      	strb	r2, [r3, #3]
  }

  // Get distance from top
  if (state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8001d8a:	893b      	ldrh	r3, [r7, #8]
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8001d94:	b29b      	uxth	r3, r3
 8001d96:	3b0a      	subs	r3, #10
 8001d98:	429a      	cmp	r2, r3
 8001d9a:	db06      	blt.n	8001daa <update_key_state+0x152>
    state.distance = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	817b      	strh	r3, [r7, #10]
    key->actuation.direction_changed_point = 0;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
 8001da8:	e00f      	b.n	8001dca <update_key_state+0x172>
  } else {
    state.distance = key->calibration.idle_value - IDLE_VALUE_OFFSET - state.value;
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	f8b3 3019 	ldrh.w	r3, [r3, #25]
 8001db0:	b29a      	uxth	r2, r3
 8001db2:	893b      	ldrh	r3, [r7, #8]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	b29b      	uxth	r3, r3
 8001db8:	3b0a      	subs	r3, #10
 8001dba:	b29b      	uxth	r3, r3
 8001dbc:	817b      	strh	r3, [r7, #10]
    key->is_idle = 0;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	711a      	strb	r2, [r3, #4]
    key->idle_counter = 0;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	70da      	strb	r2, [r3, #3]
  }

  // Calibrate max distance value
  if (state.distance > key->calibration.max_distance) {
 8001dca:	897a      	ldrh	r2, [r7, #10]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f8b3 301b 	ldrh.w	r3, [r3, #27]
 8001dd2:	b29b      	uxth	r3, r3
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d903      	bls.n	8001de0 <update_key_state+0x188>
    key->calibration.max_distance = state.distance;
 8001dd8:	897a      	ldrh	r2, [r7, #10]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f8a3 201b 	strh.w	r2, [r3, #27]
  }

  // Limit max distance
  if (state.distance >= key->calibration.max_distance - MAX_DISTANCE_OFFSET) {
 8001de0:	897b      	ldrh	r3, [r7, #10]
 8001de2:	461a      	mov	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	f8b3 301b 	ldrh.w	r3, [r3, #27]
 8001dea:	b29b      	uxth	r3, r3
 8001dec:	3b3c      	subs	r3, #60	@ 0x3c
 8001dee:	429a      	cmp	r2, r3
 8001df0:	db04      	blt.n	8001dfc <update_key_state+0x1a4>
    state.distance = key->calibration.max_distance;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f8b3 301b 	ldrh.w	r3, [r3, #27]
 8001df8:	b29b      	uxth	r3, r3
 8001dfa:	817b      	strh	r3, [r7, #10]
  }

  // Map distance in percentages
  state.distance_8bits = (state.distance * 0xff) / key->calibration.max_distance;
 8001dfc:	897b      	ldrh	r3, [r7, #10]
 8001dfe:	461a      	mov	r2, r3
 8001e00:	4613      	mov	r3, r2
 8001e02:	021b      	lsls	r3, r3, #8
 8001e04:	1a9b      	subs	r3, r3, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	f8b2 201b 	ldrh.w	r2, [r2, #27]
 8001e0c:	b292      	uxth	r2, r2
 8001e0e:	fb93 f3f2 	sdiv	r3, r3, r2
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	733b      	strb	r3, [r7, #12]

  float delta = 0.8;
 8001e16:	4b40      	ldr	r3, [pc, #256]	@ (8001f18 <update_key_state+0x2c0>)
 8001e18:	61bb      	str	r3, [r7, #24]
  state.filtered_distance = (1 - delta) * state.distance_8bits + delta * key->state.filtered_distance;
 8001e1a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e1e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e26:	7b3b      	ldrb	r3, [r7, #12]
 8001e28:	ee07 3a90 	vmov	s15, r3
 8001e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	f8d3 3022 	ldr.w	r3, [r3, #34]	@ 0x22
 8001e3a:	edd7 7a06 	vldr	s15, [r7, #24]
 8001e3e:	ee06 3a90 	vmov	s13, r3
 8001e42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4a:	ee17 3a90 	vmov	r3, s15
 8001e4e:	f8c7 300d 	str.w	r3, [r7, #13]
  state.filtered_distance_8bits = state.filtered_distance;
 8001e52:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001e5e:	edc7 7a00 	vstr	s15, [r7]
 8001e62:	783b      	ldrb	r3, [r7, #0]
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	74bb      	strb	r3, [r7, #18]

  // Update velocity
  state.velocity = state.filtered_distance_8bits - key->state.filtered_distance_8bits;
 8001e68:	7cba      	ldrb	r2, [r7, #18]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	b2db      	uxtb	r3, r3
 8001e74:	b25b      	sxtb	r3, r3
 8001e76:	747b      	strb	r3, [r7, #17]

  // Update direction
  if (key->state.velocity > 0 && state.velocity > 0 && key->actuation.direction != GOING_DOWN) {
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	f993 3026 	ldrsb.w	r3, [r3, #38]	@ 0x26
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	dd18      	ble.n	8001eb4 <update_key_state+0x25c>
 8001e82:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	dd14      	ble.n	8001eb4 <update_key_state+0x25c>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d00f      	beq.n	8001eb4 <update_key_state+0x25c>
    key->actuation.direction = GOING_DOWN;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (key->actuation.direction_changed_point != 0) {
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d023      	beq.n	8001eee <update_key_state+0x296>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    if (key->actuation.direction_changed_point != 0) {
 8001eb2:	e01c      	b.n	8001eee <update_key_state+0x296>
    }
  } else if (key->state.velocity < 0 && state.velocity < 0 && key->actuation.direction != GOING_UP) {
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	f993 3026 	ldrsb.w	r3, [r3, #38]	@ 0x26
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	da17      	bge.n	8001eee <update_key_state+0x296>
 8001ebe:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	da13      	bge.n	8001eee <update_key_state+0x296>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00e      	beq.n	8001eee <update_key_state+0x296>
    key->actuation.direction = GOING_UP;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
    if (key->actuation.direction_changed_point != 255) {
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001ede:	2bff      	cmp	r3, #255	@ 0xff
 8001ee0:	d005      	beq.n	8001eee <update_key_state+0x296>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    }
  }

  key->state = state;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	f103 021d 	add.w	r2, r3, #29
 8001ef4:	f107 0308 	add.w	r3, r7, #8
 8001ef8:	cb03      	ldmia	r3!, {r0, r1}
 8001efa:	6010      	str	r0, [r2, #0]
 8001efc:	6051      	str	r1, [r2, #4]
 8001efe:	8819      	ldrh	r1, [r3, #0]
 8001f00:	789b      	ldrb	r3, [r3, #2]
 8001f02:	8111      	strh	r1, [r2, #8]
 8001f04:	7293      	strb	r3, [r2, #10]
  return 1;
 8001f06:	2301      	movs	r3, #1
}
 8001f08:	4618      	mov	r0, r3
 8001f0a:	3720      	adds	r7, #32
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}
 8001f10:	20000420 	.word	0x20000420
 8001f14:	3f19999a 	.word	0x3f19999a
 8001f18:	3f4ccccd 	.word	0x3f4ccccd

08001f1c <update_key_actuation>:

void update_key_actuation(struct key *key, uint8_t layer) {
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	70fb      	strb	r3, [r7, #3]
   *
   */

  // if rapid trigger enable, move trigger and reset offsets according to the distance taht began the trigger

  uint32_t now = keyboard_get_time();
 8001f28:	f000 fc5a 	bl	80027e0 <keyboard_get_time>
 8001f2c:	6178      	str	r0, [r7, #20]
  uint8_t is_after_trigger_offset = key->state.distance_8bits > key->actuation.trigger_offset;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	bf8c      	ite	hi
 8001f3e:	2301      	movhi	r3, #1
 8001f40:	2300      	movls	r3, #0
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	74fb      	strb	r3, [r7, #19]
  uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 8001f52:	429a      	cmp	r2, r3
 8001f54:	bf34      	ite	cc
 8001f56:	2301      	movcc	r3, #1
 8001f58:	2300      	movcs	r3, #0
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	74bb      	strb	r3, [r7, #18]
  uint8_t has_rapid_trigger = key->actuation.rapid_trigger_offset != 0;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	bf14      	ite	ne
 8001f68:	2301      	movne	r3, #1
 8001f6a:	2300      	moveq	r3, #0
 8001f6c:	b2db      	uxtb	r3, r3
 8001f6e:	747b      	strb	r3, [r7, #17]
  uint8_t is_after_rapid_trigger_offset = key->state.distance_8bits > key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset + keyboard_user_config.reset_threshold;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f76:	4619      	mov	r1, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001f7e:	461a      	mov	r2, r3
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	4a5e      	ldr	r2, [pc, #376]	@ (8002104 <update_key_actuation+0x1e8>)
 8001f8a:	7892      	ldrb	r2, [r2, #2]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	4299      	cmp	r1, r3
 8001f90:	bfcc      	ite	gt
 8001f92:	2301      	movgt	r3, #1
 8001f94:	2300      	movle	r3, #0
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	743b      	strb	r3, [r7, #16]
  uint8_t is_before_rapid_reset_offset = key->state.distance_8bits < key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset;
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8001fa8:	4619      	mov	r1, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8001fb0:	1acb      	subs	r3, r1, r3
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	bfb4      	ite	lt
 8001fb6:	2301      	movlt	r3, #1
 8001fb8:	2300      	movge	r3, #0
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	73fb      	strb	r3, [r7, #15]

  switch (key->actuation.status) {
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
 8001fc4:	3b01      	subs	r3, #1
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	f200 8091 	bhi.w	80020ee <update_key_actuation+0x1d2>
 8001fcc:	a201      	add	r2, pc, #4	@ (adr r2, 8001fd4 <update_key_actuation+0xb8>)
 8001fce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fd2:	bf00      	nop
 8001fd4:	08002099 	.word	0x08002099
 8001fd8:	080020ab 	.word	0x080020ab
 8001fdc:	08001fe5 	.word	0x08001fe5
 8001fe0:	08002025 	.word	0x08002025

  case STATUS_RESET:
    // if reset, can be triggered or tap
    if (is_after_trigger_offset) {
 8001fe4:	7cfb      	ldrb	r3, [r7, #19]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8083 	beq.w	80020f2 <update_key_actuation+0x1d6>
      if (key->layers[_TAP_LAYER].value[0]) {
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d004      	beq.n	8002002 <update_key_actuation+0xe6>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
 8002000:	e00b      	b.n	800201a <update_key_actuation+0xfe>
        // key_triggered = 1;
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2202      	movs	r2, #2
 8002006:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        key_triggered = 1;
 800200a:	4b3f      	ldr	r3, [pc, #252]	@ (8002108 <update_key_actuation+0x1ec>)
 800200c:	2201      	movs	r2, #1
 800200e:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, layer);
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	4619      	mov	r1, r3
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f7ff fa89 	bl	800152c <hid_press_key>
      }
      key->actuation.triggered_at = now;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	f8c3 202e 	str.w	r2, [r3, #46]	@ 0x2e
    }
    break;
 8002022:	e066      	b.n	80020f2 <update_key_actuation+0x1d6>

  case STATUS_RAPID_TRIGGER_RESET:
    if (!has_rapid_trigger) {
 8002024:	7c7b      	ldrb	r3, [r7, #17]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d104      	bne.n	8002034 <update_key_actuation+0x118>
      key->actuation.status = STATUS_RESET;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2203      	movs	r2, #3
 800202e:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
      break;
 8002032:	e063      	b.n	80020fc <update_key_actuation+0x1e0>
    }
    // if reset, can be triggered or tap
    if (is_after_trigger_offset && key->actuation.direction == GOING_DOWN && is_after_rapid_trigger_offset) {
 8002034:	7cfb      	ldrb	r3, [r7, #19]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d026      	beq.n	8002088 <update_key_actuation+0x16c>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8002040:	2b01      	cmp	r3, #1
 8002042:	d121      	bne.n	8002088 <update_key_actuation+0x16c>
 8002044:	7c3b      	ldrb	r3, [r7, #16]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d01e      	beq.n	8002088 <update_key_actuation+0x16c>
      if (key->layers[_TAP_LAYER].value[0]) {
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8002050:	b29b      	uxth	r3, r3
 8002052:	2b00      	cmp	r3, #0
 8002054:	d007      	beq.n	8002066 <update_key_actuation+0x14a>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        key_triggered = 1;
 800205e:	4b2a      	ldr	r3, [pc, #168]	@ (8002108 <update_key_actuation+0x1ec>)
 8002060:	2201      	movs	r2, #1
 8002062:	701a      	strb	r2, [r3, #0]
 8002064:	e00b      	b.n	800207e <update_key_actuation+0x162>
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2202      	movs	r2, #2
 800206a:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        key_triggered = 1;
 800206e:	4b26      	ldr	r3, [pc, #152]	@ (8002108 <update_key_actuation+0x1ec>)
 8002070:	2201      	movs	r2, #1
 8002072:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, layer);
 8002074:	78fb      	ldrb	r3, [r7, #3]
 8002076:	4619      	mov	r1, r3
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fa57 	bl	800152c <hid_press_key>
      }
      key->actuation.triggered_at = now;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	f8c3 202e 	str.w	r2, [r3, #46]	@ 0x2e
    } else if (is_before_reset_offset) {
      key->actuation.status = STATUS_RESET;
    }
    break;
 8002086:	e036      	b.n	80020f6 <update_key_actuation+0x1da>
    } else if (is_before_reset_offset) {
 8002088:	7cbb      	ldrb	r3, [r7, #18]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d033      	beq.n	80020f6 <update_key_actuation+0x1da>
      key->actuation.status = STATUS_RESET;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2203      	movs	r2, #3
 8002092:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    break;
 8002096:	e02e      	b.n	80020f6 <update_key_actuation+0x1da>

  case STATUS_TAP:
    // if tap, can be reset
    key->actuation.status = STATUS_RESET;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2203      	movs	r2, #3
 800209c:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
    hid_release_key(key, _TAP_LAYER);
 80020a0:	2101      	movs	r1, #1
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f7ff fb5c 	bl	8001760 <hid_release_key>
    break;
 80020a8:	e028      	b.n	80020fc <update_key_actuation+0x1e0>

  case STATUS_TRIGGERED:
    // if triggered, can be reset
    if (is_before_reset_offset) {
 80020aa:	7cbb      	ldrb	r3, [r7, #18]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d009      	beq.n	80020c4 <update_key_actuation+0x1a8>
      key->actuation.status = STATUS_RESET;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2203      	movs	r2, #3
 80020b4:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
      hid_release_key(key, layer);
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	4619      	mov	r1, r3
 80020bc:	6878      	ldr	r0, [r7, #4]
 80020be:	f7ff fb4f 	bl	8001760 <hid_release_key>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
      hid_release_key(key, layer);
    }
    break;
 80020c2:	e01a      	b.n	80020fa <update_key_actuation+0x1de>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
 80020c4:	7c7b      	ldrb	r3, [r7, #17]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d017      	beq.n	80020fa <update_key_actuation+0x1de>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d112      	bne.n	80020fa <update_key_actuation+0x1de>
 80020d4:	7bfb      	ldrb	r3, [r7, #15]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00f      	beq.n	80020fa <update_key_actuation+0x1de>
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2204      	movs	r2, #4
 80020de:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
      hid_release_key(key, layer);
 80020e2:	78fb      	ldrb	r3, [r7, #3]
 80020e4:	4619      	mov	r1, r3
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff fb3a 	bl	8001760 <hid_release_key>
    break;
 80020ec:	e005      	b.n	80020fa <update_key_actuation+0x1de>

  default:
    break;
 80020ee:	bf00      	nop
 80020f0:	e004      	b.n	80020fc <update_key_actuation+0x1e0>
    break;
 80020f2:	bf00      	nop
 80020f4:	e002      	b.n	80020fc <update_key_actuation+0x1e0>
    break;
 80020f6:	bf00      	nop
 80020f8:	e000      	b.n	80020fc <update_key_actuation+0x1e0>
    break;
 80020fa:	bf00      	nop
  }
}
 80020fc:	bf00      	nop
 80020fe:	3718      	adds	r7, #24
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}
 8002104:	20000420 	.word	0x20000420
 8002108:	2000052c 	.word	0x2000052c

0800210c <update_key>:

void update_key(struct key *key) {
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
  if (!update_key_state(key)) {
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff fd9f 	bl	8001c58 <update_key_state>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d004      	beq.n	800212a <update_key+0x1e>
    return;
  }

  update_key_actuation(key, _BASE_LAYER);
 8002120:	2100      	movs	r1, #0
 8002122:	6878      	ldr	r0, [r7, #4]
 8002124:	f7ff fefa 	bl	8001f1c <update_key_actuation>
 8002128:	e000      	b.n	800212c <update_key+0x20>
    return;
 800212a:	bf00      	nop
}
 800212c:	3708      	adds	r7, #8
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
	...

08002134 <keyboard_init_keys>:

void keyboard_init_keys() {
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
  keyboard_read_config();
 800213a:	f000 faa3 	bl	8002684 <keyboard_read_config>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 800213e:	2300      	movs	r3, #0
 8002140:	71fb      	strb	r3, [r7, #7]
 8002142:	e027      	b.n	8002194 <keyboard_init_keys+0x60>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8002144:	2300      	movs	r3, #0
 8002146:	71bb      	strb	r3, [r7, #6]
 8002148:	e01e      	b.n	8002188 <keyboard_init_keys+0x54>
      if (channels_by_row_col[row][col][0] != XXXX) {
 800214a:	79fa      	ldrb	r2, [r7, #7]
 800214c:	79bb      	ldrb	r3, [r7, #6]
 800214e:	4915      	ldr	r1, [pc, #84]	@ (80021a4 <keyboard_init_keys+0x70>)
 8002150:	0092      	lsls	r2, r2, #2
 8002152:	4413      	add	r3, r2
 8002154:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8002158:	2bff      	cmp	r3, #255	@ 0xff
 800215a:	d012      	beq.n	8002182 <keyboard_init_keys+0x4e>
        init_key(channels_by_row_col[row][col][0], channels_by_row_col[row][col][1], row, col);
 800215c:	79fa      	ldrb	r2, [r7, #7]
 800215e:	79bb      	ldrb	r3, [r7, #6]
 8002160:	4910      	ldr	r1, [pc, #64]	@ (80021a4 <keyboard_init_keys+0x70>)
 8002162:	0092      	lsls	r2, r2, #2
 8002164:	4413      	add	r3, r2
 8002166:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 800216a:	79fa      	ldrb	r2, [r7, #7]
 800216c:	79bb      	ldrb	r3, [r7, #6]
 800216e:	490d      	ldr	r1, [pc, #52]	@ (80021a4 <keyboard_init_keys+0x70>)
 8002170:	0092      	lsls	r2, r2, #2
 8002172:	4413      	add	r3, r2
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	440b      	add	r3, r1
 8002178:	7859      	ldrb	r1, [r3, #1]
 800217a:	79bb      	ldrb	r3, [r7, #6]
 800217c:	79fa      	ldrb	r2, [r7, #7]
 800217e:	f7ff fc3d 	bl	80019fc <init_key>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8002182:	79bb      	ldrb	r3, [r7, #6]
 8002184:	3301      	adds	r3, #1
 8002186:	71bb      	strb	r3, [r7, #6]
 8002188:	79bb      	ldrb	r3, [r7, #6]
 800218a:	2b03      	cmp	r3, #3
 800218c:	d9dd      	bls.n	800214a <keyboard_init_keys+0x16>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	3301      	adds	r3, #1
 8002192:	71fb      	strb	r3, [r7, #7]
 8002194:	79fb      	ldrb	r3, [r7, #7]
 8002196:	2b03      	cmp	r3, #3
 8002198:	d9d4      	bls.n	8002144 <keyboard_init_keys+0x10>
      }
    }
  }
}
 800219a:	bf00      	nop
 800219c:	bf00      	nop
 800219e:	3708      	adds	r7, #8
 80021a0:	46bd      	mov	sp, r7
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	0800d090 	.word	0x0800d090

080021a8 <keyboard_task>:

void keyboard_task() {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 80021ae:	f000 fb17 	bl	80027e0 <keyboard_get_time>
 80021b2:	60b8      	str	r0, [r7, #8]
  key_triggered = 0;
 80021b4:	4b61      	ldr	r3, [pc, #388]	@ (800233c <keyboard_task+0x194>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80021ba:	2300      	movs	r3, #0
 80021bc:	73fb      	strb	r3, [r7, #15]
 80021be:	e035      	b.n	800222c <keyboard_task+0x84>
    keyboard_select_amux(amux_channel);
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 fab2 	bl	800272c <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80021c8:	2300      	movs	r3, #0
 80021ca:	73bb      	strb	r3, [r7, #14]
 80021cc:	e028      	b.n	8002220 <keyboard_task+0x78>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 80021ce:	7bbb      	ldrb	r3, [r7, #14]
 80021d0:	7bfa      	ldrb	r2, [r7, #15]
 80021d2:	495b      	ldr	r1, [pc, #364]	@ (8002340 <keyboard_task+0x198>)
 80021d4:	2032      	movs	r0, #50	@ 0x32
 80021d6:	fb00 f202 	mul.w	r2, r0, r2
 80021da:	f44f 7048 	mov.w	r0, #800	@ 0x320
 80021de:	fb00 f303 	mul.w	r3, r0, r3
 80021e2:	4413      	add	r3, r2
 80021e4:	440b      	add	r3, r1
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d015      	beq.n	8002218 <keyboard_task+0x70>
        continue;
      }
      keyboard_select_adc(adc_channel);
 80021ec:	7bbb      	ldrb	r3, [r7, #14]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 fac4 	bl	800277c <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 80021f4:	7bbb      	ldrb	r3, [r7, #14]
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	2132      	movs	r1, #50	@ 0x32
 80021fa:	fb01 f202 	mul.w	r2, r1, r2
 80021fe:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8002202:	fb01 f303 	mul.w	r3, r1, r3
 8002206:	4413      	add	r3, r2
 8002208:	4a4d      	ldr	r2, [pc, #308]	@ (8002340 <keyboard_task+0x198>)
 800220a:	4413      	add	r3, r2
 800220c:	4618      	mov	r0, r3
 800220e:	f7ff ff7d 	bl	800210c <update_key>

      keyboard_close_adc();
 8002212:	f000 fadb 	bl	80027cc <keyboard_close_adc>
 8002216:	e000      	b.n	800221a <keyboard_task+0x72>
        continue;
 8002218:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800221a:	7bbb      	ldrb	r3, [r7, #14]
 800221c:	3301      	adds	r3, #1
 800221e:	73bb      	strb	r3, [r7, #14]
 8002220:	7bbb      	ldrb	r3, [r7, #14]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d0d3      	beq.n	80021ce <keyboard_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002226:	7bfb      	ldrb	r3, [r7, #15]
 8002228:	3301      	adds	r3, #1
 800222a:	73fb      	strb	r3, [r7, #15]
 800222c:	7bfb      	ldrb	r3, [r7, #15]
 800222e:	2b0f      	cmp	r3, #15
 8002230:	d9c6      	bls.n	80021c0 <keyboard_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002232:	2300      	movs	r3, #0
 8002234:	737b      	strb	r3, [r7, #13]
 8002236:	e072      	b.n	800231e <keyboard_task+0x176>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8002238:	2300      	movs	r3, #0
 800223a:	733b      	strb	r3, [r7, #12]
 800223c:	e069      	b.n	8002312 <keyboard_task+0x16a>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 800223e:	7b3b      	ldrb	r3, [r7, #12]
 8002240:	7b7a      	ldrb	r2, [r7, #13]
 8002242:	493f      	ldr	r1, [pc, #252]	@ (8002340 <keyboard_task+0x198>)
 8002244:	2032      	movs	r0, #50	@ 0x32
 8002246:	fb00 f202 	mul.w	r2, r0, r2
 800224a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800224e:	fb00 f303 	mul.w	r3, r0, r3
 8002252:	4413      	add	r3, r2
 8002254:	440b      	add	r3, r1
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d056      	beq.n	800230a <keyboard_task+0x162>
 800225c:	7b3b      	ldrb	r3, [r7, #12]
 800225e:	7b7a      	ldrb	r2, [r7, #13]
 8002260:	4937      	ldr	r1, [pc, #220]	@ (8002340 <keyboard_task+0x198>)
 8002262:	2032      	movs	r0, #50	@ 0x32
 8002264:	fb00 f202 	mul.w	r2, r0, r2
 8002268:	f44f 7048 	mov.w	r0, #800	@ 0x320
 800226c:	fb00 f303 	mul.w	r3, r0, r3
 8002270:	4413      	add	r3, r2
 8002272:	440b      	add	r3, r1
 8002274:	332a      	adds	r3, #42	@ 0x2a
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d146      	bne.n	800230a <keyboard_task+0x162>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 800227c:	7b3b      	ldrb	r3, [r7, #12]
 800227e:	7b7a      	ldrb	r2, [r7, #13]
 8002280:	2132      	movs	r1, #50	@ 0x32
 8002282:	fb01 f202 	mul.w	r2, r1, r2
 8002286:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4413      	add	r3, r2
 8002290:	4a2b      	ldr	r2, [pc, #172]	@ (8002340 <keyboard_task+0x198>)
 8002292:	4413      	add	r3, r2
 8002294:	607b      	str	r3, [r7, #4]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
 80022a2:	429a      	cmp	r2, r3
 80022a4:	bf34      	ite	cc
 80022a6:	2301      	movcc	r3, #1
 80022a8:	2300      	movcs	r3, #0
 80022aa:	b2db      	uxtb	r3, r3
 80022ac:	70fb      	strb	r3, [r7, #3]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 80022ae:	f000 fa97 	bl	80027e0 <keyboard_get_time>
 80022b2:	4602      	mov	r2, r0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f8d3 302e 	ldr.w	r3, [r3, #46]	@ 0x2e
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	4a21      	ldr	r2, [pc, #132]	@ (8002344 <keyboard_task+0x19c>)
 80022be:	8892      	ldrh	r2, [r2, #4]
 80022c0:	4293      	cmp	r3, r2
 80022c2:	bf94      	ite	ls
 80022c4:	2301      	movls	r3, #1
 80022c6:	2300      	movhi	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	70bb      	strb	r3, [r7, #2]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 80022cc:	78fb      	ldrb	r3, [r7, #3]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00b      	beq.n	80022ea <keyboard_task+0x142>
 80022d2:	78bb      	ldrb	r3, [r7, #2]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d008      	beq.n	80022ea <keyboard_task+0x142>
        key->actuation.status = STATUS_TAP;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2201      	movs	r2, #1
 80022dc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        hid_press_key(key, _TAP_LAYER);
 80022e0:	2101      	movs	r1, #1
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f7ff f922 	bl	800152c <hid_press_key>
 80022e8:	e010      	b.n	800230c <keyboard_task+0x164>
      } else if (!is_before_timeout || key_triggered) {
 80022ea:	78bb      	ldrb	r3, [r7, #2]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <keyboard_task+0x150>
 80022f0:	4b12      	ldr	r3, [pc, #72]	@ (800233c <keyboard_task+0x194>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d009      	beq.n	800230c <keyboard_task+0x164>
        key->actuation.status = STATUS_TRIGGERED;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2202      	movs	r2, #2
 80022fc:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
        hid_press_key(key, _BASE_LAYER);
 8002300:	2100      	movs	r1, #0
 8002302:	6878      	ldr	r0, [r7, #4]
 8002304:	f7ff f912 	bl	800152c <hid_press_key>
 8002308:	e000      	b.n	800230c <keyboard_task+0x164>
        continue;
 800230a:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 800230c:	7b3b      	ldrb	r3, [r7, #12]
 800230e:	3301      	adds	r3, #1
 8002310:	733b      	strb	r3, [r7, #12]
 8002312:	7b3b      	ldrb	r3, [r7, #12]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d092      	beq.n	800223e <keyboard_task+0x96>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8002318:	7b7b      	ldrb	r3, [r7, #13]
 800231a:	3301      	adds	r3, #1
 800231c:	737b      	strb	r3, [r7, #13]
 800231e:	7b7b      	ldrb	r3, [r7, #13]
 8002320:	2b0f      	cmp	r3, #15
 8002322:	d989      	bls.n	8002238 <keyboard_task+0x90>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 8002324:	f000 fa5c 	bl	80027e0 <keyboard_get_time>
 8002328:	4602      	mov	r2, r0
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	1ad3      	subs	r3, r2, r3
 800232e:	4a06      	ldr	r2, [pc, #24]	@ (8002348 <keyboard_task+0x1a0>)
 8002330:	6013      	str	r3, [r2, #0]
}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	2000052c 	.word	0x2000052c
 8002340:	20000100 	.word	0x20000100
 8002344:	20000420 	.word	0x20000420
 8002348:	20000528 	.word	0x20000528

0800234c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002352:	f000 fd15 	bl	8002d80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002356:	f000 f82d 	bl	80023b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800235a:	f000 f941 	bl	80025e0 <MX_GPIO_Init>
  MX_ADC1_Init();
 800235e:	f000 f891 	bl	8002484 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 8002362:	f000 f90f 	bl	8002584 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8002366:	f000 f8df 	bl	8002528 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ADC_channel_Config.Rank = 1;
 800236a:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <main+0x60>)
 800236c:	2201      	movs	r2, #1
 800236e:	605a      	str	r2, [r3, #4]
  ADC_channel_Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002370:	4b0e      	ldr	r3, [pc, #56]	@ (80023ac <main+0x60>)
 8002372:	2200      	movs	r2, #0
 8002374:	609a      	str	r2, [r3, #8]
  keyboard_init_keys();
 8002376:	f7ff fedd 	bl	8002134 <keyboard_init_keys>
  tusb_rhport_init_t dev_init = {
 800237a:	4b0d      	ldr	r3, [pc, #52]	@ (80023b0 <main+0x64>)
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	803b      	strh	r3, [r7, #0]
      .role = TUSB_ROLE_DEVICE,
      .speed = TUSB_SPEED_AUTO};
  tusb_init(0, &dev_init); // initialize device stack on roothub port 0
 8002380:	463b      	mov	r3, r7
 8002382:	4619      	mov	r1, r3
 8002384:	2000      	movs	r0, #0
 8002386:	f008 fe31 	bl	800afec <tusb_rhport_init>
  /* USER CODE BEGIN WHILE */
  uint32_t start_at;

  while (1) {
    // MARK: Main loop
    start_at = HAL_GetTick();
 800238a:	f000 fd5f 	bl	8002e4c <HAL_GetTick>
 800238e:	6078      	str	r0, [r7, #4]
  tud_task_ext(UINT32_MAX, false);
 8002390:	2100      	movs	r1, #0
 8002392:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002396:	f005 f9db 	bl	8007750 <tud_task_ext>
}
 800239a:	bf00      	nop

    tud_task();
    keyboard_task();
 800239c:	f7ff ff04 	bl	80021a8 <keyboard_task>
    hid_task();
 80023a0:	f7ff f874 	bl	800148c <hid_task>
    cdc_task();
 80023a4:	f7fe f9b0 	bl	8000708 <cdc_task>
    start_at = HAL_GetTick();
 80023a8:	bf00      	nop
 80023aa:	e7ee      	b.n	800238a <main+0x3e>
 80023ac:	20000ab0 	.word	0x20000ab0
 80023b0:	0800cef0 	.word	0x0800cef0

080023b4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b094      	sub	sp, #80	@ 0x50
 80023b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80023ba:	f107 0320 	add.w	r3, r7, #32
 80023be:	2230      	movs	r2, #48	@ 0x30
 80023c0:	2100      	movs	r1, #0
 80023c2:	4618      	mov	r0, r3
 80023c4:	f009 f93a 	bl	800b63c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80023c8:	f107 030c 	add.w	r3, r7, #12
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
   */
  __HAL_RCC_PWR_CLK_ENABLE();
 80023d8:	2300      	movs	r3, #0
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	4b27      	ldr	r3, [pc, #156]	@ (800247c <SystemClock_Config+0xc8>)
 80023de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e0:	4a26      	ldr	r2, [pc, #152]	@ (800247c <SystemClock_Config+0xc8>)
 80023e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80023e8:	4b24      	ldr	r3, [pc, #144]	@ (800247c <SystemClock_Config+0xc8>)
 80023ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f0:	60bb      	str	r3, [r7, #8]
 80023f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80023f4:	2300      	movs	r3, #0
 80023f6:	607b      	str	r3, [r7, #4]
 80023f8:	4b21      	ldr	r3, [pc, #132]	@ (8002480 <SystemClock_Config+0xcc>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a20      	ldr	r2, [pc, #128]	@ (8002480 <SystemClock_Config+0xcc>)
 80023fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002402:	6013      	str	r3, [r2, #0]
 8002404:	4b1e      	ldr	r3, [pc, #120]	@ (8002480 <SystemClock_Config+0xcc>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800240c:	607b      	str	r3, [r7, #4]
 800240e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
   * in the RCC_OscInitTypeDef structure.
   */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002410:	2301      	movs	r3, #1
 8002412:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002414:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002418:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800241a:	2302      	movs	r3, #2
 800241c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800241e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002422:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8002424:	230d      	movs	r3, #13
 8002426:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002428:	23a8      	movs	r3, #168	@ 0xa8
 800242a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800242c:	2304      	movs	r3, #4
 800242e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002430:	2307      	movs	r3, #7
 8002432:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002434:	f107 0320 	add.w	r3, r7, #32
 8002438:	4618      	mov	r0, r3
 800243a:	f002 f83b 	bl	80044b4 <HAL_RCC_OscConfig>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <SystemClock_Config+0x94>
    Error_Handler();
 8002444:	f000 f9d3 	bl	80027ee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
   */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002448:	230f      	movs	r3, #15
 800244a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800244c:	2302      	movs	r3, #2
 800244e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002454:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002458:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800245a:	2300      	movs	r3, #0
 800245c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800245e:	f107 030c 	add.w	r3, r7, #12
 8002462:	2102      	movs	r1, #2
 8002464:	4618      	mov	r0, r3
 8002466:	f002 fa9d 	bl	80049a4 <HAL_RCC_ClockConfig>
 800246a:	4603      	mov	r3, r0
 800246c:	2b00      	cmp	r3, #0
 800246e:	d001      	beq.n	8002474 <SystemClock_Config+0xc0>
    Error_Handler();
 8002470:	f000 f9bd 	bl	80027ee <Error_Handler>
  }
}
 8002474:	bf00      	nop
 8002476:	3750      	adds	r7, #80	@ 0x50
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	40023800 	.word	0x40023800
 8002480:	40007000 	.word	0x40007000

08002484 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800248a:	463b      	mov	r3, r7
 800248c:	2200      	movs	r2, #0
 800248e:	601a      	str	r2, [r3, #0]
 8002490:	605a      	str	r2, [r3, #4]
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
   */
  hadc1.Instance = ADC1;
 8002496:	4b21      	ldr	r3, [pc, #132]	@ (800251c <MX_ADC1_Init+0x98>)
 8002498:	4a21      	ldr	r2, [pc, #132]	@ (8002520 <MX_ADC1_Init+0x9c>)
 800249a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800249c:	4b1f      	ldr	r3, [pc, #124]	@ (800251c <MX_ADC1_Init+0x98>)
 800249e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80024a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80024a4:	4b1d      	ldr	r3, [pc, #116]	@ (800251c <MX_ADC1_Init+0x98>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80024aa:	4b1c      	ldr	r3, [pc, #112]	@ (800251c <MX_ADC1_Init+0x98>)
 80024ac:	2200      	movs	r2, #0
 80024ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80024b0:	4b1a      	ldr	r3, [pc, #104]	@ (800251c <MX_ADC1_Init+0x98>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80024b6:	4b19      	ldr	r3, [pc, #100]	@ (800251c <MX_ADC1_Init+0x98>)
 80024b8:	2200      	movs	r2, #0
 80024ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80024be:	4b17      	ldr	r3, [pc, #92]	@ (800251c <MX_ADC1_Init+0x98>)
 80024c0:	2200      	movs	r2, #0
 80024c2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80024c4:	4b15      	ldr	r3, [pc, #84]	@ (800251c <MX_ADC1_Init+0x98>)
 80024c6:	4a17      	ldr	r2, [pc, #92]	@ (8002524 <MX_ADC1_Init+0xa0>)
 80024c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80024ca:	4b14      	ldr	r3, [pc, #80]	@ (800251c <MX_ADC1_Init+0x98>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80024d0:	4b12      	ldr	r3, [pc, #72]	@ (800251c <MX_ADC1_Init+0x98>)
 80024d2:	2201      	movs	r2, #1
 80024d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80024d6:	4b11      	ldr	r3, [pc, #68]	@ (800251c <MX_ADC1_Init+0x98>)
 80024d8:	2200      	movs	r2, #0
 80024da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80024de:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <MX_ADC1_Init+0x98>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80024e4:	480d      	ldr	r0, [pc, #52]	@ (800251c <MX_ADC1_Init+0x98>)
 80024e6:	f000 fce1 	bl	8002eac <HAL_ADC_Init>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d001      	beq.n	80024f4 <MX_ADC1_Init+0x70>
    Error_Handler();
 80024f0:	f000 f97d 	bl	80027ee <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
   */
  sConfig.Channel = ADC_CHANNEL_9;
 80024f4:	2309      	movs	r3, #9
 80024f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80024f8:	2301      	movs	r3, #1
 80024fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80024fc:	2300      	movs	r3, #0
 80024fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002500:	463b      	mov	r3, r7
 8002502:	4619      	mov	r1, r3
 8002504:	4805      	ldr	r0, [pc, #20]	@ (800251c <MX_ADC1_Init+0x98>)
 8002506:	f000 fe95 	bl	8003234 <HAL_ADC_ConfigChannel>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d001      	beq.n	8002514 <MX_ADC1_Init+0x90>
    Error_Handler();
 8002510:	f000 f96d 	bl	80027ee <Error_Handler>
  /* USER CODE BEGIN ADC1_Init 2 */

  // memcpy(&ADC_channel_Config, &sConfig, sizeof(ADC_ChannelConfTypeDef));

  /* USER CODE END ADC1_Init 2 */
}
 8002514:	bf00      	nop
 8002516:	3710      	adds	r7, #16
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	20000530 	.word	0x20000530
 8002520:	40012000 	.word	0x40012000
 8002524:	0f000001 	.word	0x0f000001

08002528 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002528:	b580      	push	{r7, lr}
 800252a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800252c:	4b12      	ldr	r3, [pc, #72]	@ (8002578 <MX_I2C1_Init+0x50>)
 800252e:	4a13      	ldr	r2, [pc, #76]	@ (800257c <MX_I2C1_Init+0x54>)
 8002530:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002532:	4b11      	ldr	r3, [pc, #68]	@ (8002578 <MX_I2C1_Init+0x50>)
 8002534:	4a12      	ldr	r2, [pc, #72]	@ (8002580 <MX_I2C1_Init+0x58>)
 8002536:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002538:	4b0f      	ldr	r3, [pc, #60]	@ (8002578 <MX_I2C1_Init+0x50>)
 800253a:	2200      	movs	r2, #0
 800253c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800253e:	4b0e      	ldr	r3, [pc, #56]	@ (8002578 <MX_I2C1_Init+0x50>)
 8002540:	2200      	movs	r2, #0
 8002542:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002544:	4b0c      	ldr	r3, [pc, #48]	@ (8002578 <MX_I2C1_Init+0x50>)
 8002546:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800254a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800254c:	4b0a      	ldr	r3, [pc, #40]	@ (8002578 <MX_I2C1_Init+0x50>)
 800254e:	2200      	movs	r2, #0
 8002550:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002552:	4b09      	ldr	r3, [pc, #36]	@ (8002578 <MX_I2C1_Init+0x50>)
 8002554:	2200      	movs	r2, #0
 8002556:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002558:	4b07      	ldr	r3, [pc, #28]	@ (8002578 <MX_I2C1_Init+0x50>)
 800255a:	2200      	movs	r2, #0
 800255c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800255e:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <MX_I2C1_Init+0x50>)
 8002560:	2200      	movs	r2, #0
 8002562:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002564:	4804      	ldr	r0, [pc, #16]	@ (8002578 <MX_I2C1_Init+0x50>)
 8002566:	f001 fd51 	bl	800400c <HAL_I2C_Init>
 800256a:	4603      	mov	r3, r0
 800256c:	2b00      	cmp	r3, #0
 800256e:	d001      	beq.n	8002574 <MX_I2C1_Init+0x4c>
    Error_Handler();
 8002570:	f000 f93d 	bl	80027ee <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */
}
 8002574:	bf00      	nop
 8002576:	bd80      	pop	{r7, pc}
 8002578:	20000578 	.word	0x20000578
 800257c:	40005400 	.word	0x40005400
 8002580:	00061a80 	.word	0x00061a80

08002584 <MX_USB_OTG_FS_PCD_Init>:
/**
 * @brief USB_OTG_FS Initialization Function
 * @param None
 * @retval None
 */
static void MX_USB_OTG_FS_PCD_Init(void) {
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002588:	4b14      	ldr	r3, [pc, #80]	@ (80025dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800258a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800258e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8002590:	4b12      	ldr	r3, [pc, #72]	@ (80025dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002592:	2204      	movs	r2, #4
 8002594:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8002596:	4b11      	ldr	r3, [pc, #68]	@ (80025dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002598:	2202      	movs	r2, #2
 800259a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800259c:	4b0f      	ldr	r3, [pc, #60]	@ (80025dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800259e:	2200      	movs	r2, #0
 80025a0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80025a2:	4b0e      	ldr	r3, [pc, #56]	@ (80025dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025a4:	2202      	movs	r2, #2
 80025a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80025a8:	4b0c      	ldr	r3, [pc, #48]	@ (80025dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025aa:	2200      	movs	r2, #0
 80025ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80025ae:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80025b4:	4b09      	ldr	r3, [pc, #36]	@ (80025dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80025ba:	4b08      	ldr	r3, [pc, #32]	@ (80025dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025bc:	2200      	movs	r2, #0
 80025be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80025c0:	4b06      	ldr	r3, [pc, #24]	@ (80025dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK) {
 80025c6:	4805      	ldr	r0, [pc, #20]	@ (80025dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80025c8:	f001 fe64 	bl	8004294 <HAL_PCD_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_USB_OTG_FS_PCD_Init+0x52>
    Error_Handler();
 80025d2:	f000 f90c 	bl	80027ee <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */
}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	200005cc 	.word	0x200005cc

080025e0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b088      	sub	sp, #32
 80025e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025e6:	f107 030c 	add.w	r3, r7, #12
 80025ea:	2200      	movs	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
 80025ee:	605a      	str	r2, [r3, #4]
 80025f0:	609a      	str	r2, [r3, #8]
 80025f2:	60da      	str	r2, [r3, #12]
 80025f4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	4b20      	ldr	r3, [pc, #128]	@ (800267c <MX_GPIO_Init+0x9c>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025fe:	4a1f      	ldr	r2, [pc, #124]	@ (800267c <MX_GPIO_Init+0x9c>)
 8002600:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002604:	6313      	str	r3, [r2, #48]	@ 0x30
 8002606:	4b1d      	ldr	r3, [pc, #116]	@ (800267c <MX_GPIO_Init+0x9c>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002612:	2300      	movs	r3, #0
 8002614:	607b      	str	r3, [r7, #4]
 8002616:	4b19      	ldr	r3, [pc, #100]	@ (800267c <MX_GPIO_Init+0x9c>)
 8002618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800261a:	4a18      	ldr	r2, [pc, #96]	@ (800267c <MX_GPIO_Init+0x9c>)
 800261c:	f043 0302 	orr.w	r3, r3, #2
 8002620:	6313      	str	r3, [r2, #48]	@ 0x30
 8002622:	4b16      	ldr	r3, [pc, #88]	@ (800267c <MX_GPIO_Init+0x9c>)
 8002624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002626:	f003 0302 	and.w	r3, r3, #2
 800262a:	607b      	str	r3, [r7, #4]
 800262c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	603b      	str	r3, [r7, #0]
 8002632:	4b12      	ldr	r3, [pc, #72]	@ (800267c <MX_GPIO_Init+0x9c>)
 8002634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002636:	4a11      	ldr	r2, [pc, #68]	@ (800267c <MX_GPIO_Init+0x9c>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6313      	str	r3, [r2, #48]	@ 0x30
 800263e:	4b0f      	ldr	r3, [pc, #60]	@ (800267c <MX_GPIO_Init+0x9c>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	603b      	str	r3, [r7, #0]
 8002648:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 800264a:	2200      	movs	r2, #0
 800264c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002650:	480b      	ldr	r0, [pc, #44]	@ (8002680 <MX_GPIO_Init+0xa0>)
 8002652:	f001 fcc1 	bl	8003fd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
 8002656:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800265a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800265c:	2301      	movs	r3, #1
 800265e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002664:	2300      	movs	r3, #0
 8002666:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002668:	f107 030c 	add.w	r3, r7, #12
 800266c:	4619      	mov	r1, r3
 800266e:	4804      	ldr	r0, [pc, #16]	@ (8002680 <MX_GPIO_Init+0xa0>)
 8002670:	f001 fb2e 	bl	8003cd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8002674:	bf00      	nop
 8002676:	3720      	adds	r7, #32
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}
 800267c:	40023800 	.word	0x40023800
 8002680:	40020400 	.word	0x40020400

08002684 <keyboard_read_config>:

/* USER CODE BEGIN 4 */

// MARK: keyboard_* functions

void keyboard_read_config() {
 8002684:	b580      	push	{r7, lr}
 8002686:	af00      	add	r7, sp, #0
  memcpy(&keyboard_user_config, (uint32_t *)CONFIG_ADDRESS, sizeof(keyboard_user_config));
 8002688:	4a05      	ldr	r2, [pc, #20]	@ (80026a0 <keyboard_read_config+0x1c>)
 800268a:	4b06      	ldr	r3, [pc, #24]	@ (80026a4 <keyboard_read_config+0x20>)
 800268c:	4610      	mov	r0, r2
 800268e:	4619      	mov	r1, r3
 8002690:	f44f 7383 	mov.w	r3, #262	@ 0x106
 8002694:	461a      	mov	r2, r3
 8002696:	f009 f862 	bl	800b75e <memcpy>
}
 800269a:	bf00      	nop
 800269c:	bd80      	pop	{r7, pc}
 800269e:	bf00      	nop
 80026a0:	20000420 	.word	0x20000420
 80026a4:	08040000 	.word	0x08040000

080026a8 <keyboard_write_config>:

uint8_t keyboard_write_config(uint8_t *buffer, uint16_t offset, uint16_t size) {
 80026a8:	b5b0      	push	{r4, r5, r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
 80026b4:	4613      	mov	r3, r2
 80026b6:	803b      	strh	r3, [r7, #0]
  if (offset >= sizeof(keyboard_user_config)) {
 80026b8:	887b      	ldrh	r3, [r7, #2]
 80026ba:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80026be:	d301      	bcc.n	80026c4 <keyboard_write_config+0x1c>
    return 0;
 80026c0:	2300      	movs	r3, #0
 80026c2:	e02d      	b.n	8002720 <keyboard_write_config+0x78>
  }

  HAL_FLASH_Unlock();
 80026c4:	f001 f94a 	bl	800395c <HAL_FLASH_Unlock>
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | FLASH_FLAG_PGSERR);
 80026c8:	4b17      	ldr	r3, [pc, #92]	@ (8002728 <keyboard_write_config+0x80>)
 80026ca:	22b3      	movs	r2, #179	@ 0xb3
 80026cc:	60da      	str	r2, [r3, #12]
  FLASH_Erase_Sector(FLASH_SECTOR_6, VOLTAGE_RANGE_3);
 80026ce:	2102      	movs	r1, #2
 80026d0:	2006      	movs	r0, #6
 80026d2:	f001 fab5 	bl	8003c40 <FLASH_Erase_Sector>
  for (uint16_t i = offset; i < size; i++) {
 80026d6:	887b      	ldrh	r3, [r7, #2]
 80026d8:	81fb      	strh	r3, [r7, #14]
 80026da:	e01a      	b.n	8002712 <keyboard_write_config+0x6a>
    if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, CONFIG_ADDRESS + i, buffer[i]) != HAL_OK) {
 80026dc:	89fb      	ldrh	r3, [r7, #14]
 80026de:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80026e2:	f503 2380 	add.w	r3, r3, #262144	@ 0x40000
 80026e6:	4619      	mov	r1, r3
 80026e8:	89fb      	ldrh	r3, [r7, #14]
 80026ea:	687a      	ldr	r2, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2200      	movs	r2, #0
 80026f4:	461c      	mov	r4, r3
 80026f6:	4615      	mov	r5, r2
 80026f8:	4622      	mov	r2, r4
 80026fa:	462b      	mov	r3, r5
 80026fc:	2000      	movs	r0, #0
 80026fe:	f001 f8d9 	bl	80038b4 <HAL_FLASH_Program>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d001      	beq.n	800270c <keyboard_write_config+0x64>
      HAL_FLASH_Lock();
 8002708:	f001 f94a 	bl	80039a0 <HAL_FLASH_Lock>
  for (uint16_t i = offset; i < size; i++) {
 800270c:	89fb      	ldrh	r3, [r7, #14]
 800270e:	3301      	adds	r3, #1
 8002710:	81fb      	strh	r3, [r7, #14]
 8002712:	89fa      	ldrh	r2, [r7, #14]
 8002714:	883b      	ldrh	r3, [r7, #0]
 8002716:	429a      	cmp	r2, r3
 8002718:	d3e0      	bcc.n	80026dc <keyboard_write_config+0x34>
    };
  }
  HAL_FLASH_Lock();
 800271a:	f001 f941 	bl	80039a0 <HAL_FLASH_Lock>
  return 1;
 800271e:	2301      	movs	r3, #1
}
 8002720:	4618      	mov	r0, r3
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bdb0      	pop	{r4, r5, r7, pc}
 8002728:	40023c00 	.word	0x40023c00

0800272c <keyboard_select_amux>:

void keyboard_select_amux(uint8_t amux_channel) {
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	4603      	mov	r3, r0
 8002734:	71fb      	strb	r3, [r7, #7]
  // TODO: set GPIOs at the same time using bitmap on register
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
 800273a:	e013      	b.n	8002764 <keyboard_select_amux+0x38>
    HAL_GPIO_WritePin(GPIOB, amux_select_pins[i], (amux_channel >> i) & 1);
 800273c:	7bfb      	ldrb	r3, [r7, #15]
 800273e:	4a0d      	ldr	r2, [pc, #52]	@ (8002774 <keyboard_select_amux+0x48>)
 8002740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002744:	b299      	uxth	r1, r3
 8002746:	79fa      	ldrb	r2, [r7, #7]
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	fa42 f303 	asr.w	r3, r2, r3
 800274e:	b2db      	uxtb	r3, r3
 8002750:	f003 0301 	and.w	r3, r3, #1
 8002754:	b2db      	uxtb	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	4807      	ldr	r0, [pc, #28]	@ (8002778 <keyboard_select_amux+0x4c>)
 800275a:	f001 fc3d 	bl	8003fd8 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 800275e:	7bfb      	ldrb	r3, [r7, #15]
 8002760:	3301      	adds	r3, #1
 8002762:	73fb      	strb	r3, [r7, #15]
 8002764:	7bfb      	ldrb	r3, [r7, #15]
 8002766:	2b03      	cmp	r3, #3
 8002768:	d9e8      	bls.n	800273c <keyboard_select_amux+0x10>
  }
}
 800276a:	bf00      	nop
 800276c:	bf00      	nop
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	0800d0b0 	.word	0x0800d0b0
 8002778:	40020400 	.word	0x40020400

0800277c <keyboard_select_adc>:

void keyboard_select_adc(uint8_t adc_channel) {
 800277c:	b580      	push	{r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
  ADC_channel_Config.Channel = adc_channels[adc_channel];
 8002786:	2209      	movs	r2, #9
 8002788:	4b08      	ldr	r3, [pc, #32]	@ (80027ac <keyboard_select_adc+0x30>)
 800278a:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &ADC_channel_Config);
 800278c:	4907      	ldr	r1, [pc, #28]	@ (80027ac <keyboard_select_adc+0x30>)
 800278e:	4808      	ldr	r0, [pc, #32]	@ (80027b0 <keyboard_select_adc+0x34>)
 8002790:	f000 fd50 	bl	8003234 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 8002794:	4806      	ldr	r0, [pc, #24]	@ (80027b0 <keyboard_select_adc+0x34>)
 8002796:	f000 fbcd 	bl	8002f34 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 800279a:	2101      	movs	r1, #1
 800279c:	4804      	ldr	r0, [pc, #16]	@ (80027b0 <keyboard_select_adc+0x34>)
 800279e:	f000 fcb0 	bl	8003102 <HAL_ADC_PollForConversion>
}
 80027a2:	bf00      	nop
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	20000ab0 	.word	0x20000ab0
 80027b0:	20000530 	.word	0x20000530

080027b4 <keyboard_read_adc>:

uint16_t keyboard_read_adc() {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 80027b8:	4803      	ldr	r0, [pc, #12]	@ (80027c8 <keyboard_read_adc+0x14>)
 80027ba:	f000 fd2d 	bl	8003218 <HAL_ADC_GetValue>
 80027be:	4603      	mov	r3, r0
 80027c0:	b29b      	uxth	r3, r3
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	bd80      	pop	{r7, pc}
 80027c6:	bf00      	nop
 80027c8:	20000530 	.word	0x20000530

080027cc <keyboard_close_adc>:

void keyboard_close_adc() {
 80027cc:	b580      	push	{r7, lr}
 80027ce:	af00      	add	r7, sp, #0
  HAL_ADC_Stop(&hadc1);
 80027d0:	4802      	ldr	r0, [pc, #8]	@ (80027dc <keyboard_close_adc+0x10>)
 80027d2:	f000 fc63 	bl	800309c <HAL_ADC_Stop>
}
 80027d6:	bf00      	nop
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000530 	.word	0x20000530

080027e0 <keyboard_get_time>:

uint32_t keyboard_get_time() {
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80027e4:	f000 fb32 	bl	8002e4c <HAL_GetTick>
 80027e8:	4603      	mov	r3, r0
}
 80027ea:	4618      	mov	r0, r3
 80027ec:	bd80      	pop	{r7, pc}

080027ee <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80027ee:	b480      	push	{r7}
 80027f0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80027f2:	b672      	cpsid	i
}
 80027f4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 80027f6:	bf00      	nop
 80027f8:	e7fd      	b.n	80027f6 <Error_Handler+0x8>
	...

080027fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b083      	sub	sp, #12
 8002800:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	607b      	str	r3, [r7, #4]
 8002806:	4b10      	ldr	r3, [pc, #64]	@ (8002848 <HAL_MspInit+0x4c>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280a:	4a0f      	ldr	r2, [pc, #60]	@ (8002848 <HAL_MspInit+0x4c>)
 800280c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002810:	6453      	str	r3, [r2, #68]	@ 0x44
 8002812:	4b0d      	ldr	r3, [pc, #52]	@ (8002848 <HAL_MspInit+0x4c>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800281a:	607b      	str	r3, [r7, #4]
 800281c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	603b      	str	r3, [r7, #0]
 8002822:	4b09      	ldr	r3, [pc, #36]	@ (8002848 <HAL_MspInit+0x4c>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002826:	4a08      	ldr	r2, [pc, #32]	@ (8002848 <HAL_MspInit+0x4c>)
 8002828:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800282c:	6413      	str	r3, [r2, #64]	@ 0x40
 800282e:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <HAL_MspInit+0x4c>)
 8002830:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002832:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800283a:	bf00      	nop
 800283c:	370c      	adds	r7, #12
 800283e:	46bd      	mov	sp, r7
 8002840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002844:	4770      	bx	lr
 8002846:	bf00      	nop
 8002848:	40023800 	.word	0x40023800

0800284c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b08a      	sub	sp, #40	@ 0x28
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002854:	f107 0314 	add.w	r3, r7, #20
 8002858:	2200      	movs	r2, #0
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	605a      	str	r2, [r3, #4]
 800285e:	609a      	str	r2, [r3, #8]
 8002860:	60da      	str	r2, [r3, #12]
 8002862:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a17      	ldr	r2, [pc, #92]	@ (80028c8 <HAL_ADC_MspInit+0x7c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d127      	bne.n	80028be <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
 8002872:	4b16      	ldr	r3, [pc, #88]	@ (80028cc <HAL_ADC_MspInit+0x80>)
 8002874:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002876:	4a15      	ldr	r2, [pc, #84]	@ (80028cc <HAL_ADC_MspInit+0x80>)
 8002878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800287c:	6453      	str	r3, [r2, #68]	@ 0x44
 800287e:	4b13      	ldr	r3, [pc, #76]	@ (80028cc <HAL_ADC_MspInit+0x80>)
 8002880:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002882:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002886:	613b      	str	r3, [r7, #16]
 8002888:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	60fb      	str	r3, [r7, #12]
 800288e:	4b0f      	ldr	r3, [pc, #60]	@ (80028cc <HAL_ADC_MspInit+0x80>)
 8002890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002892:	4a0e      	ldr	r2, [pc, #56]	@ (80028cc <HAL_ADC_MspInit+0x80>)
 8002894:	f043 0302 	orr.w	r3, r3, #2
 8002898:	6313      	str	r3, [r2, #48]	@ 0x30
 800289a:	4b0c      	ldr	r3, [pc, #48]	@ (80028cc <HAL_ADC_MspInit+0x80>)
 800289c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289e:	f003 0302 	and.w	r3, r3, #2
 80028a2:	60fb      	str	r3, [r7, #12]
 80028a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80028a6:	2302      	movs	r3, #2
 80028a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028aa:	2303      	movs	r3, #3
 80028ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028b2:	f107 0314 	add.w	r3, r7, #20
 80028b6:	4619      	mov	r1, r3
 80028b8:	4805      	ldr	r0, [pc, #20]	@ (80028d0 <HAL_ADC_MspInit+0x84>)
 80028ba:	f001 fa09 	bl	8003cd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80028be:	bf00      	nop
 80028c0:	3728      	adds	r7, #40	@ 0x28
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40012000 	.word	0x40012000
 80028cc:	40023800 	.word	0x40023800
 80028d0:	40020400 	.word	0x40020400

080028d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08a      	sub	sp, #40	@ 0x28
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028dc:	f107 0314 	add.w	r3, r7, #20
 80028e0:	2200      	movs	r2, #0
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	605a      	str	r2, [r3, #4]
 80028e6:	609a      	str	r2, [r3, #8]
 80028e8:	60da      	str	r2, [r3, #12]
 80028ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a19      	ldr	r2, [pc, #100]	@ (8002958 <HAL_I2C_MspInit+0x84>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d12b      	bne.n	800294e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	4b18      	ldr	r3, [pc, #96]	@ (800295c <HAL_I2C_MspInit+0x88>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	4a17      	ldr	r2, [pc, #92]	@ (800295c <HAL_I2C_MspInit+0x88>)
 8002900:	f043 0302 	orr.w	r3, r3, #2
 8002904:	6313      	str	r3, [r2, #48]	@ 0x30
 8002906:	4b15      	ldr	r3, [pc, #84]	@ (800295c <HAL_I2C_MspInit+0x88>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	613b      	str	r3, [r7, #16]
 8002910:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002912:	23c0      	movs	r3, #192	@ 0xc0
 8002914:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002916:	2312      	movs	r3, #18
 8002918:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800291a:	2301      	movs	r3, #1
 800291c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291e:	2303      	movs	r3, #3
 8002920:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002922:	2304      	movs	r3, #4
 8002924:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002926:	f107 0314 	add.w	r3, r7, #20
 800292a:	4619      	mov	r1, r3
 800292c:	480c      	ldr	r0, [pc, #48]	@ (8002960 <HAL_I2C_MspInit+0x8c>)
 800292e:	f001 f9cf 	bl	8003cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
 8002936:	4b09      	ldr	r3, [pc, #36]	@ (800295c <HAL_I2C_MspInit+0x88>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293a:	4a08      	ldr	r2, [pc, #32]	@ (800295c <HAL_I2C_MspInit+0x88>)
 800293c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002940:	6413      	str	r3, [r2, #64]	@ 0x40
 8002942:	4b06      	ldr	r3, [pc, #24]	@ (800295c <HAL_I2C_MspInit+0x88>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002946:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800294a:	60fb      	str	r3, [r7, #12]
 800294c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800294e:	bf00      	nop
 8002950:	3728      	adds	r7, #40	@ 0x28
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40005400 	.word	0x40005400
 800295c:	40023800 	.word	0x40023800
 8002960:	40020400 	.word	0x40020400

08002964 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08a      	sub	sp, #40	@ 0x28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002984:	d13a      	bne.n	80029fc <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a04 <HAL_PCD_MspInit+0xa0>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	4a1d      	ldr	r2, [pc, #116]	@ (8002a04 <HAL_PCD_MspInit+0xa0>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6313      	str	r3, [r2, #48]	@ 0x30
 8002996:	4b1b      	ldr	r3, [pc, #108]	@ (8002a04 <HAL_PCD_MspInit+0xa0>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80029a2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80029a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a8:	2302      	movs	r3, #2
 80029aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b0:	2303      	movs	r3, #3
 80029b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80029b4:	230a      	movs	r3, #10
 80029b6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	4619      	mov	r1, r3
 80029be:	4812      	ldr	r0, [pc, #72]	@ (8002a08 <HAL_PCD_MspInit+0xa4>)
 80029c0:	f001 f986 	bl	8003cd0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80029c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002a04 <HAL_PCD_MspInit+0xa0>)
 80029c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029c8:	4a0e      	ldr	r2, [pc, #56]	@ (8002a04 <HAL_PCD_MspInit+0xa0>)
 80029ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80029ce:	6353      	str	r3, [r2, #52]	@ 0x34
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002a04 <HAL_PCD_MspInit+0xa0>)
 80029d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029d8:	4a0a      	ldr	r2, [pc, #40]	@ (8002a04 <HAL_PCD_MspInit+0xa0>)
 80029da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80029de:	6453      	str	r3, [r2, #68]	@ 0x44
 80029e0:	4b08      	ldr	r3, [pc, #32]	@ (8002a04 <HAL_PCD_MspInit+0xa0>)
 80029e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80029ec:	2200      	movs	r2, #0
 80029ee:	2100      	movs	r1, #0
 80029f0:	2043      	movs	r0, #67	@ 0x43
 80029f2:	f000 ff28 	bl	8003846 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80029f6:	2043      	movs	r0, #67	@ 0x43
 80029f8:	f000 ff41 	bl	800387e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80029fc:	bf00      	nop
 80029fe:	3728      	adds	r7, #40	@ 0x28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}
 8002a04:	40023800 	.word	0x40023800
 8002a08:	40020000 	.word	0x40020000

08002a0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8002a10:	bf00      	nop
 8002a12:	e7fd      	b.n	8002a10 <NMI_Handler+0x4>

08002a14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a14:	b480      	push	{r7}
 8002a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm("BKPT #0\n");
 8002a18:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a1a:	bf00      	nop
 8002a1c:	e7fd      	b.n	8002a1a <HardFault_Handler+0x6>

08002a1e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a22:	bf00      	nop
 8002a24:	e7fd      	b.n	8002a22 <MemManage_Handler+0x4>

08002a26 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a26:	b480      	push	{r7}
 8002a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a2a:	bf00      	nop
 8002a2c:	e7fd      	b.n	8002a2a <BusFault_Handler+0x4>

08002a2e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a2e:	b480      	push	{r7}
 8002a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a32:	bf00      	nop
 8002a34:	e7fd      	b.n	8002a32 <UsageFault_Handler+0x4>

08002a36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a36:	b480      	push	{r7}
 8002a38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a52:	b480      	push	{r7}
 8002a54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a56:	bf00      	nop
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a64:	f000 f9de 	bl	8002e24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  system_ticks++;
 8002a68:	4b03      	ldr	r3, [pc, #12]	@ (8002a78 <SysTick_Handler+0x18>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	4a02      	ldr	r2, [pc, #8]	@ (8002a78 <SysTick_Handler+0x18>)
 8002a70:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 8002a72:	bf00      	nop
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	20000ac0 	.word	0x20000ac0

08002a7c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(BOARD_DEVICE_RHPORT_NUM);
 8002a80:	2000      	movs	r0, #0
 8002a82:	f007 fec9 	bl	800a818 <dcd_int_handler>
	return;
 8002a86:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002a88:	bd80      	pop	{r7, pc}

08002a8a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a8a:	b480      	push	{r7}
 8002a8c:	af00      	add	r7, sp, #0
  return 1;
 8002a8e:	2301      	movs	r3, #1
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <_kill>:

int _kill(int pid, int sig)
{
 8002a9a:	b580      	push	{r7, lr}
 8002a9c:	b082      	sub	sp, #8
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002aa4:	f008 fe2e 	bl	800b704 <__errno>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2216      	movs	r2, #22
 8002aac:	601a      	str	r2, [r3, #0]
  return -1;
 8002aae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3708      	adds	r7, #8
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}

08002aba <_exit>:

void _exit (int status)
{
 8002aba:	b580      	push	{r7, lr}
 8002abc:	b082      	sub	sp, #8
 8002abe:	af00      	add	r7, sp, #0
 8002ac0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002ac2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff ffe7 	bl	8002a9a <_kill>
  while (1) {}    /* Make sure we hang here */
 8002acc:	bf00      	nop
 8002ace:	e7fd      	b.n	8002acc <_exit+0x12>

08002ad0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
 8002ae0:	e00a      	b.n	8002af8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002ae2:	f3af 8000 	nop.w
 8002ae6:	4601      	mov	r1, r0
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	1c5a      	adds	r2, r3, #1
 8002aec:	60ba      	str	r2, [r7, #8]
 8002aee:	b2ca      	uxtb	r2, r1
 8002af0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	3301      	adds	r3, #1
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	429a      	cmp	r2, r3
 8002afe:	dbf0      	blt.n	8002ae2 <_read+0x12>
  }

  return len;
 8002b00:	687b      	ldr	r3, [r7, #4]
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3718      	adds	r7, #24
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b086      	sub	sp, #24
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b16:	2300      	movs	r3, #0
 8002b18:	617b      	str	r3, [r7, #20]
 8002b1a:	e009      	b.n	8002b30 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	1c5a      	adds	r2, r3, #1
 8002b20:	60ba      	str	r2, [r7, #8]
 8002b22:	781b      	ldrb	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b2a:	697b      	ldr	r3, [r7, #20]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	617b      	str	r3, [r7, #20]
 8002b30:	697a      	ldr	r2, [r7, #20]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	dbf1      	blt.n	8002b1c <_write+0x12>
  }
  return len;
 8002b38:	687b      	ldr	r3, [r7, #4]
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <_close>:

int _close(int file)
{
 8002b42:	b480      	push	{r7}
 8002b44:	b083      	sub	sp, #12
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002b4a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	370c      	adds	r7, #12
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr

08002b5a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b5a:	b480      	push	{r7}
 8002b5c:	b083      	sub	sp, #12
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002b64:	683b      	ldr	r3, [r7, #0]
 8002b66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002b6a:	605a      	str	r2, [r3, #4]
  return 0;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <_isatty>:

int _isatty(int file)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002b82:	2301      	movs	r3, #1
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b9c:	2300      	movs	r3, #0
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3714      	adds	r7, #20
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
	...

08002bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bb4:	4a14      	ldr	r2, [pc, #80]	@ (8002c08 <_sbrk+0x5c>)
 8002bb6:	4b15      	ldr	r3, [pc, #84]	@ (8002c0c <_sbrk+0x60>)
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002bc0:	4b13      	ldr	r3, [pc, #76]	@ (8002c10 <_sbrk+0x64>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d102      	bne.n	8002bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002bc8:	4b11      	ldr	r3, [pc, #68]	@ (8002c10 <_sbrk+0x64>)
 8002bca:	4a12      	ldr	r2, [pc, #72]	@ (8002c14 <_sbrk+0x68>)
 8002bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002bce:	4b10      	ldr	r3, [pc, #64]	@ (8002c10 <_sbrk+0x64>)
 8002bd0:	681a      	ldr	r2, [r3, #0]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	693a      	ldr	r2, [r7, #16]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d207      	bcs.n	8002bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002bdc:	f008 fd92 	bl	800b704 <__errno>
 8002be0:	4603      	mov	r3, r0
 8002be2:	220c      	movs	r2, #12
 8002be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002be6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002bea:	e009      	b.n	8002c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002bec:	4b08      	ldr	r3, [pc, #32]	@ (8002c10 <_sbrk+0x64>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002bf2:	4b07      	ldr	r3, [pc, #28]	@ (8002c10 <_sbrk+0x64>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	4a05      	ldr	r2, [pc, #20]	@ (8002c10 <_sbrk+0x64>)
 8002bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002bfe:	68fb      	ldr	r3, [r7, #12]
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3718      	adds	r7, #24
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20020000 	.word	0x20020000
 8002c0c:	00000400 	.word	0x00000400
 8002c10:	20000ac4 	.word	0x20000ac4
 8002c14:	20001000 	.word	0x20001000

08002c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c1c:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <SystemInit+0x20>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c22:	4a05      	ldr	r2, [pc, #20]	@ (8002c38 <SystemInit+0x20>)
 8002c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 8002c40:	4b02      	ldr	r3, [pc, #8]	@ (8002c4c <tud_descriptor_device_cb+0x10>)
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	46bd      	mov	sp, r7
 8002c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4a:	4770      	bx	lr
 8002c4c:	0800d0d8 	.word	0x0800d0d8

08002c50 <tud_hid_descriptor_report_cb>:

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_hid_descriptor_report_cb(uint8_t instance)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	4603      	mov	r3, r0
 8002c58:	71fb      	strb	r3, [r7, #7]
  (void) instance;
  return desc_hid_report;
 8002c5a:	4b03      	ldr	r3, [pc, #12]	@ (8002c68 <tud_hid_descriptor_report_cb+0x18>)
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	370c      	adds	r7, #12
 8002c60:	46bd      	mov	sp, r7
 8002c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c66:	4770      	bx	lr
 8002c68:	0800d0ec 	.word	0x0800d0ec

08002c6c <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	4603      	mov	r3, r0
 8002c74:	71fb      	strb	r3, [r7, #7]
  (void) index; // for multiple configurations
  return desc_configuration;
 8002c76:	4b03      	ldr	r3, [pc, #12]	@ (8002c84 <tud_descriptor_configuration_cb+0x18>)
}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr
 8002c84:	0800d148 	.word	0x0800d148

08002c88 <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	460a      	mov	r2, r1
 8002c92:	71fb      	strb	r3, [r7, #7]
 8002c94:	4613      	mov	r3, r2
 8002c96:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 8002c98:	79fb      	ldrb	r3, [r7, #7]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d108      	bne.n	8002cb0 <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8002c9e:	4b21      	ldr	r3, [pc, #132]	@ (8002d24 <tud_descriptor_string_cb+0x9c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	881b      	ldrh	r3, [r3, #0]
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	4b20      	ldr	r3, [pc, #128]	@ (8002d28 <tud_descriptor_string_cb+0xa0>)
 8002ca8:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 8002caa:	2301      	movs	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
 8002cae:	e027      	b.n	8002d00 <tud_descriptor_string_cb+0x78>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8002cb0:	79fb      	ldrb	r3, [r7, #7]
 8002cb2:	2b05      	cmp	r3, #5
 8002cb4:	d901      	bls.n	8002cba <tud_descriptor_string_cb+0x32>
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e02f      	b.n	8002d1a <tud_descriptor_string_cb+0x92>

    const char* str = string_desc_arr[index];
 8002cba:	79fb      	ldrb	r3, [r7, #7]
 8002cbc:	4a19      	ldr	r2, [pc, #100]	@ (8002d24 <tud_descriptor_string_cb+0x9c>)
 8002cbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002cc2:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = strlen(str);
 8002cc4:	68b8      	ldr	r0, [r7, #8]
 8002cc6:	f7fd fa95 	bl	80001f4 <strlen>
 8002cca:	4603      	mov	r3, r0
 8002ccc:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	2b1f      	cmp	r3, #31
 8002cd2:	d901      	bls.n	8002cd8 <tud_descriptor_string_cb+0x50>
 8002cd4:	231f      	movs	r3, #31
 8002cd6:	73fb      	strb	r3, [r7, #15]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 8002cd8:	2300      	movs	r3, #0
 8002cda:	73bb      	strb	r3, [r7, #14]
 8002cdc:	e00c      	b.n	8002cf8 <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 8002cde:	7bbb      	ldrb	r3, [r7, #14]
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	781a      	ldrb	r2, [r3, #0]
 8002ce6:	7bbb      	ldrb	r3, [r7, #14]
 8002ce8:	3301      	adds	r3, #1
 8002cea:	4611      	mov	r1, r2
 8002cec:	4a0e      	ldr	r2, [pc, #56]	@ (8002d28 <tud_descriptor_string_cb+0xa0>)
 8002cee:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 8002cf2:	7bbb      	ldrb	r3, [r7, #14]
 8002cf4:	3301      	adds	r3, #1
 8002cf6:	73bb      	strb	r3, [r7, #14]
 8002cf8:	7bba      	ldrb	r2, [r7, #14]
 8002cfa:	7bfb      	ldrb	r3, [r7, #15]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d3ee      	bcc.n	8002cde <tud_descriptor_string_cb+0x56>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	3301      	adds	r3, #1
 8002d04:	b29b      	uxth	r3, r3
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	b21b      	sxth	r3, r3
 8002d0c:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8002d10:	b21b      	sxth	r3, r3
 8002d12:	b29a      	uxth	r2, r3
 8002d14:	4b04      	ldr	r3, [pc, #16]	@ (8002d28 <tud_descriptor_string_cb+0xa0>)
 8002d16:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8002d18:	4b03      	ldr	r3, [pc, #12]	@ (8002d28 <tud_descriptor_string_cb+0xa0>)
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3710      	adds	r7, #16
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000004 	.word	0x20000004
 8002d28:	20000ac8 	.word	0x20000ac8

08002d2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d30:	f7ff ff72 	bl	8002c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d34:	480c      	ldr	r0, [pc, #48]	@ (8002d68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d36:	490d      	ldr	r1, [pc, #52]	@ (8002d6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d38:	4a0d      	ldr	r2, [pc, #52]	@ (8002d70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d3c:	e002      	b.n	8002d44 <LoopCopyDataInit>

08002d3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d42:	3304      	adds	r3, #4

08002d44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d48:	d3f9      	bcc.n	8002d3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d4a:	4a0a      	ldr	r2, [pc, #40]	@ (8002d74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d4c:	4c0a      	ldr	r4, [pc, #40]	@ (8002d78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d50:	e001      	b.n	8002d56 <LoopFillZerobss>

08002d52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d54:	3204      	adds	r2, #4

08002d56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d58:	d3fb      	bcc.n	8002d52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d5a:	f008 fcd9 	bl	800b710 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d5e:	f7ff faf5 	bl	800234c <main>
  bx  lr    
 8002d62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d6c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8002d70:	0800d404 	.word	0x0800d404
  ldr r2, =_sbss
 8002d74:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8002d78:	20001000 	.word	0x20001000

08002d7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d7c:	e7fe      	b.n	8002d7c <ADC_IRQHandler>
	...

08002d80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d84:	4b0e      	ldr	r3, [pc, #56]	@ (8002dc0 <HAL_Init+0x40>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a0d      	ldr	r2, [pc, #52]	@ (8002dc0 <HAL_Init+0x40>)
 8002d8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d90:	4b0b      	ldr	r3, [pc, #44]	@ (8002dc0 <HAL_Init+0x40>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a0a      	ldr	r2, [pc, #40]	@ (8002dc0 <HAL_Init+0x40>)
 8002d96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d9c:	4b08      	ldr	r3, [pc, #32]	@ (8002dc0 <HAL_Init+0x40>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a07      	ldr	r2, [pc, #28]	@ (8002dc0 <HAL_Init+0x40>)
 8002da2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002da6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002da8:	2003      	movs	r0, #3
 8002daa:	f000 fd41 	bl	8003830 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dae:	200f      	movs	r0, #15
 8002db0:	f000 f808 	bl	8002dc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002db4:	f7ff fd22 	bl	80027fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	bd80      	pop	{r7, pc}
 8002dbe:	bf00      	nop
 8002dc0:	40023c00 	.word	0x40023c00

08002dc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b082      	sub	sp, #8
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002dcc:	4b12      	ldr	r3, [pc, #72]	@ (8002e18 <HAL_InitTick+0x54>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	4b12      	ldr	r3, [pc, #72]	@ (8002e1c <HAL_InitTick+0x58>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002dda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002dde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de2:	4618      	mov	r0, r3
 8002de4:	f000 fd59 	bl	800389a <HAL_SYSTICK_Config>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e00e      	b.n	8002e10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2b0f      	cmp	r3, #15
 8002df6:	d80a      	bhi.n	8002e0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	6879      	ldr	r1, [r7, #4]
 8002dfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002e00:	f000 fd21 	bl	8003846 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e04:	4a06      	ldr	r2, [pc, #24]	@ (8002e20 <HAL_InitTick+0x5c>)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	e000      	b.n	8002e10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
}
 8002e10:	4618      	mov	r0, r3
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}
 8002e18:	20000000 	.word	0x20000000
 8002e1c:	20000020 	.word	0x20000020
 8002e20:	2000001c 	.word	0x2000001c

08002e24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e28:	4b06      	ldr	r3, [pc, #24]	@ (8002e44 <HAL_IncTick+0x20>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	4b06      	ldr	r3, [pc, #24]	@ (8002e48 <HAL_IncTick+0x24>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4413      	add	r3, r2
 8002e34:	4a04      	ldr	r2, [pc, #16]	@ (8002e48 <HAL_IncTick+0x24>)
 8002e36:	6013      	str	r3, [r2, #0]
}
 8002e38:	bf00      	nop
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
 8002e42:	bf00      	nop
 8002e44:	20000020 	.word	0x20000020
 8002e48:	20000b08 	.word	0x20000b08

08002e4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e50:	4b03      	ldr	r3, [pc, #12]	@ (8002e60 <HAL_GetTick+0x14>)
 8002e52:	681b      	ldr	r3, [r3, #0]
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	46bd      	mov	sp, r7
 8002e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	20000b08 	.word	0x20000b08

08002e64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e6c:	f7ff ffee 	bl	8002e4c <HAL_GetTick>
 8002e70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e7c:	d005      	beq.n	8002e8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8002ea8 <HAL_Delay+0x44>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	461a      	mov	r2, r3
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	4413      	add	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e8a:	bf00      	nop
 8002e8c:	f7ff ffde 	bl	8002e4c <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	68fa      	ldr	r2, [r7, #12]
 8002e98:	429a      	cmp	r2, r3
 8002e9a:	d8f7      	bhi.n	8002e8c <HAL_Delay+0x28>
  {
  }
}
 8002e9c:	bf00      	nop
 8002e9e:	bf00      	nop
 8002ea0:	3710      	adds	r7, #16
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}
 8002ea6:	bf00      	nop
 8002ea8:	20000020 	.word	0x20000020

08002eac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d101      	bne.n	8002ec2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	e033      	b.n	8002f2a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d109      	bne.n	8002ede <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f7ff fcbe 	bl	800284c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee2:	f003 0310 	and.w	r3, r3, #16
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d118      	bne.n	8002f1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ef2:	f023 0302 	bic.w	r3, r3, #2
 8002ef6:	f043 0202 	orr.w	r2, r3, #2
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002efe:	6878      	ldr	r0, [r7, #4]
 8002f00:	f000 faca 	bl	8003498 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2200      	movs	r2, #0
 8002f08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0e:	f023 0303 	bic.w	r3, r3, #3
 8002f12:	f043 0201 	orr.w	r2, r3, #1
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	641a      	str	r2, [r3, #64]	@ 0x40
 8002f1a:	e001      	b.n	8002f20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002f34:	b480      	push	{r7}
 8002f36:	b085      	sub	sp, #20
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_ADC_Start+0x1a>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e097      	b.n	800307e <HAL_ADC_Start+0x14a>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 0301 	and.w	r3, r3, #1
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d018      	beq.n	8002f96 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f74:	4b45      	ldr	r3, [pc, #276]	@ (800308c <HAL_ADC_Start+0x158>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a45      	ldr	r2, [pc, #276]	@ (8003090 <HAL_ADC_Start+0x15c>)
 8002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f7e:	0c9a      	lsrs	r2, r3, #18
 8002f80:	4613      	mov	r3, r2
 8002f82:	005b      	lsls	r3, r3, #1
 8002f84:	4413      	add	r3, r2
 8002f86:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002f88:	e002      	b.n	8002f90 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002f8a:	68bb      	ldr	r3, [r7, #8]
 8002f8c:	3b01      	subs	r3, #1
 8002f8e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002f90:	68bb      	ldr	r3, [r7, #8]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f9      	bne.n	8002f8a <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f003 0301 	and.w	r3, r3, #1
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d15f      	bne.n	8003064 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002fac:	f023 0301 	bic.w	r3, r3, #1
 8002fb0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d007      	beq.n	8002fd6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fca:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002fce:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fde:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fe2:	d106      	bne.n	8002ff2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe8:	f023 0206 	bic.w	r2, r3, #6
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	645a      	str	r2, [r3, #68]	@ 0x44
 8002ff0:	e002      	b.n	8002ff8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003000:	4b24      	ldr	r3, [pc, #144]	@ (8003094 <HAL_ADC_Start+0x160>)
 8003002:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800300c:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 031f 	and.w	r3, r3, #31
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10f      	bne.n	800303a <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d129      	bne.n	800307c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	689a      	ldr	r2, [r3, #8]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003036:	609a      	str	r2, [r3, #8]
 8003038:	e020      	b.n	800307c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	4a16      	ldr	r2, [pc, #88]	@ (8003098 <HAL_ADC_Start+0x164>)
 8003040:	4293      	cmp	r3, r2
 8003042:	d11b      	bne.n	800307c <HAL_ADC_Start+0x148>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d114      	bne.n	800307c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003060:	609a      	str	r2, [r3, #8]
 8003062:	e00b      	b.n	800307c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003068:	f043 0210 	orr.w	r2, r3, #16
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003074:	f043 0201 	orr.w	r2, r3, #1
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	20000000 	.word	0x20000000
 8003090:	431bde83 	.word	0x431bde83
 8003094:	40012300 	.word	0x40012300
 8003098:	40012000 	.word	0x40012000

0800309c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 800309c:	b480      	push	{r7}
 800309e:	b083      	sub	sp, #12
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_ADC_Stop+0x16>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e021      	b.n	80030f6 <HAL_ADC_Stop+0x5a>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689a      	ldr	r2, [r3, #8]
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f022 0201 	bic.w	r2, r2, #1
 80030c8:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d109      	bne.n	80030ec <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030dc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80030e0:	f023 0301 	bic.w	r3, r3, #1
 80030e4:	f043 0201 	orr.w	r2, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80030f4:	2300      	movs	r3, #0
}
 80030f6:	4618      	mov	r0, r3
 80030f8:	370c      	adds	r7, #12
 80030fa:	46bd      	mov	sp, r7
 80030fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003100:	4770      	bx	lr

08003102 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b084      	sub	sp, #16
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
 800310a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800310c:	2300      	movs	r3, #0
 800310e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800311a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800311e:	d113      	bne.n	8003148 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800312a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800312e:	d10b      	bne.n	8003148 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003134:	f043 0220 	orr.w	r2, r3, #32
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e063      	b.n	8003210 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003148:	f7ff fe80 	bl	8002e4c <HAL_GetTick>
 800314c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800314e:	e021      	b.n	8003194 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003156:	d01d      	beq.n	8003194 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d007      	beq.n	800316e <HAL_ADC_PollForConversion+0x6c>
 800315e:	f7ff fe75 	bl	8002e4c <HAL_GetTick>
 8003162:	4602      	mov	r2, r0
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d212      	bcs.n	8003194 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0302 	and.w	r3, r3, #2
 8003178:	2b02      	cmp	r3, #2
 800317a:	d00b      	beq.n	8003194 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003180:	f043 0204 	orr.w	r2, r3, #4
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2200      	movs	r2, #0
 800318c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e03d      	b.n	8003210 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d1d6      	bne.n	8003150 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f06f 0212 	mvn.w	r2, #18
 80031aa:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d123      	bne.n	800320e <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d11f      	bne.n	800320e <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d006      	beq.n	80031ea <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d111      	bne.n	800320e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ee:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d105      	bne.n	800320e <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003206:	f043 0201 	orr.w	r2, r3, #1
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 800320e:	2300      	movs	r3, #0
}
 8003210:	4618      	mov	r0, r3
 8003212:	3710      	adds	r7, #16
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}

08003218 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003226:	4618      	mov	r0, r3
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
	...

08003234 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003234:	b480      	push	{r7}
 8003236:	b085      	sub	sp, #20
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800323e:	2300      	movs	r3, #0
 8003240:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x1c>
 800324c:	2302      	movs	r3, #2
 800324e:	e113      	b.n	8003478 <HAL_ADC_ConfigChannel+0x244>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2b09      	cmp	r3, #9
 800325e:	d925      	bls.n	80032ac <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68d9      	ldr	r1, [r3, #12]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	b29b      	uxth	r3, r3
 800326c:	461a      	mov	r2, r3
 800326e:	4613      	mov	r3, r2
 8003270:	005b      	lsls	r3, r3, #1
 8003272:	4413      	add	r3, r2
 8003274:	3b1e      	subs	r3, #30
 8003276:	2207      	movs	r2, #7
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43da      	mvns	r2, r3
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	400a      	ands	r2, r1
 8003284:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	68d9      	ldr	r1, [r3, #12]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	b29b      	uxth	r3, r3
 8003296:	4618      	mov	r0, r3
 8003298:	4603      	mov	r3, r0
 800329a:	005b      	lsls	r3, r3, #1
 800329c:	4403      	add	r3, r0
 800329e:	3b1e      	subs	r3, #30
 80032a0:	409a      	lsls	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	60da      	str	r2, [r3, #12]
 80032aa:	e022      	b.n	80032f2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6919      	ldr	r1, [r3, #16]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	b29b      	uxth	r3, r3
 80032b8:	461a      	mov	r2, r3
 80032ba:	4613      	mov	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4413      	add	r3, r2
 80032c0:	2207      	movs	r2, #7
 80032c2:	fa02 f303 	lsl.w	r3, r2, r3
 80032c6:	43da      	mvns	r2, r3
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	400a      	ands	r2, r1
 80032ce:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6919      	ldr	r1, [r3, #16]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689a      	ldr	r2, [r3, #8]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	b29b      	uxth	r3, r3
 80032e0:	4618      	mov	r0, r3
 80032e2:	4603      	mov	r3, r0
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4403      	add	r3, r0
 80032e8:	409a      	lsls	r2, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b06      	cmp	r3, #6
 80032f8:	d824      	bhi.n	8003344 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	685a      	ldr	r2, [r3, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	4413      	add	r3, r2
 800330a:	3b05      	subs	r3, #5
 800330c:	221f      	movs	r2, #31
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43da      	mvns	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	400a      	ands	r2, r1
 800331a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	b29b      	uxth	r3, r3
 8003328:	4618      	mov	r0, r3
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	4413      	add	r3, r2
 8003334:	3b05      	subs	r3, #5
 8003336:	fa00 f203 	lsl.w	r2, r0, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	635a      	str	r2, [r3, #52]	@ 0x34
 8003342:	e04c      	b.n	80033de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	2b0c      	cmp	r3, #12
 800334a:	d824      	bhi.n	8003396 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	685a      	ldr	r2, [r3, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	3b23      	subs	r3, #35	@ 0x23
 800335e:	221f      	movs	r2, #31
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43da      	mvns	r2, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	400a      	ands	r2, r1
 800336c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	b29b      	uxth	r3, r3
 800337a:	4618      	mov	r0, r3
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685a      	ldr	r2, [r3, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	3b23      	subs	r3, #35	@ 0x23
 8003388:	fa00 f203 	lsl.w	r2, r0, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	430a      	orrs	r2, r1
 8003392:	631a      	str	r2, [r3, #48]	@ 0x30
 8003394:	e023      	b.n	80033de <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685a      	ldr	r2, [r3, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4413      	add	r3, r2
 80033a6:	3b41      	subs	r3, #65	@ 0x41
 80033a8:	221f      	movs	r2, #31
 80033aa:	fa02 f303 	lsl.w	r3, r2, r3
 80033ae:	43da      	mvns	r2, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	400a      	ands	r2, r1
 80033b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	b29b      	uxth	r3, r3
 80033c4:	4618      	mov	r0, r3
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	685a      	ldr	r2, [r3, #4]
 80033ca:	4613      	mov	r3, r2
 80033cc:	009b      	lsls	r3, r3, #2
 80033ce:	4413      	add	r3, r2
 80033d0:	3b41      	subs	r3, #65	@ 0x41
 80033d2:	fa00 f203 	lsl.w	r2, r0, r3
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	430a      	orrs	r2, r1
 80033dc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80033de:	4b29      	ldr	r3, [pc, #164]	@ (8003484 <HAL_ADC_ConfigChannel+0x250>)
 80033e0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a28      	ldr	r2, [pc, #160]	@ (8003488 <HAL_ADC_ConfigChannel+0x254>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d10f      	bne.n	800340c <HAL_ADC_ConfigChannel+0x1d8>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2b12      	cmp	r3, #18
 80033f2:	d10b      	bne.n	800340c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a1d      	ldr	r2, [pc, #116]	@ (8003488 <HAL_ADC_ConfigChannel+0x254>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d12b      	bne.n	800346e <HAL_ADC_ConfigChannel+0x23a>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a1c      	ldr	r2, [pc, #112]	@ (800348c <HAL_ADC_ConfigChannel+0x258>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d003      	beq.n	8003428 <HAL_ADC_ConfigChannel+0x1f4>
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b11      	cmp	r3, #17
 8003426:	d122      	bne.n	800346e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a11      	ldr	r2, [pc, #68]	@ (800348c <HAL_ADC_ConfigChannel+0x258>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d111      	bne.n	800346e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800344a:	4b11      	ldr	r3, [pc, #68]	@ (8003490 <HAL_ADC_ConfigChannel+0x25c>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a11      	ldr	r2, [pc, #68]	@ (8003494 <HAL_ADC_ConfigChannel+0x260>)
 8003450:	fba2 2303 	umull	r2, r3, r2, r3
 8003454:	0c9a      	lsrs	r2, r3, #18
 8003456:	4613      	mov	r3, r2
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	4413      	add	r3, r2
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003460:	e002      	b.n	8003468 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	3b01      	subs	r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d1f9      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003476:	2300      	movs	r3, #0
}
 8003478:	4618      	mov	r0, r3
 800347a:	3714      	adds	r7, #20
 800347c:	46bd      	mov	sp, r7
 800347e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003482:	4770      	bx	lr
 8003484:	40012300 	.word	0x40012300
 8003488:	40012000 	.word	0x40012000
 800348c:	10000012 	.word	0x10000012
 8003490:	20000000 	.word	0x20000000
 8003494:	431bde83 	.word	0x431bde83

08003498 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003498:	b480      	push	{r7}
 800349a:	b085      	sub	sp, #20
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034a0:	4b79      	ldr	r3, [pc, #484]	@ (8003688 <ADC_Init+0x1f0>)
 80034a2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	685a      	ldr	r2, [r3, #4]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	431a      	orrs	r2, r3
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80034cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	6859      	ldr	r1, [r3, #4]
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	691b      	ldr	r3, [r3, #16]
 80034d8:	021a      	lsls	r2, r3, #8
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	430a      	orrs	r2, r1
 80034e0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	685a      	ldr	r2, [r3, #4]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80034f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6859      	ldr	r1, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	430a      	orrs	r2, r1
 8003502:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	689a      	ldr	r2, [r3, #8]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003512:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6899      	ldr	r1, [r3, #8]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68da      	ldr	r2, [r3, #12]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	430a      	orrs	r2, r1
 8003524:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800352a:	4a58      	ldr	r2, [pc, #352]	@ (800368c <ADC_Init+0x1f4>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d022      	beq.n	8003576 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	689a      	ldr	r2, [r3, #8]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800353e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6899      	ldr	r1, [r3, #8]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	430a      	orrs	r2, r1
 8003550:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003560:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6899      	ldr	r1, [r3, #8]
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	e00f      	b.n	8003596 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003584:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003594:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	689a      	ldr	r2, [r3, #8]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f022 0202 	bic.w	r2, r2, #2
 80035a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6899      	ldr	r1, [r3, #8]
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	7e1b      	ldrb	r3, [r3, #24]
 80035b0:	005a      	lsls	r2, r3, #1
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	430a      	orrs	r2, r1
 80035b8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d01b      	beq.n	80035fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685a      	ldr	r2, [r3, #4]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035d2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80035e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6859      	ldr	r1, [r3, #4]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ee:	3b01      	subs	r3, #1
 80035f0:	035a      	lsls	r2, r3, #13
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]
 80035fa:	e007      	b.n	800360c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800360a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800361a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	69db      	ldr	r3, [r3, #28]
 8003626:	3b01      	subs	r3, #1
 8003628:	051a      	lsls	r2, r3, #20
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	689a      	ldr	r2, [r3, #8]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003640:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	6899      	ldr	r1, [r3, #8]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800364e:	025a      	lsls	r2, r3, #9
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689a      	ldr	r2, [r3, #8]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003666:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	6899      	ldr	r1, [r3, #8]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	029a      	lsls	r2, r3, #10
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	609a      	str	r2, [r3, #8]
}
 800367c:	bf00      	nop
 800367e:	3714      	adds	r7, #20
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr
 8003688:	40012300 	.word	0x40012300
 800368c:	0f000001 	.word	0x0f000001

08003690 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003690:	b480      	push	{r7}
 8003692:	b085      	sub	sp, #20
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f003 0307 	and.w	r3, r3, #7
 800369e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036a0:	4b0c      	ldr	r3, [pc, #48]	@ (80036d4 <__NVIC_SetPriorityGrouping+0x44>)
 80036a2:	68db      	ldr	r3, [r3, #12]
 80036a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80036ac:	4013      	ands	r3, r2
 80036ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036b8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80036bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036c2:	4a04      	ldr	r2, [pc, #16]	@ (80036d4 <__NVIC_SetPriorityGrouping+0x44>)
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	60d3      	str	r3, [r2, #12]
}
 80036c8:	bf00      	nop
 80036ca:	3714      	adds	r7, #20
 80036cc:	46bd      	mov	sp, r7
 80036ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d2:	4770      	bx	lr
 80036d4:	e000ed00 	.word	0xe000ed00

080036d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036dc:	4b04      	ldr	r3, [pc, #16]	@ (80036f0 <__NVIC_GetPriorityGrouping+0x18>)
 80036de:	68db      	ldr	r3, [r3, #12]
 80036e0:	0a1b      	lsrs	r3, r3, #8
 80036e2:	f003 0307 	and.w	r3, r3, #7
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr
 80036f0:	e000ed00 	.word	0xe000ed00

080036f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b083      	sub	sp, #12
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	4603      	mov	r3, r0
 80036fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003702:	2b00      	cmp	r3, #0
 8003704:	db0b      	blt.n	800371e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003706:	79fb      	ldrb	r3, [r7, #7]
 8003708:	f003 021f 	and.w	r2, r3, #31
 800370c:	4907      	ldr	r1, [pc, #28]	@ (800372c <__NVIC_EnableIRQ+0x38>)
 800370e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003712:	095b      	lsrs	r3, r3, #5
 8003714:	2001      	movs	r0, #1
 8003716:	fa00 f202 	lsl.w	r2, r0, r2
 800371a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800371e:	bf00      	nop
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	e000e100 	.word	0xe000e100

08003730 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	6039      	str	r1, [r7, #0]
 800373a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800373c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003740:	2b00      	cmp	r3, #0
 8003742:	db0a      	blt.n	800375a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	b2da      	uxtb	r2, r3
 8003748:	490c      	ldr	r1, [pc, #48]	@ (800377c <__NVIC_SetPriority+0x4c>)
 800374a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800374e:	0112      	lsls	r2, r2, #4
 8003750:	b2d2      	uxtb	r2, r2
 8003752:	440b      	add	r3, r1
 8003754:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003758:	e00a      	b.n	8003770 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	b2da      	uxtb	r2, r3
 800375e:	4908      	ldr	r1, [pc, #32]	@ (8003780 <__NVIC_SetPriority+0x50>)
 8003760:	79fb      	ldrb	r3, [r7, #7]
 8003762:	f003 030f 	and.w	r3, r3, #15
 8003766:	3b04      	subs	r3, #4
 8003768:	0112      	lsls	r2, r2, #4
 800376a:	b2d2      	uxtb	r2, r2
 800376c:	440b      	add	r3, r1
 800376e:	761a      	strb	r2, [r3, #24]
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr
 800377c:	e000e100 	.word	0xe000e100
 8003780:	e000ed00 	.word	0xe000ed00

08003784 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003784:	b480      	push	{r7}
 8003786:	b089      	sub	sp, #36	@ 0x24
 8003788:	af00      	add	r7, sp, #0
 800378a:	60f8      	str	r0, [r7, #12]
 800378c:	60b9      	str	r1, [r7, #8]
 800378e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f003 0307 	and.w	r3, r3, #7
 8003796:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	f1c3 0307 	rsb	r3, r3, #7
 800379e:	2b04      	cmp	r3, #4
 80037a0:	bf28      	it	cs
 80037a2:	2304      	movcs	r3, #4
 80037a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	3304      	adds	r3, #4
 80037aa:	2b06      	cmp	r3, #6
 80037ac:	d902      	bls.n	80037b4 <NVIC_EncodePriority+0x30>
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	3b03      	subs	r3, #3
 80037b2:	e000      	b.n	80037b6 <NVIC_EncodePriority+0x32>
 80037b4:	2300      	movs	r3, #0
 80037b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80037bc:	69bb      	ldr	r3, [r7, #24]
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	43da      	mvns	r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	401a      	ands	r2, r3
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80037d0:	697b      	ldr	r3, [r7, #20]
 80037d2:	fa01 f303 	lsl.w	r3, r1, r3
 80037d6:	43d9      	mvns	r1, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037dc:	4313      	orrs	r3, r2
         );
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3724      	adds	r7, #36	@ 0x24
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
	...

080037ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3b01      	subs	r3, #1
 80037f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80037fc:	d301      	bcc.n	8003802 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037fe:	2301      	movs	r3, #1
 8003800:	e00f      	b.n	8003822 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003802:	4a0a      	ldr	r2, [pc, #40]	@ (800382c <SysTick_Config+0x40>)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	3b01      	subs	r3, #1
 8003808:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800380a:	210f      	movs	r1, #15
 800380c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003810:	f7ff ff8e 	bl	8003730 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003814:	4b05      	ldr	r3, [pc, #20]	@ (800382c <SysTick_Config+0x40>)
 8003816:	2200      	movs	r2, #0
 8003818:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800381a:	4b04      	ldr	r3, [pc, #16]	@ (800382c <SysTick_Config+0x40>)
 800381c:	2207      	movs	r2, #7
 800381e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	e000e010 	.word	0xe000e010

08003830 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f7ff ff29 	bl	8003690 <__NVIC_SetPriorityGrouping>
}
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}

08003846 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003846:	b580      	push	{r7, lr}
 8003848:	b086      	sub	sp, #24
 800384a:	af00      	add	r7, sp, #0
 800384c:	4603      	mov	r3, r0
 800384e:	60b9      	str	r1, [r7, #8]
 8003850:	607a      	str	r2, [r7, #4]
 8003852:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003854:	2300      	movs	r3, #0
 8003856:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003858:	f7ff ff3e 	bl	80036d8 <__NVIC_GetPriorityGrouping>
 800385c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	68b9      	ldr	r1, [r7, #8]
 8003862:	6978      	ldr	r0, [r7, #20]
 8003864:	f7ff ff8e 	bl	8003784 <NVIC_EncodePriority>
 8003868:	4602      	mov	r2, r0
 800386a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800386e:	4611      	mov	r1, r2
 8003870:	4618      	mov	r0, r3
 8003872:	f7ff ff5d 	bl	8003730 <__NVIC_SetPriority>
}
 8003876:	bf00      	nop
 8003878:	3718      	adds	r7, #24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd80      	pop	{r7, pc}

0800387e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800387e:	b580      	push	{r7, lr}
 8003880:	b082      	sub	sp, #8
 8003882:	af00      	add	r7, sp, #0
 8003884:	4603      	mov	r3, r0
 8003886:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003888:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800388c:	4618      	mov	r0, r3
 800388e:	f7ff ff31 	bl	80036f4 <__NVIC_EnableIRQ>
}
 8003892:	bf00      	nop
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b082      	sub	sp, #8
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff ffa2 	bl	80037ec <SysTick_Config>
 80038a8:	4603      	mov	r3, r0
}
 80038aa:	4618      	mov	r0, r3
 80038ac:	3708      	adds	r7, #8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
	...

080038b4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	60f8      	str	r0, [r7, #12]
 80038bc:	60b9      	str	r1, [r7, #8]
 80038be:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80038c6:	4b23      	ldr	r3, [pc, #140]	@ (8003954 <HAL_FLASH_Program+0xa0>)
 80038c8:	7e1b      	ldrb	r3, [r3, #24]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_FLASH_Program+0x1e>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e03b      	b.n	800394a <HAL_FLASH_Program+0x96>
 80038d2:	4b20      	ldr	r3, [pc, #128]	@ (8003954 <HAL_FLASH_Program+0xa0>)
 80038d4:	2201      	movs	r2, #1
 80038d6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80038d8:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80038dc:	f000 f870 	bl	80039c0 <FLASH_WaitForLastOperation>
 80038e0:	4603      	mov	r3, r0
 80038e2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80038e4:	7dfb      	ldrb	r3, [r7, #23]
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d12b      	bne.n	8003942 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d105      	bne.n	80038fc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80038f0:	783b      	ldrb	r3, [r7, #0]
 80038f2:	4619      	mov	r1, r3
 80038f4:	68b8      	ldr	r0, [r7, #8]
 80038f6:	f000 f91b 	bl	8003b30 <FLASH_Program_Byte>
 80038fa:	e016      	b.n	800392a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d105      	bne.n	800390e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003902:	883b      	ldrh	r3, [r7, #0]
 8003904:	4619      	mov	r1, r3
 8003906:	68b8      	ldr	r0, [r7, #8]
 8003908:	f000 f8ee 	bl	8003ae8 <FLASH_Program_HalfWord>
 800390c:	e00d      	b.n	800392a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2b02      	cmp	r3, #2
 8003912:	d105      	bne.n	8003920 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	4619      	mov	r1, r3
 8003918:	68b8      	ldr	r0, [r7, #8]
 800391a:	f000 f8c3 	bl	8003aa4 <FLASH_Program_Word>
 800391e:	e004      	b.n	800392a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003920:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003924:	68b8      	ldr	r0, [r7, #8]
 8003926:	f000 f88b 	bl	8003a40 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800392a:	f24c 3050 	movw	r0, #50000	@ 0xc350
 800392e:	f000 f847 	bl	80039c0 <FLASH_WaitForLastOperation>
 8003932:	4603      	mov	r3, r0
 8003934:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003936:	4b08      	ldr	r3, [pc, #32]	@ (8003958 <HAL_FLASH_Program+0xa4>)
 8003938:	691b      	ldr	r3, [r3, #16]
 800393a:	4a07      	ldr	r2, [pc, #28]	@ (8003958 <HAL_FLASH_Program+0xa4>)
 800393c:	f023 0301 	bic.w	r3, r3, #1
 8003940:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003942:	4b04      	ldr	r3, [pc, #16]	@ (8003954 <HAL_FLASH_Program+0xa0>)
 8003944:	2200      	movs	r2, #0
 8003946:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003948:	7dfb      	ldrb	r3, [r7, #23]
}
 800394a:	4618      	mov	r0, r3
 800394c:	3718      	adds	r7, #24
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	20000b0c 	.word	0x20000b0c
 8003958:	40023c00 	.word	0x40023c00

0800395c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003962:	2300      	movs	r3, #0
 8003964:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003966:	4b0b      	ldr	r3, [pc, #44]	@ (8003994 <HAL_FLASH_Unlock+0x38>)
 8003968:	691b      	ldr	r3, [r3, #16]
 800396a:	2b00      	cmp	r3, #0
 800396c:	da0b      	bge.n	8003986 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800396e:	4b09      	ldr	r3, [pc, #36]	@ (8003994 <HAL_FLASH_Unlock+0x38>)
 8003970:	4a09      	ldr	r2, [pc, #36]	@ (8003998 <HAL_FLASH_Unlock+0x3c>)
 8003972:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003974:	4b07      	ldr	r3, [pc, #28]	@ (8003994 <HAL_FLASH_Unlock+0x38>)
 8003976:	4a09      	ldr	r2, [pc, #36]	@ (800399c <HAL_FLASH_Unlock+0x40>)
 8003978:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800397a:	4b06      	ldr	r3, [pc, #24]	@ (8003994 <HAL_FLASH_Unlock+0x38>)
 800397c:	691b      	ldr	r3, [r3, #16]
 800397e:	2b00      	cmp	r3, #0
 8003980:	da01      	bge.n	8003986 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003986:	79fb      	ldrb	r3, [r7, #7]
}
 8003988:	4618      	mov	r0, r3
 800398a:	370c      	adds	r7, #12
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr
 8003994:	40023c00 	.word	0x40023c00
 8003998:	45670123 	.word	0x45670123
 800399c:	cdef89ab 	.word	0xcdef89ab

080039a0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80039a0:	b480      	push	{r7}
 80039a2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80039a4:	4b05      	ldr	r3, [pc, #20]	@ (80039bc <HAL_FLASH_Lock+0x1c>)
 80039a6:	691b      	ldr	r3, [r3, #16]
 80039a8:	4a04      	ldr	r2, [pc, #16]	@ (80039bc <HAL_FLASH_Lock+0x1c>)
 80039aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80039ae:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80039b0:	2300      	movs	r3, #0
}
 80039b2:	4618      	mov	r0, r3
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	40023c00 	.word	0x40023c00

080039c0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b084      	sub	sp, #16
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039c8:	2300      	movs	r3, #0
 80039ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80039cc:	4b1a      	ldr	r3, [pc, #104]	@ (8003a38 <FLASH_WaitForLastOperation+0x78>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80039d2:	f7ff fa3b 	bl	8002e4c <HAL_GetTick>
 80039d6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80039d8:	e010      	b.n	80039fc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80039e0:	d00c      	beq.n	80039fc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d007      	beq.n	80039f8 <FLASH_WaitForLastOperation+0x38>
 80039e8:	f7ff fa30 	bl	8002e4c <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	687a      	ldr	r2, [r7, #4]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d201      	bcs.n	80039fc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e019      	b.n	8003a30 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80039fc:	4b0f      	ldr	r3, [pc, #60]	@ (8003a3c <FLASH_WaitForLastOperation+0x7c>)
 80039fe:	68db      	ldr	r3, [r3, #12]
 8003a00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d1e8      	bne.n	80039da <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8003a08:	4b0c      	ldr	r3, [pc, #48]	@ (8003a3c <FLASH_WaitForLastOperation+0x7c>)
 8003a0a:	68db      	ldr	r3, [r3, #12]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d002      	beq.n	8003a1a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003a14:	4b09      	ldr	r3, [pc, #36]	@ (8003a3c <FLASH_WaitForLastOperation+0x7c>)
 8003a16:	2201      	movs	r2, #1
 8003a18:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8003a1a:	4b08      	ldr	r3, [pc, #32]	@ (8003a3c <FLASH_WaitForLastOperation+0x7c>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f403 73f9 	and.w	r3, r3, #498	@ 0x1f2
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003a26:	f000 f8a5 	bl	8003b74 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
  
}  
 8003a30:	4618      	mov	r0, r3
 8003a32:	3710      	adds	r7, #16
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	20000b0c 	.word	0x20000b0c
 8003a3c:	40023c00 	.word	0x40023c00

08003a40 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b085      	sub	sp, #20
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003a4c:	4b14      	ldr	r3, [pc, #80]	@ (8003aa0 <FLASH_Program_DoubleWord+0x60>)
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	4a13      	ldr	r2, [pc, #76]	@ (8003aa0 <FLASH_Program_DoubleWord+0x60>)
 8003a52:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003a56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003a58:	4b11      	ldr	r3, [pc, #68]	@ (8003aa0 <FLASH_Program_DoubleWord+0x60>)
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	4a10      	ldr	r2, [pc, #64]	@ (8003aa0 <FLASH_Program_DoubleWord+0x60>)
 8003a5e:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8003a62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003a64:	4b0e      	ldr	r3, [pc, #56]	@ (8003aa0 <FLASH_Program_DoubleWord+0x60>)
 8003a66:	691b      	ldr	r3, [r3, #16]
 8003a68:	4a0d      	ldr	r2, [pc, #52]	@ (8003aa0 <FLASH_Program_DoubleWord+0x60>)
 8003a6a:	f043 0301 	orr.w	r3, r3, #1
 8003a6e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8003a76:	f3bf 8f6f 	isb	sy
}
 8003a7a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003a7c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003a80:	f04f 0200 	mov.w	r2, #0
 8003a84:	f04f 0300 	mov.w	r3, #0
 8003a88:	000a      	movs	r2, r1
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	68f9      	ldr	r1, [r7, #12]
 8003a8e:	3104      	adds	r1, #4
 8003a90:	4613      	mov	r3, r2
 8003a92:	600b      	str	r3, [r1, #0]
}
 8003a94:	bf00      	nop
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr
 8003aa0:	40023c00 	.word	0x40023c00

08003aa4 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003aae:	4b0d      	ldr	r3, [pc, #52]	@ (8003ae4 <FLASH_Program_Word+0x40>)
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	4a0c      	ldr	r2, [pc, #48]	@ (8003ae4 <FLASH_Program_Word+0x40>)
 8003ab4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ab8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8003aba:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae4 <FLASH_Program_Word+0x40>)
 8003abc:	691b      	ldr	r3, [r3, #16]
 8003abe:	4a09      	ldr	r2, [pc, #36]	@ (8003ae4 <FLASH_Program_Word+0x40>)
 8003ac0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003ac4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003ac6:	4b07      	ldr	r3, [pc, #28]	@ (8003ae4 <FLASH_Program_Word+0x40>)
 8003ac8:	691b      	ldr	r3, [r3, #16]
 8003aca:	4a06      	ldr	r2, [pc, #24]	@ (8003ae4 <FLASH_Program_Word+0x40>)
 8003acc:	f043 0301 	orr.w	r3, r3, #1
 8003ad0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	683a      	ldr	r2, [r7, #0]
 8003ad6:	601a      	str	r2, [r3, #0]
}
 8003ad8:	bf00      	nop
 8003ada:	370c      	adds	r7, #12
 8003adc:	46bd      	mov	sp, r7
 8003ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae2:	4770      	bx	lr
 8003ae4:	40023c00 	.word	0x40023c00

08003ae8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b083      	sub	sp, #12
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	460b      	mov	r3, r1
 8003af2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003af4:	4b0d      	ldr	r3, [pc, #52]	@ (8003b2c <FLASH_Program_HalfWord+0x44>)
 8003af6:	691b      	ldr	r3, [r3, #16]
 8003af8:	4a0c      	ldr	r2, [pc, #48]	@ (8003b2c <FLASH_Program_HalfWord+0x44>)
 8003afa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003afe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8003b00:	4b0a      	ldr	r3, [pc, #40]	@ (8003b2c <FLASH_Program_HalfWord+0x44>)
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	4a09      	ldr	r2, [pc, #36]	@ (8003b2c <FLASH_Program_HalfWord+0x44>)
 8003b06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003b0c:	4b07      	ldr	r3, [pc, #28]	@ (8003b2c <FLASH_Program_HalfWord+0x44>)
 8003b0e:	691b      	ldr	r3, [r3, #16]
 8003b10:	4a06      	ldr	r2, [pc, #24]	@ (8003b2c <FLASH_Program_HalfWord+0x44>)
 8003b12:	f043 0301 	orr.w	r3, r3, #1
 8003b16:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	887a      	ldrh	r2, [r7, #2]
 8003b1c:	801a      	strh	r2, [r3, #0]
}
 8003b1e:	bf00      	nop
 8003b20:	370c      	adds	r7, #12
 8003b22:	46bd      	mov	sp, r7
 8003b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b28:	4770      	bx	lr
 8003b2a:	bf00      	nop
 8003b2c:	40023c00 	.word	0x40023c00

08003b30 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	460b      	mov	r3, r1
 8003b3a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8003b70 <FLASH_Program_Byte+0x40>)
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	4a0b      	ldr	r2, [pc, #44]	@ (8003b70 <FLASH_Program_Byte+0x40>)
 8003b42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003b48:	4b09      	ldr	r3, [pc, #36]	@ (8003b70 <FLASH_Program_Byte+0x40>)
 8003b4a:	4a09      	ldr	r2, [pc, #36]	@ (8003b70 <FLASH_Program_Byte+0x40>)
 8003b4c:	691b      	ldr	r3, [r3, #16]
 8003b4e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003b50:	4b07      	ldr	r3, [pc, #28]	@ (8003b70 <FLASH_Program_Byte+0x40>)
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	4a06      	ldr	r2, [pc, #24]	@ (8003b70 <FLASH_Program_Byte+0x40>)
 8003b56:	f043 0301 	orr.w	r3, r3, #1
 8003b5a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	701a      	strb	r2, [r3, #0]
}
 8003b62:	bf00      	nop
 8003b64:	370c      	adds	r7, #12
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr
 8003b6e:	bf00      	nop
 8003b70:	40023c00 	.word	0x40023c00

08003b74 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003b74:	b480      	push	{r7}
 8003b76:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003b78:	4b2f      	ldr	r3, [pc, #188]	@ (8003c38 <FLASH_SetErrorCode+0xc4>)
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	f003 0310 	and.w	r3, r3, #16
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d008      	beq.n	8003b96 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003b84:	4b2d      	ldr	r3, [pc, #180]	@ (8003c3c <FLASH_SetErrorCode+0xc8>)
 8003b86:	69db      	ldr	r3, [r3, #28]
 8003b88:	f043 0310 	orr.w	r3, r3, #16
 8003b8c:	4a2b      	ldr	r2, [pc, #172]	@ (8003c3c <FLASH_SetErrorCode+0xc8>)
 8003b8e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003b90:	4b29      	ldr	r3, [pc, #164]	@ (8003c38 <FLASH_SetErrorCode+0xc4>)
 8003b92:	2210      	movs	r2, #16
 8003b94:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003b96:	4b28      	ldr	r3, [pc, #160]	@ (8003c38 <FLASH_SetErrorCode+0xc4>)
 8003b98:	68db      	ldr	r3, [r3, #12]
 8003b9a:	f003 0320 	and.w	r3, r3, #32
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d008      	beq.n	8003bb4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003ba2:	4b26      	ldr	r3, [pc, #152]	@ (8003c3c <FLASH_SetErrorCode+0xc8>)
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	f043 0308 	orr.w	r3, r3, #8
 8003baa:	4a24      	ldr	r2, [pc, #144]	@ (8003c3c <FLASH_SetErrorCode+0xc8>)
 8003bac:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003bae:	4b22      	ldr	r3, [pc, #136]	@ (8003c38 <FLASH_SetErrorCode+0xc4>)
 8003bb0:	2220      	movs	r2, #32
 8003bb2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003bb4:	4b20      	ldr	r3, [pc, #128]	@ (8003c38 <FLASH_SetErrorCode+0xc4>)
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d008      	beq.n	8003bd2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8003c3c <FLASH_SetErrorCode+0xc8>)
 8003bc2:	69db      	ldr	r3, [r3, #28]
 8003bc4:	f043 0304 	orr.w	r3, r3, #4
 8003bc8:	4a1c      	ldr	r2, [pc, #112]	@ (8003c3c <FLASH_SetErrorCode+0xc8>)
 8003bca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003bcc:	4b1a      	ldr	r3, [pc, #104]	@ (8003c38 <FLASH_SetErrorCode+0xc4>)
 8003bce:	2240      	movs	r2, #64	@ 0x40
 8003bd0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003bd2:	4b19      	ldr	r3, [pc, #100]	@ (8003c38 <FLASH_SetErrorCode+0xc4>)
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d008      	beq.n	8003bf0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8003bde:	4b17      	ldr	r3, [pc, #92]	@ (8003c3c <FLASH_SetErrorCode+0xc8>)
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f043 0302 	orr.w	r3, r3, #2
 8003be6:	4a15      	ldr	r2, [pc, #84]	@ (8003c3c <FLASH_SetErrorCode+0xc8>)
 8003be8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8003bea:	4b13      	ldr	r3, [pc, #76]	@ (8003c38 <FLASH_SetErrorCode+0xc4>)
 8003bec:	2280      	movs	r2, #128	@ 0x80
 8003bee:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8003bf0:	4b11      	ldr	r3, [pc, #68]	@ (8003c38 <FLASH_SetErrorCode+0xc4>)
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d009      	beq.n	8003c10 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8003bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8003c3c <FLASH_SetErrorCode+0xc8>)
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	f043 0301 	orr.w	r3, r3, #1
 8003c04:	4a0d      	ldr	r2, [pc, #52]	@ (8003c3c <FLASH_SetErrorCode+0xc8>)
 8003c06:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8003c08:	4b0b      	ldr	r3, [pc, #44]	@ (8003c38 <FLASH_SetErrorCode+0xc4>)
 8003c0a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003c0e:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003c10:	4b09      	ldr	r3, [pc, #36]	@ (8003c38 <FLASH_SetErrorCode+0xc4>)
 8003c12:	68db      	ldr	r3, [r3, #12]
 8003c14:	f003 0302 	and.w	r3, r3, #2
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d008      	beq.n	8003c2e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8003c1c:	4b07      	ldr	r3, [pc, #28]	@ (8003c3c <FLASH_SetErrorCode+0xc8>)
 8003c1e:	69db      	ldr	r3, [r3, #28]
 8003c20:	f043 0320 	orr.w	r3, r3, #32
 8003c24:	4a05      	ldr	r2, [pc, #20]	@ (8003c3c <FLASH_SetErrorCode+0xc8>)
 8003c26:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003c28:	4b03      	ldr	r3, [pc, #12]	@ (8003c38 <FLASH_SetErrorCode+0xc4>)
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	60da      	str	r2, [r3, #12]
  }
}
 8003c2e:	bf00      	nop
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr
 8003c38:	40023c00 	.word	0x40023c00
 8003c3c:	20000b0c 	.word	0x20000b0c

08003c40 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b085      	sub	sp, #20
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	460b      	mov	r3, r1
 8003c4a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d102      	bne.n	8003c5c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	e010      	b.n	8003c7e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	2b01      	cmp	r3, #1
 8003c60:	d103      	bne.n	8003c6a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8003c62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003c66:	60fb      	str	r3, [r7, #12]
 8003c68:	e009      	b.n	8003c7e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003c6a:	78fb      	ldrb	r3, [r7, #3]
 8003c6c:	2b02      	cmp	r3, #2
 8003c6e:	d103      	bne.n	8003c78 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8003c70:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	e002      	b.n	8003c7e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003c78:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8003c7c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003c7e:	4b13      	ldr	r3, [pc, #76]	@ (8003ccc <FLASH_Erase_Sector+0x8c>)
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	4a12      	ldr	r2, [pc, #72]	@ (8003ccc <FLASH_Erase_Sector+0x8c>)
 8003c84:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c88:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8003c8a:	4b10      	ldr	r3, [pc, #64]	@ (8003ccc <FLASH_Erase_Sector+0x8c>)
 8003c8c:	691a      	ldr	r2, [r3, #16]
 8003c8e:	490f      	ldr	r1, [pc, #60]	@ (8003ccc <FLASH_Erase_Sector+0x8c>)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4313      	orrs	r3, r2
 8003c94:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8003c96:	4b0d      	ldr	r3, [pc, #52]	@ (8003ccc <FLASH_Erase_Sector+0x8c>)
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8003ccc <FLASH_Erase_Sector+0x8c>)
 8003c9c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8003ca0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8003ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8003ccc <FLASH_Erase_Sector+0x8c>)
 8003ca4:	691a      	ldr	r2, [r3, #16]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	00db      	lsls	r3, r3, #3
 8003caa:	4313      	orrs	r3, r2
 8003cac:	4a07      	ldr	r2, [pc, #28]	@ (8003ccc <FLASH_Erase_Sector+0x8c>)
 8003cae:	f043 0302 	orr.w	r3, r3, #2
 8003cb2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003cb4:	4b05      	ldr	r3, [pc, #20]	@ (8003ccc <FLASH_Erase_Sector+0x8c>)
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	4a04      	ldr	r2, [pc, #16]	@ (8003ccc <FLASH_Erase_Sector+0x8c>)
 8003cba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cbe:	6113      	str	r3, [r2, #16]
}
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	40023c00 	.word	0x40023c00

08003cd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b089      	sub	sp, #36	@ 0x24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
 8003cd8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cde:	2300      	movs	r3, #0
 8003ce0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	61fb      	str	r3, [r7, #28]
 8003cea:	e159      	b.n	8003fa0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cec:	2201      	movs	r2, #1
 8003cee:	69fb      	ldr	r3, [r7, #28]
 8003cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	f040 8148 	bne.w	8003f9a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f003 0303 	and.w	r3, r3, #3
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d005      	beq.n	8003d22 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d1e:	2b02      	cmp	r3, #2
 8003d20:	d130      	bne.n	8003d84 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	689b      	ldr	r3, [r3, #8]
 8003d26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	005b      	lsls	r3, r3, #1
 8003d2c:	2203      	movs	r2, #3
 8003d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d32:	43db      	mvns	r3, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4013      	ands	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	68da      	ldr	r2, [r3, #12]
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	005b      	lsls	r3, r3, #1
 8003d42:	fa02 f303 	lsl.w	r3, r2, r3
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	69ba      	ldr	r2, [r7, #24]
 8003d50:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d58:	2201      	movs	r2, #1
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d60:	43db      	mvns	r3, r3
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	4013      	ands	r3, r2
 8003d66:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	091b      	lsrs	r3, r3, #4
 8003d6e:	f003 0201 	and.w	r2, r3, #1
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	fa02 f303 	lsl.w	r3, r2, r3
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f003 0303 	and.w	r3, r3, #3
 8003d8c:	2b03      	cmp	r3, #3
 8003d8e:	d017      	beq.n	8003dc0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d96:	69fb      	ldr	r3, [r7, #28]
 8003d98:	005b      	lsls	r3, r3, #1
 8003d9a:	2203      	movs	r2, #3
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	43db      	mvns	r3, r3
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	4013      	ands	r3, r2
 8003da6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	689a      	ldr	r2, [r3, #8]
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4313      	orrs	r3, r2
 8003db8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f003 0303 	and.w	r3, r3, #3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d123      	bne.n	8003e14 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	08da      	lsrs	r2, r3, #3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	3208      	adds	r2, #8
 8003dd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dda:	69fb      	ldr	r3, [r7, #28]
 8003ddc:	f003 0307 	and.w	r3, r3, #7
 8003de0:	009b      	lsls	r3, r3, #2
 8003de2:	220f      	movs	r2, #15
 8003de4:	fa02 f303 	lsl.w	r3, r2, r3
 8003de8:	43db      	mvns	r3, r3
 8003dea:	69ba      	ldr	r2, [r7, #24]
 8003dec:	4013      	ands	r3, r2
 8003dee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f003 0307 	and.w	r3, r3, #7
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e06:	69fb      	ldr	r3, [r7, #28]
 8003e08:	08da      	lsrs	r2, r3, #3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	3208      	adds	r2, #8
 8003e0e:	69b9      	ldr	r1, [r7, #24]
 8003e10:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	005b      	lsls	r3, r3, #1
 8003e1e:	2203      	movs	r2, #3
 8003e20:	fa02 f303 	lsl.w	r3, r2, r3
 8003e24:	43db      	mvns	r3, r3
 8003e26:	69ba      	ldr	r2, [r7, #24]
 8003e28:	4013      	ands	r3, r2
 8003e2a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 0203 	and.w	r2, r3, #3
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	005b      	lsls	r3, r3, #1
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	69ba      	ldr	r2, [r7, #24]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	f000 80a2 	beq.w	8003f9a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
 8003e5a:	4b57      	ldr	r3, [pc, #348]	@ (8003fb8 <HAL_GPIO_Init+0x2e8>)
 8003e5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e5e:	4a56      	ldr	r2, [pc, #344]	@ (8003fb8 <HAL_GPIO_Init+0x2e8>)
 8003e60:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003e64:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e66:	4b54      	ldr	r3, [pc, #336]	@ (8003fb8 <HAL_GPIO_Init+0x2e8>)
 8003e68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e6a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003e6e:	60fb      	str	r3, [r7, #12]
 8003e70:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e72:	4a52      	ldr	r2, [pc, #328]	@ (8003fbc <HAL_GPIO_Init+0x2ec>)
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	089b      	lsrs	r3, r3, #2
 8003e78:	3302      	adds	r3, #2
 8003e7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e80:	69fb      	ldr	r3, [r7, #28]
 8003e82:	f003 0303 	and.w	r3, r3, #3
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	220f      	movs	r2, #15
 8003e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4013      	ands	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a49      	ldr	r2, [pc, #292]	@ (8003fc0 <HAL_GPIO_Init+0x2f0>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d019      	beq.n	8003ed2 <HAL_GPIO_Init+0x202>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a48      	ldr	r2, [pc, #288]	@ (8003fc4 <HAL_GPIO_Init+0x2f4>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d013      	beq.n	8003ece <HAL_GPIO_Init+0x1fe>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a47      	ldr	r2, [pc, #284]	@ (8003fc8 <HAL_GPIO_Init+0x2f8>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d00d      	beq.n	8003eca <HAL_GPIO_Init+0x1fa>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a46      	ldr	r2, [pc, #280]	@ (8003fcc <HAL_GPIO_Init+0x2fc>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d007      	beq.n	8003ec6 <HAL_GPIO_Init+0x1f6>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	4a45      	ldr	r2, [pc, #276]	@ (8003fd0 <HAL_GPIO_Init+0x300>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d101      	bne.n	8003ec2 <HAL_GPIO_Init+0x1f2>
 8003ebe:	2304      	movs	r3, #4
 8003ec0:	e008      	b.n	8003ed4 <HAL_GPIO_Init+0x204>
 8003ec2:	2307      	movs	r3, #7
 8003ec4:	e006      	b.n	8003ed4 <HAL_GPIO_Init+0x204>
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e004      	b.n	8003ed4 <HAL_GPIO_Init+0x204>
 8003eca:	2302      	movs	r3, #2
 8003ecc:	e002      	b.n	8003ed4 <HAL_GPIO_Init+0x204>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e000      	b.n	8003ed4 <HAL_GPIO_Init+0x204>
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	69fa      	ldr	r2, [r7, #28]
 8003ed6:	f002 0203 	and.w	r2, r2, #3
 8003eda:	0092      	lsls	r2, r2, #2
 8003edc:	4093      	lsls	r3, r2
 8003ede:	69ba      	ldr	r2, [r7, #24]
 8003ee0:	4313      	orrs	r3, r2
 8003ee2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ee4:	4935      	ldr	r1, [pc, #212]	@ (8003fbc <HAL_GPIO_Init+0x2ec>)
 8003ee6:	69fb      	ldr	r3, [r7, #28]
 8003ee8:	089b      	lsrs	r3, r3, #2
 8003eea:	3302      	adds	r3, #2
 8003eec:	69ba      	ldr	r2, [r7, #24]
 8003eee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ef2:	4b38      	ldr	r3, [pc, #224]	@ (8003fd4 <HAL_GPIO_Init+0x304>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	43db      	mvns	r3, r3
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	4013      	ands	r3, r2
 8003f00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f16:	4a2f      	ldr	r2, [pc, #188]	@ (8003fd4 <HAL_GPIO_Init+0x304>)
 8003f18:	69bb      	ldr	r3, [r7, #24]
 8003f1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003fd4 <HAL_GPIO_Init+0x304>)
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	43db      	mvns	r3, r3
 8003f26:	69ba      	ldr	r2, [r7, #24]
 8003f28:	4013      	ands	r3, r2
 8003f2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f38:	69ba      	ldr	r2, [r7, #24]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f40:	4a24      	ldr	r2, [pc, #144]	@ (8003fd4 <HAL_GPIO_Init+0x304>)
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f46:	4b23      	ldr	r3, [pc, #140]	@ (8003fd4 <HAL_GPIO_Init+0x304>)
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4013      	ands	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f6a:	4a1a      	ldr	r2, [pc, #104]	@ (8003fd4 <HAL_GPIO_Init+0x304>)
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f70:	4b18      	ldr	r3, [pc, #96]	@ (8003fd4 <HAL_GPIO_Init+0x304>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f94:	4a0f      	ldr	r2, [pc, #60]	@ (8003fd4 <HAL_GPIO_Init+0x304>)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f9a:	69fb      	ldr	r3, [r7, #28]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	61fb      	str	r3, [r7, #28]
 8003fa0:	69fb      	ldr	r3, [r7, #28]
 8003fa2:	2b0f      	cmp	r3, #15
 8003fa4:	f67f aea2 	bls.w	8003cec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fa8:	bf00      	nop
 8003faa:	bf00      	nop
 8003fac:	3724      	adds	r7, #36	@ 0x24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	40013800 	.word	0x40013800
 8003fc0:	40020000 	.word	0x40020000
 8003fc4:	40020400 	.word	0x40020400
 8003fc8:	40020800 	.word	0x40020800
 8003fcc:	40020c00 	.word	0x40020c00
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	40013c00 	.word	0x40013c00

08003fd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b083      	sub	sp, #12
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	807b      	strh	r3, [r7, #2]
 8003fe4:	4613      	mov	r3, r2
 8003fe6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003fe8:	787b      	ldrb	r3, [r7, #1]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d003      	beq.n	8003ff6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003fee:	887a      	ldrh	r2, [r7, #2]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ff4:	e003      	b.n	8003ffe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ff6:	887b      	ldrh	r3, [r7, #2]
 8003ff8:	041a      	lsls	r2, r3, #16
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	619a      	str	r2, [r3, #24]
}
 8003ffe:	bf00      	nop
 8004000:	370c      	adds	r7, #12
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
	...

0800400c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d101      	bne.n	800401e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800401a:	2301      	movs	r3, #1
 800401c:	e12b      	b.n	8004276 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004024:	b2db      	uxtb	r3, r3
 8004026:	2b00      	cmp	r3, #0
 8004028:	d106      	bne.n	8004038 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7fe fc4e 	bl	80028d4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2224      	movs	r2, #36	@ 0x24
 800403c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681a      	ldr	r2, [r3, #0]
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f022 0201 	bic.w	r2, r2, #1
 800404e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	681a      	ldr	r2, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800405e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681a      	ldr	r2, [r3, #0]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800406e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004070:	f000 fe50 	bl	8004d14 <HAL_RCC_GetPCLK1Freq>
 8004074:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	4a81      	ldr	r2, [pc, #516]	@ (8004280 <HAL_I2C_Init+0x274>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d807      	bhi.n	8004090 <HAL_I2C_Init+0x84>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	4a80      	ldr	r2, [pc, #512]	@ (8004284 <HAL_I2C_Init+0x278>)
 8004084:	4293      	cmp	r3, r2
 8004086:	bf94      	ite	ls
 8004088:	2301      	movls	r3, #1
 800408a:	2300      	movhi	r3, #0
 800408c:	b2db      	uxtb	r3, r3
 800408e:	e006      	b.n	800409e <HAL_I2C_Init+0x92>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4a7d      	ldr	r2, [pc, #500]	@ (8004288 <HAL_I2C_Init+0x27c>)
 8004094:	4293      	cmp	r3, r2
 8004096:	bf94      	ite	ls
 8004098:	2301      	movls	r3, #1
 800409a:	2300      	movhi	r3, #0
 800409c:	b2db      	uxtb	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e0e7      	b.n	8004276 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	4a78      	ldr	r2, [pc, #480]	@ (800428c <HAL_I2C_Init+0x280>)
 80040aa:	fba2 2303 	umull	r2, r3, r2, r3
 80040ae:	0c9b      	lsrs	r3, r3, #18
 80040b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68ba      	ldr	r2, [r7, #8]
 80040c2:	430a      	orrs	r2, r1
 80040c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	4a6a      	ldr	r2, [pc, #424]	@ (8004280 <HAL_I2C_Init+0x274>)
 80040d6:	4293      	cmp	r3, r2
 80040d8:	d802      	bhi.n	80040e0 <HAL_I2C_Init+0xd4>
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	3301      	adds	r3, #1
 80040de:	e009      	b.n	80040f4 <HAL_I2C_Init+0xe8>
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040e6:	fb02 f303 	mul.w	r3, r2, r3
 80040ea:	4a69      	ldr	r2, [pc, #420]	@ (8004290 <HAL_I2C_Init+0x284>)
 80040ec:	fba2 2303 	umull	r2, r3, r2, r3
 80040f0:	099b      	lsrs	r3, r3, #6
 80040f2:	3301      	adds	r3, #1
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6812      	ldr	r2, [r2, #0]
 80040f8:	430b      	orrs	r3, r1
 80040fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	69db      	ldr	r3, [r3, #28]
 8004102:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004106:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	685b      	ldr	r3, [r3, #4]
 800410e:	495c      	ldr	r1, [pc, #368]	@ (8004280 <HAL_I2C_Init+0x274>)
 8004110:	428b      	cmp	r3, r1
 8004112:	d819      	bhi.n	8004148 <HAL_I2C_Init+0x13c>
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	1e59      	subs	r1, r3, #1
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	005b      	lsls	r3, r3, #1
 800411e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004122:	1c59      	adds	r1, r3, #1
 8004124:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004128:	400b      	ands	r3, r1
 800412a:	2b00      	cmp	r3, #0
 800412c:	d00a      	beq.n	8004144 <HAL_I2C_Init+0x138>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	1e59      	subs	r1, r3, #1
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	685b      	ldr	r3, [r3, #4]
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	fbb1 f3f3 	udiv	r3, r1, r3
 800413c:	3301      	adds	r3, #1
 800413e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004142:	e051      	b.n	80041e8 <HAL_I2C_Init+0x1dc>
 8004144:	2304      	movs	r3, #4
 8004146:	e04f      	b.n	80041e8 <HAL_I2C_Init+0x1dc>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	689b      	ldr	r3, [r3, #8]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d111      	bne.n	8004174 <HAL_I2C_Init+0x168>
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	1e58      	subs	r0, r3, #1
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6859      	ldr	r1, [r3, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	440b      	add	r3, r1
 800415e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004162:	3301      	adds	r3, #1
 8004164:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004168:	2b00      	cmp	r3, #0
 800416a:	bf0c      	ite	eq
 800416c:	2301      	moveq	r3, #1
 800416e:	2300      	movne	r3, #0
 8004170:	b2db      	uxtb	r3, r3
 8004172:	e012      	b.n	800419a <HAL_I2C_Init+0x18e>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	1e58      	subs	r0, r3, #1
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6859      	ldr	r1, [r3, #4]
 800417c:	460b      	mov	r3, r1
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	0099      	lsls	r1, r3, #2
 8004184:	440b      	add	r3, r1
 8004186:	fbb0 f3f3 	udiv	r3, r0, r3
 800418a:	3301      	adds	r3, #1
 800418c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004190:	2b00      	cmp	r3, #0
 8004192:	bf0c      	ite	eq
 8004194:	2301      	moveq	r3, #1
 8004196:	2300      	movne	r3, #0
 8004198:	b2db      	uxtb	r3, r3
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <HAL_I2C_Init+0x196>
 800419e:	2301      	movs	r3, #1
 80041a0:	e022      	b.n	80041e8 <HAL_I2C_Init+0x1dc>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10e      	bne.n	80041c8 <HAL_I2C_Init+0x1bc>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	1e58      	subs	r0, r3, #1
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6859      	ldr	r1, [r3, #4]
 80041b2:	460b      	mov	r3, r1
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	440b      	add	r3, r1
 80041b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80041bc:	3301      	adds	r3, #1
 80041be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041c6:	e00f      	b.n	80041e8 <HAL_I2C_Init+0x1dc>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	1e58      	subs	r0, r3, #1
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6859      	ldr	r1, [r3, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	440b      	add	r3, r1
 80041d6:	0099      	lsls	r1, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	fbb0 f3f3 	udiv	r3, r0, r3
 80041de:	3301      	adds	r3, #1
 80041e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041e8:	6879      	ldr	r1, [r7, #4]
 80041ea:	6809      	ldr	r1, [r1, #0]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	69da      	ldr	r2, [r3, #28]
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a1b      	ldr	r3, [r3, #32]
 8004202:	431a      	orrs	r2, r3
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	689b      	ldr	r3, [r3, #8]
 8004212:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004216:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800421a:	687a      	ldr	r2, [r7, #4]
 800421c:	6911      	ldr	r1, [r2, #16]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	68d2      	ldr	r2, [r2, #12]
 8004222:	4311      	orrs	r1, r2
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	6812      	ldr	r2, [r2, #0]
 8004228:	430b      	orrs	r3, r1
 800422a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	695a      	ldr	r2, [r3, #20]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	699b      	ldr	r3, [r3, #24]
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	430a      	orrs	r2, r1
 8004246:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0201 	orr.w	r2, r2, #1
 8004256:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2200      	movs	r2, #0
 800425c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3710      	adds	r7, #16
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	000186a0 	.word	0x000186a0
 8004284:	001e847f 	.word	0x001e847f
 8004288:	003d08ff 	.word	0x003d08ff
 800428c:	431bde83 	.word	0x431bde83
 8004290:	10624dd3 	.word	0x10624dd3

08004294 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004294:	b580      	push	{r7, lr}
 8004296:	b086      	sub	sp, #24
 8004298:	af02      	add	r7, sp, #8
 800429a:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d101      	bne.n	80042a6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e101      	b.n	80044aa <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d106      	bne.n	80042c6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80042c0:	6878      	ldr	r0, [r7, #4]
 80042c2:	f7fe fb4f 	bl	8002964 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2203      	movs	r2, #3
 80042ca:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042d4:	d102      	bne.n	80042dc <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f000 fd8f 	bl	8004e04 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6818      	ldr	r0, [r3, #0]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	7c1a      	ldrb	r2, [r3, #16]
 80042ee:	f88d 2000 	strb.w	r2, [sp]
 80042f2:	3304      	adds	r3, #4
 80042f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80042f6:	f000 fd21 	bl	8004d3c <USB_CoreInit>
 80042fa:	4603      	mov	r3, r0
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d005      	beq.n	800430c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2202      	movs	r2, #2
 8004304:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0ce      	b.n	80044aa <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2100      	movs	r1, #0
 8004312:	4618      	mov	r0, r3
 8004314:	f000 fd87 	bl	8004e26 <USB_SetCurrentMode>
 8004318:	4603      	mov	r3, r0
 800431a:	2b00      	cmp	r3, #0
 800431c:	d005      	beq.n	800432a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	2202      	movs	r2, #2
 8004322:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004326:	2301      	movs	r3, #1
 8004328:	e0bf      	b.n	80044aa <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800432a:	2300      	movs	r3, #0
 800432c:	73fb      	strb	r3, [r7, #15]
 800432e:	e04a      	b.n	80043c6 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004330:	7bfa      	ldrb	r2, [r7, #15]
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	4613      	mov	r3, r2
 8004336:	00db      	lsls	r3, r3, #3
 8004338:	4413      	add	r3, r2
 800433a:	009b      	lsls	r3, r3, #2
 800433c:	440b      	add	r3, r1
 800433e:	3315      	adds	r3, #21
 8004340:	2201      	movs	r2, #1
 8004342:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004344:	7bfa      	ldrb	r2, [r7, #15]
 8004346:	6879      	ldr	r1, [r7, #4]
 8004348:	4613      	mov	r3, r2
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4413      	add	r3, r2
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	3314      	adds	r3, #20
 8004354:	7bfa      	ldrb	r2, [r7, #15]
 8004356:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004358:	7bfa      	ldrb	r2, [r7, #15]
 800435a:	7bfb      	ldrb	r3, [r7, #15]
 800435c:	b298      	uxth	r0, r3
 800435e:	6879      	ldr	r1, [r7, #4]
 8004360:	4613      	mov	r3, r2
 8004362:	00db      	lsls	r3, r3, #3
 8004364:	4413      	add	r3, r2
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	440b      	add	r3, r1
 800436a:	332e      	adds	r3, #46	@ 0x2e
 800436c:	4602      	mov	r2, r0
 800436e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004370:	7bfa      	ldrb	r2, [r7, #15]
 8004372:	6879      	ldr	r1, [r7, #4]
 8004374:	4613      	mov	r3, r2
 8004376:	00db      	lsls	r3, r3, #3
 8004378:	4413      	add	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	440b      	add	r3, r1
 800437e:	3318      	adds	r3, #24
 8004380:	2200      	movs	r2, #0
 8004382:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004384:	7bfa      	ldrb	r2, [r7, #15]
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	4613      	mov	r3, r2
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	440b      	add	r3, r1
 8004392:	331c      	adds	r3, #28
 8004394:	2200      	movs	r2, #0
 8004396:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004398:	7bfa      	ldrb	r2, [r7, #15]
 800439a:	6879      	ldr	r1, [r7, #4]
 800439c:	4613      	mov	r3, r2
 800439e:	00db      	lsls	r3, r3, #3
 80043a0:	4413      	add	r3, r2
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	3320      	adds	r3, #32
 80043a8:	2200      	movs	r2, #0
 80043aa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80043ac:	7bfa      	ldrb	r2, [r7, #15]
 80043ae:	6879      	ldr	r1, [r7, #4]
 80043b0:	4613      	mov	r3, r2
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4413      	add	r3, r2
 80043b6:	009b      	lsls	r3, r3, #2
 80043b8:	440b      	add	r3, r1
 80043ba:	3324      	adds	r3, #36	@ 0x24
 80043bc:	2200      	movs	r2, #0
 80043be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043c0:	7bfb      	ldrb	r3, [r7, #15]
 80043c2:	3301      	adds	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	791b      	ldrb	r3, [r3, #4]
 80043ca:	7bfa      	ldrb	r2, [r7, #15]
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d3af      	bcc.n	8004330 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043d0:	2300      	movs	r3, #0
 80043d2:	73fb      	strb	r3, [r7, #15]
 80043d4:	e044      	b.n	8004460 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80043d6:	7bfa      	ldrb	r2, [r7, #15]
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	00db      	lsls	r3, r3, #3
 80043de:	4413      	add	r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80043e8:	2200      	movs	r2, #0
 80043ea:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80043ec:	7bfa      	ldrb	r2, [r7, #15]
 80043ee:	6879      	ldr	r1, [r7, #4]
 80043f0:	4613      	mov	r3, r2
 80043f2:	00db      	lsls	r3, r3, #3
 80043f4:	4413      	add	r3, r2
 80043f6:	009b      	lsls	r3, r3, #2
 80043f8:	440b      	add	r3, r1
 80043fa:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80043fe:	7bfa      	ldrb	r2, [r7, #15]
 8004400:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004402:	7bfa      	ldrb	r2, [r7, #15]
 8004404:	6879      	ldr	r1, [r7, #4]
 8004406:	4613      	mov	r3, r2
 8004408:	00db      	lsls	r3, r3, #3
 800440a:	4413      	add	r3, r2
 800440c:	009b      	lsls	r3, r3, #2
 800440e:	440b      	add	r3, r1
 8004410:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004414:	2200      	movs	r2, #0
 8004416:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004418:	7bfa      	ldrb	r2, [r7, #15]
 800441a:	6879      	ldr	r1, [r7, #4]
 800441c:	4613      	mov	r3, r2
 800441e:	00db      	lsls	r3, r3, #3
 8004420:	4413      	add	r3, r2
 8004422:	009b      	lsls	r3, r3, #2
 8004424:	440b      	add	r3, r1
 8004426:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800442a:	2200      	movs	r2, #0
 800442c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800442e:	7bfa      	ldrb	r2, [r7, #15]
 8004430:	6879      	ldr	r1, [r7, #4]
 8004432:	4613      	mov	r3, r2
 8004434:	00db      	lsls	r3, r3, #3
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004444:	7bfa      	ldrb	r2, [r7, #15]
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	4613      	mov	r3, r2
 800444a:	00db      	lsls	r3, r3, #3
 800444c:	4413      	add	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	440b      	add	r3, r1
 8004452:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004456:	2200      	movs	r2, #0
 8004458:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800445a:	7bfb      	ldrb	r3, [r7, #15]
 800445c:	3301      	adds	r3, #1
 800445e:	73fb      	strb	r3, [r7, #15]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	791b      	ldrb	r3, [r3, #4]
 8004464:	7bfa      	ldrb	r2, [r7, #15]
 8004466:	429a      	cmp	r2, r3
 8004468:	d3b5      	bcc.n	80043d6 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	6818      	ldr	r0, [r3, #0]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	7c1a      	ldrb	r2, [r3, #16]
 8004472:	f88d 2000 	strb.w	r2, [sp]
 8004476:	3304      	adds	r3, #4
 8004478:	cb0e      	ldmia	r3, {r1, r2, r3}
 800447a:	f000 fd21 	bl	8004ec0 <USB_DevInit>
 800447e:	4603      	mov	r3, r0
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2202      	movs	r2, #2
 8004488:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	e00c      	b.n	80044aa <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f000 fee9 	bl	800527a <USB_DevDisconnect>

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
	...

080044b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b086      	sub	sp, #24
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d101      	bne.n	80044c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e267      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f003 0301 	and.w	r3, r3, #1
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d075      	beq.n	80045be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044d2:	4b88      	ldr	r3, [pc, #544]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80044d4:	689b      	ldr	r3, [r3, #8]
 80044d6:	f003 030c 	and.w	r3, r3, #12
 80044da:	2b04      	cmp	r3, #4
 80044dc:	d00c      	beq.n	80044f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044de:	4b85      	ldr	r3, [pc, #532]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	d112      	bne.n	8004510 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80044ea:	4b82      	ldr	r3, [pc, #520]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80044f2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80044f6:	d10b      	bne.n	8004510 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80044f8:	4b7e      	ldr	r3, [pc, #504]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d05b      	beq.n	80045bc <HAL_RCC_OscConfig+0x108>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d157      	bne.n	80045bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e242      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004518:	d106      	bne.n	8004528 <HAL_RCC_OscConfig+0x74>
 800451a:	4b76      	ldr	r3, [pc, #472]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4a75      	ldr	r2, [pc, #468]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004520:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004524:	6013      	str	r3, [r2, #0]
 8004526:	e01d      	b.n	8004564 <HAL_RCC_OscConfig+0xb0>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004530:	d10c      	bne.n	800454c <HAL_RCC_OscConfig+0x98>
 8004532:	4b70      	ldr	r3, [pc, #448]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4a6f      	ldr	r2, [pc, #444]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004538:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	4b6d      	ldr	r3, [pc, #436]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a6c      	ldr	r2, [pc, #432]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004548:	6013      	str	r3, [r2, #0]
 800454a:	e00b      	b.n	8004564 <HAL_RCC_OscConfig+0xb0>
 800454c:	4b69      	ldr	r3, [pc, #420]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	4a68      	ldr	r2, [pc, #416]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004552:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004556:	6013      	str	r3, [r2, #0]
 8004558:	4b66      	ldr	r3, [pc, #408]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	4a65      	ldr	r2, [pc, #404]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 800455e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004562:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d013      	beq.n	8004594 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800456c:	f7fe fc6e 	bl	8002e4c <HAL_GetTick>
 8004570:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004574:	f7fe fc6a 	bl	8002e4c <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	693b      	ldr	r3, [r7, #16]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	@ 0x64
 8004580:	d901      	bls.n	8004586 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e207      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004586:	4b5b      	ldr	r3, [pc, #364]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800458e:	2b00      	cmp	r3, #0
 8004590:	d0f0      	beq.n	8004574 <HAL_RCC_OscConfig+0xc0>
 8004592:	e014      	b.n	80045be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004594:	f7fe fc5a 	bl	8002e4c <HAL_GetTick>
 8004598:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800459a:	e008      	b.n	80045ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800459c:	f7fe fc56 	bl	8002e4c <HAL_GetTick>
 80045a0:	4602      	mov	r2, r0
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	1ad3      	subs	r3, r2, r3
 80045a6:	2b64      	cmp	r3, #100	@ 0x64
 80045a8:	d901      	bls.n	80045ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80045aa:	2303      	movs	r3, #3
 80045ac:	e1f3      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045ae:	4b51      	ldr	r3, [pc, #324]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d1f0      	bne.n	800459c <HAL_RCC_OscConfig+0xe8>
 80045ba:	e000      	b.n	80045be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80045bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 0302 	and.w	r3, r3, #2
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d063      	beq.n	8004692 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045ca:	4b4a      	ldr	r3, [pc, #296]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f003 030c 	and.w	r3, r3, #12
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00b      	beq.n	80045ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045d6:	4b47      	ldr	r3, [pc, #284]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80045de:	2b08      	cmp	r3, #8
 80045e0:	d11c      	bne.n	800461c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80045e2:	4b44      	ldr	r3, [pc, #272]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d116      	bne.n	800461c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80045ee:	4b41      	ldr	r3, [pc, #260]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0302 	and.w	r3, r3, #2
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d005      	beq.n	8004606 <HAL_RCC_OscConfig+0x152>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68db      	ldr	r3, [r3, #12]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d001      	beq.n	8004606 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004602:	2301      	movs	r3, #1
 8004604:	e1c7      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004606:	4b3b      	ldr	r3, [pc, #236]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	00db      	lsls	r3, r3, #3
 8004614:	4937      	ldr	r1, [pc, #220]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004616:	4313      	orrs	r3, r2
 8004618:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800461a:	e03a      	b.n	8004692 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d020      	beq.n	8004666 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004624:	4b34      	ldr	r3, [pc, #208]	@ (80046f8 <HAL_RCC_OscConfig+0x244>)
 8004626:	2201      	movs	r2, #1
 8004628:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800462a:	f7fe fc0f 	bl	8002e4c <HAL_GetTick>
 800462e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004630:	e008      	b.n	8004644 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004632:	f7fe fc0b 	bl	8002e4c <HAL_GetTick>
 8004636:	4602      	mov	r2, r0
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	1ad3      	subs	r3, r2, r3
 800463c:	2b02      	cmp	r3, #2
 800463e:	d901      	bls.n	8004644 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004640:	2303      	movs	r3, #3
 8004642:	e1a8      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004644:	4b2b      	ldr	r3, [pc, #172]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0302 	and.w	r3, r3, #2
 800464c:	2b00      	cmp	r3, #0
 800464e:	d0f0      	beq.n	8004632 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004650:	4b28      	ldr	r3, [pc, #160]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	691b      	ldr	r3, [r3, #16]
 800465c:	00db      	lsls	r3, r3, #3
 800465e:	4925      	ldr	r1, [pc, #148]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004660:	4313      	orrs	r3, r2
 8004662:	600b      	str	r3, [r1, #0]
 8004664:	e015      	b.n	8004692 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004666:	4b24      	ldr	r3, [pc, #144]	@ (80046f8 <HAL_RCC_OscConfig+0x244>)
 8004668:	2200      	movs	r2, #0
 800466a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800466c:	f7fe fbee 	bl	8002e4c <HAL_GetTick>
 8004670:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004674:	f7fe fbea 	bl	8002e4c <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b02      	cmp	r3, #2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e187      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004686:	4b1b      	ldr	r3, [pc, #108]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1f0      	bne.n	8004674 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d036      	beq.n	800470c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	695b      	ldr	r3, [r3, #20]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d016      	beq.n	80046d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046a6:	4b15      	ldr	r3, [pc, #84]	@ (80046fc <HAL_RCC_OscConfig+0x248>)
 80046a8:	2201      	movs	r2, #1
 80046aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046ac:	f7fe fbce 	bl	8002e4c <HAL_GetTick>
 80046b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046b2:	e008      	b.n	80046c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046b4:	f7fe fbca 	bl	8002e4c <HAL_GetTick>
 80046b8:	4602      	mov	r2, r0
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	1ad3      	subs	r3, r2, r3
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d901      	bls.n	80046c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80046c2:	2303      	movs	r3, #3
 80046c4:	e167      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046c6:	4b0b      	ldr	r3, [pc, #44]	@ (80046f4 <HAL_RCC_OscConfig+0x240>)
 80046c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80046ca:	f003 0302 	and.w	r3, r3, #2
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d0f0      	beq.n	80046b4 <HAL_RCC_OscConfig+0x200>
 80046d2:	e01b      	b.n	800470c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80046d4:	4b09      	ldr	r3, [pc, #36]	@ (80046fc <HAL_RCC_OscConfig+0x248>)
 80046d6:	2200      	movs	r2, #0
 80046d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046da:	f7fe fbb7 	bl	8002e4c <HAL_GetTick>
 80046de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80046e0:	e00e      	b.n	8004700 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80046e2:	f7fe fbb3 	bl	8002e4c <HAL_GetTick>
 80046e6:	4602      	mov	r2, r0
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	1ad3      	subs	r3, r2, r3
 80046ec:	2b02      	cmp	r3, #2
 80046ee:	d907      	bls.n	8004700 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e150      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
 80046f4:	40023800 	.word	0x40023800
 80046f8:	42470000 	.word	0x42470000
 80046fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004700:	4b88      	ldr	r3, [pc, #544]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004702:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004704:	f003 0302 	and.w	r3, r3, #2
 8004708:	2b00      	cmp	r3, #0
 800470a:	d1ea      	bne.n	80046e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	f003 0304 	and.w	r3, r3, #4
 8004714:	2b00      	cmp	r3, #0
 8004716:	f000 8097 	beq.w	8004848 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800471a:	2300      	movs	r3, #0
 800471c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800471e:	4b81      	ldr	r3, [pc, #516]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10f      	bne.n	800474a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800472a:	2300      	movs	r3, #0
 800472c:	60bb      	str	r3, [r7, #8]
 800472e:	4b7d      	ldr	r3, [pc, #500]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004732:	4a7c      	ldr	r2, [pc, #496]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004738:	6413      	str	r3, [r2, #64]	@ 0x40
 800473a:	4b7a      	ldr	r3, [pc, #488]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 800473c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800473e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004742:	60bb      	str	r3, [r7, #8]
 8004744:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004746:	2301      	movs	r3, #1
 8004748:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800474a:	4b77      	ldr	r3, [pc, #476]	@ (8004928 <HAL_RCC_OscConfig+0x474>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004752:	2b00      	cmp	r3, #0
 8004754:	d118      	bne.n	8004788 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004756:	4b74      	ldr	r3, [pc, #464]	@ (8004928 <HAL_RCC_OscConfig+0x474>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a73      	ldr	r2, [pc, #460]	@ (8004928 <HAL_RCC_OscConfig+0x474>)
 800475c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004760:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004762:	f7fe fb73 	bl	8002e4c <HAL_GetTick>
 8004766:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004768:	e008      	b.n	800477c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800476a:	f7fe fb6f 	bl	8002e4c <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	2b02      	cmp	r3, #2
 8004776:	d901      	bls.n	800477c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004778:	2303      	movs	r3, #3
 800477a:	e10c      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800477c:	4b6a      	ldr	r3, [pc, #424]	@ (8004928 <HAL_RCC_OscConfig+0x474>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004784:	2b00      	cmp	r3, #0
 8004786:	d0f0      	beq.n	800476a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d106      	bne.n	800479e <HAL_RCC_OscConfig+0x2ea>
 8004790:	4b64      	ldr	r3, [pc, #400]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004794:	4a63      	ldr	r2, [pc, #396]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004796:	f043 0301 	orr.w	r3, r3, #1
 800479a:	6713      	str	r3, [r2, #112]	@ 0x70
 800479c:	e01c      	b.n	80047d8 <HAL_RCC_OscConfig+0x324>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b05      	cmp	r3, #5
 80047a4:	d10c      	bne.n	80047c0 <HAL_RCC_OscConfig+0x30c>
 80047a6:	4b5f      	ldr	r3, [pc, #380]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047aa:	4a5e      	ldr	r2, [pc, #376]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047ac:	f043 0304 	orr.w	r3, r3, #4
 80047b0:	6713      	str	r3, [r2, #112]	@ 0x70
 80047b2:	4b5c      	ldr	r3, [pc, #368]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047b6:	4a5b      	ldr	r2, [pc, #364]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047b8:	f043 0301 	orr.w	r3, r3, #1
 80047bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80047be:	e00b      	b.n	80047d8 <HAL_RCC_OscConfig+0x324>
 80047c0:	4b58      	ldr	r3, [pc, #352]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047c4:	4a57      	ldr	r2, [pc, #348]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047c6:	f023 0301 	bic.w	r3, r3, #1
 80047ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80047cc:	4b55      	ldr	r3, [pc, #340]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80047d0:	4a54      	ldr	r2, [pc, #336]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80047d2:	f023 0304 	bic.w	r3, r3, #4
 80047d6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d015      	beq.n	800480c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80047e0:	f7fe fb34 	bl	8002e4c <HAL_GetTick>
 80047e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047e6:	e00a      	b.n	80047fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80047e8:	f7fe fb30 	bl	8002e4c <HAL_GetTick>
 80047ec:	4602      	mov	r2, r0
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	1ad3      	subs	r3, r2, r3
 80047f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d901      	bls.n	80047fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80047fa:	2303      	movs	r3, #3
 80047fc:	e0cb      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80047fe:	4b49      	ldr	r3, [pc, #292]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004802:	f003 0302 	and.w	r3, r3, #2
 8004806:	2b00      	cmp	r3, #0
 8004808:	d0ee      	beq.n	80047e8 <HAL_RCC_OscConfig+0x334>
 800480a:	e014      	b.n	8004836 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800480c:	f7fe fb1e 	bl	8002e4c <HAL_GetTick>
 8004810:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004812:	e00a      	b.n	800482a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004814:	f7fe fb1a 	bl	8002e4c <HAL_GetTick>
 8004818:	4602      	mov	r2, r0
 800481a:	693b      	ldr	r3, [r7, #16]
 800481c:	1ad3      	subs	r3, r2, r3
 800481e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004822:	4293      	cmp	r3, r2
 8004824:	d901      	bls.n	800482a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e0b5      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800482a:	4b3e      	ldr	r3, [pc, #248]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 800482c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482e:	f003 0302 	and.w	r3, r3, #2
 8004832:	2b00      	cmp	r3, #0
 8004834:	d1ee      	bne.n	8004814 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004836:	7dfb      	ldrb	r3, [r7, #23]
 8004838:	2b01      	cmp	r3, #1
 800483a:	d105      	bne.n	8004848 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800483c:	4b39      	ldr	r3, [pc, #228]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 800483e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004840:	4a38      	ldr	r2, [pc, #224]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004842:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004846:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	699b      	ldr	r3, [r3, #24]
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 80a1 	beq.w	8004994 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004852:	4b34      	ldr	r3, [pc, #208]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	f003 030c 	and.w	r3, r3, #12
 800485a:	2b08      	cmp	r3, #8
 800485c:	d05c      	beq.n	8004918 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	2b02      	cmp	r3, #2
 8004864:	d141      	bne.n	80048ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004866:	4b31      	ldr	r3, [pc, #196]	@ (800492c <HAL_RCC_OscConfig+0x478>)
 8004868:	2200      	movs	r2, #0
 800486a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800486c:	f7fe faee 	bl	8002e4c <HAL_GetTick>
 8004870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004872:	e008      	b.n	8004886 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004874:	f7fe faea 	bl	8002e4c <HAL_GetTick>
 8004878:	4602      	mov	r2, r0
 800487a:	693b      	ldr	r3, [r7, #16]
 800487c:	1ad3      	subs	r3, r2, r3
 800487e:	2b02      	cmp	r3, #2
 8004880:	d901      	bls.n	8004886 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004882:	2303      	movs	r3, #3
 8004884:	e087      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004886:	4b27      	ldr	r3, [pc, #156]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1f0      	bne.n	8004874 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	69da      	ldr	r2, [r3, #28]
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a1b      	ldr	r3, [r3, #32]
 800489a:	431a      	orrs	r2, r3
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048a0:	019b      	lsls	r3, r3, #6
 80048a2:	431a      	orrs	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a8:	085b      	lsrs	r3, r3, #1
 80048aa:	3b01      	subs	r3, #1
 80048ac:	041b      	lsls	r3, r3, #16
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048b4:	061b      	lsls	r3, r3, #24
 80048b6:	491b      	ldr	r1, [pc, #108]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80048bc:	4b1b      	ldr	r3, [pc, #108]	@ (800492c <HAL_RCC_OscConfig+0x478>)
 80048be:	2201      	movs	r2, #1
 80048c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048c2:	f7fe fac3 	bl	8002e4c <HAL_GetTick>
 80048c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048c8:	e008      	b.n	80048dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048ca:	f7fe fabf 	bl	8002e4c <HAL_GetTick>
 80048ce:	4602      	mov	r2, r0
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	1ad3      	subs	r3, r2, r3
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d901      	bls.n	80048dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80048d8:	2303      	movs	r3, #3
 80048da:	e05c      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048dc:	4b11      	ldr	r3, [pc, #68]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d0f0      	beq.n	80048ca <HAL_RCC_OscConfig+0x416>
 80048e8:	e054      	b.n	8004994 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048ea:	4b10      	ldr	r3, [pc, #64]	@ (800492c <HAL_RCC_OscConfig+0x478>)
 80048ec:	2200      	movs	r2, #0
 80048ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048f0:	f7fe faac 	bl	8002e4c <HAL_GetTick>
 80048f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80048f6:	e008      	b.n	800490a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80048f8:	f7fe faa8 	bl	8002e4c <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	2b02      	cmp	r3, #2
 8004904:	d901      	bls.n	800490a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004906:	2303      	movs	r3, #3
 8004908:	e045      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490a:	4b06      	ldr	r3, [pc, #24]	@ (8004924 <HAL_RCC_OscConfig+0x470>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004912:	2b00      	cmp	r3, #0
 8004914:	d1f0      	bne.n	80048f8 <HAL_RCC_OscConfig+0x444>
 8004916:	e03d      	b.n	8004994 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	699b      	ldr	r3, [r3, #24]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d107      	bne.n	8004930 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e038      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
 8004924:	40023800 	.word	0x40023800
 8004928:	40007000 	.word	0x40007000
 800492c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004930:	4b1b      	ldr	r3, [pc, #108]	@ (80049a0 <HAL_RCC_OscConfig+0x4ec>)
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	2b01      	cmp	r3, #1
 800493c:	d028      	beq.n	8004990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004948:	429a      	cmp	r2, r3
 800494a:	d121      	bne.n	8004990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004956:	429a      	cmp	r2, r3
 8004958:	d11a      	bne.n	8004990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004960:	4013      	ands	r3, r2
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004966:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004968:	4293      	cmp	r3, r2
 800496a:	d111      	bne.n	8004990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004976:	085b      	lsrs	r3, r3, #1
 8004978:	3b01      	subs	r3, #1
 800497a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800497c:	429a      	cmp	r2, r3
 800497e:	d107      	bne.n	8004990 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800498c:	429a      	cmp	r2, r3
 800498e:	d001      	beq.n	8004994 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004990:	2301      	movs	r3, #1
 8004992:	e000      	b.n	8004996 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3718      	adds	r7, #24
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	40023800 	.word	0x40023800

080049a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d101      	bne.n	80049b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	e0cc      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80049b8:	4b68      	ldr	r3, [pc, #416]	@ (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 0307 	and.w	r3, r3, #7
 80049c0:	683a      	ldr	r2, [r7, #0]
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d90c      	bls.n	80049e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049c6:	4b65      	ldr	r3, [pc, #404]	@ (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 80049c8:	683a      	ldr	r2, [r7, #0]
 80049ca:	b2d2      	uxtb	r2, r2
 80049cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049ce:	4b63      	ldr	r3, [pc, #396]	@ (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 0307 	and.w	r3, r3, #7
 80049d6:	683a      	ldr	r2, [r7, #0]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d001      	beq.n	80049e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e0b8      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0302 	and.w	r3, r3, #2
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d020      	beq.n	8004a2e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 0304 	and.w	r3, r3, #4
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049f8:	4b59      	ldr	r3, [pc, #356]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	4a58      	ldr	r2, [pc, #352]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 80049fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a02:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f003 0308 	and.w	r3, r3, #8
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d005      	beq.n	8004a1c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a10:	4b53      	ldr	r3, [pc, #332]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	4a52      	ldr	r2, [pc, #328]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a16:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004a1a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a1c:	4b50      	ldr	r3, [pc, #320]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	494d      	ldr	r1, [pc, #308]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d044      	beq.n	8004ac4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d107      	bne.n	8004a52 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a42:	4b47      	ldr	r3, [pc, #284]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d119      	bne.n	8004a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e07f      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	685b      	ldr	r3, [r3, #4]
 8004a56:	2b02      	cmp	r3, #2
 8004a58:	d003      	beq.n	8004a62 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a5e:	2b03      	cmp	r3, #3
 8004a60:	d107      	bne.n	8004a72 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a62:	4b3f      	ldr	r3, [pc, #252]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d109      	bne.n	8004a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	e06f      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a72:	4b3b      	ldr	r3, [pc, #236]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0302 	and.w	r3, r3, #2
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d101      	bne.n	8004a82 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	e067      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a82:	4b37      	ldr	r3, [pc, #220]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a84:	689b      	ldr	r3, [r3, #8]
 8004a86:	f023 0203 	bic.w	r2, r3, #3
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	4934      	ldr	r1, [pc, #208]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a94:	f7fe f9da 	bl	8002e4c <HAL_GetTick>
 8004a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a9a:	e00a      	b.n	8004ab2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a9c:	f7fe f9d6 	bl	8002e4c <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d901      	bls.n	8004ab2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aae:	2303      	movs	r3, #3
 8004ab0:	e04f      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 020c 	and.w	r2, r3, #12
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d1eb      	bne.n	8004a9c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ac4:	4b25      	ldr	r3, [pc, #148]	@ (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0307 	and.w	r3, r3, #7
 8004acc:	683a      	ldr	r2, [r7, #0]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d20c      	bcs.n	8004aec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ad2:	4b22      	ldr	r3, [pc, #136]	@ (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 8004ad4:	683a      	ldr	r2, [r7, #0]
 8004ad6:	b2d2      	uxtb	r2, r2
 8004ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ada:	4b20      	ldr	r3, [pc, #128]	@ (8004b5c <HAL_RCC_ClockConfig+0x1b8>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d001      	beq.n	8004aec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e032      	b.n	8004b52 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d008      	beq.n	8004b0a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004af8:	4b19      	ldr	r3, [pc, #100]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004afa:	689b      	ldr	r3, [r3, #8]
 8004afc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	68db      	ldr	r3, [r3, #12]
 8004b04:	4916      	ldr	r1, [pc, #88]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b06:	4313      	orrs	r3, r2
 8004b08:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d009      	beq.n	8004b2a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004b16:	4b12      	ldr	r3, [pc, #72]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	00db      	lsls	r3, r3, #3
 8004b24:	490e      	ldr	r1, [pc, #56]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b26:	4313      	orrs	r3, r2
 8004b28:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b2a:	f000 f821 	bl	8004b70 <HAL_RCC_GetSysClockFreq>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	4b0b      	ldr	r3, [pc, #44]	@ (8004b60 <HAL_RCC_ClockConfig+0x1bc>)
 8004b32:	689b      	ldr	r3, [r3, #8]
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	f003 030f 	and.w	r3, r3, #15
 8004b3a:	490a      	ldr	r1, [pc, #40]	@ (8004b64 <HAL_RCC_ClockConfig+0x1c0>)
 8004b3c:	5ccb      	ldrb	r3, [r1, r3]
 8004b3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004b42:	4a09      	ldr	r2, [pc, #36]	@ (8004b68 <HAL_RCC_ClockConfig+0x1c4>)
 8004b44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b46:	4b09      	ldr	r3, [pc, #36]	@ (8004b6c <HAL_RCC_ClockConfig+0x1c8>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4618      	mov	r0, r3
 8004b4c:	f7fe f93a 	bl	8002dc4 <HAL_InitTick>

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	40023c00 	.word	0x40023c00
 8004b60:	40023800 	.word	0x40023800
 8004b64:	0800d0c0 	.word	0x0800d0c0
 8004b68:	20000000 	.word	0x20000000
 8004b6c:	2000001c 	.word	0x2000001c

08004b70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004b70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b74:	b090      	sub	sp, #64	@ 0x40
 8004b76:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004b80:	2300      	movs	r3, #0
 8004b82:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004b84:	2300      	movs	r3, #0
 8004b86:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b88:	4b59      	ldr	r3, [pc, #356]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 030c 	and.w	r3, r3, #12
 8004b90:	2b08      	cmp	r3, #8
 8004b92:	d00d      	beq.n	8004bb0 <HAL_RCC_GetSysClockFreq+0x40>
 8004b94:	2b08      	cmp	r3, #8
 8004b96:	f200 80a1 	bhi.w	8004cdc <HAL_RCC_GetSysClockFreq+0x16c>
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d002      	beq.n	8004ba4 <HAL_RCC_GetSysClockFreq+0x34>
 8004b9e:	2b04      	cmp	r3, #4
 8004ba0:	d003      	beq.n	8004baa <HAL_RCC_GetSysClockFreq+0x3a>
 8004ba2:	e09b      	b.n	8004cdc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ba4:	4b53      	ldr	r3, [pc, #332]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004ba6:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004ba8:	e09b      	b.n	8004ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004baa:	4b53      	ldr	r3, [pc, #332]	@ (8004cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004bae:	e098      	b.n	8004ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bb0:	4b4f      	ldr	r3, [pc, #316]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004bb8:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bba:	4b4d      	ldr	r3, [pc, #308]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d028      	beq.n	8004c18 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bc6:	4b4a      	ldr	r3, [pc, #296]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	099b      	lsrs	r3, r3, #6
 8004bcc:	2200      	movs	r2, #0
 8004bce:	623b      	str	r3, [r7, #32]
 8004bd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8004bd2:	6a3b      	ldr	r3, [r7, #32]
 8004bd4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004bd8:	2100      	movs	r1, #0
 8004bda:	4b47      	ldr	r3, [pc, #284]	@ (8004cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bdc:	fb03 f201 	mul.w	r2, r3, r1
 8004be0:	2300      	movs	r3, #0
 8004be2:	fb00 f303 	mul.w	r3, r0, r3
 8004be6:	4413      	add	r3, r2
 8004be8:	4a43      	ldr	r2, [pc, #268]	@ (8004cf8 <HAL_RCC_GetSysClockFreq+0x188>)
 8004bea:	fba0 1202 	umull	r1, r2, r0, r2
 8004bee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bf0:	460a      	mov	r2, r1
 8004bf2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004bf4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bf6:	4413      	add	r3, r2
 8004bf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bfa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	61bb      	str	r3, [r7, #24]
 8004c00:	61fa      	str	r2, [r7, #28]
 8004c02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c06:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004c0a:	f7fb fb51 	bl	80002b0 <__aeabi_uldivmod>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	4613      	mov	r3, r2
 8004c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004c16:	e053      	b.n	8004cc0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c18:	4b35      	ldr	r3, [pc, #212]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	099b      	lsrs	r3, r3, #6
 8004c1e:	2200      	movs	r2, #0
 8004c20:	613b      	str	r3, [r7, #16]
 8004c22:	617a      	str	r2, [r7, #20]
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004c2a:	f04f 0b00 	mov.w	fp, #0
 8004c2e:	4652      	mov	r2, sl
 8004c30:	465b      	mov	r3, fp
 8004c32:	f04f 0000 	mov.w	r0, #0
 8004c36:	f04f 0100 	mov.w	r1, #0
 8004c3a:	0159      	lsls	r1, r3, #5
 8004c3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004c40:	0150      	lsls	r0, r2, #5
 8004c42:	4602      	mov	r2, r0
 8004c44:	460b      	mov	r3, r1
 8004c46:	ebb2 080a 	subs.w	r8, r2, sl
 8004c4a:	eb63 090b 	sbc.w	r9, r3, fp
 8004c4e:	f04f 0200 	mov.w	r2, #0
 8004c52:	f04f 0300 	mov.w	r3, #0
 8004c56:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004c5a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004c5e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004c62:	ebb2 0408 	subs.w	r4, r2, r8
 8004c66:	eb63 0509 	sbc.w	r5, r3, r9
 8004c6a:	f04f 0200 	mov.w	r2, #0
 8004c6e:	f04f 0300 	mov.w	r3, #0
 8004c72:	00eb      	lsls	r3, r5, #3
 8004c74:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c78:	00e2      	lsls	r2, r4, #3
 8004c7a:	4614      	mov	r4, r2
 8004c7c:	461d      	mov	r5, r3
 8004c7e:	eb14 030a 	adds.w	r3, r4, sl
 8004c82:	603b      	str	r3, [r7, #0]
 8004c84:	eb45 030b 	adc.w	r3, r5, fp
 8004c88:	607b      	str	r3, [r7, #4]
 8004c8a:	f04f 0200 	mov.w	r2, #0
 8004c8e:	f04f 0300 	mov.w	r3, #0
 8004c92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004c96:	4629      	mov	r1, r5
 8004c98:	028b      	lsls	r3, r1, #10
 8004c9a:	4621      	mov	r1, r4
 8004c9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ca0:	4621      	mov	r1, r4
 8004ca2:	028a      	lsls	r2, r1, #10
 8004ca4:	4610      	mov	r0, r2
 8004ca6:	4619      	mov	r1, r3
 8004ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004caa:	2200      	movs	r2, #0
 8004cac:	60bb      	str	r3, [r7, #8]
 8004cae:	60fa      	str	r2, [r7, #12]
 8004cb0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cb4:	f7fb fafc 	bl	80002b0 <__aeabi_uldivmod>
 8004cb8:	4602      	mov	r2, r0
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf0 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	0c1b      	lsrs	r3, r3, #16
 8004cc6:	f003 0303 	and.w	r3, r3, #3
 8004cca:	3301      	adds	r3, #1
 8004ccc:	005b      	lsls	r3, r3, #1
 8004cce:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004cd0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004cd8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004cda:	e002      	b.n	8004ce2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004cdc:	4b05      	ldr	r3, [pc, #20]	@ (8004cf4 <HAL_RCC_GetSysClockFreq+0x184>)
 8004cde:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004ce0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3740      	adds	r7, #64	@ 0x40
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cee:	bf00      	nop
 8004cf0:	40023800 	.word	0x40023800
 8004cf4:	00f42400 	.word	0x00f42400
 8004cf8:	018cba80 	.word	0x018cba80

08004cfc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d00:	4b03      	ldr	r3, [pc, #12]	@ (8004d10 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d02:	681b      	ldr	r3, [r3, #0]
}
 8004d04:	4618      	mov	r0, r3
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000000 	.word	0x20000000

08004d14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d18:	f7ff fff0 	bl	8004cfc <HAL_RCC_GetHCLKFreq>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	4b05      	ldr	r3, [pc, #20]	@ (8004d34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	0a9b      	lsrs	r3, r3, #10
 8004d24:	f003 0307 	and.w	r3, r3, #7
 8004d28:	4903      	ldr	r1, [pc, #12]	@ (8004d38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d2a:	5ccb      	ldrb	r3, [r1, r3]
 8004d2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	bd80      	pop	{r7, pc}
 8004d34:	40023800 	.word	0x40023800
 8004d38:	0800d0d0 	.word	0x0800d0d0

08004d3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d3c:	b084      	sub	sp, #16
 8004d3e:	b580      	push	{r7, lr}
 8004d40:	b084      	sub	sp, #16
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
 8004d46:	f107 001c 	add.w	r0, r7, #28
 8004d4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004d4e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d123      	bne.n	8004d9e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d5a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004d6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004d7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004d82:	2b01      	cmp	r3, #1
 8004d84:	d105      	bne.n	8004d92 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004d92:	6878      	ldr	r0, [r7, #4]
 8004d94:	f000 faa0 	bl	80052d8 <USB_CoreReset>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	73fb      	strb	r3, [r7, #15]
 8004d9c:	e01b      	b.n	8004dd6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 fa94 	bl	80052d8 <USB_CoreReset>
 8004db0:	4603      	mov	r3, r0
 8004db2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004db4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d106      	bne.n	8004dca <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dc0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	639a      	str	r2, [r3, #56]	@ 0x38
 8004dc8:	e005      	b.n	8004dd6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004dce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004dd6:	7fbb      	ldrb	r3, [r7, #30]
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d10b      	bne.n	8004df4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f043 0206 	orr.w	r2, r3, #6
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	689b      	ldr	r3, [r3, #8]
 8004dec:	f043 0220 	orr.w	r2, r3, #32
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3710      	adds	r7, #16
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004e00:	b004      	add	sp, #16
 8004e02:	4770      	bx	lr

08004e04 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f023 0201 	bic.w	r2, r3, #1
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b084      	sub	sp, #16
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
 8004e2e:	460b      	mov	r3, r1
 8004e30:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004e32:	2300      	movs	r3, #0
 8004e34:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	68db      	ldr	r3, [r3, #12]
 8004e3a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004e42:	78fb      	ldrb	r3, [r7, #3]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d115      	bne.n	8004e74 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004e54:	200a      	movs	r0, #10
 8004e56:	f7fe f805 	bl	8002e64 <HAL_Delay>
      ms += 10U;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	330a      	adds	r3, #10
 8004e5e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f000 fa2b 	bl	80052bc <USB_GetMode>
 8004e66:	4603      	mov	r3, r0
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d01e      	beq.n	8004eaa <USB_SetCurrentMode+0x84>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004e70:	d9f0      	bls.n	8004e54 <USB_SetCurrentMode+0x2e>
 8004e72:	e01a      	b.n	8004eaa <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004e74:	78fb      	ldrb	r3, [r7, #3]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d115      	bne.n	8004ea6 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	68db      	ldr	r3, [r3, #12]
 8004e7e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004e86:	200a      	movs	r0, #10
 8004e88:	f7fd ffec 	bl	8002e64 <HAL_Delay>
      ms += 10U;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	330a      	adds	r3, #10
 8004e90:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f000 fa12 	bl	80052bc <USB_GetMode>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d005      	beq.n	8004eaa <USB_SetCurrentMode+0x84>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2bc7      	cmp	r3, #199	@ 0xc7
 8004ea2:	d9f0      	bls.n	8004e86 <USB_SetCurrentMode+0x60>
 8004ea4:	e001      	b.n	8004eaa <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e005      	b.n	8004eb6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	2bc8      	cmp	r3, #200	@ 0xc8
 8004eae:	d101      	bne.n	8004eb4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e000      	b.n	8004eb6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3710      	adds	r7, #16
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
	...

08004ec0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ec0:	b084      	sub	sp, #16
 8004ec2:	b580      	push	{r7, lr}
 8004ec4:	b086      	sub	sp, #24
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
 8004eca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004ece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004eda:	2300      	movs	r3, #0
 8004edc:	613b      	str	r3, [r7, #16]
 8004ede:	e009      	b.n	8004ef4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	693b      	ldr	r3, [r7, #16]
 8004ee4:	3340      	adds	r3, #64	@ 0x40
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	2200      	movs	r2, #0
 8004eec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	3301      	adds	r3, #1
 8004ef2:	613b      	str	r3, [r7, #16]
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	2b0e      	cmp	r3, #14
 8004ef8:	d9f2      	bls.n	8004ee0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004efa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d11c      	bne.n	8004f3c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f10:	f043 0302 	orr.w	r3, r3, #2
 8004f14:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f1a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f26:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f32:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	639a      	str	r2, [r3, #56]	@ 0x38
 8004f3a:	e00b      	b.n	8004f54 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f40:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004f5a:	461a      	mov	r2, r3
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004f60:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d10d      	bne.n	8004f84 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004f68:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d104      	bne.n	8004f7a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004f70:	2100      	movs	r1, #0
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f000 f968 	bl	8005248 <USB_SetDevSpeed>
 8004f78:	e008      	b.n	8004f8c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004f7a:	2101      	movs	r1, #1
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f963 	bl	8005248 <USB_SetDevSpeed>
 8004f82:	e003      	b.n	8004f8c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004f84:	2103      	movs	r1, #3
 8004f86:	6878      	ldr	r0, [r7, #4]
 8004f88:	f000 f95e 	bl	8005248 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f8c:	2110      	movs	r1, #16
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f000 f8fa 	bl	8005188 <USB_FlushTxFifo>
 8004f94:	4603      	mov	r3, r0
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d001      	beq.n	8004f9e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f9e:	6878      	ldr	r0, [r7, #4]
 8004fa0:	f000 f924 	bl	80051ec <USB_FlushRxFifo>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d001      	beq.n	8004fae <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004faa:	2301      	movs	r3, #1
 8004fac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fb4:	461a      	mov	r2, r3
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fc0:	461a      	mov	r2, r3
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fcc:	461a      	mov	r2, r3
 8004fce:	2300      	movs	r3, #0
 8004fd0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	613b      	str	r3, [r7, #16]
 8004fd6:	e043      	b.n	8005060 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	015a      	lsls	r2, r3, #5
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	4413      	add	r3, r2
 8004fe0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004fea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004fee:	d118      	bne.n	8005022 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10a      	bne.n	800500c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	015a      	lsls	r2, r3, #5
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005002:	461a      	mov	r2, r3
 8005004:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005008:	6013      	str	r3, [r2, #0]
 800500a:	e013      	b.n	8005034 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800500c:	693b      	ldr	r3, [r7, #16]
 800500e:	015a      	lsls	r2, r3, #5
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4413      	add	r3, r2
 8005014:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005018:	461a      	mov	r2, r3
 800501a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	e008      	b.n	8005034 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	015a      	lsls	r2, r3, #5
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	4413      	add	r3, r2
 800502a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800502e:	461a      	mov	r2, r3
 8005030:	2300      	movs	r3, #0
 8005032:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	015a      	lsls	r2, r3, #5
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	4413      	add	r3, r2
 800503c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005040:	461a      	mov	r2, r3
 8005042:	2300      	movs	r3, #0
 8005044:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	015a      	lsls	r2, r3, #5
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	4413      	add	r3, r2
 800504e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005052:	461a      	mov	r2, r3
 8005054:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005058:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	3301      	adds	r3, #1
 800505e:	613b      	str	r3, [r7, #16]
 8005060:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8005064:	461a      	mov	r2, r3
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	4293      	cmp	r3, r2
 800506a:	d3b5      	bcc.n	8004fd8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800506c:	2300      	movs	r3, #0
 800506e:	613b      	str	r3, [r7, #16]
 8005070:	e043      	b.n	80050fa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	015a      	lsls	r2, r3, #5
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	4413      	add	r3, r2
 800507a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005084:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005088:	d118      	bne.n	80050bc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10a      	bne.n	80050a6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800509c:	461a      	mov	r2, r3
 800509e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	e013      	b.n	80050ce <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050b2:	461a      	mov	r2, r3
 80050b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80050b8:	6013      	str	r3, [r2, #0]
 80050ba:	e008      	b.n	80050ce <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80050bc:	693b      	ldr	r3, [r7, #16]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c8:	461a      	mov	r2, r3
 80050ca:	2300      	movs	r3, #0
 80050cc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	015a      	lsls	r2, r3, #5
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	4413      	add	r3, r2
 80050d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050da:	461a      	mov	r2, r3
 80050dc:	2300      	movs	r3, #0
 80050de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050ec:	461a      	mov	r2, r3
 80050ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80050f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	3301      	adds	r3, #1
 80050f8:	613b      	str	r3, [r7, #16]
 80050fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80050fe:	461a      	mov	r2, r3
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	4293      	cmp	r3, r2
 8005104:	d3b5      	bcc.n	8005072 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800510c:	691b      	ldr	r3, [r3, #16]
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005114:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005118:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8005126:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005128:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800512c:	2b00      	cmp	r3, #0
 800512e:	d105      	bne.n	800513c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	f043 0210 	orr.w	r2, r3, #16
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	699a      	ldr	r2, [r3, #24]
 8005140:	4b10      	ldr	r3, [pc, #64]	@ (8005184 <USB_DevInit+0x2c4>)
 8005142:	4313      	orrs	r3, r2
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005148:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800514c:	2b00      	cmp	r3, #0
 800514e:	d005      	beq.n	800515c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	f043 0208 	orr.w	r2, r3, #8
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800515c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005160:	2b01      	cmp	r3, #1
 8005162:	d107      	bne.n	8005174 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	699b      	ldr	r3, [r3, #24]
 8005168:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800516c:	f043 0304 	orr.w	r3, r3, #4
 8005170:	687a      	ldr	r2, [r7, #4]
 8005172:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005174:	7dfb      	ldrb	r3, [r7, #23]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3718      	adds	r7, #24
 800517a:	46bd      	mov	sp, r7
 800517c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005180:	b004      	add	sp, #16
 8005182:	4770      	bx	lr
 8005184:	803c3800 	.word	0x803c3800

08005188 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005188:	b480      	push	{r7}
 800518a:	b085      	sub	sp, #20
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
 8005190:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005192:	2300      	movs	r3, #0
 8005194:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3301      	adds	r3, #1
 800519a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051a2:	d901      	bls.n	80051a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e01b      	b.n	80051e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	daf2      	bge.n	8005196 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051b0:	2300      	movs	r3, #0
 80051b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	019b      	lsls	r3, r3, #6
 80051b8:	f043 0220 	orr.w	r2, r3, #32
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	3301      	adds	r3, #1
 80051c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80051cc:	d901      	bls.n	80051d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e006      	b.n	80051e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	f003 0320 	and.w	r3, r3, #32
 80051da:	2b20      	cmp	r3, #32
 80051dc:	d0f0      	beq.n	80051c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80051de:	2300      	movs	r3, #0
}
 80051e0:	4618      	mov	r0, r3
 80051e2:	3714      	adds	r7, #20
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr

080051ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b085      	sub	sp, #20
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	3301      	adds	r3, #1
 80051fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005204:	d901      	bls.n	800520a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e018      	b.n	800523c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	2b00      	cmp	r3, #0
 8005210:	daf2      	bge.n	80051f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005212:	2300      	movs	r3, #0
 8005214:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2210      	movs	r2, #16
 800521a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	3301      	adds	r3, #1
 8005220:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005228:	d901      	bls.n	800522e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800522a:	2303      	movs	r3, #3
 800522c:	e006      	b.n	800523c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	f003 0310 	and.w	r3, r3, #16
 8005236:	2b10      	cmp	r3, #16
 8005238:	d0f0      	beq.n	800521c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3714      	adds	r7, #20
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
 8005250:	460b      	mov	r3, r1
 8005252:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	78fb      	ldrb	r3, [r7, #3]
 8005262:	68f9      	ldr	r1, [r7, #12]
 8005264:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005268:	4313      	orrs	r3, r2
 800526a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800526c:	2300      	movs	r3, #0
}
 800526e:	4618      	mov	r0, r3
 8005270:	3714      	adds	r7, #20
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800527a:	b480      	push	{r7}
 800527c:	b085      	sub	sp, #20
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	68fa      	ldr	r2, [r7, #12]
 8005290:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8005294:	f023 0303 	bic.w	r3, r3, #3
 8005298:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052a8:	f043 0302 	orr.w	r3, r3, #2
 80052ac:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80052bc:	b480      	push	{r7}
 80052be:	b083      	sub	sp, #12
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	695b      	ldr	r3, [r3, #20]
 80052c8:	f003 0301 	and.w	r3, r3, #1
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80052d8:	b480      	push	{r7}
 80052da:	b085      	sub	sp, #20
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80052e0:	2300      	movs	r3, #0
 80052e2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3301      	adds	r3, #1
 80052e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052f0:	d901      	bls.n	80052f6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80052f2:	2303      	movs	r3, #3
 80052f4:	e01b      	b.n	800532e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	691b      	ldr	r3, [r3, #16]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	daf2      	bge.n	80052e4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80052fe:	2300      	movs	r3, #0
 8005300:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	f043 0201 	orr.w	r2, r3, #1
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	3301      	adds	r3, #1
 8005312:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800531a:	d901      	bls.n	8005320 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800531c:	2303      	movs	r3, #3
 800531e:	e006      	b.n	800532e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	691b      	ldr	r3, [r3, #16]
 8005324:	f003 0301 	and.w	r3, r3, #1
 8005328:	2b01      	cmp	r3, #1
 800532a:	d0f0      	beq.n	800530e <USB_CoreReset+0x36>

  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
	...

0800533c <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_t _cdcd_cfg = TUD_CDC_CONFIGURE_DEFAULT();

static bool _prep_out_transaction(uint8_t itf) {
 800533c:	b580      	push	{r7, lr}
 800533e:	b086      	sub	sp, #24
 8005340:	af00      	add	r7, sp, #0
 8005342:	4603      	mov	r3, r0
 8005344:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 8005346:	2300      	movs	r3, #0
 8005348:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 800534a:	79fb      	ldrb	r3, [r7, #7]
 800534c:	22e8      	movs	r2, #232	@ 0xe8
 800534e:	fb02 f303 	mul.w	r3, r2, r3
 8005352:	4a30      	ldr	r2, [pc, #192]	@ (8005414 <_prep_out_transaction+0xd8>)
 8005354:	4413      	add	r3, r2
 8005356:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8005358:	79fb      	ldrb	r3, [r7, #7]
 800535a:	01db      	lsls	r3, r3, #7
 800535c:	4a2e      	ldr	r2, [pc, #184]	@ (8005418 <_prep_out_transaction+0xdc>)
 800535e:	4413      	add	r3, r2
 8005360:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 8005362:	f002 f851 	bl	8007408 <tud_mounted>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d009      	beq.n	8005380 <_prep_out_transaction+0x44>
 800536c:	f002 f85e 	bl	800742c <tud_suspended>
 8005370:	4603      	mov	r3, r0
 8005372:	f083 0301 	eor.w	r3, r3, #1
 8005376:	b2db      	uxtb	r3, r3
 8005378:	2b00      	cmp	r3, #0
 800537a:	d001      	beq.n	8005380 <_prep_out_transaction+0x44>
 800537c:	2301      	movs	r3, #1
 800537e:	e000      	b.n	8005382 <_prep_out_transaction+0x46>
 8005380:	2300      	movs	r3, #0
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 8005388:	f083 0301 	eor.w	r3, r3, #1
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d103      	bne.n	800539a <_prep_out_transaction+0x5e>
 8005392:	693b      	ldr	r3, [r7, #16]
 8005394:	78db      	ldrb	r3, [r3, #3]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <_prep_out_transaction+0x62>
 800539a:	2300      	movs	r3, #0
 800539c:	e035      	b.n	800540a <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 800539e:	693b      	ldr	r3, [r7, #16]
 80053a0:	3310      	adds	r3, #16
 80053a2:	4618      	mov	r0, r3
 80053a4:	f001 feab 	bl	80070fe <tu_fifo_remaining>
 80053a8:	4603      	mov	r3, r0
 80053aa:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 80053ac:	897b      	ldrh	r3, [r7, #10]
 80053ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80053b0:	d801      	bhi.n	80053b6 <_prep_out_transaction+0x7a>
 80053b2:	2300      	movs	r3, #0
 80053b4:	e029      	b.n	800540a <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 80053b6:	693b      	ldr	r3, [r7, #16]
 80053b8:	78da      	ldrb	r2, [r3, #3]
 80053ba:	7dfb      	ldrb	r3, [r7, #23]
 80053bc:	4611      	mov	r1, r2
 80053be:	4618      	mov	r0, r3
 80053c0:	f003 fb50 	bl	8008a64 <usbd_edpt_claim>
 80053c4:	4603      	mov	r3, r0
 80053c6:	f083 0301 	eor.w	r3, r3, #1
 80053ca:	b2db      	uxtb	r3, r3
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d001      	beq.n	80053d4 <_prep_out_transaction+0x98>
 80053d0:	2300      	movs	r3, #0
 80053d2:	e01a      	b.n	800540a <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 80053d4:	693b      	ldr	r3, [r7, #16]
 80053d6:	3310      	adds	r3, #16
 80053d8:	4618      	mov	r0, r3
 80053da:	f001 fe90 	bl	80070fe <tu_fifo_remaining>
 80053de:	4603      	mov	r3, r0
 80053e0:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 80053e2:	897b      	ldrh	r3, [r7, #10]
 80053e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80053e6:	d908      	bls.n	80053fa <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	78d9      	ldrb	r1, [r3, #3]
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	7df8      	ldrb	r0, [r7, #23]
 80053f0:	2340      	movs	r3, #64	@ 0x40
 80053f2:	f003 fb87 	bl	8008b04 <usbd_edpt_xfer>
 80053f6:	4603      	mov	r3, r0
 80053f8:	e007      	b.n	800540a <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	78da      	ldrb	r2, [r3, #3]
 80053fe:	7dfb      	ldrb	r3, [r7, #23]
 8005400:	4611      	mov	r1, r2
 8005402:	4618      	mov	r0, r3
 8005404:	f003 fb56 	bl	8008ab4 <usbd_edpt_release>
    return false;
 8005408:	2300      	movs	r3, #0
  }
}
 800540a:	4618      	mov	r0, r3
 800540c:	3718      	adds	r7, #24
 800540e:	46bd      	mov	sp, r7
 8005410:	bd80      	pop	{r7, pc}
 8005412:	bf00      	nop
 8005414:	20000b2c 	.word	0x20000b2c
 8005418:	20000c14 	.word	0x20000c14

0800541c <tud_cdc_n_connected>:

bool tud_cdc_n_ready(uint8_t itf) {
  return tud_ready() && _cdcd_itf[itf].ep_in != 0 && _cdcd_itf[itf].ep_out != 0;
}

bool tud_cdc_n_connected(uint8_t itf) {
 800541c:	b580      	push	{r7, lr}
 800541e:	b084      	sub	sp, #16
 8005420:	af00      	add	r7, sp, #0
 8005422:	4603      	mov	r3, r0
 8005424:	71fb      	strb	r3, [r7, #7]
 8005426:	f001 ffef 	bl	8007408 <tud_mounted>
 800542a:	4603      	mov	r3, r0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d009      	beq.n	8005444 <tud_cdc_n_connected+0x28>
 8005430:	f001 fffc 	bl	800742c <tud_suspended>
 8005434:	4603      	mov	r3, r0
 8005436:	f083 0301 	eor.w	r3, r3, #1
 800543a:	b2db      	uxtb	r3, r3
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <tud_cdc_n_connected+0x28>
 8005440:	2301      	movs	r3, #1
 8005442:	e000      	b.n	8005446 <tud_cdc_n_connected+0x2a>
 8005444:	2300      	movs	r3, #0
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	b2db      	uxtb	r3, r3
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 800544c:	2b00      	cmp	r3, #0
 800544e:	d019      	beq.n	8005484 <tud_cdc_n_connected+0x68>
 8005450:	79fb      	ldrb	r3, [r7, #7]
 8005452:	4a10      	ldr	r2, [pc, #64]	@ (8005494 <tud_cdc_n_connected+0x78>)
 8005454:	21e8      	movs	r1, #232	@ 0xe8
 8005456:	fb01 f303 	mul.w	r3, r1, r3
 800545a:	4413      	add	r3, r2
 800545c:	3304      	adds	r3, #4
 800545e:	781b      	ldrb	r3, [r3, #0]
 8005460:	60fb      	str	r3, [r7, #12]
 8005462:	2300      	movs	r3, #0
 8005464:	72fb      	strb	r3, [r7, #11]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8005466:	7afb      	ldrb	r3, [r7, #11]
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	fa22 f303 	lsr.w	r3, r2, r3
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	bf14      	ite	ne
 8005476:	2301      	movne	r3, #1
 8005478:	2300      	moveq	r3, #0
 800547a:	b2db      	uxtb	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <tud_cdc_n_connected+0x68>
 8005480:	2301      	movs	r3, #1
 8005482:	e000      	b.n	8005486 <tud_cdc_n_connected+0x6a>
 8005484:	2300      	movs	r3, #0
 8005486:	f003 0301 	and.w	r3, r3, #1
 800548a:	b2db      	uxtb	r3, r3
}
 800548c:	4618      	mov	r0, r3
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	20000b2c 	.word	0x20000b2c

08005498 <tud_cdc_n_available>:
}

//--------------------------------------------------------------------+
// READ API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_available(uint8_t itf) {
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	4603      	mov	r3, r0
 80054a0:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_count(&_cdcd_itf[itf].rx_ff);
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	22e8      	movs	r2, #232	@ 0xe8
 80054a6:	fb02 f303 	mul.w	r3, r2, r3
 80054aa:	3310      	adds	r3, #16
 80054ac:	4a04      	ldr	r2, [pc, #16]	@ (80054c0 <tud_cdc_n_available+0x28>)
 80054ae:	4413      	add	r3, r2
 80054b0:	4618      	mov	r0, r3
 80054b2:	f001 fdaf 	bl	8007014 <tu_fifo_count>
 80054b6:	4603      	mov	r3, r0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3708      	adds	r7, #8
 80054bc:	46bd      	mov	sp, r7
 80054be:	bd80      	pop	{r7, pc}
 80054c0:	20000b2c 	.word	0x20000b2c

080054c4 <tud_cdc_n_read>:

uint32_t tud_cdc_n_read(uint8_t itf, void* buffer, uint32_t bufsize) {
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b086      	sub	sp, #24
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	4603      	mov	r3, r0
 80054cc:	60b9      	str	r1, [r7, #8]
 80054ce:	607a      	str	r2, [r7, #4]
 80054d0:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 80054d2:	7bfb      	ldrb	r3, [r7, #15]
 80054d4:	22e8      	movs	r2, #232	@ 0xe8
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	4a0f      	ldr	r2, [pc, #60]	@ (8005518 <tud_cdc_n_read+0x54>)
 80054dc:	4413      	add	r3, r2
 80054de:	617b      	str	r3, [r7, #20]
  uint32_t num_read = tu_fifo_read_n(&p_cdc->rx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	f103 0010 	add.w	r0, r3, #16
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80054ec:	4293      	cmp	r3, r2
 80054ee:	d802      	bhi.n	80054f6 <tud_cdc_n_read+0x32>
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	b29b      	uxth	r3, r3
 80054f4:	e001      	b.n	80054fa <tud_cdc_n_read+0x36>
 80054f6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80054fa:	461a      	mov	r2, r3
 80054fc:	68b9      	ldr	r1, [r7, #8]
 80054fe:	f001 fe5a 	bl	80071b6 <tu_fifo_read_n>
 8005502:	4603      	mov	r3, r0
 8005504:	613b      	str	r3, [r7, #16]
  _prep_out_transaction(itf);
 8005506:	7bfb      	ldrb	r3, [r7, #15]
 8005508:	4618      	mov	r0, r3
 800550a:	f7ff ff17 	bl	800533c <_prep_out_transaction>
  return num_read;
 800550e:	693b      	ldr	r3, [r7, #16]
}
 8005510:	4618      	mov	r0, r3
 8005512:	3718      	adds	r7, #24
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20000b2c 	.word	0x20000b2c

0800551c <tud_cdc_n_write>:
}

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, const void* buffer, uint32_t bufsize) {
 800551c:	b580      	push	{r7, lr}
 800551e:	b086      	sub	sp, #24
 8005520:	af00      	add	r7, sp, #0
 8005522:	4603      	mov	r3, r0
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
 8005528:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 800552a:	7bfb      	ldrb	r3, [r7, #15]
 800552c:	22e8      	movs	r2, #232	@ 0xe8
 800552e:	fb02 f303 	mul.w	r3, r2, r3
 8005532:	4a13      	ldr	r2, [pc, #76]	@ (8005580 <tud_cdc_n_write+0x64>)
 8005534:	4413      	add	r3, r2
 8005536:	617b      	str	r3, [r7, #20]
  uint16_t wr_count = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f103 001c 	add.w	r0, r3, #28
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8005544:	4293      	cmp	r3, r2
 8005546:	d802      	bhi.n	800554e <tud_cdc_n_write+0x32>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	b29b      	uxth	r3, r3
 800554c:	e001      	b.n	8005552 <tud_cdc_n_write+0x36>
 800554e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005552:	461a      	mov	r2, r3
 8005554:	68b9      	ldr	r1, [r7, #8]
 8005556:	f001 fe95 	bl	8007284 <tu_fifo_write_n>
 800555a:	4603      	mov	r3, r0
 800555c:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	331c      	adds	r3, #28
 8005562:	4618      	mov	r0, r3
 8005564:	f001 fd56 	bl	8007014 <tu_fifo_count>
 8005568:	4603      	mov	r3, r0
 800556a:	2b3f      	cmp	r3, #63	@ 0x3f
 800556c:	d903      	bls.n	8005576 <tud_cdc_n_write+0x5a>
      #if CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
      || tu_fifo_full(&p_cdc->tx_ff) // check full if fifo size is less than packet size
      #endif
      ) {
    tud_cdc_n_write_flush(itf);
 800556e:	7bfb      	ldrb	r3, [r7, #15]
 8005570:	4618      	mov	r0, r3
 8005572:	f000 f807 	bl	8005584 <tud_cdc_n_write_flush>
  }

  return wr_count;
 8005576:	8a7b      	ldrh	r3, [r7, #18]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20000b2c 	.word	0x20000b2c

08005584 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 8005584:	b580      	push	{r7, lr}
 8005586:	b086      	sub	sp, #24
 8005588:	af00      	add	r7, sp, #0
 800558a:	4603      	mov	r3, r0
 800558c:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 800558e:	79fb      	ldrb	r3, [r7, #7]
 8005590:	22e8      	movs	r2, #232	@ 0xe8
 8005592:	fb02 f303 	mul.w	r3, r2, r3
 8005596:	4a39      	ldr	r2, [pc, #228]	@ (800567c <tud_cdc_n_write_flush+0xf8>)
 8005598:	4413      	add	r3, r2
 800559a:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 800559c:	79fb      	ldrb	r3, [r7, #7]
 800559e:	01db      	lsls	r3, r3, #7
 80055a0:	4a37      	ldr	r2, [pc, #220]	@ (8005680 <tud_cdc_n_write_flush+0xfc>)
 80055a2:	4413      	add	r3, r2
 80055a4:	613b      	str	r3, [r7, #16]
 80055a6:	f001 ff2f 	bl	8007408 <tud_mounted>
 80055aa:	4603      	mov	r3, r0
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d009      	beq.n	80055c4 <tud_cdc_n_write_flush+0x40>
 80055b0:	f001 ff3c 	bl	800742c <tud_suspended>
 80055b4:	4603      	mov	r3, r0
 80055b6:	f083 0301 	eor.w	r3, r3, #1
 80055ba:	b2db      	uxtb	r3, r3
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d001      	beq.n	80055c4 <tud_cdc_n_write_flush+0x40>
 80055c0:	2301      	movs	r3, #1
 80055c2:	e000      	b.n	80055c6 <tud_cdc_n_write_flush+0x42>
 80055c4:	2300      	movs	r3, #0
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 80055cc:	f083 0301 	eor.w	r3, r3, #1
 80055d0:	b2db      	uxtb	r3, r3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d001      	beq.n	80055da <tud_cdc_n_write_flush+0x56>
 80055d6:	2300      	movs	r3, #0
 80055d8:	e04c      	b.n	8005674 <tud_cdc_n_write_flush+0xf0>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	331c      	adds	r3, #28
 80055de:	4618      	mov	r0, r3
 80055e0:	f001 fd18 	bl	8007014 <tu_fifo_count>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <tud_cdc_n_write_flush+0x6a>
    return 0;
 80055ea:	2300      	movs	r3, #0
 80055ec:	e042      	b.n	8005674 <tud_cdc_n_write_flush+0xf0>
  }

  const uint8_t rhport = 0;
 80055ee:	2300      	movs	r3, #0
 80055f0:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	789a      	ldrb	r2, [r3, #2]
 80055f6:	7bfb      	ldrb	r3, [r7, #15]
 80055f8:	4611      	mov	r1, r2
 80055fa:	4618      	mov	r0, r3
 80055fc:	f003 fa32 	bl	8008a64 <usbd_edpt_claim>
 8005600:	4603      	mov	r3, r0
 8005602:	f083 0301 	eor.w	r3, r3, #1
 8005606:	b2db      	uxtb	r3, r3
 8005608:	2b00      	cmp	r3, #0
 800560a:	d001      	beq.n	8005610 <tud_cdc_n_write_flush+0x8c>
 800560c:	2300      	movs	r3, #0
 800560e:	e031      	b.n	8005674 <tud_cdc_n_write_flush+0xf0>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f103 001c 	add.w	r0, r3, #28
 8005616:	693b      	ldr	r3, [r7, #16]
 8005618:	3340      	adds	r3, #64	@ 0x40
 800561a:	2240      	movs	r2, #64	@ 0x40
 800561c:	4619      	mov	r1, r3
 800561e:	f001 fdca 	bl	80071b6 <tu_fifo_read_n>
 8005622:	4603      	mov	r3, r0
 8005624:	81bb      	strh	r3, [r7, #12]

  if (count) {
 8005626:	89bb      	ldrh	r3, [r7, #12]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d01b      	beq.n	8005664 <tud_cdc_n_write_flush+0xe0>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 800562c:	697b      	ldr	r3, [r7, #20]
 800562e:	7899      	ldrb	r1, [r3, #2]
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8005636:	89bb      	ldrh	r3, [r7, #12]
 8005638:	7bf8      	ldrb	r0, [r7, #15]
 800563a:	f003 fa63 	bl	8008b04 <usbd_edpt_xfer>
 800563e:	4603      	mov	r3, r0
 8005640:	f083 0301 	eor.w	r3, r3, #1
 8005644:	b2db      	uxtb	r3, r3
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00a      	beq.n	8005660 <tud_cdc_n_write_flush+0xdc>
 800564a:	4b0e      	ldr	r3, [pc, #56]	@ (8005684 <tud_cdc_n_write_flush+0x100>)
 800564c:	60bb      	str	r3, [r7, #8]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 0301 	and.w	r3, r3, #1
 8005656:	2b00      	cmp	r3, #0
 8005658:	d000      	beq.n	800565c <tud_cdc_n_write_flush+0xd8>
 800565a:	be00      	bkpt	0x0000
 800565c:	2300      	movs	r3, #0
 800565e:	e009      	b.n	8005674 <tud_cdc_n_write_flush+0xf0>
    return count;
 8005660:	89bb      	ldrh	r3, [r7, #12]
 8005662:	e007      	b.n	8005674 <tud_cdc_n_write_flush+0xf0>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	789a      	ldrb	r2, [r3, #2]
 8005668:	7bfb      	ldrb	r3, [r7, #15]
 800566a:	4611      	mov	r1, r2
 800566c:	4618      	mov	r0, r3
 800566e:	f003 fa21 	bl	8008ab4 <usbd_edpt_release>
    return 0;
 8005672:	2300      	movs	r3, #0
  }
}
 8005674:	4618      	mov	r0, r3
 8005676:	3718      	adds	r7, #24
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}
 800567c:	20000b2c 	.word	0x20000b2c
 8005680:	20000c14 	.word	0x20000c14
 8005684:	e000edf0 	.word	0xe000edf0

08005688 <tud_cdc_n_write_available>:

uint32_t tud_cdc_n_write_available(uint8_t itf) {
 8005688:	b580      	push	{r7, lr}
 800568a:	b082      	sub	sp, #8
 800568c:	af00      	add	r7, sp, #0
 800568e:	4603      	mov	r3, r0
 8005690:	71fb      	strb	r3, [r7, #7]
  return tu_fifo_remaining(&_cdcd_itf[itf].tx_ff);
 8005692:	79fb      	ldrb	r3, [r7, #7]
 8005694:	22e8      	movs	r2, #232	@ 0xe8
 8005696:	fb02 f303 	mul.w	r3, r2, r3
 800569a:	3318      	adds	r3, #24
 800569c:	4a05      	ldr	r2, [pc, #20]	@ (80056b4 <tud_cdc_n_write_available+0x2c>)
 800569e:	4413      	add	r3, r2
 80056a0:	3304      	adds	r3, #4
 80056a2:	4618      	mov	r0, r3
 80056a4:	f001 fd2b 	bl	80070fe <tu_fifo_remaining>
 80056a8:	4603      	mov	r3, r0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3708      	adds	r7, #8
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}
 80056b2:	bf00      	nop
 80056b4:	20000b2c 	.word	0x20000b2c

080056b8 <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b084      	sub	sp, #16
 80056bc:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 80056be:	22e8      	movs	r2, #232	@ 0xe8
 80056c0:	2100      	movs	r1, #0
 80056c2:	4824      	ldr	r0, [pc, #144]	@ (8005754 <cdcd_init+0x9c>)
 80056c4:	f005 ffba 	bl	800b63c <memset>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 80056c8:	2300      	movs	r3, #0
 80056ca:	71fb      	strb	r3, [r7, #7]
 80056cc:	e03a      	b.n	8005744 <cdcd_init+0x8c>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 80056ce:	79fb      	ldrb	r3, [r7, #7]
 80056d0:	22e8      	movs	r2, #232	@ 0xe8
 80056d2:	fb02 f303 	mul.w	r3, r2, r3
 80056d6:	4a1f      	ldr	r2, [pc, #124]	@ (8005754 <cdcd_init+0x9c>)
 80056d8:	4413      	add	r3, r2
 80056da:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 80056dc:	683b      	ldr	r3, [r7, #0]
 80056de:	22ff      	movs	r2, #255	@ 0xff
 80056e0:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80056e8:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2200      	movs	r2, #0
 80056ee:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	2200      	movs	r2, #0
 80056f4:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	2208      	movs	r2, #8
 80056fa:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	f103 0010 	add.w	r0, r3, #16
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 8005708:	2300      	movs	r3, #0
 800570a:	9300      	str	r3, [sp, #0]
 800570c:	2301      	movs	r3, #1
 800570e:	2240      	movs	r2, #64	@ 0x40
 8005710:	f000 ffee 	bl	80066f0 <tu_fifo_config>

    // TX fifo can be configured to change to overwritable if not connected (DTR bit not set). Without DTR we do not
    // know if data is actually polled by terminal. This way the most current data is prioritized.
    // Default: is overwritable
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	f103 001c 	add.w	r0, r3, #28
 800571a:	683b      	ldr	r3, [r7, #0]
 800571c:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8005720:	4b0d      	ldr	r3, [pc, #52]	@ (8005758 <cdcd_init+0xa0>)
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005728:	b2db      	uxtb	r3, r3
 800572a:	2b00      	cmp	r3, #0
 800572c:	bf14      	ite	ne
 800572e:	2301      	movne	r3, #1
 8005730:	2300      	moveq	r3, #0
 8005732:	b2db      	uxtb	r3, r3
 8005734:	9300      	str	r3, [sp, #0]
 8005736:	2301      	movs	r3, #1
 8005738:	2280      	movs	r2, #128	@ 0x80
 800573a:	f000 ffd9 	bl	80066f0 <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 800573e:	79fb      	ldrb	r3, [r7, #7]
 8005740:	3301      	adds	r3, #1
 8005742:	71fb      	strb	r3, [r7, #7]
 8005744:	79fb      	ldrb	r3, [r7, #7]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d0c1      	beq.n	80056ce <cdcd_init+0x16>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 800574a:	bf00      	nop
 800574c:	bf00      	nop
 800574e:	3708      	adds	r7, #8
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}
 8005754:	20000b2c 	.word	0x20000b2c
 8005758:	20000024 	.word	0x20000024

0800575c <cdcd_deinit>:

bool cdcd_deinit(void) {
 800575c:	b480      	push	{r7}
 800575e:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 8005760:	2301      	movs	r3, #1
}
 8005762:	4618      	mov	r0, r3
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	4603      	mov	r3, r0
 8005774:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8005776:	2300      	movs	r3, #0
 8005778:	73fb      	strb	r3, [r7, #15]
 800577a:	e037      	b.n	80057ec <cdcd_reset+0x80>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	22e8      	movs	r2, #232	@ 0xe8
 8005780:	fb02 f303 	mul.w	r3, r2, r3
 8005784:	4a1d      	ldr	r2, [pc, #116]	@ (80057fc <cdcd_reset+0x90>)
 8005786:	4413      	add	r3, r2
 8005788:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 800578a:	2205      	movs	r2, #5
 800578c:	2100      	movs	r1, #0
 800578e:	68b8      	ldr	r0, [r7, #8]
 8005790:	f005 ff54 	bl	800b63c <memset>
    if (!_cdcd_cfg.rx_persistent) {
 8005794:	4b1a      	ldr	r3, [pc, #104]	@ (8005800 <cdcd_reset+0x94>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	f003 0301 	and.w	r3, r3, #1
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d104      	bne.n	80057ac <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	3310      	adds	r3, #16
 80057a6:	4618      	mov	r0, r3
 80057a8:	f001 fd90 	bl	80072cc <tu_fifo_clear>
    }
    if (!_cdcd_cfg.tx_persistent) {
 80057ac:	4b14      	ldr	r3, [pc, #80]	@ (8005800 <cdcd_reset+0x94>)
 80057ae:	781b      	ldrb	r3, [r3, #0]
 80057b0:	f003 0302 	and.w	r3, r3, #2
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d104      	bne.n	80057c4 <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 80057ba:	68bb      	ldr	r3, [r7, #8]
 80057bc:	331c      	adds	r3, #28
 80057be:	4618      	mov	r0, r3
 80057c0:	f001 fd84 	bl	80072cc <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, _cdcd_cfg.tx_overwritabe_if_not_connected);
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f103 021c 	add.w	r2, r3, #28
 80057ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005800 <cdcd_reset+0x94>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	bf14      	ite	ne
 80057d8:	2301      	movne	r3, #1
 80057da:	2300      	moveq	r3, #0
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	4619      	mov	r1, r3
 80057e0:	4610      	mov	r0, r2
 80057e2:	f001 fd84 	bl	80072ee <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 80057e6:	7bfb      	ldrb	r3, [r7, #15]
 80057e8:	3301      	adds	r3, #1
 80057ea:	73fb      	strb	r3, [r7, #15]
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d0c4      	beq.n	800577c <cdcd_reset+0x10>
  }
}
 80057f2:	bf00      	nop
 80057f4:	bf00      	nop
 80057f6:	3710      	adds	r7, #16
 80057f8:	46bd      	mov	sp, r7
 80057fa:	bd80      	pop	{r7, pc}
 80057fc:	20000b2c 	.word	0x20000b2c
 8005800:	20000024 	.word	0x20000024

08005804 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 8005804:	b580      	push	{r7, lr}
 8005806:	b09a      	sub	sp, #104	@ 0x68
 8005808:	af02      	add	r7, sp, #8
 800580a:	4603      	mov	r3, r0
 800580c:	6039      	str	r1, [r7, #0]
 800580e:	71fb      	strb	r3, [r7, #7]
 8005810:	4613      	mov	r3, r2
 8005812:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	795b      	ldrb	r3, [r3, #5]
 8005818:	2b02      	cmp	r3, #2
 800581a:	d103      	bne.n	8005824 <cdcd_open+0x20>
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	799b      	ldrb	r3, [r3, #6]
 8005820:	2b02      	cmp	r3, #2
 8005822:	d001      	beq.n	8005828 <cdcd_open+0x24>
 8005824:	2300      	movs	r3, #0
 8005826:	e0da      	b.n	80059de <cdcd_open+0x1da>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8005828:	2300      	movs	r3, #0
 800582a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 800582e:	e010      	b.n	8005852 <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 8005830:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005834:	22e8      	movs	r2, #232	@ 0xe8
 8005836:	fb02 f303 	mul.w	r3, r2, r3
 800583a:	4a6b      	ldr	r2, [pc, #428]	@ (80059e8 <cdcd_open+0x1e4>)
 800583c:	4413      	add	r3, r2
 800583e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 8005840:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005842:	789b      	ldrb	r3, [r3, #2]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d009      	beq.n	800585c <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 8005848:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800584c:	3301      	adds	r3, #1
 800584e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8005852:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0ea      	beq.n	8005830 <cdcd_open+0x2c>
 800585a:	e000      	b.n	800585e <cdcd_open+0x5a>
      break;
 800585c:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 800585e:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8005862:	2b00      	cmp	r3, #0
 8005864:	d00a      	beq.n	800587c <cdcd_open+0x78>
 8005866:	4b61      	ldr	r3, [pc, #388]	@ (80059ec <cdcd_open+0x1e8>)
 8005868:	647b      	str	r3, [r7, #68]	@ 0x44
 800586a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d000      	beq.n	8005878 <cdcd_open+0x74>
 8005876:	be00      	bkpt	0x0000
 8005878:	2300      	movs	r3, #0
 800587a:	e0b0      	b.n	80059de <cdcd_open+0x1da>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	789a      	ldrb	r2, [r3, #2]
 8005880:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005882:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8005884:	2309      	movs	r3, #9
 8005886:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800588a:	683b      	ldr	r3, [r7, #0]
 800588c:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 800588e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005890:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005892:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800589a:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 800589c:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 800589e:	e013      	b.n	80058c8 <cdcd_open+0xc4>
 80058a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058a2:	633b      	str	r3, [r7, #48]	@ 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80058a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058a6:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 80058a8:	461a      	mov	r2, r3
 80058aa:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80058ae:	4413      	add	r3, r2
 80058b0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80058b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 80058b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ba:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 80058bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	461a      	mov	r2, r3
 80058c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80058c4:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 80058c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80058c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80058cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ce:	3301      	adds	r3, #1
 80058d0:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 80058d2:	2b24      	cmp	r3, #36	@ 0x24
 80058d4:	d104      	bne.n	80058e0 <cdcd_open+0xdc>
 80058d6:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80058da:	88bb      	ldrh	r3, [r7, #4]
 80058dc:	429a      	cmp	r2, r3
 80058de:	d9df      	bls.n	80058a0 <cdcd_open+0x9c>
 80058e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e6:	3301      	adds	r3, #1
 80058e8:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 80058ea:	2b05      	cmp	r3, #5
 80058ec:	d12f      	bne.n	800594e <cdcd_open+0x14a>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 80058ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80058f0:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 80058f2:	79fb      	ldrb	r3, [r7, #7]
 80058f4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80058f6:	4618      	mov	r0, r3
 80058f8:	f003 f86e 	bl	80089d8 <usbd_edpt_open>
 80058fc:	4603      	mov	r3, r0
 80058fe:	f083 0301 	eor.w	r3, r3, #1
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d00a      	beq.n	800591e <cdcd_open+0x11a>
 8005908:	4b38      	ldr	r3, [pc, #224]	@ (80059ec <cdcd_open+0x1e8>)
 800590a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800590c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b00      	cmp	r3, #0
 8005916:	d000      	beq.n	800591a <cdcd_open+0x116>
 8005918:	be00      	bkpt	0x0000
 800591a:	2300      	movs	r3, #0
 800591c:	e05f      	b.n	80059de <cdcd_open+0x1da>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 800591e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005920:	789a      	ldrb	r2, [r3, #2]
 8005922:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005924:	705a      	strb	r2, [r3, #1]
 8005926:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005928:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 800592e:	461a      	mov	r2, r3
 8005930:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8005934:	4413      	add	r3, r2
 8005936:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800593a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800593c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 800593e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005940:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	781b      	ldrb	r3, [r3, #0]
 8005946:	461a      	mov	r2, r3
 8005948:	6a3b      	ldr	r3, [r7, #32]
 800594a:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 800594c:	657b      	str	r3, [r7, #84]	@ 0x54
 800594e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005950:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8005952:	69bb      	ldr	r3, [r7, #24]
 8005954:	3301      	adds	r3, #1
 8005956:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8005958:	2b04      	cmp	r3, #4
 800595a:	d139      	bne.n	80059d0 <cdcd_open+0x1cc>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 800595c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800595e:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8005960:	2b0a      	cmp	r3, #10
 8005962:	d135      	bne.n	80059d0 <cdcd_open+0x1cc>
 8005964:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005966:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 800596c:	461a      	mov	r2, r3
 800596e:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8005972:	4413      	add	r3, r2
 8005974:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 8005978:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800597a:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	781b      	ldrb	r3, [r3, #0]
 8005984:	461a      	mov	r2, r3
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 800598a:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 800598c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800598e:	3303      	adds	r3, #3
 8005990:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005992:	3202      	adds	r2, #2
 8005994:	79f8      	ldrb	r0, [r7, #7]
 8005996:	9201      	str	r2, [sp, #4]
 8005998:	9300      	str	r3, [sp, #0]
 800599a:	2302      	movs	r3, #2
 800599c:	2202      	movs	r2, #2
 800599e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80059a0:	f002 ffb2 	bl	8008908 <usbd_open_edpt_pair>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f083 0301 	eor.w	r3, r3, #1
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d00a      	beq.n	80059c6 <cdcd_open+0x1c2>
 80059b0:	4b0e      	ldr	r3, [pc, #56]	@ (80059ec <cdcd_open+0x1e8>)
 80059b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80059b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0301 	and.w	r3, r3, #1
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d000      	beq.n	80059c2 <cdcd_open+0x1be>
 80059c0:	be00      	bkpt	0x0000
 80059c2:	2300      	movs	r3, #0
 80059c4:	e00b      	b.n	80059de <cdcd_open+0x1da>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 80059c6:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80059ca:	330e      	adds	r3, #14
 80059cc:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 80059d0:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80059d4:	4618      	mov	r0, r3
 80059d6:	f7ff fcb1 	bl	800533c <_prep_out_transaction>

  return drv_len;
 80059da:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3760      	adds	r7, #96	@ 0x60
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20000b2c 	.word	0x20000b2c
 80059ec:	e000edf0 	.word	0xe000edf0

080059f0 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b08a      	sub	sp, #40	@ 0x28
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	4603      	mov	r3, r0
 80059f8:	603a      	str	r2, [r7, #0]
 80059fa:	71fb      	strb	r3, [r7, #7]
 80059fc:	460b      	mov	r3, r1
 80059fe:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b20      	cmp	r3, #32
 8005a0c:	d001      	beq.n	8005a12 <cdcd_control_xfer_cb+0x22>
 8005a0e:	2300      	movs	r3, #0
 8005a10:	e0e6      	b.n	8005be0 <cdcd_control_xfer_cb+0x1f0>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8005a12:	2300      	movs	r3, #0
 8005a14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005a18:	e014      	b.n	8005a44 <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 8005a1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a1e:	22e8      	movs	r2, #232	@ 0xe8
 8005a20:	fb02 f303 	mul.w	r3, r2, r3
 8005a24:	4a70      	ldr	r2, [pc, #448]	@ (8005be8 <cdcd_control_xfer_cb+0x1f8>)
 8005a26:	4413      	add	r3, r2
 8005a28:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 8005a2a:	6a3b      	ldr	r3, [r7, #32]
 8005a2c:	781b      	ldrb	r3, [r3, #0]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	889b      	ldrh	r3, [r3, #4]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d009      	beq.n	8005a4e <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8005a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a3e:	3301      	adds	r3, #1
 8005a40:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005a44:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0e6      	beq.n	8005a1a <cdcd_control_xfer_cb+0x2a>
 8005a4c:	e000      	b.n	8005a50 <cdcd_control_xfer_cb+0x60>
      break;
 8005a4e:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 8005a50:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d001      	beq.n	8005a5c <cdcd_control_xfer_cb+0x6c>
 8005a58:	2300      	movs	r3, #0
 8005a5a:	e0c1      	b.n	8005be0 <cdcd_control_xfer_cb+0x1f0>

  switch (request->bRequest) {
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	785b      	ldrb	r3, [r3, #1]
 8005a60:	3b20      	subs	r3, #32
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	f200 80b2 	bhi.w	8005bcc <cdcd_control_xfer_cb+0x1dc>
 8005a68:	a201      	add	r2, pc, #4	@ (adr r2, 8005a70 <cdcd_control_xfer_cb+0x80>)
 8005a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a6e:	bf00      	nop
 8005a70:	08005a81 	.word	0x08005a81
 8005a74:	08005abd 	.word	0x08005abd
 8005a78:	08005ad7 	.word	0x08005ad7
 8005a7c:	08005b9b 	.word	0x08005b9b
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8005a80:	79bb      	ldrb	r3, [r7, #6]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d108      	bne.n	8005a98 <cdcd_control_xfer_cb+0xa8>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8005a86:	6a3b      	ldr	r3, [r7, #32]
 8005a88:	f103 0208 	add.w	r2, r3, #8
 8005a8c:	79f8      	ldrb	r0, [r7, #7]
 8005a8e:	2307      	movs	r3, #7
 8005a90:	6839      	ldr	r1, [r7, #0]
 8005a92:	f003 fa1f 	bl	8008ed4 <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 8005a96:	e09b      	b.n	8005bd0 <cdcd_control_xfer_cb+0x1e0>
      } else if (stage == CONTROL_STAGE_ACK) {
 8005a98:	79bb      	ldrb	r3, [r7, #6]
 8005a9a:	2b03      	cmp	r3, #3
 8005a9c:	f040 8098 	bne.w	8005bd0 <cdcd_control_xfer_cb+0x1e0>
        if (tud_cdc_line_coding_cb) {
 8005aa0:	4b52      	ldr	r3, [pc, #328]	@ (8005bec <cdcd_control_xfer_cb+0x1fc>)
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f000 8094 	beq.w	8005bd0 <cdcd_control_xfer_cb+0x1e0>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 8005aa8:	6a3b      	ldr	r3, [r7, #32]
 8005aaa:	f103 0208 	add.w	r2, r3, #8
 8005aae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005ab2:	4611      	mov	r1, r2
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f3af 8000 	nop.w
      break;
 8005aba:	e089      	b.n	8005bd0 <cdcd_control_xfer_cb+0x1e0>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8005abc:	79bb      	ldrb	r3, [r7, #6]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	f040 8088 	bne.w	8005bd4 <cdcd_control_xfer_cb+0x1e4>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 8005ac4:	6a3b      	ldr	r3, [r7, #32]
 8005ac6:	f103 0208 	add.w	r2, r3, #8
 8005aca:	79f8      	ldrb	r0, [r7, #7]
 8005acc:	2307      	movs	r3, #7
 8005ace:	6839      	ldr	r1, [r7, #0]
 8005ad0:	f003 fa00 	bl	8008ed4 <tud_control_xfer>
      }
      break;
 8005ad4:	e07e      	b.n	8005bd4 <cdcd_control_xfer_cb+0x1e4>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 8005ad6:	79bb      	ldrb	r3, [r7, #6]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d105      	bne.n	8005ae8 <cdcd_control_xfer_cb+0xf8>
        tud_control_status(rhport, request);
 8005adc:	79fb      	ldrb	r3, [r7, #7]
 8005ade:	6839      	ldr	r1, [r7, #0]
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	f003 f985 	bl	8008df0 <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 8005ae6:	e077      	b.n	8005bd8 <cdcd_control_xfer_cb+0x1e8>
      } else if (stage == CONTROL_STAGE_ACK) {
 8005ae8:	79bb      	ldrb	r3, [r7, #6]
 8005aea:	2b03      	cmp	r3, #3
 8005aec:	d174      	bne.n	8005bd8 <cdcd_control_xfer_cb+0x1e8>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	885b      	ldrh	r3, [r3, #2]
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	613b      	str	r3, [r7, #16]
 8005af6:	2300      	movs	r3, #0
 8005af8:	73fb      	strb	r3, [r7, #15]
 8005afa:	7bfb      	ldrb	r3, [r7, #15]
 8005afc:	693a      	ldr	r2, [r7, #16]
 8005afe:	fa22 f303 	lsr.w	r3, r2, r3
 8005b02:	f003 0301 	and.w	r3, r3, #1
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	bf14      	ite	ne
 8005b0a:	2301      	movne	r3, #1
 8005b0c:	2300      	moveq	r3, #0
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	885b      	ldrh	r3, [r3, #2]
 8005b16:	b29b      	uxth	r3, r3
 8005b18:	61bb      	str	r3, [r7, #24]
 8005b1a:	2301      	movs	r3, #1
 8005b1c:	75fb      	strb	r3, [r7, #23]
 8005b1e:	7dfb      	ldrb	r3, [r7, #23]
 8005b20:	69ba      	ldr	r2, [r7, #24]
 8005b22:	fa22 f303 	lsr.w	r3, r2, r3
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	bf14      	ite	ne
 8005b2e:	2301      	movne	r3, #1
 8005b30:	2300      	moveq	r3, #0
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	885b      	ldrh	r3, [r3, #2]
 8005b3a:	b29b      	uxth	r3, r3
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	711a      	strb	r2, [r3, #4]
        if (_cdcd_cfg.tx_overwritabe_if_not_connected) {
 8005b42:	4b2b      	ldr	r3, [pc, #172]	@ (8005bf0 <cdcd_control_xfer_cb+0x200>)
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	f003 0304 	and.w	r3, r3, #4
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d013      	beq.n	8005b78 <cdcd_control_xfer_cb+0x188>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8005b50:	6a3b      	ldr	r3, [r7, #32]
 8005b52:	f103 021c 	add.w	r2, r3, #28
 8005b56:	7ffb      	ldrb	r3, [r7, #31]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	bf14      	ite	ne
 8005b5c:	2301      	movne	r3, #1
 8005b5e:	2300      	moveq	r3, #0
 8005b60:	b2db      	uxtb	r3, r3
 8005b62:	f083 0301 	eor.w	r3, r3, #1
 8005b66:	b2db      	uxtb	r3, r3
 8005b68:	f003 0301 	and.w	r3, r3, #1
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	4619      	mov	r1, r3
 8005b70:	4610      	mov	r0, r2
 8005b72:	f001 fbbc 	bl	80072ee <tu_fifo_set_overwritable>
 8005b76:	e005      	b.n	8005b84 <cdcd_control_xfer_cb+0x194>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, false);
 8005b78:	6a3b      	ldr	r3, [r7, #32]
 8005b7a:	331c      	adds	r3, #28
 8005b7c:	2100      	movs	r1, #0
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f001 fbb5 	bl	80072ee <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 8005b84:	4b1b      	ldr	r3, [pc, #108]	@ (8005bf4 <cdcd_control_xfer_cb+0x204>)
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d026      	beq.n	8005bd8 <cdcd_control_xfer_cb+0x1e8>
          tud_cdc_line_state_cb(itf, dtr, rts);
 8005b8a:	7fba      	ldrb	r2, [r7, #30]
 8005b8c:	7ff9      	ldrb	r1, [r7, #31]
 8005b8e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005b92:	4618      	mov	r0, r3
 8005b94:	f7fa fe24 	bl	80007e0 <tud_cdc_line_state_cb>
      break;
 8005b98:	e01e      	b.n	8005bd8 <cdcd_control_xfer_cb+0x1e8>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 8005b9a:	79bb      	ldrb	r3, [r7, #6]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d105      	bne.n	8005bac <cdcd_control_xfer_cb+0x1bc>
        tud_control_status(rhport, request);
 8005ba0:	79fb      	ldrb	r3, [r7, #7]
 8005ba2:	6839      	ldr	r1, [r7, #0]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f003 f923 	bl	8008df0 <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 8005baa:	e017      	b.n	8005bdc <cdcd_control_xfer_cb+0x1ec>
      } else if (stage == CONTROL_STAGE_ACK) {
 8005bac:	79bb      	ldrb	r3, [r7, #6]
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	d114      	bne.n	8005bdc <cdcd_control_xfer_cb+0x1ec>
        if (tud_cdc_send_break_cb) {
 8005bb2:	4b11      	ldr	r3, [pc, #68]	@ (8005bf8 <cdcd_control_xfer_cb+0x208>)
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d011      	beq.n	8005bdc <cdcd_control_xfer_cb+0x1ec>
          tud_cdc_send_break_cb(itf, request->wValue);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	885b      	ldrh	r3, [r3, #2]
 8005bbc:	b29a      	uxth	r2, r3
 8005bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005bc2:	4611      	mov	r1, r2
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f3af 8000 	nop.w
      break;
 8005bca:	e007      	b.n	8005bdc <cdcd_control_xfer_cb+0x1ec>

    default:
      return false; // stall unsupported request
 8005bcc:	2300      	movs	r3, #0
 8005bce:	e007      	b.n	8005be0 <cdcd_control_xfer_cb+0x1f0>
      break;
 8005bd0:	bf00      	nop
 8005bd2:	e004      	b.n	8005bde <cdcd_control_xfer_cb+0x1ee>
      break;
 8005bd4:	bf00      	nop
 8005bd6:	e002      	b.n	8005bde <cdcd_control_xfer_cb+0x1ee>
      break;
 8005bd8:	bf00      	nop
 8005bda:	e000      	b.n	8005bde <cdcd_control_xfer_cb+0x1ee>
      break;
 8005bdc:	bf00      	nop
  }

  return true;
 8005bde:	2301      	movs	r3, #1
}
 8005be0:	4618      	mov	r0, r3
 8005be2:	3728      	adds	r7, #40	@ 0x28
 8005be4:	46bd      	mov	sp, r7
 8005be6:	bd80      	pop	{r7, pc}
 8005be8:	20000b2c 	.word	0x20000b2c
 8005bec:	00000000 	.word	0x00000000
 8005bf0:	20000024 	.word	0x20000024
 8005bf4:	080007e1 	.word	0x080007e1
 8005bf8:	00000000 	.word	0x00000000

08005bfc <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b088      	sub	sp, #32
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	603b      	str	r3, [r7, #0]
 8005c04:	4603      	mov	r3, r0
 8005c06:	71fb      	strb	r3, [r7, #7]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	71bb      	strb	r3, [r7, #6]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8005c10:	2300      	movs	r3, #0
 8005c12:	77fb      	strb	r3, [r7, #31]
 8005c14:	e013      	b.n	8005c3e <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 8005c16:	7ffb      	ldrb	r3, [r7, #31]
 8005c18:	22e8      	movs	r2, #232	@ 0xe8
 8005c1a:	fb02 f303 	mul.w	r3, r2, r3
 8005c1e:	4a5f      	ldr	r2, [pc, #380]	@ (8005d9c <cdcd_xfer_cb+0x1a0>)
 8005c20:	4413      	add	r3, r2
 8005c22:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	78db      	ldrb	r3, [r3, #3]
 8005c28:	79ba      	ldrb	r2, [r7, #6]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d00a      	beq.n	8005c44 <cdcd_xfer_cb+0x48>
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	789b      	ldrb	r3, [r3, #2]
 8005c32:	79ba      	ldrb	r2, [r7, #6]
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d005      	beq.n	8005c44 <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8005c38:	7ffb      	ldrb	r3, [r7, #31]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	77fb      	strb	r3, [r7, #31]
 8005c3e:	7ffb      	ldrb	r3, [r7, #31]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d0e8      	beq.n	8005c16 <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8005c44:	7ffb      	ldrb	r3, [r7, #31]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d00a      	beq.n	8005c60 <cdcd_xfer_cb+0x64>
 8005c4a:	4b55      	ldr	r3, [pc, #340]	@ (8005da0 <cdcd_xfer_cb+0x1a4>)
 8005c4c:	60bb      	str	r3, [r7, #8]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f003 0301 	and.w	r3, r3, #1
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d000      	beq.n	8005c5c <cdcd_xfer_cb+0x60>
 8005c5a:	be00      	bkpt	0x0000
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	e098      	b.n	8005d92 <cdcd_xfer_cb+0x196>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8005c60:	7ffb      	ldrb	r3, [r7, #31]
 8005c62:	01db      	lsls	r3, r3, #7
 8005c64:	4a4f      	ldr	r2, [pc, #316]	@ (8005da4 <cdcd_xfer_cb+0x1a8>)
 8005c66:	4413      	add	r3, r2
 8005c68:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 8005c6a:	69bb      	ldr	r3, [r7, #24]
 8005c6c:	78db      	ldrb	r3, [r3, #3]
 8005c6e:	79ba      	ldrb	r2, [r7, #6]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d148      	bne.n	8005d06 <cdcd_xfer_cb+0x10a>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	3310      	adds	r3, #16
 8005c78:	6939      	ldr	r1, [r7, #16]
 8005c7a:	683a      	ldr	r2, [r7, #0]
 8005c7c:	b292      	uxth	r2, r2
 8005c7e:	4618      	mov	r0, r3
 8005c80:	f001 fb00 	bl	8007284 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 8005c84:	4b48      	ldr	r3, [pc, #288]	@ (8005da8 <cdcd_xfer_cb+0x1ac>)
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d027      	beq.n	8005cda <cdcd_xfer_cb+0xde>
 8005c8a:	69bb      	ldr	r3, [r7, #24]
 8005c8c:	795b      	ldrb	r3, [r3, #5]
 8005c8e:	2bff      	cmp	r3, #255	@ 0xff
 8005c90:	d023      	beq.n	8005cda <cdcd_xfer_cb+0xde>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8005c92:	2300      	movs	r3, #0
 8005c94:	617b      	str	r3, [r7, #20]
 8005c96:	e01c      	b.n	8005cd2 <cdcd_xfer_cb+0xd6>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	795a      	ldrb	r2, [r3, #5]
 8005c9c:	6939      	ldr	r1, [r7, #16]
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	440b      	add	r3, r1
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d111      	bne.n	8005ccc <cdcd_xfer_cb+0xd0>
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	3310      	adds	r3, #16
 8005cac:	4618      	mov	r0, r3
 8005cae:	f001 f9e3 	bl	8007078 <tu_fifo_empty>
 8005cb2:	4603      	mov	r3, r0
 8005cb4:	f083 0301 	eor.w	r3, r3, #1
 8005cb8:	b2db      	uxtb	r3, r3
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d006      	beq.n	8005ccc <cdcd_xfer_cb+0xd0>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	795a      	ldrb	r2, [r3, #5]
 8005cc2:	7ffb      	ldrb	r3, [r7, #31]
 8005cc4:	4611      	mov	r1, r2
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	3301      	adds	r3, #1
 8005cd0:	617b      	str	r3, [r7, #20]
 8005cd2:	697a      	ldr	r2, [r7, #20]
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d3de      	bcc.n	8005c98 <cdcd_xfer_cb+0x9c>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 8005cda:	4b34      	ldr	r3, [pc, #208]	@ (8005dac <cdcd_xfer_cb+0x1b0>)
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d00e      	beq.n	8005cfe <cdcd_xfer_cb+0x102>
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	3310      	adds	r3, #16
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f001 f9c7 	bl	8007078 <tu_fifo_empty>
 8005cea:	4603      	mov	r3, r0
 8005cec:	f083 0301 	eor.w	r3, r3, #1
 8005cf0:	b2db      	uxtb	r3, r3
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d003      	beq.n	8005cfe <cdcd_xfer_cb+0x102>
      tud_cdc_rx_cb(itf);
 8005cf6:	7ffb      	ldrb	r3, [r7, #31]
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	f3af 8000 	nop.w
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 8005cfe:	7ffb      	ldrb	r3, [r7, #31]
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7ff fb1b 	bl	800533c <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	789b      	ldrb	r3, [r3, #2]
 8005d0a:	79ba      	ldrb	r2, [r7, #6]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d13f      	bne.n	8005d90 <cdcd_xfer_cb+0x194>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 8005d10:	4b27      	ldr	r3, [pc, #156]	@ (8005db0 <cdcd_xfer_cb+0x1b4>)
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <cdcd_xfer_cb+0x122>
      tud_cdc_tx_complete_cb(itf);
 8005d16:	7ffb      	ldrb	r3, [r7, #31]
 8005d18:	4618      	mov	r0, r3
 8005d1a:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 8005d1e:	7ffb      	ldrb	r3, [r7, #31]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff fc2f 	bl	8005584 <tud_cdc_n_write_flush>
 8005d26:	4603      	mov	r3, r0
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d131      	bne.n	8005d90 <cdcd_xfer_cb+0x194>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	331c      	adds	r3, #28
 8005d30:	4618      	mov	r0, r3
 8005d32:	f001 f96f 	bl	8007014 <tu_fifo_count>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d129      	bne.n	8005d90 <cdcd_xfer_cb+0x194>
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d026      	beq.n	8005d90 <cdcd_xfer_cb+0x194>
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d121      	bne.n	8005d90 <cdcd_xfer_cb+0x194>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	789a      	ldrb	r2, [r3, #2]
 8005d50:	79fb      	ldrb	r3, [r7, #7]
 8005d52:	4611      	mov	r1, r2
 8005d54:	4618      	mov	r0, r3
 8005d56:	f002 fe85 	bl	8008a64 <usbd_edpt_claim>
 8005d5a:	4603      	mov	r3, r0
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d017      	beq.n	8005d90 <cdcd_xfer_cb+0x194>
          TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0));
 8005d60:	69bb      	ldr	r3, [r7, #24]
 8005d62:	7899      	ldrb	r1, [r3, #2]
 8005d64:	79f8      	ldrb	r0, [r7, #7]
 8005d66:	2300      	movs	r3, #0
 8005d68:	2200      	movs	r2, #0
 8005d6a:	f002 fecb 	bl	8008b04 <usbd_edpt_xfer>
 8005d6e:	4603      	mov	r3, r0
 8005d70:	f083 0301 	eor.w	r3, r3, #1
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00a      	beq.n	8005d90 <cdcd_xfer_cb+0x194>
 8005d7a:	4b09      	ldr	r3, [pc, #36]	@ (8005da0 <cdcd_xfer_cb+0x1a4>)
 8005d7c:	60fb      	str	r3, [r7, #12]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	f003 0301 	and.w	r3, r3, #1
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d000      	beq.n	8005d8c <cdcd_xfer_cb+0x190>
 8005d8a:	be00      	bkpt	0x0000
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	e000      	b.n	8005d92 <cdcd_xfer_cb+0x196>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 8005d90:	2301      	movs	r3, #1
}
 8005d92:	4618      	mov	r0, r3
 8005d94:	3720      	adds	r7, #32
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}
 8005d9a:	bf00      	nop
 8005d9c:	20000b2c 	.word	0x20000b2c
 8005da0:	e000edf0 	.word	0xe000edf0
 8005da4:	20000c14 	.word	0x20000c14
	...

08005db4 <tud_hid_set_idle_cb>:
TU_ATTR_WEAK void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
  (void) instance;
  (void) protocol;
}

TU_ATTR_WEAK bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate) {
 8005db4:	b480      	push	{r7}
 8005db6:	b083      	sub	sp, #12
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	4603      	mov	r3, r0
 8005dbc:	460a      	mov	r2, r1
 8005dbe:	71fb      	strb	r3, [r7, #7]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) idle_rate;
  return true;
 8005dc4:	2301      	movs	r3, #1
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	370c      	adds	r7, #12
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <tud_hid_report_failed_cb>:
  (void) report;
  (void) len;
}

// Invoked when a transfer wasn't successful
TU_ATTR_WEAK void tud_hid_report_failed_cb(uint8_t instance, hid_report_type_t report_type, uint8_t const* report, uint16_t xferred_bytes) {
 8005dd2:	b480      	push	{r7}
 8005dd4:	b083      	sub	sp, #12
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	603a      	str	r2, [r7, #0]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	4603      	mov	r3, r0
 8005dde:	71fb      	strb	r3, [r7, #7]
 8005de0:	460b      	mov	r3, r1
 8005de2:	71bb      	strb	r3, [r7, #6]
 8005de4:	4613      	mov	r3, r2
 8005de6:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report_type;
  (void) report;
  (void) xferred_bytes;
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance) {
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b084      	sub	sp, #16
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	4603      	mov	r3, r0
 8005dfc:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 8005e02:	79fa      	ldrb	r2, [r7, #7]
 8005e04:	491b      	ldr	r1, [pc, #108]	@ (8005e74 <tud_hid_n_ready+0x80>)
 8005e06:	4613      	mov	r3, r2
 8005e08:	005b      	lsls	r3, r3, #1
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	440b      	add	r3, r1
 8005e10:	3301      	adds	r3, #1
 8005e12:	781b      	ldrb	r3, [r3, #0]
 8005e14:	73bb      	strb	r3, [r7, #14]
 8005e16:	f001 faf7 	bl	8007408 <tud_mounted>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d009      	beq.n	8005e34 <tud_hid_n_ready+0x40>
 8005e20:	f001 fb04 	bl	800742c <tud_suspended>
 8005e24:	4603      	mov	r3, r0
 8005e26:	f083 0301 	eor.w	r3, r3, #1
 8005e2a:	b2db      	uxtb	r3, r3
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d001      	beq.n	8005e34 <tud_hid_n_ready+0x40>
 8005e30:	2301      	movs	r3, #1
 8005e32:	e000      	b.n	8005e36 <tud_hid_n_ready+0x42>
 8005e34:	2300      	movs	r3, #0
 8005e36:	f003 0301 	and.w	r3, r3, #1
 8005e3a:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d010      	beq.n	8005e62 <tud_hid_n_ready+0x6e>
 8005e40:	7bbb      	ldrb	r3, [r7, #14]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00d      	beq.n	8005e62 <tud_hid_n_ready+0x6e>
 8005e46:	7bba      	ldrb	r2, [r7, #14]
 8005e48:	7bfb      	ldrb	r3, [r7, #15]
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	4618      	mov	r0, r3
 8005e4e:	f002 fecf 	bl	8008bf0 <usbd_edpt_busy>
 8005e52:	4603      	mov	r3, r0
 8005e54:	f083 0301 	eor.w	r3, r3, #1
 8005e58:	b2db      	uxtb	r3, r3
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d001      	beq.n	8005e62 <tud_hid_n_ready+0x6e>
 8005e5e:	2301      	movs	r3, #1
 8005e60:	e000      	b.n	8005e64 <tud_hid_n_ready+0x70>
 8005e62:	2300      	movs	r3, #0
 8005e64:	f003 0301 	and.w	r3, r3, #1
 8005e68:	b2db      	uxtb	r3, r3
}
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3710      	adds	r7, #16
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	20000c94 	.word	0x20000c94

08005e78 <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const *report, uint16_t len) {
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08e      	sub	sp, #56	@ 0x38
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	603a      	str	r2, [r7, #0]
 8005e80:	461a      	mov	r2, r3
 8005e82:	4603      	mov	r3, r0
 8005e84:	71fb      	strb	r3, [r7, #7]
 8005e86:	460b      	mov	r3, r1
 8005e88:	71bb      	strb	r3, [r7, #6]
 8005e8a:	4613      	mov	r3, r2
 8005e8c:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(instance < CFG_TUD_HID);
 8005e8e:	79fb      	ldrb	r3, [r7, #7]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d001      	beq.n	8005e98 <tud_hid_n_report+0x20>
 8005e94:	2300      	movs	r3, #0
 8005e96:	e06d      	b.n	8005f74 <tud_hid_n_report+0xfc>
  const uint8_t rhport = 0;
 8005e98:	2300      	movs	r3, #0
 8005e9a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  hidd_interface_t *p_hid = &_hidd_itf[instance];
 8005e9e:	79fa      	ldrb	r2, [r7, #7]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	005b      	lsls	r3, r3, #1
 8005ea4:	4413      	add	r3, r2
 8005ea6:	009b      	lsls	r3, r3, #2
 8005ea8:	4a34      	ldr	r2, [pc, #208]	@ (8005f7c <tud_hid_n_report+0x104>)
 8005eaa:	4413      	add	r3, r2
 8005eac:	633b      	str	r3, [r7, #48]	@ 0x30
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8005eae:	79fa      	ldrb	r2, [r7, #7]
 8005eb0:	4613      	mov	r3, r2
 8005eb2:	005b      	lsls	r3, r3, #1
 8005eb4:	4413      	add	r3, r2
 8005eb6:	011b      	lsls	r3, r3, #4
 8005eb8:	4a31      	ldr	r2, [pc, #196]	@ (8005f80 <tud_hid_n_report+0x108>)
 8005eba:	4413      	add	r3, r2
 8005ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_hid->ep_in));
 8005ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec0:	785a      	ldrb	r2, [r3, #1]
 8005ec2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005ec6:	4611      	mov	r1, r2
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f002 fdcb 	bl	8008a64 <usbd_edpt_claim>
 8005ece:	4603      	mov	r3, r0
 8005ed0:	f083 0301 	eor.w	r3, r3, #1
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <tud_hid_n_report+0x66>
 8005eda:	2300      	movs	r3, #0
 8005edc:	e04a      	b.n	8005f74 <tud_hid_n_report+0xfc>

  // prepare data
  if (report_id) {
 8005ede:	79bb      	ldrb	r3, [r7, #6]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d021      	beq.n	8005f28 <tud_hid_n_report+0xb0>
    p_epbuf->epin[0] = report_id;
 8005ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ee6:	79ba      	ldrb	r2, [r7, #6]
 8005ee8:	741a      	strb	r2, [r3, #16]
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin + 1, CFG_TUD_HID_EP_BUFSIZE - 1, report, len));
 8005eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eec:	3310      	adds	r3, #16
 8005eee:	1c5a      	adds	r2, r3, #1
 8005ef0:	88bb      	ldrh	r3, [r7, #4]
 8005ef2:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005ef4:	220f      	movs	r2, #15
 8005ef6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ef8:	683a      	ldr	r2, [r7, #0]
 8005efa:	623a      	str	r2, [r7, #32]
 8005efc:	61fb      	str	r3, [r7, #28]
  if ( count > destsz ) {
 8005efe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f00:	69fb      	ldr	r3, [r7, #28]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d202      	bcs.n	8005f0c <tud_hid_n_report+0x94>
    return -1;
 8005f06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f0a:	e005      	b.n	8005f18 <tud_hid_n_report+0xa0>
  memcpy(dest, src, count);
 8005f0c:	69fa      	ldr	r2, [r7, #28]
 8005f0e:	6a39      	ldr	r1, [r7, #32]
 8005f10:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f12:	f005 fc24 	bl	800b75e <memcpy>
  return 0;
 8005f16:	2300      	movs	r3, #0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d001      	beq.n	8005f20 <tud_hid_n_report+0xa8>
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	e029      	b.n	8005f74 <tud_hid_n_report+0xfc>
    len++;
 8005f20:	88bb      	ldrh	r3, [r7, #4]
 8005f22:	3301      	adds	r3, #1
 8005f24:	80bb      	strh	r3, [r7, #4]
 8005f26:	e01a      	b.n	8005f5e <tud_hid_n_report+0xe6>
  } else {
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin, CFG_TUD_HID_EP_BUFSIZE, report, len));
 8005f28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f2a:	f103 0210 	add.w	r2, r3, #16
 8005f2e:	88bb      	ldrh	r3, [r7, #4]
 8005f30:	61ba      	str	r2, [r7, #24]
 8005f32:	2210      	movs	r2, #16
 8005f34:	617a      	str	r2, [r7, #20]
 8005f36:	683a      	ldr	r2, [r7, #0]
 8005f38:	613a      	str	r2, [r7, #16]
 8005f3a:	60fb      	str	r3, [r7, #12]
  if ( count > destsz ) {
 8005f3c:	697a      	ldr	r2, [r7, #20]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d202      	bcs.n	8005f4a <tud_hid_n_report+0xd2>
    return -1;
 8005f44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f48:	e005      	b.n	8005f56 <tud_hid_n_report+0xde>
  memcpy(dest, src, count);
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	6939      	ldr	r1, [r7, #16]
 8005f4e:	69b8      	ldr	r0, [r7, #24]
 8005f50:	f005 fc05 	bl	800b75e <memcpy>
  return 0;
 8005f54:	2300      	movs	r3, #0
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d001      	beq.n	8005f5e <tud_hid_n_report+0xe6>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e00a      	b.n	8005f74 <tud_hid_n_report+0xfc>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_epbuf->epin, len);
 8005f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f60:	7859      	ldrb	r1, [r3, #1]
 8005f62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f64:	f103 0210 	add.w	r2, r3, #16
 8005f68:	88bb      	ldrh	r3, [r7, #4]
 8005f6a:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8005f6e:	f002 fdc9 	bl	8008b04 <usbd_edpt_xfer>
 8005f72:	4603      	mov	r3, r0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3738      	adds	r7, #56	@ 0x38
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	bd80      	pop	{r7, pc}
 8005f7c:	20000c94 	.word	0x20000c94
 8005f80:	20000ca0 	.word	0x20000ca0

08005f84 <tud_hid_n_keyboard_report>:

uint8_t tud_hid_n_get_protocol(uint8_t instance) {
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	603b      	str	r3, [r7, #0]
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	71fb      	strb	r3, [r7, #7]
 8005f90:	460b      	mov	r3, r1
 8005f92:	71bb      	strb	r3, [r7, #6]
 8005f94:	4613      	mov	r3, r2
 8005f96:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;
  report.modifier = modifier;
 8005f98:	797b      	ldrb	r3, [r7, #5]
 8005f9a:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	727b      	strb	r3, [r7, #9]

  if (keycode) {
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d007      	beq.n	8005fb6 <tud_hid_n_keyboard_report+0x32>
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 8005fa6:	683a      	ldr	r2, [r7, #0]
 8005fa8:	f107 030a 	add.w	r3, r7, #10
 8005fac:	6811      	ldr	r1, [r2, #0]
 8005fae:	6019      	str	r1, [r3, #0]
 8005fb0:	8892      	ldrh	r2, [r2, #4]
 8005fb2:	809a      	strh	r2, [r3, #4]
 8005fb4:	e007      	b.n	8005fc6 <tud_hid_n_keyboard_report+0x42>
  } else {
    tu_memclr(report.keycode, 6);
 8005fb6:	f107 0308 	add.w	r3, r7, #8
 8005fba:	3302      	adds	r3, #2
 8005fbc:	2206      	movs	r2, #6
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f005 fb3b 	bl	800b63c <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 8005fc6:	f107 0208 	add.w	r2, r7, #8
 8005fca:	79b9      	ldrb	r1, [r7, #6]
 8005fcc:	79f8      	ldrb	r0, [r7, #7]
 8005fce:	2308      	movs	r3, #8
 8005fd0:	f7ff ff52 	bl	8005e78 <tud_hid_n_report>
 8005fd4:	4603      	mov	r3, r0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3710      	adds	r7, #16
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <hidd_init>:
}

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void) {
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	af00      	add	r7, sp, #0
  hidd_reset(0);
 8005fe2:	2000      	movs	r0, #0
 8005fe4:	f000 f80a 	bl	8005ffc <hidd_reset>
}
 8005fe8:	bf00      	nop
 8005fea:	bd80      	pop	{r7, pc}

08005fec <hidd_deinit>:

bool hidd_deinit(void) {
 8005fec:	b480      	push	{r7}
 8005fee:	af00      	add	r7, sp, #0
  return true;
 8005ff0:	2301      	movs	r3, #1
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <hidd_reset>:

void hidd_reset(uint8_t rhport) {
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	4603      	mov	r3, r0
 8006004:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 8006006:	220c      	movs	r2, #12
 8006008:	2100      	movs	r1, #0
 800600a:	4803      	ldr	r0, [pc, #12]	@ (8006018 <hidd_reset+0x1c>)
 800600c:	f005 fb16 	bl	800b63c <memset>
}
 8006010:	bf00      	nop
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	20000c94 	.word	0x20000c94

0800601c <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const *desc_itf, uint16_t max_len) {
 800601c:	b580      	push	{r7, lr}
 800601e:	b094      	sub	sp, #80	@ 0x50
 8006020:	af02      	add	r7, sp, #8
 8006022:	4603      	mov	r3, r0
 8006024:	6039      	str	r1, [r7, #0]
 8006026:	71fb      	strb	r3, [r7, #7]
 8006028:	4613      	mov	r3, r2
 800602a:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	795b      	ldrb	r3, [r3, #5]
 8006030:	2b03      	cmp	r3, #3
 8006032:	d001      	beq.n	8006038 <hidd_open+0x1c>
 8006034:	2300      	movs	r3, #0
 8006036:	e0ce      	b.n	80061d6 <hidd_open+0x1ba>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	791b      	ldrb	r3, [r3, #4]
 800603c:	461a      	mov	r2, r3
 800603e:	00d2      	lsls	r2, r2, #3
 8006040:	1ad3      	subs	r3, r2, r3
 8006042:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 8006044:	3312      	adds	r3, #18
 8006046:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  TU_ASSERT(max_len >= drv_len, 0);
 800604a:	88ba      	ldrh	r2, [r7, #4]
 800604c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006050:	429a      	cmp	r2, r3
 8006052:	d20a      	bcs.n	800606a <hidd_open+0x4e>
 8006054:	4b62      	ldr	r3, [pc, #392]	@ (80061e0 <hidd_open+0x1c4>)
 8006056:	627b      	str	r3, [r7, #36]	@ 0x24
 8006058:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0301 	and.w	r3, r3, #1
 8006060:	2b00      	cmp	r3, #0
 8006062:	d000      	beq.n	8006066 <hidd_open+0x4a>
 8006064:	be00      	bkpt	0x0000
 8006066:	2300      	movs	r3, #0
 8006068:	e0b5      	b.n	80061d6 <hidd_open+0x1ba>

  // Find available interface
  hidd_interface_t *p_hid;
  uint8_t hid_id;
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 800606a:	2300      	movs	r3, #0
 800606c:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006070:	e011      	b.n	8006096 <hidd_open+0x7a>
    p_hid = &_hidd_itf[hid_id];
 8006072:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 8006076:	4613      	mov	r3, r2
 8006078:	005b      	lsls	r3, r3, #1
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4a59      	ldr	r2, [pc, #356]	@ (80061e4 <hidd_open+0x1c8>)
 8006080:	4413      	add	r3, r2
 8006082:	647b      	str	r3, [r7, #68]	@ 0x44
    if (p_hid->ep_in == 0) {
 8006084:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006086:	785b      	ldrb	r3, [r3, #1]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d009      	beq.n	80060a0 <hidd_open+0x84>
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 800608c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8006090:	3301      	adds	r3, #1
 8006092:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8006096:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800609a:	2b00      	cmp	r3, #0
 800609c:	d0e9      	beq.n	8006072 <hidd_open+0x56>
 800609e:	e000      	b.n	80060a2 <hidd_open+0x86>
      break;
 80060a0:	bf00      	nop
    }
  }
  TU_ASSERT(hid_id < CFG_TUD_HID, 0);
 80060a2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d00a      	beq.n	80060c0 <hidd_open+0xa4>
 80060aa:	4b4d      	ldr	r3, [pc, #308]	@ (80061e0 <hidd_open+0x1c4>)
 80060ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d000      	beq.n	80060bc <hidd_open+0xa0>
 80060ba:	be00      	bkpt	0x0000
 80060bc:	2300      	movs	r3, #0
 80060be:	e08a      	b.n	80061d6 <hidd_open+0x1ba>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_id];
 80060c0:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80060c4:	4613      	mov	r3, r2
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	4413      	add	r3, r2
 80060ca:	011b      	lsls	r3, r3, #4
 80060cc:	4a46      	ldr	r2, [pc, #280]	@ (80061e8 <hidd_open+0x1cc>)
 80060ce:	4413      	add	r3, r2
 80060d0:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint8_t const *p_desc = (uint8_t const *)desc_itf;
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060d8:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80060da:	69fb      	ldr	r3, [r7, #28]
 80060dc:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80060de:	69bb      	ldr	r3, [r7, #24]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	461a      	mov	r2, r3
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 80060e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ec:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80060ee:	6a3b      	ldr	r3, [r7, #32]
 80060f0:	3301      	adds	r3, #1
 80060f2:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 80060f4:	2b21      	cmp	r3, #33	@ 0x21
 80060f6:	d00a      	beq.n	800610e <hidd_open+0xf2>
 80060f8:	4b39      	ldr	r3, [pc, #228]	@ (80061e0 <hidd_open+0x1c4>)
 80060fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 0301 	and.w	r3, r3, #1
 8006104:	2b00      	cmp	r3, #0
 8006106:	d000      	beq.n	800610a <hidd_open+0xee>
 8006108:	be00      	bkpt	0x0000
 800610a:	2300      	movs	r3, #0
 800610c:	e063      	b.n	80061d6 <hidd_open+0x1ba>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *)p_desc;
 800610e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006110:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006112:	609a      	str	r2, [r3, #8]
 8006114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006116:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	781b      	ldrb	r3, [r3, #0]
 8006120:	461a      	mov	r2, r3
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8006126:	63bb      	str	r3, [r7, #56]	@ 0x38
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	7919      	ldrb	r1, [r3, #4]
 800612c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800612e:	3302      	adds	r3, #2
 8006130:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006132:	3201      	adds	r2, #1
 8006134:	79f8      	ldrb	r0, [r7, #7]
 8006136:	9201      	str	r2, [sp, #4]
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	2303      	movs	r3, #3
 800613c:	460a      	mov	r2, r1
 800613e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006140:	f002 fbe2 	bl	8008908 <usbd_open_edpt_pair>
 8006144:	4603      	mov	r3, r0
 8006146:	f083 0301 	eor.w	r3, r3, #1
 800614a:	b2db      	uxtb	r3, r3
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00a      	beq.n	8006166 <hidd_open+0x14a>
 8006150:	4b23      	ldr	r3, [pc, #140]	@ (80061e0 <hidd_open+0x1c4>)
 8006152:	633b      	str	r3, [r7, #48]	@ 0x30
 8006154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f003 0301 	and.w	r3, r3, #1
 800615c:	2b00      	cmp	r3, #0
 800615e:	d000      	beq.n	8006162 <hidd_open+0x146>
 8006160:	be00      	bkpt	0x0000
 8006162:	2300      	movs	r3, #0
 8006164:	e037      	b.n	80061d6 <hidd_open+0x1ba>

  if (desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT) {
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	799b      	ldrb	r3, [r3, #6]
 800616a:	2b01      	cmp	r3, #1
 800616c:	d103      	bne.n	8006176 <hidd_open+0x15a>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	79da      	ldrb	r2, [r3, #7]
 8006172:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006174:	70da      	strb	r2, [r3, #3]
  }

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 8006176:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006178:	2201      	movs	r2, #1
 800617a:	719a      	strb	r2, [r3, #6]
  p_hid->itf_num = desc_itf->bInterfaceNumber;
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	789a      	ldrb	r2, [r3, #2]
 8006180:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006182:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const *)p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 8006184:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006186:	689b      	ldr	r3, [r3, #8]
 8006188:	3307      	adds	r3, #7
 800618a:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	881a      	ldrh	r2, [r3, #0]
 8006190:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006192:	809a      	strh	r2, [r3, #4]

  // Prepare for output endpoint
  if (p_hid->ep_out) {
 8006194:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006196:	789b      	ldrb	r3, [r3, #2]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d01a      	beq.n	80061d2 <hidd_open+0x1b6>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE), drv_len);
 800619c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800619e:	7899      	ldrb	r1, [r3, #2]
 80061a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061a2:	f103 0220 	add.w	r2, r3, #32
 80061a6:	79f8      	ldrb	r0, [r7, #7]
 80061a8:	2310      	movs	r3, #16
 80061aa:	f002 fcab 	bl	8008b04 <usbd_edpt_xfer>
 80061ae:	4603      	mov	r3, r0
 80061b0:	f083 0301 	eor.w	r3, r3, #1
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d00b      	beq.n	80061d2 <hidd_open+0x1b6>
 80061ba:	4b09      	ldr	r3, [pc, #36]	@ (80061e0 <hidd_open+0x1c4>)
 80061bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80061be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	f003 0301 	and.w	r3, r3, #1
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d000      	beq.n	80061cc <hidd_open+0x1b0>
 80061ca:	be00      	bkpt	0x0000
 80061cc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80061d0:	e001      	b.n	80061d6 <hidd_open+0x1ba>
  }

  return drv_len;
 80061d2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3748      	adds	r7, #72	@ 0x48
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	e000edf0 	.word	0xe000edf0
 80061e4:	20000c94 	.word	0x20000c94
 80061e8:	20000ca0 	.word	0x20000ca0

080061ec <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b094      	sub	sp, #80	@ 0x50
 80061f0:	af02      	add	r7, sp, #8
 80061f2:	4603      	mov	r3, r0
 80061f4:	603a      	str	r2, [r7, #0]
 80061f6:	71fb      	strb	r3, [r7, #7]
 80061f8:	460b      	mov	r3, r1
 80061fa:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	f003 031f 	and.w	r3, r3, #31
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b01      	cmp	r3, #1
 8006208:	d001      	beq.n	800620e <hidd_control_xfer_cb+0x22>
 800620a:	2300      	movs	r3, #0
 800620c:	e1d6      	b.n	80065bc <hidd_control_xfer_cb+0x3d0>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	889b      	ldrh	r3, [r3, #4]
 8006212:	b29b      	uxth	r3, r3
 8006214:	b2db      	uxtb	r3, r3
 8006216:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8006218:	2300      	movs	r3, #0
 800621a:	77bb      	strb	r3, [r7, #30]
 800621c:	e00f      	b.n	800623e <hidd_control_xfer_cb+0x52>
    if (itf_num == _hidd_itf[i].itf_num) {
 800621e:	7fba      	ldrb	r2, [r7, #30]
 8006220:	498f      	ldr	r1, [pc, #572]	@ (8006460 <hidd_control_xfer_cb+0x274>)
 8006222:	4613      	mov	r3, r2
 8006224:	005b      	lsls	r3, r3, #1
 8006226:	4413      	add	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	440b      	add	r3, r1
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	7ffa      	ldrb	r2, [r7, #31]
 8006230:	429a      	cmp	r2, r3
 8006232:	d101      	bne.n	8006238 <hidd_control_xfer_cb+0x4c>
      return i;
 8006234:	7fbb      	ldrb	r3, [r7, #30]
 8006236:	e006      	b.n	8006246 <hidd_control_xfer_cb+0x5a>
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8006238:	7fbb      	ldrb	r3, [r7, #30]
 800623a:	3301      	adds	r3, #1
 800623c:	77bb      	strb	r3, [r7, #30]
 800623e:	7fbb      	ldrb	r3, [r7, #30]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d0ec      	beq.n	800621e <hidd_control_xfer_cb+0x32>
  return 0xFF;
 8006244:	23ff      	movs	r3, #255	@ 0xff
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 8006246:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 800624a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 800624e:	2b00      	cmp	r3, #0
 8006250:	d001      	beq.n	8006256 <hidd_control_xfer_cb+0x6a>
 8006252:	2300      	movs	r3, #0
 8006254:	e1b2      	b.n	80065bc <hidd_control_xfer_cb+0x3d0>
  hidd_interface_t *p_hid = &_hidd_itf[hid_itf];
 8006256:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800625a:	4613      	mov	r3, r2
 800625c:	005b      	lsls	r3, r3, #1
 800625e:	4413      	add	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4a7f      	ldr	r2, [pc, #508]	@ (8006460 <hidd_control_xfer_cb+0x274>)
 8006264:	4413      	add	r3, r2
 8006266:	637b      	str	r3, [r7, #52]	@ 0x34
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_itf];
 8006268:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 800626c:	4613      	mov	r3, r2
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	4413      	add	r3, r2
 8006272:	011b      	lsls	r3, r3, #4
 8006274:	4a7b      	ldr	r2, [pc, #492]	@ (8006464 <hidd_control_xfer_cb+0x278>)
 8006276:	4413      	add	r3, r2
 8006278:	633b      	str	r3, [r7, #48]	@ 0x30

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) {
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006282:	b2db      	uxtb	r3, r3
 8006284:	2b00      	cmp	r3, #0
 8006286:	d145      	bne.n	8006314 <hidd_control_xfer_cb+0x128>
    //------------- STD Request -------------//
    if (stage == CONTROL_STAGE_SETUP) {
 8006288:	79bb      	ldrb	r3, [r7, #6]
 800628a:	2b01      	cmp	r3, #1
 800628c:	f040 8195 	bne.w	80065ba <hidd_control_xfer_cb+0x3ce>
      uint8_t const desc_type = tu_u16_high(request->wValue);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	885b      	ldrh	r3, [r3, #2]
 8006294:	b29b      	uxth	r3, r3
 8006296:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8006298:	8bbb      	ldrh	r3, [r7, #28]
 800629a:	0a1b      	lsrs	r3, r3, #8
 800629c:	b29b      	uxth	r3, r3
 800629e:	b2db      	uxtb	r3, r3
 80062a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID) {
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	785b      	ldrb	r3, [r3, #1]
 80062a8:	2b06      	cmp	r3, #6
 80062aa:	d11b      	bne.n	80062e4 <hidd_control_xfer_cb+0xf8>
 80062ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062b0:	2b21      	cmp	r3, #33	@ 0x21
 80062b2:	d117      	bne.n	80062e4 <hidd_control_xfer_cb+0xf8>
        TU_VERIFY(p_hid->hid_descriptor);
 80062b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d101      	bne.n	80062c0 <hidd_control_xfer_cb+0xd4>
 80062bc:	2300      	movs	r3, #0
 80062be:	e17d      	b.n	80065bc <hidd_control_xfer_cb+0x3d0>
        TU_VERIFY(tud_control_xfer(rhport, request, (void *)(uintptr_t)p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 80062c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	79f8      	ldrb	r0, [r7, #7]
 80062cc:	6839      	ldr	r1, [r7, #0]
 80062ce:	f002 fe01 	bl	8008ed4 <tud_control_xfer>
 80062d2:	4603      	mov	r3, r0
 80062d4:	f083 0301 	eor.w	r3, r3, #1
 80062d8:	b2db      	uxtb	r3, r3
 80062da:	2b00      	cmp	r3, #0
 80062dc:	f000 816d 	beq.w	80065ba <hidd_control_xfer_cb+0x3ce>
 80062e0:	2300      	movs	r3, #0
 80062e2:	e16b      	b.n	80065bc <hidd_control_xfer_cb+0x3d0>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	785b      	ldrb	r3, [r3, #1]
 80062e8:	2b06      	cmp	r3, #6
 80062ea:	d111      	bne.n	8006310 <hidd_control_xfer_cb+0x124>
 80062ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80062f0:	2b22      	cmp	r3, #34	@ 0x22
 80062f2:	d10d      	bne.n	8006310 <hidd_control_xfer_cb+0x124>
        uint8_t const *desc_report = tud_hid_descriptor_report_cb(hid_itf);
 80062f4:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 80062f8:	4618      	mov	r0, r3
 80062fa:	f7fc fca9 	bl	8002c50 <tud_hid_descriptor_report_cb>
 80062fe:	6238      	str	r0, [r7, #32]
        tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_report, p_hid->report_desc_len);
 8006300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006302:	889b      	ldrh	r3, [r3, #4]
 8006304:	79f8      	ldrb	r0, [r7, #7]
 8006306:	6a3a      	ldr	r2, [r7, #32]
 8006308:	6839      	ldr	r1, [r7, #0]
 800630a:	f002 fde3 	bl	8008ed4 <tud_control_xfer>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 800630e:	e154      	b.n	80065ba <hidd_control_xfer_cb+0x3ce>
      } else {
        return false; // stall unsupported request
 8006310:	2300      	movs	r3, #0
 8006312:	e153      	b.n	80065bc <hidd_control_xfer_cb+0x3d0>
      }
    }
  } else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS) {
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b20      	cmp	r3, #32
 8006320:	f040 813e 	bne.w	80065a0 <hidd_control_xfer_cb+0x3b4>
    //------------- Class Specific Request -------------//
    switch (request->bRequest) {
 8006324:	683b      	ldr	r3, [r7, #0]
 8006326:	785b      	ldrb	r3, [r3, #1]
 8006328:	3b01      	subs	r3, #1
 800632a:	2b0a      	cmp	r3, #10
 800632c:	f200 8136 	bhi.w	800659c <hidd_control_xfer_cb+0x3b0>
 8006330:	a201      	add	r2, pc, #4	@ (adr r2, 8006338 <hidd_control_xfer_cb+0x14c>)
 8006332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006336:	bf00      	nop
 8006338:	08006365 	.word	0x08006365
 800633c:	0800653b 	.word	0x0800653b
 8006340:	08006551 	.word	0x08006551
 8006344:	0800659d 	.word	0x0800659d
 8006348:	0800659d 	.word	0x0800659d
 800634c:	0800659d 	.word	0x0800659d
 8006350:	0800659d 	.word	0x0800659d
 8006354:	0800659d 	.word	0x0800659d
 8006358:	0800643b 	.word	0x0800643b
 800635c:	080064f5 	.word	0x080064f5
 8006360:	08006567 	.word	0x08006567
      case HID_REQ_CONTROL_GET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8006364:	79bb      	ldrb	r3, [r7, #6]
 8006366:	2b01      	cmp	r3, #1
 8006368:	f040 811c 	bne.w	80065a4 <hidd_control_xfer_cb+0x3b8>
          uint8_t const report_type = tu_u16_high(request->wValue);
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	885b      	ldrh	r3, [r3, #2]
 8006370:	b29b      	uxth	r3, r3
 8006372:	82bb      	strh	r3, [r7, #20]
 8006374:	8abb      	ldrh	r3, [r7, #20]
 8006376:	0a1b      	lsrs	r3, r3, #8
 8006378:	b29b      	uxth	r3, r3
 800637a:	b2db      	uxtb	r3, r3
 800637c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          uint8_t const report_id = tu_u16_low(request->wValue);
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	885b      	ldrh	r3, [r3, #2]
 8006384:	b29b      	uxth	r3, r3
 8006386:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8006388:	8afb      	ldrh	r3, [r7, #22]
 800638a:	b2db      	uxtb	r3, r3
 800638c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

          uint8_t* report_buf = p_epbuf->ctrl;
 8006390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006392:	647b      	str	r3, [r7, #68]	@ 0x44
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	88db      	ldrh	r3, [r3, #6]
 8006398:	b29b      	uxth	r3, r3
 800639a:	837b      	strh	r3, [r7, #26]
 800639c:	2310      	movs	r3, #16
 800639e:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80063a0:	8b7a      	ldrh	r2, [r7, #26]
 80063a2:	8b3b      	ldrh	r3, [r7, #24]
 80063a4:	4293      	cmp	r3, r2
 80063a6:	bf28      	it	cs
 80063a8:	4613      	movcs	r3, r2
 80063aa:	b29b      	uxth	r3, r3
 80063ac:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          uint16_t xferlen = 0;
 80063b0:	2300      	movs	r3, #0
 80063b2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ((report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1)) {
 80063b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d013      	beq.n	80063e6 <hidd_control_xfer_cb+0x1fa>
 80063be:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80063c2:	2b01      	cmp	r3, #1
 80063c4:	d90f      	bls.n	80063e6 <hidd_control_xfer_cb+0x1fa>
            *report_buf++ = report_id;
 80063c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063c8:	1c5a      	adds	r2, r3, #1
 80063ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80063cc:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80063d0:	701a      	strb	r2, [r3, #0]
            req_len--;
 80063d2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80063d6:	3b01      	subs	r3, #1
 80063d8:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            xferlen++;
 80063dc:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 80063e0:	3301      	adds	r3, #1
 80063e2:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 80063e6:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 80063ea:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 80063ee:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 80063f2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80063f6:	9300      	str	r3, [sp, #0]
 80063f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063fa:	f7fb fa95 	bl	8001928 <tud_hid_get_report_cb>
 80063fe:	4603      	mov	r3, r0
 8006400:	461a      	mov	r2, r3
 8006402:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006406:	4413      	add	r3, r2
 8006408:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          TU_ASSERT(xferlen > 0);
 800640c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10a      	bne.n	800642a <hidd_control_xfer_cb+0x23e>
 8006414:	4b14      	ldr	r3, [pc, #80]	@ (8006468 <hidd_control_xfer_cb+0x27c>)
 8006416:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006418:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0301 	and.w	r3, r3, #1
 8006420:	2b00      	cmp	r3, #0
 8006422:	d000      	beq.n	8006426 <hidd_control_xfer_cb+0x23a>
 8006424:	be00      	bkpt	0x0000
 8006426:	2300      	movs	r3, #0
 8006428:	e0c8      	b.n	80065bc <hidd_control_xfer_cb+0x3d0>

          tud_control_xfer(rhport, request, p_epbuf->ctrl, xferlen);
 800642a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800642c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8006430:	79f8      	ldrb	r0, [r7, #7]
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	f002 fd4e 	bl	8008ed4 <tud_control_xfer>
        }
        break;
 8006438:	e0b4      	b.n	80065a4 <hidd_control_xfer_cb+0x3b8>

      case HID_REQ_CONTROL_SET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 800643a:	79bb      	ldrb	r3, [r7, #6]
 800643c:	2b01      	cmp	r3, #1
 800643e:	d115      	bne.n	800646c <hidd_control_xfer_cb+0x280>
          TU_VERIFY(request->wLength <= CFG_TUD_HID_EP_BUFSIZE);
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	88db      	ldrh	r3, [r3, #6]
 8006444:	b29b      	uxth	r3, r3
 8006446:	2b10      	cmp	r3, #16
 8006448:	d901      	bls.n	800644e <hidd_control_xfer_cb+0x262>
 800644a:	2300      	movs	r3, #0
 800644c:	e0b6      	b.n	80065bc <hidd_control_xfer_cb+0x3d0>
          tud_control_xfer(rhport, request, p_epbuf->ctrl, request->wLength);
 800644e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	88db      	ldrh	r3, [r3, #6]
 8006454:	b29b      	uxth	r3, r3
 8006456:	79f8      	ldrb	r0, [r7, #7]
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	f002 fd3b 	bl	8008ed4 <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
        break;
 800645e:	e0a3      	b.n	80065a8 <hidd_control_xfer_cb+0x3bc>
 8006460:	20000c94 	.word	0x20000c94
 8006464:	20000ca0 	.word	0x20000ca0
 8006468:	e000edf0 	.word	0xe000edf0
        } else if (stage == CONTROL_STAGE_ACK) {
 800646c:	79bb      	ldrb	r3, [r7, #6]
 800646e:	2b03      	cmp	r3, #3
 8006470:	f040 809a 	bne.w	80065a8 <hidd_control_xfer_cb+0x3bc>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8006474:	683b      	ldr	r3, [r7, #0]
 8006476:	885b      	ldrh	r3, [r3, #2]
 8006478:	b29b      	uxth	r3, r3
 800647a:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 800647c:	89bb      	ldrh	r3, [r7, #12]
 800647e:	0a1b      	lsrs	r3, r3, #8
 8006480:	b29b      	uxth	r3, r3
 8006482:	b2db      	uxtb	r3, r3
 8006484:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          uint8_t const report_id = tu_u16_low(request->wValue);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	885b      	ldrh	r3, [r3, #2]
 800648c:	b29b      	uxth	r3, r3
 800648e:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8006490:	89fb      	ldrh	r3, [r7, #14]
 8006492:	b2db      	uxtb	r3, r3
 8006494:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          uint8_t const* report_buf = p_epbuf->ctrl;
 8006498:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800649a:	63fb      	str	r3, [r7, #60]	@ 0x3c
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	88db      	ldrh	r3, [r3, #6]
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	827b      	strh	r3, [r7, #18]
 80064a4:	2310      	movs	r3, #16
 80064a6:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80064a8:	8a7a      	ldrh	r2, [r7, #18]
 80064aa:	8a3b      	ldrh	r3, [r7, #16]
 80064ac:	4293      	cmp	r3, r2
 80064ae:	bf28      	it	cs
 80064b0:	4613      	movcs	r3, r2
 80064b2:	b29b      	uxth	r3, r3
 80064b4:	877b      	strh	r3, [r7, #58]	@ 0x3a
          if ((report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0])) {
 80064b6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00e      	beq.n	80064dc <hidd_control_xfer_cb+0x2f0>
 80064be:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d90b      	bls.n	80064dc <hidd_control_xfer_cb+0x2f0>
 80064c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d105      	bne.n	80064dc <hidd_control_xfer_cb+0x2f0>
            report_buf++;
 80064d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064d2:	3301      	adds	r3, #1
 80064d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
            report_len--;
 80064d6:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80064d8:	3b01      	subs	r3, #1
 80064da:	877b      	strh	r3, [r7, #58]	@ 0x3a
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 80064dc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80064e0:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 80064e4:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 80064e8:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 80064ea:	9300      	str	r3, [sp, #0]
 80064ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064ee:	f7fb fa2c 	bl	800194a <tud_hid_set_report_cb>
        break;
 80064f2:	e059      	b.n	80065a8 <hidd_control_xfer_cb+0x3bc>

      case HID_REQ_CONTROL_SET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 80064f4:	79bb      	ldrb	r3, [r7, #6]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d158      	bne.n	80065ac <hidd_control_xfer_cb+0x3c0>
          p_hid->idle_rate = tu_u16_high(request->wValue);
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	885b      	ldrh	r3, [r3, #2]
 80064fe:	b29b      	uxth	r3, r3
 8006500:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8006502:	897b      	ldrh	r3, [r7, #10]
 8006504:	0a1b      	lsrs	r3, r3, #8
 8006506:	b29b      	uxth	r3, r3
 8006508:	b2da      	uxtb	r2, r3
 800650a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800650c:	71da      	strb	r2, [r3, #7]
          TU_VERIFY(tud_hid_set_idle_cb(hid_itf, p_hid->idle_rate)); // stall if false
 800650e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006510:	79da      	ldrb	r2, [r3, #7]
 8006512:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006516:	4611      	mov	r1, r2
 8006518:	4618      	mov	r0, r3
 800651a:	f7ff fc4b 	bl	8005db4 <tud_hid_set_idle_cb>
 800651e:	4603      	mov	r3, r0
 8006520:	f083 0301 	eor.w	r3, r3, #1
 8006524:	b2db      	uxtb	r3, r3
 8006526:	2b00      	cmp	r3, #0
 8006528:	d001      	beq.n	800652e <hidd_control_xfer_cb+0x342>
 800652a:	2300      	movs	r3, #0
 800652c:	e046      	b.n	80065bc <hidd_control_xfer_cb+0x3d0>
          tud_control_status(rhport, request);
 800652e:	79fb      	ldrb	r3, [r7, #7]
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	4618      	mov	r0, r3
 8006534:	f002 fc5c 	bl	8008df0 <tud_control_status>
        }
        break;
 8006538:	e038      	b.n	80065ac <hidd_control_xfer_cb+0x3c0>

      case HID_REQ_CONTROL_GET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 800653a:	79bb      	ldrb	r3, [r7, #6]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d137      	bne.n	80065b0 <hidd_control_xfer_cb+0x3c4>
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 8006540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006542:	1dda      	adds	r2, r3, #7
 8006544:	79f8      	ldrb	r0, [r7, #7]
 8006546:	2301      	movs	r3, #1
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	f002 fcc3 	bl	8008ed4 <tud_control_xfer>
        }
        break;
 800654e:	e02f      	b.n	80065b0 <hidd_control_xfer_cb+0x3c4>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8006550:	79bb      	ldrb	r3, [r7, #6]
 8006552:	2b01      	cmp	r3, #1
 8006554:	d12e      	bne.n	80065b4 <hidd_control_xfer_cb+0x3c8>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 8006556:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006558:	1d9a      	adds	r2, r3, #6
 800655a:	79f8      	ldrb	r0, [r7, #7]
 800655c:	2301      	movs	r3, #1
 800655e:	6839      	ldr	r1, [r7, #0]
 8006560:	f002 fcb8 	bl	8008ed4 <tud_control_xfer>
        }
        break;
 8006564:	e026      	b.n	80065b4 <hidd_control_xfer_cb+0x3c8>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8006566:	79bb      	ldrb	r3, [r7, #6]
 8006568:	2b01      	cmp	r3, #1
 800656a:	d105      	bne.n	8006578 <hidd_control_xfer_cb+0x38c>
          tud_control_status(rhport, request);
 800656c:	79fb      	ldrb	r3, [r7, #7]
 800656e:	6839      	ldr	r1, [r7, #0]
 8006570:	4618      	mov	r0, r3
 8006572:	f002 fc3d 	bl	8008df0 <tud_control_status>
        } else if (stage == CONTROL_STAGE_ACK) {
          p_hid->protocol_mode = (uint8_t) request->wValue;
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
        }
        break;
 8006576:	e01f      	b.n	80065b8 <hidd_control_xfer_cb+0x3cc>
        } else if (stage == CONTROL_STAGE_ACK) {
 8006578:	79bb      	ldrb	r3, [r7, #6]
 800657a:	2b03      	cmp	r3, #3
 800657c:	d11c      	bne.n	80065b8 <hidd_control_xfer_cb+0x3cc>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	885b      	ldrh	r3, [r3, #2]
 8006582:	b29b      	uxth	r3, r3
 8006584:	b2da      	uxtb	r2, r3
 8006586:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006588:	719a      	strb	r2, [r3, #6]
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 800658a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800658c:	799a      	ldrb	r2, [r3, #6]
 800658e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8006592:	4611      	mov	r1, r2
 8006594:	4618      	mov	r0, r3
 8006596:	f7fb f9ab 	bl	80018f0 <tud_hid_set_protocol_cb>
        break;
 800659a:	e00d      	b.n	80065b8 <hidd_control_xfer_cb+0x3cc>

      default:
        return false; // stall unsupported request
 800659c:	2300      	movs	r3, #0
 800659e:	e00d      	b.n	80065bc <hidd_control_xfer_cb+0x3d0>
    }
  } else {
    return false; // stall unsupported request
 80065a0:	2300      	movs	r3, #0
 80065a2:	e00b      	b.n	80065bc <hidd_control_xfer_cb+0x3d0>
        break;
 80065a4:	bf00      	nop
 80065a6:	e008      	b.n	80065ba <hidd_control_xfer_cb+0x3ce>
        break;
 80065a8:	bf00      	nop
 80065aa:	e006      	b.n	80065ba <hidd_control_xfer_cb+0x3ce>
        break;
 80065ac:	bf00      	nop
 80065ae:	e004      	b.n	80065ba <hidd_control_xfer_cb+0x3ce>
        break;
 80065b0:	bf00      	nop
 80065b2:	e002      	b.n	80065ba <hidd_control_xfer_cb+0x3ce>
        break;
 80065b4:	bf00      	nop
 80065b6:	e000      	b.n	80065ba <hidd_control_xfer_cb+0x3ce>
        break;
 80065b8:	bf00      	nop
  }

  return true;
 80065ba:	2301      	movs	r3, #1
}
 80065bc:	4618      	mov	r0, r3
 80065be:	3748      	adds	r7, #72	@ 0x48
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}

080065c4 <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b08a      	sub	sp, #40	@ 0x28
 80065c8:	af02      	add	r7, sp, #8
 80065ca:	603b      	str	r3, [r7, #0]
 80065cc:	4603      	mov	r3, r0
 80065ce:	71fb      	strb	r3, [r7, #7]
 80065d0:	460b      	mov	r3, r1
 80065d2:	71bb      	strb	r3, [r7, #6]
 80065d4:	4613      	mov	r3, r2
 80065d6:	717b      	strb	r3, [r7, #5]
  uint8_t instance;
  hidd_interface_t *p_hid;

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 80065d8:	2300      	movs	r3, #0
 80065da:	77fb      	strb	r3, [r7, #31]
 80065dc:	e014      	b.n	8006608 <hidd_xfer_cb+0x44>
    p_hid = &_hidd_itf[instance];
 80065de:	7ffa      	ldrb	r2, [r7, #31]
 80065e0:	4613      	mov	r3, r2
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	4413      	add	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4a3e      	ldr	r2, [pc, #248]	@ (80066e4 <hidd_xfer_cb+0x120>)
 80065ea:	4413      	add	r3, r2
 80065ec:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in)) {
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	789b      	ldrb	r3, [r3, #2]
 80065f2:	79ba      	ldrb	r2, [r7, #6]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d00a      	beq.n	800660e <hidd_xfer_cb+0x4a>
 80065f8:	69bb      	ldr	r3, [r7, #24]
 80065fa:	785b      	ldrb	r3, [r3, #1]
 80065fc:	79ba      	ldrb	r2, [r7, #6]
 80065fe:	429a      	cmp	r2, r3
 8006600:	d005      	beq.n	800660e <hidd_xfer_cb+0x4a>
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8006602:	7ffb      	ldrb	r3, [r7, #31]
 8006604:	3301      	adds	r3, #1
 8006606:	77fb      	strb	r3, [r7, #31]
 8006608:	7ffb      	ldrb	r3, [r7, #31]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d0e7      	beq.n	80065de <hidd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 800660e:	7ffb      	ldrb	r3, [r7, #31]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d00a      	beq.n	800662a <hidd_xfer_cb+0x66>
 8006614:	4b34      	ldr	r3, [pc, #208]	@ (80066e8 <hidd_xfer_cb+0x124>)
 8006616:	60fb      	str	r3, [r7, #12]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d000      	beq.n	8006626 <hidd_xfer_cb+0x62>
 8006624:	be00      	bkpt	0x0000
 8006626:	2300      	movs	r3, #0
 8006628:	e057      	b.n	80066da <hidd_xfer_cb+0x116>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 800662a:	7ffa      	ldrb	r2, [r7, #31]
 800662c:	4613      	mov	r3, r2
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	4413      	add	r3, r2
 8006632:	011b      	lsls	r3, r3, #4
 8006634:	4a2d      	ldr	r2, [pc, #180]	@ (80066ec <hidd_xfer_cb+0x128>)
 8006636:	4413      	add	r3, r2
 8006638:	617b      	str	r3, [r7, #20]

  if (ep_addr == p_hid->ep_in) {
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	785b      	ldrb	r3, [r3, #1]
 800663e:	79ba      	ldrb	r2, [r7, #6]
 8006640:	429a      	cmp	r2, r3
 8006642:	d116      	bne.n	8006672 <hidd_xfer_cb+0xae>
    // Input report
    if (XFER_RESULT_SUCCESS == result) {
 8006644:	797b      	ldrb	r3, [r7, #5]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d109      	bne.n	800665e <hidd_xfer_cb+0x9a>
      tud_hid_report_complete_cb(instance, p_epbuf->epin, (uint16_t) xferred_bytes);
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	f103 0110 	add.w	r1, r3, #16
 8006650:	683b      	ldr	r3, [r7, #0]
 8006652:	b29a      	uxth	r2, r3
 8006654:	7ffb      	ldrb	r3, [r7, #31]
 8006656:	4618      	mov	r0, r3
 8006658:	f7fb f958 	bl	800190c <tud_hid_report_complete_cb>
 800665c:	e03c      	b.n	80066d8 <hidd_xfer_cb+0x114>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_INPUT, p_epbuf->epin, (uint16_t) xferred_bytes);
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	f103 0210 	add.w	r2, r3, #16
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	b29b      	uxth	r3, r3
 8006668:	7ff8      	ldrb	r0, [r7, #31]
 800666a:	2101      	movs	r1, #1
 800666c:	f7ff fbb1 	bl	8005dd2 <tud_hid_report_failed_cb>
 8006670:	e032      	b.n	80066d8 <hidd_xfer_cb+0x114>
    }
  } else {
    // Output report
    if (XFER_RESULT_SUCCESS == result) {
 8006672:	797b      	ldrb	r3, [r7, #5]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d10c      	bne.n	8006692 <hidd_xfer_cb+0xce>
      tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t)xferred_bytes);
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f103 0220 	add.w	r2, r3, #32
 800667e:	683b      	ldr	r3, [r7, #0]
 8006680:	b29b      	uxth	r3, r3
 8006682:	7ff8      	ldrb	r0, [r7, #31]
 8006684:	9300      	str	r3, [sp, #0]
 8006686:	4613      	mov	r3, r2
 8006688:	2202      	movs	r2, #2
 800668a:	2100      	movs	r1, #0
 800668c:	f7fb f95d 	bl	800194a <tud_hid_set_report_cb>
 8006690:	e008      	b.n	80066a4 <hidd_xfer_cb+0xe0>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t) xferred_bytes);
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	f103 0220 	add.w	r2, r3, #32
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	b29b      	uxth	r3, r3
 800669c:	7ff8      	ldrb	r0, [r7, #31]
 800669e:	2102      	movs	r1, #2
 80066a0:	f7ff fb97 	bl	8005dd2 <tud_hid_report_failed_cb>
    }

    // prepare for new transfer
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE));
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	7899      	ldrb	r1, [r3, #2]
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	f103 0220 	add.w	r2, r3, #32
 80066ae:	79f8      	ldrb	r0, [r7, #7]
 80066b0:	2310      	movs	r3, #16
 80066b2:	f002 fa27 	bl	8008b04 <usbd_edpt_xfer>
 80066b6:	4603      	mov	r3, r0
 80066b8:	f083 0301 	eor.w	r3, r3, #1
 80066bc:	b2db      	uxtb	r3, r3
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00a      	beq.n	80066d8 <hidd_xfer_cb+0x114>
 80066c2:	4b09      	ldr	r3, [pc, #36]	@ (80066e8 <hidd_xfer_cb+0x124>)
 80066c4:	613b      	str	r3, [r7, #16]
 80066c6:	693b      	ldr	r3, [r7, #16]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f003 0301 	and.w	r3, r3, #1
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d000      	beq.n	80066d4 <hidd_xfer_cb+0x110>
 80066d2:	be00      	bkpt	0x0000
 80066d4:	2300      	movs	r3, #0
 80066d6:	e000      	b.n	80066da <hidd_xfer_cb+0x116>
  }

  return true;
 80066d8:	2301      	movs	r3, #1
}
 80066da:	4618      	mov	r0, r3
 80066dc:	3720      	adds	r7, #32
 80066de:	46bd      	mov	sp, r7
 80066e0:	bd80      	pop	{r7, pc}
 80066e2:	bf00      	nop
 80066e4:	20000c94 	.word	0x20000c94
 80066e8:	e000edf0 	.word	0xe000edf0
 80066ec:	20000ca0 	.word	0x20000ca0

080066f0 <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	4611      	mov	r1, r2
 80066fc:	461a      	mov	r2, r3
 80066fe:	460b      	mov	r3, r1
 8006700:	80fb      	strh	r3, [r7, #6]
 8006702:	4613      	mov	r3, r2
 8006704:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 8006706:	88fb      	ldrh	r3, [r7, #6]
 8006708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800670c:	d901      	bls.n	8006712 <tu_fifo_config+0x22>
 800670e:	2300      	movs	r3, #0
 8006710:	e01b      	b.n	800674a <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	68ba      	ldr	r2, [r7, #8]
 8006716:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	88fa      	ldrh	r2, [r7, #6]
 800671c:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 800671e:	88bb      	ldrh	r3, [r7, #4]
 8006720:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006724:	b299      	uxth	r1, r3
 8006726:	68fa      	ldr	r2, [r7, #12]
 8006728:	88d3      	ldrh	r3, [r2, #6]
 800672a:	f361 030e 	bfi	r3, r1, #0, #15
 800672e:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8006730:	68fa      	ldr	r2, [r7, #12]
 8006732:	79d3      	ldrb	r3, [r2, #7]
 8006734:	7e39      	ldrb	r1, [r7, #24]
 8006736:	f361 13c7 	bfi	r3, r1, #7, #1
 800673a:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8006748:	2301      	movs	r3, #1
}
 800674a:	4618      	mov	r0, r3
 800674c:	3714      	adds	r7, #20
 800674e:	46bd      	mov	sp, r7
 8006750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006754:	4770      	bx	lr

08006756 <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 8006756:	b580      	push	{r7, lr}
 8006758:	b08a      	sub	sp, #40	@ 0x28
 800675a:	af00      	add	r7, sp, #0
 800675c:	60f8      	str	r0, [r7, #12]
 800675e:	60b9      	str	r1, [r7, #8]
 8006760:	4613      	mov	r3, r2
 8006762:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 8006768:	88fb      	ldrh	r3, [r7, #6]
 800676a:	089b      	lsrs	r3, r3, #2
 800676c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 800676e:	e00b      	b.n	8006788 <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8006770:	6a3b      	ldr	r3, [r7, #32]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	61ba      	str	r2, [r7, #24]
 8006778:	617b      	str	r3, [r7, #20]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	697a      	ldr	r2, [r7, #20]
 800677e:	601a      	str	r2, [r3, #0]
}
 8006780:	bf00      	nop
    ff_buf += 4;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	3304      	adds	r3, #4
 8006786:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 8006788:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800678a:	1e5a      	subs	r2, r3, #1
 800678c:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800678e:	2b00      	cmp	r3, #0
 8006790:	d1ee      	bne.n	8006770 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 8006792:	88fb      	ldrh	r3, [r7, #6]
 8006794:	b2db      	uxtb	r3, r3
 8006796:	f003 0303 	and.w	r3, r3, #3
 800679a:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 800679c:	7ffb      	ldrb	r3, [r7, #31]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d009      	beq.n	80067b6 <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 80067a2:	6a3b      	ldr	r3, [r7, #32]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 80067a8:	7ffa      	ldrb	r2, [r7, #31]
 80067aa:	f107 0310 	add.w	r3, r7, #16
 80067ae:	4619      	mov	r1, r3
 80067b0:	68f8      	ldr	r0, [r7, #12]
 80067b2:	f004 ffd4 	bl	800b75e <memcpy>
  }
}
 80067b6:	bf00      	nop
 80067b8:	3728      	adds	r7, #40	@ 0x28
 80067ba:	46bd      	mov	sp, r7
 80067bc:	bd80      	pop	{r7, pc}

080067be <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 80067be:	b580      	push	{r7, lr}
 80067c0:	b08a      	sub	sp, #40	@ 0x28
 80067c2:	af00      	add	r7, sp, #0
 80067c4:	60f8      	str	r0, [r7, #12]
 80067c6:	60b9      	str	r1, [r7, #8]
 80067c8:	4613      	mov	r3, r2
 80067ca:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 80067d0:	88fb      	ldrh	r3, [r7, #6]
 80067d2:	089b      	lsrs	r3, r3, #2
 80067d4:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 80067d6:	e008      	b.n	80067ea <_ff_pull_const_addr+0x2c>
 80067d8:	68bb      	ldr	r3, [r7, #8]
 80067da:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 80067dc:	69bb      	ldr	r3, [r7, #24]
 80067de:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 80067e4:	68bb      	ldr	r3, [r7, #8]
 80067e6:	3304      	adds	r3, #4
 80067e8:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 80067ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80067ec:	1e5a      	subs	r2, r3, #1
 80067ee:	84fa      	strh	r2, [r7, #38]	@ 0x26
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d1f1      	bne.n	80067d8 <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 80067f4:	88fb      	ldrh	r3, [r7, #6]
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	f003 0303 	and.w	r3, r3, #3
 80067fc:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80067fe:	7ffb      	ldrb	r3, [r7, #31]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00b      	beq.n	800681c <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8006804:	2300      	movs	r3, #0
 8006806:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 8006808:	7ffa      	ldrb	r2, [r7, #31]
 800680a:	f107 0314 	add.w	r3, r7, #20
 800680e:	68b9      	ldr	r1, [r7, #8]
 8006810:	4618      	mov	r0, r3
 8006812:	f004 ffa4 	bl	800b75e <memcpy>

    *reg_tx = tmp32;
 8006816:	697a      	ldr	r2, [r7, #20]
 8006818:	6a3b      	ldr	r3, [r7, #32]
 800681a:	601a      	str	r2, [r3, #0]
  }
}
 800681c:	bf00      	nop
 800681e:	3728      	adds	r7, #40	@ 0x28
 8006820:	46bd      	mov	sp, r7
 8006822:	bd80      	pop	{r7, pc}

08006824 <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	4613      	mov	r3, r2
 8006830:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	88fa      	ldrh	r2, [r7, #6]
 8006838:	68f9      	ldr	r1, [r7, #12]
 800683a:	88c9      	ldrh	r1, [r1, #6]
 800683c:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006840:	b289      	uxth	r1, r1
 8006842:	fb01 f202 	mul.w	r2, r1, r2
 8006846:	1898      	adds	r0, r3, r2
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	88db      	ldrh	r3, [r3, #6]
 800684c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006850:	b29b      	uxth	r3, r3
 8006852:	461a      	mov	r2, r3
 8006854:	68b9      	ldr	r1, [r7, #8]
 8006856:	f004 ff82 	bl	800b75e <memcpy>
}
 800685a:	bf00      	nop
 800685c:	3710      	adds	r7, #16
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}

08006862 <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8006862:	b580      	push	{r7, lr}
 8006864:	b08e      	sub	sp, #56	@ 0x38
 8006866:	af00      	add	r7, sp, #0
 8006868:	60f8      	str	r0, [r7, #12]
 800686a:	60b9      	str	r1, [r7, #8]
 800686c:	4611      	mov	r1, r2
 800686e:	461a      	mov	r2, r3
 8006870:	460b      	mov	r3, r1
 8006872:	80fb      	strh	r3, [r7, #6]
 8006874:	4613      	mov	r3, r2
 8006876:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	889a      	ldrh	r2, [r3, #4]
 800687c:	88bb      	ldrh	r3, [r7, #4]
 800687e:	1ad3      	subs	r3, r2, r3
 8006880:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 8006882:	88fa      	ldrh	r2, [r7, #6]
 8006884:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006886:	1ad3      	subs	r3, r2, r3
 8006888:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	88db      	ldrh	r3, [r3, #6]
 800688e:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006892:	b29b      	uxth	r3, r3
 8006894:	461a      	mov	r2, r3
 8006896:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006898:	fb13 f302 	smulbb	r3, r3, r2
 800689c:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	88db      	ldrh	r3, [r3, #6]
 80068a2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	461a      	mov	r2, r3
 80068aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80068ac:	fb13 f302 	smulbb	r3, r3, r2
 80068b0:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	88ba      	ldrh	r2, [r7, #4]
 80068b8:	68f9      	ldr	r1, [r7, #12]
 80068ba:	88c9      	ldrh	r1, [r1, #6]
 80068bc:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80068c0:	b289      	uxth	r1, r1
 80068c2:	fb01 f202 	mul.w	r2, r1, r2
 80068c6:	4413      	add	r3, r2
 80068c8:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 80068ca:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d002      	beq.n	80068d8 <_ff_push_n+0x76>
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d022      	beq.n	800691c <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 80068d6:	e09e      	b.n	8006a16 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 80068d8:	88fa      	ldrh	r2, [r7, #6]
 80068da:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80068dc:	429a      	cmp	r2, r3
 80068de:	d80d      	bhi.n	80068fc <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 80068e0:	88fb      	ldrh	r3, [r7, #6]
 80068e2:	68fa      	ldr	r2, [r7, #12]
 80068e4:	88d2      	ldrh	r2, [r2, #6]
 80068e6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80068ea:	b292      	uxth	r2, r2
 80068ec:	fb02 f303 	mul.w	r3, r2, r3
 80068f0:	461a      	mov	r2, r3
 80068f2:	68b9      	ldr	r1, [r7, #8]
 80068f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80068f6:	f004 ff32 	bl	800b75e <memcpy>
      break;
 80068fa:	e08c      	b.n	8006a16 <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 80068fc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80068fe:	461a      	mov	r2, r3
 8006900:	68b9      	ldr	r1, [r7, #8]
 8006902:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006904:	f004 ff2b 	bl	800b75e <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6818      	ldr	r0, [r3, #0]
 800690c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800690e:	68ba      	ldr	r2, [r7, #8]
 8006910:	4413      	add	r3, r2
 8006912:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006914:	4619      	mov	r1, r3
 8006916:	f004 ff22 	bl	800b75e <memcpy>
      break;
 800691a:	e07c      	b.n	8006a16 <_ff_push_n+0x1b4>
      if(n <= lin_count)
 800691c:	88fa      	ldrh	r2, [r7, #6]
 800691e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006920:	429a      	cmp	r2, r3
 8006922:	d80f      	bhi.n	8006944 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	88db      	ldrh	r3, [r3, #6]
 8006928:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800692c:	b29b      	uxth	r3, r3
 800692e:	461a      	mov	r2, r3
 8006930:	88fb      	ldrh	r3, [r7, #6]
 8006932:	fb13 f302 	smulbb	r3, r3, r2
 8006936:	b29b      	uxth	r3, r3
 8006938:	461a      	mov	r2, r3
 800693a:	68b9      	ldr	r1, [r7, #8]
 800693c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800693e:	f7ff ff0a 	bl	8006756 <_ff_push_const_addr>
      break;
 8006942:	e067      	b.n	8006a14 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8006944:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006946:	f023 0303 	bic.w	r3, r3, #3
 800694a:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 800694c:	8c3b      	ldrh	r3, [r7, #32]
 800694e:	461a      	mov	r2, r3
 8006950:	68b9      	ldr	r1, [r7, #8]
 8006952:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006954:	f7ff feff 	bl	8006756 <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 8006958:	8c3b      	ldrh	r3, [r7, #32]
 800695a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800695c:	4413      	add	r3, r2
 800695e:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8006960:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006962:	b2db      	uxtb	r3, r3
 8006964:	f003 0303 	and.w	r3, r3, #3
 8006968:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 800696c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006970:	2b00      	cmp	r3, #0
 8006972:	d043      	beq.n	80069fc <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8006978:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800697c:	b29b      	uxth	r3, r3
 800697e:	f1c3 0304 	rsb	r3, r3, #4
 8006982:	b29a      	uxth	r2, r3
 8006984:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006986:	837b      	strh	r3, [r7, #26]
 8006988:	4613      	mov	r3, r2
 800698a:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800698c:	8b7a      	ldrh	r2, [r7, #26]
 800698e:	8b3b      	ldrh	r3, [r7, #24]
 8006990:	4293      	cmp	r3, r2
 8006992:	bf28      	it	cs
 8006994:	4613      	movcs	r3, r2
 8006996:	b29b      	uxth	r3, r3
 8006998:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 800699c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80069a0:	b29b      	uxth	r3, r3
 80069a2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80069a4:	1ad3      	subs	r3, r2, r3
 80069a6:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 80069ae:	f107 0314 	add.w	r3, r7, #20
 80069b2:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 80069b4:	e007      	b.n	80069c6 <_ff_push_n+0x164>
 80069b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069b8:	1c53      	adds	r3, r2, #1
 80069ba:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069be:	1c59      	adds	r1, r3, #1
 80069c0:	6339      	str	r1, [r7, #48]	@ 0x30
 80069c2:	7812      	ldrb	r2, [r2, #0]
 80069c4:	701a      	strb	r2, [r3, #0]
 80069c6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80069ca:	1e5a      	subs	r2, r3, #1
 80069cc:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1f0      	bne.n	80069b6 <_ff_push_n+0x154>
          ff_buf = f->buffer;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 80069da:	e007      	b.n	80069ec <_ff_push_n+0x18a>
 80069dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069de:	1c53      	adds	r3, r2, #1
 80069e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80069e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069e4:	1c59      	adds	r1, r3, #1
 80069e6:	6339      	str	r1, [r7, #48]	@ 0x30
 80069e8:	7812      	ldrb	r2, [r2, #0]
 80069ea:	701a      	strb	r2, [r3, #0]
 80069ec:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80069f0:	1e5a      	subs	r2, r3, #1
 80069f2:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d1f0      	bne.n	80069dc <_ff_push_n+0x17a>
 80069fa:	e002      	b.n	8006a02 <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8006a02:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d005      	beq.n	8006a14 <_ff_push_n+0x1b2>
 8006a08:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	68b9      	ldr	r1, [r7, #8]
 8006a0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006a10:	f7ff fea1 	bl	8006756 <_ff_push_const_addr>
      break;
 8006a14:	bf00      	nop
  }
}
 8006a16:	bf00      	nop
 8006a18:	3738      	adds	r7, #56	@ 0x38
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}

08006a1e <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 8006a1e:	b580      	push	{r7, lr}
 8006a20:	b084      	sub	sp, #16
 8006a22:	af00      	add	r7, sp, #0
 8006a24:	60f8      	str	r0, [r7, #12]
 8006a26:	60b9      	str	r1, [r7, #8]
 8006a28:	4613      	mov	r3, r2
 8006a2a:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	88fa      	ldrh	r2, [r7, #6]
 8006a32:	68f9      	ldr	r1, [r7, #12]
 8006a34:	88c9      	ldrh	r1, [r1, #6]
 8006a36:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006a3a:	b289      	uxth	r1, r1
 8006a3c:	fb01 f202 	mul.w	r2, r1, r2
 8006a40:	1899      	adds	r1, r3, r2
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	88db      	ldrh	r3, [r3, #6]
 8006a46:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006a4a:	b29b      	uxth	r3, r3
 8006a4c:	461a      	mov	r2, r3
 8006a4e:	68b8      	ldr	r0, [r7, #8]
 8006a50:	f004 fe85 	bl	800b75e <memcpy>
}
 8006a54:	bf00      	nop
 8006a56:	3710      	adds	r7, #16
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b08e      	sub	sp, #56	@ 0x38
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	4611      	mov	r1, r2
 8006a68:	461a      	mov	r2, r3
 8006a6a:	460b      	mov	r3, r1
 8006a6c:	80fb      	strh	r3, [r7, #6]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	889a      	ldrh	r2, [r3, #4]
 8006a76:	88bb      	ldrh	r3, [r7, #4]
 8006a78:	1ad3      	subs	r3, r2, r3
 8006a7a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8006a7c:	88fa      	ldrh	r2, [r7, #6]
 8006a7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	88db      	ldrh	r3, [r3, #6]
 8006a88:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006a8c:	b29b      	uxth	r3, r3
 8006a8e:	461a      	mov	r2, r3
 8006a90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006a92:	fb13 f302 	smulbb	r3, r3, r2
 8006a96:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	88db      	ldrh	r3, [r3, #6]
 8006a9c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	461a      	mov	r2, r3
 8006aa4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006aa6:	fb13 f302 	smulbb	r3, r3, r2
 8006aaa:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	88ba      	ldrh	r2, [r7, #4]
 8006ab2:	68f9      	ldr	r1, [r7, #12]
 8006ab4:	88c9      	ldrh	r1, [r1, #6]
 8006ab6:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8006aba:	b289      	uxth	r1, r1
 8006abc:	fb01 f202 	mul.w	r2, r1, r2
 8006ac0:	4413      	add	r3, r2
 8006ac2:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 8006ac4:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d002      	beq.n	8006ad2 <_ff_pull_n+0x76>
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d022      	beq.n	8006b16 <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 8006ad0:	e0a0      	b.n	8006c14 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8006ad2:	88fa      	ldrh	r2, [r7, #6]
 8006ad4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d80d      	bhi.n	8006af6 <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 8006ada:	88fb      	ldrh	r3, [r7, #6]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	88d2      	ldrh	r2, [r2, #6]
 8006ae0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006ae4:	b292      	uxth	r2, r2
 8006ae6:	fb02 f303 	mul.w	r3, r2, r3
 8006aea:	461a      	mov	r2, r3
 8006aec:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006aee:	68b8      	ldr	r0, [r7, #8]
 8006af0:	f004 fe35 	bl	800b75e <memcpy>
    break;
 8006af4:	e08e      	b.n	8006c14 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 8006af6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006af8:	461a      	mov	r2, r3
 8006afa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006afc:	68b8      	ldr	r0, [r7, #8]
 8006afe:	f004 fe2e 	bl	800b75e <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8006b02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006b04:	68ba      	ldr	r2, [r7, #8]
 8006b06:	18d0      	adds	r0, r2, r3
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006b0e:	4619      	mov	r1, r3
 8006b10:	f004 fe25 	bl	800b75e <memcpy>
    break;
 8006b14:	e07e      	b.n	8006c14 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 8006b16:	88fa      	ldrh	r2, [r7, #6]
 8006b18:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d80f      	bhi.n	8006b3e <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	88db      	ldrh	r3, [r3, #6]
 8006b22:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	461a      	mov	r2, r3
 8006b2a:	88fb      	ldrh	r3, [r7, #6]
 8006b2c:	fb13 f302 	smulbb	r3, r3, r2
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	461a      	mov	r2, r3
 8006b34:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b36:	68b8      	ldr	r0, [r7, #8]
 8006b38:	f7ff fe41 	bl	80067be <_ff_pull_const_addr>
    break;
 8006b3c:	e069      	b.n	8006c12 <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8006b3e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006b40:	f023 0303 	bic.w	r3, r3, #3
 8006b44:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 8006b46:	8c3b      	ldrh	r3, [r7, #32]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006b4c:	68b8      	ldr	r0, [r7, #8]
 8006b4e:	f7ff fe36 	bl	80067be <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 8006b52:	8c3b      	ldrh	r3, [r7, #32]
 8006b54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b56:	4413      	add	r3, r2
 8006b58:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8006b5a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	f003 0303 	and.w	r3, r3, #3
 8006b62:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8006b66:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d045      	beq.n	8006bfa <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8006b72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006b76:	b29b      	uxth	r3, r3
 8006b78:	f1c3 0304 	rsb	r3, r3, #4
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b80:	837b      	strh	r3, [r7, #26]
 8006b82:	4613      	mov	r3, r2
 8006b84:	833b      	strh	r3, [r7, #24]
 8006b86:	8b7a      	ldrh	r2, [r7, #26]
 8006b88:	8b3b      	ldrh	r3, [r7, #24]
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	bf28      	it	cs
 8006b8e:	4613      	movcs	r3, r2
 8006b90:	b29b      	uxth	r3, r3
 8006b92:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 8006b96:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006b9e:	1ad3      	subs	r3, r2, r3
 8006ba0:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 8006ba2:	2300      	movs	r3, #0
 8006ba4:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 8006ba6:	f107 0314 	add.w	r3, r7, #20
 8006baa:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 8006bac:	e007      	b.n	8006bbe <_ff_pull_n+0x162>
 8006bae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bb0:	1c53      	adds	r3, r2, #1
 8006bb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb6:	1c59      	adds	r1, r3, #1
 8006bb8:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006bba:	7812      	ldrb	r2, [r2, #0]
 8006bbc:	701a      	strb	r2, [r3, #0]
 8006bbe:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006bc2:	1e5a      	subs	r2, r3, #1
 8006bc4:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1f0      	bne.n	8006bae <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 8006bd2:	e007      	b.n	8006be4 <_ff_pull_n+0x188>
 8006bd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bd6:	1c53      	adds	r3, r2, #1
 8006bd8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bdc:	1c59      	adds	r1, r3, #1
 8006bde:	62b9      	str	r1, [r7, #40]	@ 0x28
 8006be0:	7812      	ldrb	r2, [r2, #0]
 8006be2:	701a      	strb	r2, [r3, #0]
 8006be4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8006be8:	1e5a      	subs	r2, r3, #1
 8006bea:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d1f0      	bne.n	8006bd4 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 8006bf2:	697a      	ldr	r2, [r7, #20]
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	601a      	str	r2, [r3, #0]
 8006bf8:	e002      	b.n	8006c00 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8006c00:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d005      	beq.n	8006c12 <_ff_pull_n+0x1b6>
 8006c06:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006c08:	461a      	mov	r2, r3
 8006c0a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006c0c:	68b8      	ldr	r0, [r7, #8]
 8006c0e:	f7ff fdd6 	bl	80067be <_ff_pull_const_addr>
    break;
 8006c12:	bf00      	nop
  }
}
 8006c14:	bf00      	nop
 8006c16:	3738      	adds	r7, #56	@ 0x38
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b085      	sub	sp, #20
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	4603      	mov	r3, r0
 8006c24:	80fb      	strh	r3, [r7, #6]
 8006c26:	460b      	mov	r3, r1
 8006c28:	80bb      	strh	r3, [r7, #4]
 8006c2a:	4613      	mov	r3, r2
 8006c2c:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8006c2e:	88ba      	ldrh	r2, [r7, #4]
 8006c30:	887b      	ldrh	r3, [r7, #2]
 8006c32:	4413      	add	r3, r2
 8006c34:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 8006c36:	88ba      	ldrh	r2, [r7, #4]
 8006c38:	89fb      	ldrh	r3, [r7, #14]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d804      	bhi.n	8006c48 <advance_index+0x2c>
 8006c3e:	89fa      	ldrh	r2, [r7, #14]
 8006c40:	88fb      	ldrh	r3, [r7, #6]
 8006c42:	005b      	lsls	r3, r3, #1
 8006c44:	429a      	cmp	r2, r3
 8006c46:	db08      	blt.n	8006c5a <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 8006c48:	88fb      	ldrh	r3, [r7, #6]
 8006c4a:	005b      	lsls	r3, r3, #1
 8006c4c:	b29b      	uxth	r3, r3
 8006c4e:	425b      	negs	r3, r3
 8006c50:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8006c52:	89fa      	ldrh	r2, [r7, #14]
 8006c54:	89bb      	ldrh	r3, [r7, #12]
 8006c56:	4413      	add	r3, r2
 8006c58:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 8006c5a:	89fb      	ldrh	r3, [r7, #14]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3714      	adds	r7, #20
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b08a      	sub	sp, #40	@ 0x28
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	60b9      	str	r1, [r7, #8]
 8006c72:	4611      	mov	r1, r2
 8006c74:	461a      	mov	r2, r3
 8006c76:	460b      	mov	r3, r1
 8006c78:	80fb      	strh	r3, [r7, #6]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	889b      	ldrh	r3, [r3, #4]
 8006c82:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006c84:	88fb      	ldrh	r3, [r7, #6]
 8006c86:	843b      	strh	r3, [r7, #32]
 8006c88:	88bb      	ldrh	r3, [r7, #4]
 8006c8a:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8006c8c:	8c3a      	ldrh	r2, [r7, #32]
 8006c8e:	8bfb      	ldrh	r3, [r7, #30]
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d304      	bcc.n	8006c9e <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8006c94:	8c3a      	ldrh	r2, [r7, #32]
 8006c96:	8bfb      	ldrh	r3, [r7, #30]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	b29b      	uxth	r3, r3
 8006c9c:	e008      	b.n	8006cb0 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006c9e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006ca0:	005b      	lsls	r3, r3, #1
 8006ca2:	b29a      	uxth	r2, r3
 8006ca4:	8c39      	ldrh	r1, [r7, #32]
 8006ca6:	8bfb      	ldrh	r3, [r7, #30]
 8006ca8:	1acb      	subs	r3, r1, r3
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	4413      	add	r3, r2
 8006cae:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006cb0:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 8006cb2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d101      	bne.n	8006cbc <_tu_fifo_peek+0x54>
 8006cb8:	2300      	movs	r3, #0
 8006cba:	e037      	b.n	8006d2c <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	889b      	ldrh	r3, [r3, #4]
 8006cc0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006cc2:	429a      	cmp	r2, r3
 8006cc4:	d91b      	bls.n	8006cfe <_tu_fifo_peek+0x96>
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	61bb      	str	r3, [r7, #24]
 8006cca:	88fb      	ldrh	r3, [r7, #6]
 8006ccc:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8006cce:	69bb      	ldr	r3, [r7, #24]
 8006cd0:	889b      	ldrh	r3, [r3, #4]
 8006cd2:	8afa      	ldrh	r2, [r7, #22]
 8006cd4:	429a      	cmp	r2, r3
 8006cd6:	d305      	bcc.n	8006ce4 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	889b      	ldrh	r3, [r3, #4]
 8006cdc:	8afa      	ldrh	r2, [r7, #22]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	82bb      	strh	r3, [r7, #20]
 8006ce2:	e004      	b.n	8006cee <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 8006ce4:	69bb      	ldr	r3, [r7, #24]
 8006ce6:	889a      	ldrh	r2, [r3, #4]
 8006ce8:	8afb      	ldrh	r3, [r7, #22]
 8006cea:	4413      	add	r3, r2
 8006cec:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8006cee:	69bb      	ldr	r3, [r7, #24]
 8006cf0:	8aba      	ldrh	r2, [r7, #20]
 8006cf2:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8006cf4:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8006cf6:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	889b      	ldrh	r3, [r3, #4]
 8006cfc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	889b      	ldrh	r3, [r3, #4]
 8006d02:	827b      	strh	r3, [r7, #18]
 8006d04:	88bb      	ldrh	r3, [r7, #4]
 8006d06:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8006d08:	e003      	b.n	8006d12 <_tu_fifo_peek+0xaa>
 8006d0a:	8a3a      	ldrh	r2, [r7, #16]
 8006d0c:	8a7b      	ldrh	r3, [r7, #18]
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	823b      	strh	r3, [r7, #16]
 8006d12:	8a7a      	ldrh	r2, [r7, #18]
 8006d14:	8a3b      	ldrh	r3, [r7, #16]
 8006d16:	429a      	cmp	r2, r3
 8006d18:	d9f7      	bls.n	8006d0a <_tu_fifo_peek+0xa2>
  return idx;
 8006d1a:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006d1c:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 8006d1e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d20:	461a      	mov	r2, r3
 8006d22:	68b9      	ldr	r1, [r7, #8]
 8006d24:	68f8      	ldr	r0, [r7, #12]
 8006d26:	f7ff fe7a 	bl	8006a1e <_ff_pull>

  return true;
 8006d2a:	2301      	movs	r3, #1
}
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	3728      	adds	r7, #40	@ 0x28
 8006d30:	46bd      	mov	sp, r7
 8006d32:	bd80      	pop	{r7, pc}

08006d34 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b08c      	sub	sp, #48	@ 0x30
 8006d38:	af02      	add	r7, sp, #8
 8006d3a:	60f8      	str	r0, [r7, #12]
 8006d3c:	60b9      	str	r1, [r7, #8]
 8006d3e:	4611      	mov	r1, r2
 8006d40:	461a      	mov	r2, r3
 8006d42:	460b      	mov	r3, r1
 8006d44:	80fb      	strh	r3, [r7, #6]
 8006d46:	4613      	mov	r3, r2
 8006d48:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	889b      	ldrh	r3, [r3, #4]
 8006d4e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006d50:	88bb      	ldrh	r3, [r7, #4]
 8006d52:	843b      	strh	r3, [r7, #32]
 8006d54:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006d56:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 8006d58:	8c3a      	ldrh	r2, [r7, #32]
 8006d5a:	8bfb      	ldrh	r3, [r7, #30]
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d304      	bcc.n	8006d6a <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8006d60:	8c3a      	ldrh	r2, [r7, #32]
 8006d62:	8bfb      	ldrh	r3, [r7, #30]
 8006d64:	1ad3      	subs	r3, r2, r3
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	e008      	b.n	8006d7c <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006d6a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8006d6c:	005b      	lsls	r3, r3, #1
 8006d6e:	b29a      	uxth	r2, r3
 8006d70:	8c39      	ldrh	r1, [r7, #32]
 8006d72:	8bfb      	ldrh	r3, [r7, #30]
 8006d74:	1acb      	subs	r3, r1, r3
 8006d76:	b29b      	uxth	r3, r3
 8006d78:	4413      	add	r3, r2
 8006d7a:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8006d7c:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 8006d7e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d101      	bne.n	8006d88 <_tu_fifo_peek_n+0x54>
 8006d84:	2300      	movs	r3, #0
 8006d86:	e041      	b.n	8006e0c <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	889b      	ldrh	r3, [r3, #4]
 8006d8c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006d8e:	429a      	cmp	r2, r3
 8006d90:	d91b      	bls.n	8006dca <_tu_fifo_peek_n+0x96>
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	61bb      	str	r3, [r7, #24]
 8006d96:	88bb      	ldrh	r3, [r7, #4]
 8006d98:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	889b      	ldrh	r3, [r3, #4]
 8006d9e:	8afa      	ldrh	r2, [r7, #22]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d305      	bcc.n	8006db0 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 8006da4:	69bb      	ldr	r3, [r7, #24]
 8006da6:	889b      	ldrh	r3, [r3, #4]
 8006da8:	8afa      	ldrh	r2, [r7, #22]
 8006daa:	1ad3      	subs	r3, r2, r3
 8006dac:	82bb      	strh	r3, [r7, #20]
 8006dae:	e004      	b.n	8006dba <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 8006db0:	69bb      	ldr	r3, [r7, #24]
 8006db2:	889a      	ldrh	r2, [r3, #4]
 8006db4:	8afb      	ldrh	r3, [r7, #22]
 8006db6:	4413      	add	r3, r2
 8006db8:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	8aba      	ldrh	r2, [r7, #20]
 8006dbe:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8006dc0:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 8006dc2:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	889b      	ldrh	r3, [r3, #4]
 8006dc8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 8006dca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8006dcc:	88fb      	ldrh	r3, [r7, #6]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d201      	bcs.n	8006dd6 <_tu_fifo_peek_n+0xa2>
 8006dd2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006dd4:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	889b      	ldrh	r3, [r3, #4]
 8006dda:	827b      	strh	r3, [r7, #18]
 8006ddc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8006dde:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 8006de0:	e003      	b.n	8006dea <_tu_fifo_peek_n+0xb6>
 8006de2:	8a3a      	ldrh	r2, [r7, #16]
 8006de4:	8a7b      	ldrh	r3, [r7, #18]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	823b      	strh	r3, [r7, #16]
 8006dea:	8a7a      	ldrh	r2, [r7, #18]
 8006dec:	8a3b      	ldrh	r3, [r7, #16]
 8006dee:	429a      	cmp	r2, r3
 8006df0:	d9f7      	bls.n	8006de2 <_tu_fifo_peek_n+0xae>
  return idx;
 8006df2:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8006df4:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 8006df6:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 8006df8:	88fa      	ldrh	r2, [r7, #6]
 8006dfa:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8006dfe:	9300      	str	r3, [sp, #0]
 8006e00:	460b      	mov	r3, r1
 8006e02:	68b9      	ldr	r1, [r7, #8]
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f7ff fe29 	bl	8006a5c <_ff_pull_n>

  return n;
 8006e0a:	88fb      	ldrh	r3, [r7, #6]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3728      	adds	r7, #40	@ 0x28
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b092      	sub	sp, #72	@ 0x48
 8006e18:	af02      	add	r7, sp, #8
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	4611      	mov	r1, r2
 8006e20:	461a      	mov	r2, r3
 8006e22:	460b      	mov	r3, r1
 8006e24:	80fb      	strh	r3, [r7, #6]
 8006e26:	4613      	mov	r3, r2
 8006e28:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 8006e2a:	88fb      	ldrh	r3, [r7, #6]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d101      	bne.n	8006e34 <_tu_fifo_write_n+0x20>
 8006e30:	2300      	movs	r3, #0
 8006e32:	e0bc      	b.n	8006fae <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	891b      	ldrh	r3, [r3, #8]
 8006e38:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	895b      	ldrh	r3, [r3, #10]
 8006e3e:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	79db      	ldrb	r3, [r3, #7]
 8006e48:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	f083 0301 	eor.w	r3, r3, #1
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d036      	beq.n	8006ec6 <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	889b      	ldrh	r3, [r3, #4]
 8006e5c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8006e5e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006e60:	853b      	strh	r3, [r7, #40]	@ 0x28
 8006e62:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006e64:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8006e66:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8006e68:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8006e6a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8006e6c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8006e6e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006e70:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 8006e72:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006e74:	8c3b      	ldrh	r3, [r7, #32]
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d304      	bcc.n	8006e84 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 8006e7a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8006e7c:	8c3b      	ldrh	r3, [r7, #32]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	e008      	b.n	8006e96 <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006e84:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e86:	005b      	lsls	r3, r3, #1
 8006e88:	b29a      	uxth	r2, r3
 8006e8a:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 8006e8c:	8c3b      	ldrh	r3, [r7, #32]
 8006e8e:	1acb      	subs	r3, r1, r3
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	4413      	add	r3, r2
 8006e94:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8006e96:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 8006e98:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8006e9a:	8bfb      	ldrh	r3, [r7, #30]
 8006e9c:	429a      	cmp	r2, r3
 8006e9e:	d904      	bls.n	8006eaa <_tu_fifo_write_n+0x96>
 8006ea0:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8006ea2:	8bfb      	ldrh	r3, [r7, #30]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	e000      	b.n	8006eac <_tu_fifo_write_n+0x98>
 8006eaa:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 8006eac:	867b      	strh	r3, [r7, #50]	@ 0x32
 8006eae:	88fb      	ldrh	r3, [r7, #6]
 8006eb0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8006eb2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006eb4:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8006eb6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006eb8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	bf28      	it	cs
 8006ebe:	4613      	movcs	r3, r2
 8006ec0:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 8006ec2:	80fb      	strh	r3, [r7, #6]
 8006ec4:	e04b      	b.n	8006f5e <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	889b      	ldrh	r3, [r3, #4]
 8006eca:	88fa      	ldrh	r2, [r7, #6]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d317      	bcc.n	8006f00 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 8006ed0:	797b      	ldrb	r3, [r7, #5]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10e      	bne.n	8006ef4 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 8006ed6:	88fb      	ldrh	r3, [r7, #6]
 8006ed8:	68fa      	ldr	r2, [r7, #12]
 8006eda:	8892      	ldrh	r2, [r2, #4]
 8006edc:	1a9b      	subs	r3, r3, r2
 8006ede:	68fa      	ldr	r2, [r7, #12]
 8006ee0:	88d2      	ldrh	r2, [r2, #6]
 8006ee2:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006ee6:	b292      	uxth	r2, r2
 8006ee8:	fb02 f303 	mul.w	r3, r2, r3
 8006eec:	461a      	mov	r2, r3
 8006eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef0:	4413      	add	r3, r2
 8006ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	889b      	ldrh	r3, [r3, #4]
 8006ef8:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 8006efa:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006efc:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8006efe:	e02e      	b.n	8006f5e <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	889b      	ldrh	r3, [r3, #4]
 8006f04:	83bb      	strh	r3, [r7, #28]
 8006f06:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006f08:	837b      	strh	r3, [r7, #26]
 8006f0a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006f0c:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8006f0e:	8b7a      	ldrh	r2, [r7, #26]
 8006f10:	8b3b      	ldrh	r3, [r7, #24]
 8006f12:	429a      	cmp	r2, r3
 8006f14:	d304      	bcc.n	8006f20 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 8006f16:	8b7a      	ldrh	r2, [r7, #26]
 8006f18:	8b3b      	ldrh	r3, [r7, #24]
 8006f1a:	1ad3      	subs	r3, r2, r3
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	e008      	b.n	8006f32 <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8006f20:	8bbb      	ldrh	r3, [r7, #28]
 8006f22:	005b      	lsls	r3, r3, #1
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	8b79      	ldrh	r1, [r7, #26]
 8006f28:	8b3b      	ldrh	r3, [r7, #24]
 8006f2a:	1acb      	subs	r3, r1, r3
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	4413      	add	r3, r2
 8006f30:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8006f32:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 8006f34:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8006f36:	88fb      	ldrh	r3, [r7, #6]
 8006f38:	441a      	add	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	889b      	ldrh	r3, [r3, #4]
 8006f3e:	005b      	lsls	r3, r3, #1
 8006f40:	429a      	cmp	r2, r3
 8006f42:	db0c      	blt.n	8006f5e <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	8898      	ldrh	r0, [r3, #4]
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	889a      	ldrh	r2, [r3, #4]
 8006f4c:	88fb      	ldrh	r3, [r7, #6]
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	b29a      	uxth	r2, r3
 8006f52:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006f54:	4619      	mov	r1, r3
 8006f56:	f7ff fe61 	bl	8006c1c <advance_index>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 8006f5e:	88fb      	ldrh	r3, [r7, #6]
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d023      	beq.n	8006fac <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	889b      	ldrh	r3, [r3, #4]
 8006f68:	82fb      	strh	r3, [r7, #22]
 8006f6a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006f6c:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8006f6e:	e003      	b.n	8006f78 <_tu_fifo_write_n+0x164>
 8006f70:	8aba      	ldrh	r2, [r7, #20]
 8006f72:	8afb      	ldrh	r3, [r7, #22]
 8006f74:	1ad3      	subs	r3, r2, r3
 8006f76:	82bb      	strh	r3, [r7, #20]
 8006f78:	8afa      	ldrh	r2, [r7, #22]
 8006f7a:	8abb      	ldrh	r3, [r7, #20]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d9f7      	bls.n	8006f70 <_tu_fifo_write_n+0x15c>
  return idx;
 8006f80:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8006f82:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8006f84:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8006f86:	88fa      	ldrh	r2, [r7, #6]
 8006f88:	797b      	ldrb	r3, [r7, #5]
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	460b      	mov	r3, r1
 8006f8e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8006f90:	68f8      	ldr	r0, [r7, #12]
 8006f92:	f7ff fc66 	bl	8006862 <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	889b      	ldrh	r3, [r3, #4]
 8006f9a:	88fa      	ldrh	r2, [r7, #6]
 8006f9c:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	f7ff fe3c 	bl	8006c1c <advance_index>
 8006fa4:	4603      	mov	r3, r0
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 8006fac:	88fb      	ldrh	r3, [r7, #6]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3740      	adds	r7, #64	@ 0x40
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}

08006fb6 <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8006fb6:	b580      	push	{r7, lr}
 8006fb8:	b086      	sub	sp, #24
 8006fba:	af02      	add	r7, sp, #8
 8006fbc:	60f8      	str	r0, [r7, #12]
 8006fbe:	60b9      	str	r1, [r7, #8]
 8006fc0:	4611      	mov	r1, r2
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	460b      	mov	r3, r1
 8006fc6:	80fb      	strh	r3, [r7, #6]
 8006fc8:	4613      	mov	r3, r2
 8006fca:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	891b      	ldrh	r3, [r3, #8]
 8006fd0:	b298      	uxth	r0, r3
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	895b      	ldrh	r3, [r3, #10]
 8006fd6:	b29b      	uxth	r3, r3
 8006fd8:	88f9      	ldrh	r1, [r7, #6]
 8006fda:	797a      	ldrb	r2, [r7, #5]
 8006fdc:	9201      	str	r2, [sp, #4]
 8006fde:	9300      	str	r3, [sp, #0]
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	460a      	mov	r2, r1
 8006fe4:	68b9      	ldr	r1, [r7, #8]
 8006fe6:	68f8      	ldr	r0, [r7, #12]
 8006fe8:	f7ff fea4 	bl	8006d34 <_tu_fifo_peek_n>
 8006fec:	4603      	mov	r3, r0
 8006fee:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	8898      	ldrh	r0, [r3, #4]
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	895b      	ldrh	r3, [r3, #10]
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	88fa      	ldrh	r2, [r7, #6]
 8006ffc:	4619      	mov	r1, r3
 8006ffe:	f7ff fe0d 	bl	8006c1c <advance_index>
 8007002:	4603      	mov	r3, r0
 8007004:	461a      	mov	r2, r3
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 800700a:	88fb      	ldrh	r3, [r7, #6]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3710      	adds	r7, #16
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8007014:	b480      	push	{r7}
 8007016:	b087      	sub	sp, #28
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	8899      	ldrh	r1, [r3, #4]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	891b      	ldrh	r3, [r3, #8]
 8007024:	b29a      	uxth	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	895b      	ldrh	r3, [r3, #10]
 800702a:	b29b      	uxth	r3, r3
 800702c:	8279      	strh	r1, [r7, #18]
 800702e:	823a      	strh	r2, [r7, #16]
 8007030:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 8007032:	8a3a      	ldrh	r2, [r7, #16]
 8007034:	89fb      	ldrh	r3, [r7, #14]
 8007036:	429a      	cmp	r2, r3
 8007038:	d304      	bcc.n	8007044 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 800703a:	8a3a      	ldrh	r2, [r7, #16]
 800703c:	89fb      	ldrh	r3, [r7, #14]
 800703e:	1ad3      	subs	r3, r2, r3
 8007040:	b29b      	uxth	r3, r3
 8007042:	e008      	b.n	8007056 <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8007044:	8a7b      	ldrh	r3, [r7, #18]
 8007046:	005b      	lsls	r3, r3, #1
 8007048:	b29a      	uxth	r2, r3
 800704a:	8a39      	ldrh	r1, [r7, #16]
 800704c:	89fb      	ldrh	r3, [r7, #14]
 800704e:	1acb      	subs	r3, r1, r3
 8007050:	b29b      	uxth	r3, r3
 8007052:	4413      	add	r3, r2
 8007054:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8007056:	687a      	ldr	r2, [r7, #4]
 8007058:	8892      	ldrh	r2, [r2, #4]
 800705a:	82fb      	strh	r3, [r7, #22]
 800705c:	4613      	mov	r3, r2
 800705e:	82bb      	strh	r3, [r7, #20]
 8007060:	8afa      	ldrh	r2, [r7, #22]
 8007062:	8abb      	ldrh	r3, [r7, #20]
 8007064:	4293      	cmp	r3, r2
 8007066:	bf28      	it	cs
 8007068:	4613      	movcs	r3, r2
 800706a:	b29b      	uxth	r3, r3
}
 800706c:	4618      	mov	r0, r3
 800706e:	371c      	adds	r7, #28
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr

08007078 <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	891b      	ldrh	r3, [r3, #8]
 8007084:	b29a      	uxth	r2, r3
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	895b      	ldrh	r3, [r3, #10]
 800708a:	b29b      	uxth	r3, r3
 800708c:	429a      	cmp	r2, r3
 800708e:	bf0c      	ite	eq
 8007090:	2301      	moveq	r3, #1
 8007092:	2300      	movne	r3, #0
 8007094:	b2db      	uxtb	r3, r3
}
 8007096:	4618      	mov	r0, r3
 8007098:	370c      	adds	r7, #12
 800709a:	46bd      	mov	sp, r7
 800709c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a0:	4770      	bx	lr

080070a2 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 80070a2:	b480      	push	{r7}
 80070a4:	b085      	sub	sp, #20
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	8899      	ldrh	r1, [r3, #4]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	891b      	ldrh	r3, [r3, #8]
 80070b2:	b29a      	uxth	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	895b      	ldrh	r3, [r3, #10]
 80070b8:	b29b      	uxth	r3, r3
 80070ba:	81f9      	strh	r1, [r7, #14]
 80070bc:	81ba      	strh	r2, [r7, #12]
 80070be:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 80070c0:	89ba      	ldrh	r2, [r7, #12]
 80070c2:	897b      	ldrh	r3, [r7, #10]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d304      	bcc.n	80070d2 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 80070c8:	89ba      	ldrh	r2, [r7, #12]
 80070ca:	897b      	ldrh	r3, [r7, #10]
 80070cc:	1ad3      	subs	r3, r2, r3
 80070ce:	b29b      	uxth	r3, r3
 80070d0:	e008      	b.n	80070e4 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80070d2:	89fb      	ldrh	r3, [r7, #14]
 80070d4:	005b      	lsls	r3, r3, #1
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	89b9      	ldrh	r1, [r7, #12]
 80070da:	897b      	ldrh	r3, [r7, #10]
 80070dc:	1acb      	subs	r3, r1, r3
 80070de:	b29b      	uxth	r3, r3
 80070e0:	4413      	add	r3, r2
 80070e2:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 80070e4:	687a      	ldr	r2, [r7, #4]
 80070e6:	8892      	ldrh	r2, [r2, #4]
 80070e8:	4293      	cmp	r3, r2
 80070ea:	bf2c      	ite	cs
 80070ec:	2301      	movcs	r3, #1
 80070ee:	2300      	movcc	r3, #0
 80070f0:	b2db      	uxtb	r3, r3
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3714      	adds	r7, #20
 80070f6:	46bd      	mov	sp, r7
 80070f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070fc:	4770      	bx	lr

080070fe <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 80070fe:	b480      	push	{r7}
 8007100:	b087      	sub	sp, #28
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	8899      	ldrh	r1, [r3, #4]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	891b      	ldrh	r3, [r3, #8]
 800710e:	b29a      	uxth	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	895b      	ldrh	r3, [r3, #10]
 8007114:	b29b      	uxth	r3, r3
 8007116:	82f9      	strh	r1, [r7, #22]
 8007118:	82ba      	strh	r2, [r7, #20]
 800711a:	827b      	strh	r3, [r7, #18]
 800711c:	8afb      	ldrh	r3, [r7, #22]
 800711e:	823b      	strh	r3, [r7, #16]
 8007120:	8abb      	ldrh	r3, [r7, #20]
 8007122:	81fb      	strh	r3, [r7, #14]
 8007124:	8a7b      	ldrh	r3, [r7, #18]
 8007126:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8007128:	89fa      	ldrh	r2, [r7, #14]
 800712a:	89bb      	ldrh	r3, [r7, #12]
 800712c:	429a      	cmp	r2, r3
 800712e:	d304      	bcc.n	800713a <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8007130:	89fa      	ldrh	r2, [r7, #14]
 8007132:	89bb      	ldrh	r3, [r7, #12]
 8007134:	1ad3      	subs	r3, r2, r3
 8007136:	b29b      	uxth	r3, r3
 8007138:	e008      	b.n	800714c <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800713a:	8a3b      	ldrh	r3, [r7, #16]
 800713c:	005b      	lsls	r3, r3, #1
 800713e:	b29a      	uxth	r2, r3
 8007140:	89f9      	ldrh	r1, [r7, #14]
 8007142:	89bb      	ldrh	r3, [r7, #12]
 8007144:	1acb      	subs	r3, r1, r3
 8007146:	b29b      	uxth	r3, r3
 8007148:	4413      	add	r3, r2
 800714a:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 800714c:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 800714e:	8afa      	ldrh	r2, [r7, #22]
 8007150:	897b      	ldrh	r3, [r7, #10]
 8007152:	429a      	cmp	r2, r3
 8007154:	d904      	bls.n	8007160 <tu_fifo_remaining+0x62>
 8007156:	8afa      	ldrh	r2, [r7, #22]
 8007158:	897b      	ldrh	r3, [r7, #10]
 800715a:	1ad3      	subs	r3, r2, r3
 800715c:	b29b      	uxth	r3, r3
 800715e:	e000      	b.n	8007162 <tu_fifo_remaining+0x64>
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	371c      	adds	r7, #28
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 800716e:	b580      	push	{r7, lr}
 8007170:	b084      	sub	sp, #16
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
 8007176:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	891b      	ldrh	r3, [r3, #8]
 800717c:	b29a      	uxth	r2, r3
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	895b      	ldrh	r3, [r3, #10]
 8007182:	b29b      	uxth	r3, r3
 8007184:	6839      	ldr	r1, [r7, #0]
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7ff fd6e 	bl	8006c68 <_tu_fifo_peek>
 800718c:	4603      	mov	r3, r0
 800718e:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	8898      	ldrh	r0, [r3, #4]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	895b      	ldrh	r3, [r3, #10]
 8007198:	b29b      	uxth	r3, r3
 800719a:	7bfa      	ldrb	r2, [r7, #15]
 800719c:	b292      	uxth	r2, r2
 800719e:	4619      	mov	r1, r3
 80071a0:	f7ff fd3c 	bl	8006c1c <advance_index>
 80071a4:	4603      	mov	r3, r0
 80071a6:	461a      	mov	r2, r3
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 80071ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ae:	4618      	mov	r0, r3
 80071b0:	3710      	adds	r7, #16
 80071b2:	46bd      	mov	sp, r7
 80071b4:	bd80      	pop	{r7, pc}

080071b6 <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80071b6:	b580      	push	{r7, lr}
 80071b8:	b084      	sub	sp, #16
 80071ba:	af00      	add	r7, sp, #0
 80071bc:	60f8      	str	r0, [r7, #12]
 80071be:	60b9      	str	r1, [r7, #8]
 80071c0:	4613      	mov	r3, r2
 80071c2:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 80071c4:	88fa      	ldrh	r2, [r7, #6]
 80071c6:	2300      	movs	r3, #0
 80071c8:	68b9      	ldr	r1, [r7, #8]
 80071ca:	68f8      	ldr	r0, [r7, #12]
 80071cc:	f7ff fef3 	bl	8006fb6 <_tu_fifo_read_n>
 80071d0:	4603      	mov	r3, r0
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}

080071da <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 80071da:	b580      	push	{r7, lr}
 80071dc:	b084      	sub	sp, #16
 80071de:	af00      	add	r7, sp, #0
 80071e0:	60f8      	str	r0, [r7, #12]
 80071e2:	60b9      	str	r1, [r7, #8]
 80071e4:	4613      	mov	r3, r2
 80071e6:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 80071e8:	88fa      	ldrh	r2, [r7, #6]
 80071ea:	2301      	movs	r3, #1
 80071ec:	68b9      	ldr	r1, [r7, #8]
 80071ee:	68f8      	ldr	r0, [r7, #12]
 80071f0:	f7ff fee1 	bl	8006fb6 <_tu_fifo_read_n>
 80071f4:	4603      	mov	r3, r0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b086      	sub	sp, #24
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
 8007206:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	891b      	ldrh	r3, [r3, #8]
 800720c:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f7ff ff47 	bl	80070a2 <tu_fifo_full>
 8007214:	4603      	mov	r3, r0
 8007216:	2b00      	cmp	r3, #0
 8007218:	d00c      	beq.n	8007234 <tu_fifo_write+0x36>
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	79db      	ldrb	r3, [r3, #7]
 800721e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007222:	b2db      	uxtb	r3, r3
 8007224:	f083 0301 	eor.w	r3, r3, #1
 8007228:	b2db      	uxtb	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d002      	beq.n	8007234 <tu_fifo_write+0x36>
  {
    ret = false;
 800722e:	2300      	movs	r3, #0
 8007230:	75fb      	strb	r3, [r7, #23]
 8007232:	e022      	b.n	800727a <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	889b      	ldrh	r3, [r3, #4]
 8007238:	823b      	strh	r3, [r7, #16]
 800723a:	8abb      	ldrh	r3, [r7, #20]
 800723c:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 800723e:	e003      	b.n	8007248 <tu_fifo_write+0x4a>
 8007240:	89fa      	ldrh	r2, [r7, #14]
 8007242:	8a3b      	ldrh	r3, [r7, #16]
 8007244:	1ad3      	subs	r3, r2, r3
 8007246:	81fb      	strh	r3, [r7, #14]
 8007248:	8a3a      	ldrh	r2, [r7, #16]
 800724a:	89fb      	ldrh	r3, [r7, #14]
 800724c:	429a      	cmp	r2, r3
 800724e:	d9f7      	bls.n	8007240 <tu_fifo_write+0x42>
  return idx;
 8007250:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8007252:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8007254:	8a7b      	ldrh	r3, [r7, #18]
 8007256:	461a      	mov	r2, r3
 8007258:	6839      	ldr	r1, [r7, #0]
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7ff fae2 	bl	8006824 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	889b      	ldrh	r3, [r3, #4]
 8007264:	8ab9      	ldrh	r1, [r7, #20]
 8007266:	2201      	movs	r2, #1
 8007268:	4618      	mov	r0, r3
 800726a:	f7ff fcd7 	bl	8006c1c <advance_index>
 800726e:	4603      	mov	r3, r0
 8007270:	461a      	mov	r2, r3
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	811a      	strh	r2, [r3, #8]

    ret = true;
 8007276:	2301      	movs	r3, #1
 8007278:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 800727a:	7dfb      	ldrb	r3, [r7, #23]
}
 800727c:	4618      	mov	r0, r3
 800727e:	3718      	adds	r7, #24
 8007280:	46bd      	mov	sp, r7
 8007282:	bd80      	pop	{r7, pc}

08007284 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b084      	sub	sp, #16
 8007288:	af00      	add	r7, sp, #0
 800728a:	60f8      	str	r0, [r7, #12]
 800728c:	60b9      	str	r1, [r7, #8]
 800728e:	4613      	mov	r3, r2
 8007290:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8007292:	88fa      	ldrh	r2, [r7, #6]
 8007294:	2300      	movs	r3, #0
 8007296:	68b9      	ldr	r1, [r7, #8]
 8007298:	68f8      	ldr	r0, [r7, #12]
 800729a:	f7ff fdbb 	bl	8006e14 <_tu_fifo_write_n>
 800729e:	4603      	mov	r3, r0
}
 80072a0:	4618      	mov	r0, r3
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}

080072a8 <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 80072a8:	b580      	push	{r7, lr}
 80072aa:	b084      	sub	sp, #16
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	60f8      	str	r0, [r7, #12]
 80072b0:	60b9      	str	r1, [r7, #8]
 80072b2:	4613      	mov	r3, r2
 80072b4:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 80072b6:	88fa      	ldrh	r2, [r7, #6]
 80072b8:	2301      	movs	r3, #1
 80072ba:	68b9      	ldr	r1, [r7, #8]
 80072bc:	68f8      	ldr	r0, [r7, #12]
 80072be:	f7ff fda9 	bl	8006e14 <_tu_fifo_write_n>
 80072c2:	4603      	mov	r3, r0
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 80072cc:	b480      	push	{r7}
 80072ce:	b083      	sub	sp, #12
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	2200      	movs	r2, #0
 80072d8:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	2200      	movs	r2, #0
 80072de:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 80072e0:	2301      	movs	r3, #1
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	370c      	adds	r7, #12
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <tu_fifo_set_overwritable>:
                Pointer to the FIFO buffer to manipulate
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable) {
 80072ee:	b480      	push	{r7}
 80072f0:	b083      	sub	sp, #12
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
 80072f6:	460b      	mov	r3, r1
 80072f8:	70fb      	strb	r3, [r7, #3]
  if (f->overwritable == overwritable) {
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	79db      	ldrb	r3, [r3, #7]
 80072fe:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8007302:	b2db      	uxtb	r3, r3
 8007304:	78fa      	ldrb	r2, [r7, #3]
 8007306:	429a      	cmp	r2, r3
 8007308:	d101      	bne.n	800730e <tu_fifo_set_overwritable+0x20>
    return true;
 800730a:	2301      	movs	r3, #1
 800730c:	e006      	b.n	800731c <tu_fifo_set_overwritable+0x2e>
  }

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 800730e:	687a      	ldr	r2, [r7, #4]
 8007310:	79d3      	ldrb	r3, [r2, #7]
 8007312:	78f9      	ldrb	r1, [r7, #3]
 8007314:	f361 13c7 	bfi	r3, r1, #7, #1
 8007318:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 800731a:	2301      	movs	r3, #1
}
 800731c:	4618      	mov	r0, r3
 800731e:	370c      	adds	r7, #12
 8007320:	46bd      	mov	sp, r7
 8007322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007326:	4770      	bx	lr

08007328 <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8007328:	b480      	push	{r7}
 800732a:	b083      	sub	sp, #12
 800732c:	af00      	add	r7, sp, #0
 800732e:	4603      	mov	r3, r0
 8007330:	6039      	str	r1, [r7, #0]
 8007332:	71fb      	strb	r3, [r7, #7]
 8007334:	4613      	mov	r3, r2
 8007336:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <tud_descriptor_bos_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
 8007358:	b480      	push	{r7}
 800735a:	af00      	add	r7, sp, #0
  return NULL;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	46bd      	mov	sp, r7
 8007362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007366:	4770      	bx	lr

08007368 <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8007368:	b480      	push	{r7}
 800736a:	af00      	add	r7, sp, #0
  return NULL;
 800736c:	2300      	movs	r3, #0
}
 800736e:	4618      	mov	r0, r3
 8007370:	46bd      	mov	sp, r7
 8007372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007376:	4770      	bx	lr

08007378 <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	4603      	mov	r3, r0
 8007380:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 8007382:	2300      	movs	r3, #0
}
 8007384:	4618      	mov	r0, r3
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <tud_mount_cb>:

TU_ATTR_WEAK void tud_mount_cb(void) {
 8007390:	b480      	push	{r7}
 8007392:	af00      	add	r7, sp, #0
}
 8007394:	bf00      	nop
 8007396:	46bd      	mov	sp, r7
 8007398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739c:	4770      	bx	lr

0800739e <tud_umount_cb>:

TU_ATTR_WEAK void tud_umount_cb(void) {
 800739e:	b480      	push	{r7}
 80073a0:	af00      	add	r7, sp, #0
}
 80073a2:	bf00      	nop
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <tud_suspend_cb>:

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 80073ac:	b480      	push	{r7}
 80073ae:	b083      	sub	sp, #12
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	4603      	mov	r3, r0
 80073b4:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 80073b6:	bf00      	nop
 80073b8:	370c      	adds	r7, #12
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 80073c2:	b480      	push	{r7}
 80073c4:	af00      	add	r7, sp, #0
}
 80073c6:	bf00      	nop
 80073c8:	46bd      	mov	sp, r7
 80073ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ce:	4770      	bx	lr

080073d0 <tud_vendor_control_xfer_cb>:

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
 80073d0:	b480      	push	{r7}
 80073d2:	b083      	sub	sp, #12
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	4603      	mov	r3, r0
 80073d8:	603a      	str	r2, [r7, #0]
 80073da:	71fb      	strb	r3, [r7, #7]
 80073dc:	460b      	mov	r3, r1
 80073de:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) stage; (void) request;
  return false;
 80073e0:	2300      	movs	r3, #0
}
 80073e2:	4618      	mov	r0, r3
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr

080073ee <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 80073ee:	b480      	push	{r7}
 80073f0:	b083      	sub	sp, #12
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
 80073f6:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 80073f8:	2301      	movs	r3, #1
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	370c      	adds	r7, #12
 80073fe:	46bd      	mov	sp, r7
 8007400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007404:	4770      	bx	lr
	...

08007408 <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8007408:	b480      	push	{r7}
 800740a:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 800740c:	4b06      	ldr	r3, [pc, #24]	@ (8007428 <tud_mounted+0x20>)
 800740e:	785b      	ldrb	r3, [r3, #1]
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	bf14      	ite	ne
 8007416:	2301      	movne	r3, #1
 8007418:	2300      	moveq	r3, #0
 800741a:	b2db      	uxtb	r3, r3
}
 800741c:	4618      	mov	r0, r3
 800741e:	46bd      	mov	sp, r7
 8007420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop
 8007428:	20000cd0 	.word	0x20000cd0

0800742c <tud_suspended>:

bool tud_suspended(void) {
 800742c:	b480      	push	{r7}
 800742e:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8007430:	4b07      	ldr	r3, [pc, #28]	@ (8007450 <tud_suspended+0x24>)
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007438:	b2db      	uxtb	r3, r3
 800743a:	2b00      	cmp	r3, #0
 800743c:	bf14      	ite	ne
 800743e:	2301      	movne	r3, #1
 8007440:	2300      	moveq	r3, #0
 8007442:	b2db      	uxtb	r3, r3
}
 8007444:	4618      	mov	r0, r3
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
 800744e:	bf00      	nop
 8007450:	20000cd0 	.word	0x20000cd0

08007454 <tud_remote_wakeup>:

bool tud_remote_wakeup(void) {
 8007454:	b580      	push	{r7, lr}
 8007456:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en);
 8007458:	4b0f      	ldr	r3, [pc, #60]	@ (8007498 <tud_remote_wakeup+0x44>)
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b00      	cmp	r3, #0
 8007464:	d00d      	beq.n	8007482 <tud_remote_wakeup+0x2e>
 8007466:	4b0c      	ldr	r3, [pc, #48]	@ (8007498 <tud_remote_wakeup+0x44>)
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	f003 0310 	and.w	r3, r3, #16
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b00      	cmp	r3, #0
 8007472:	d006      	beq.n	8007482 <tud_remote_wakeup+0x2e>
 8007474:	4b08      	ldr	r3, [pc, #32]	@ (8007498 <tud_remote_wakeup+0x44>)
 8007476:	781b      	ldrb	r3, [r3, #0]
 8007478:	f003 0308 	and.w	r3, r3, #8
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d101      	bne.n	8007486 <tud_remote_wakeup+0x32>
 8007482:	2300      	movs	r3, #0
 8007484:	e005      	b.n	8007492 <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 8007486:	4b05      	ldr	r3, [pc, #20]	@ (800749c <tud_remote_wakeup+0x48>)
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	4618      	mov	r0, r3
 800748c:	f002 fbb0 	bl	8009bf0 <dcd_remote_wakeup>
  return true;
 8007490:	2301      	movs	r3, #1
}
 8007492:	4618      	mov	r0, r3
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	20000cd0 	.word	0x20000cd0
 800749c:	20000025 	.word	0x20000025

080074a0 <tud_disconnect>:

bool tud_disconnect(void) {
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
  dcd_disconnect(_usbd_rhport);
 80074a4:	4b03      	ldr	r3, [pc, #12]	@ (80074b4 <tud_disconnect+0x14>)
 80074a6:	781b      	ldrb	r3, [r3, #0]
 80074a8:	4618      	mov	r0, r3
 80074aa:	f002 fc09 	bl	8009cc0 <dcd_disconnect>
  return true;
 80074ae:	2301      	movs	r3, #1
}
 80074b0:	4618      	mov	r0, r3
 80074b2:	bd80      	pop	{r7, pc}
 80074b4:	20000025 	.word	0x20000025

080074b8 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 80074b8:	b480      	push	{r7}
 80074ba:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 80074bc:	4b05      	ldr	r3, [pc, #20]	@ (80074d4 <tud_inited+0x1c>)
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	2bff      	cmp	r3, #255	@ 0xff
 80074c2:	bf14      	ite	ne
 80074c4:	2301      	movne	r3, #1
 80074c6:	2300      	moveq	r3, #0
 80074c8:	b2db      	uxtb	r3, r3
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr
 80074d4:	20000025 	.word	0x20000025

080074d8 <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 80074d8:	b580      	push	{r7, lr}
 80074da:	b08c      	sub	sp, #48	@ 0x30
 80074dc:	af00      	add	r7, sp, #0
 80074de:	4603      	mov	r3, r0
 80074e0:	6039      	str	r1, [r7, #0]
 80074e2:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 80074e4:	f7ff ffe8 	bl	80074b8 <tud_inited>
 80074e8:	4603      	mov	r3, r0
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d001      	beq.n	80074f2 <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 80074ee:	2301      	movs	r3, #1
 80074f0:	e09e      	b.n	8007630 <tud_rhport_init+0x158>
  }
  TU_ASSERT(rh_init);
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10a      	bne.n	800750e <tud_rhport_init+0x36>
 80074f8:	4b4f      	ldr	r3, [pc, #316]	@ (8007638 <tud_rhport_init+0x160>)
 80074fa:	61bb      	str	r3, [r7, #24]
 80074fc:	69bb      	ldr	r3, [r7, #24]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f003 0301 	and.w	r3, r3, #1
 8007504:	2b00      	cmp	r3, #0
 8007506:	d000      	beq.n	800750a <tud_rhport_init+0x32>
 8007508:	be00      	bkpt	0x0000
 800750a:	2300      	movs	r3, #0
 800750c:	e090      	b.n	8007630 <tud_rhport_init+0x158>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 800750e:	222c      	movs	r2, #44	@ 0x2c
 8007510:	2100      	movs	r1, #0
 8007512:	484a      	ldr	r0, [pc, #296]	@ (800763c <tud_rhport_init+0x164>)
 8007514:	f004 f892 	bl	800b63c <memset>
  _usbd_queued_setup = 0;
 8007518:	4b49      	ldr	r3, [pc, #292]	@ (8007640 <tud_rhport_init+0x168>)
 800751a:	2200      	movs	r2, #0
 800751c:	701a      	strb	r2, [r3, #0]
 800751e:	4b49      	ldr	r3, [pc, #292]	@ (8007644 <tud_rhport_init+0x16c>)
 8007520:	613b      	str	r3, [r7, #16]
#define OSAL_SPINLOCK_DEF(_name, _int_set) \
  osal_spinlock_t _name = { .interrupt_set = _int_set }

TU_ATTR_ALWAYS_INLINE static inline void osal_spin_init(osal_spinlock_t *ctx) {
  (void) ctx;
}
 8007522:	bf00      	nop
 8007524:	4b48      	ldr	r3, [pc, #288]	@ (8007648 <tud_rhport_init+0x170>)
 8007526:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	3304      	adds	r3, #4
 800752c:	4618      	mov	r0, r3
 800752e:	f7ff fecd 	bl	80072cc <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8007532:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8007534:	4a45      	ldr	r2, [pc, #276]	@ (800764c <tud_rhport_init+0x174>)
 8007536:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8007538:	4b44      	ldr	r3, [pc, #272]	@ (800764c <tud_rhport_init+0x174>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d10a      	bne.n	8007556 <tud_rhport_init+0x7e>
 8007540:	4b3d      	ldr	r3, [pc, #244]	@ (8007638 <tud_rhport_init+0x160>)
 8007542:	61fb      	str	r3, [r7, #28]
 8007544:	69fb      	ldr	r3, [r7, #28]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	f003 0301 	and.w	r3, r3, #1
 800754c:	2b00      	cmp	r3, #0
 800754e:	d000      	beq.n	8007552 <tud_rhport_init+0x7a>
 8007550:	be00      	bkpt	0x0000
 8007552:	2300      	movs	r3, #0
 8007554:	e06c      	b.n	8007630 <tud_rhport_init+0x158>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8007556:	4b3e      	ldr	r3, [pc, #248]	@ (8007650 <tud_rhport_init+0x178>)
 8007558:	2b00      	cmp	r3, #0
 800755a:	d005      	beq.n	8007568 <tud_rhport_init+0x90>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 800755c:	483d      	ldr	r0, [pc, #244]	@ (8007654 <tud_rhport_init+0x17c>)
 800755e:	f3af 8000 	nop.w
 8007562:	4603      	mov	r3, r0
 8007564:	4a3c      	ldr	r2, [pc, #240]	@ (8007658 <tud_rhport_init+0x180>)
 8007566:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8007568:	2300      	movs	r3, #0
 800756a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800756e:	e03a      	b.n	80075e6 <tud_rhport_init+0x10e>
 8007570:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007574:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8007576:	2300      	movs	r3, #0
 8007578:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 800757a:	4b36      	ldr	r3, [pc, #216]	@ (8007654 <tud_rhport_init+0x17c>)
 800757c:	781b      	ldrb	r3, [r3, #0]
 800757e:	7bfa      	ldrb	r2, [r7, #15]
 8007580:	429a      	cmp	r2, r3
 8007582:	d206      	bcs.n	8007592 <tud_rhport_init+0xba>
    driver = &_app_driver[drvid];
 8007584:	4b34      	ldr	r3, [pc, #208]	@ (8007658 <tud_rhport_init+0x180>)
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	7bfb      	ldrb	r3, [r7, #15]
 800758a:	015b      	lsls	r3, r3, #5
 800758c:	4413      	add	r3, r2
 800758e:	60bb      	str	r3, [r7, #8]
 8007590:	e00d      	b.n	80075ae <tud_rhport_init+0xd6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007592:	4b30      	ldr	r3, [pc, #192]	@ (8007654 <tud_rhport_init+0x17c>)
 8007594:	781b      	ldrb	r3, [r3, #0]
 8007596:	1c5a      	adds	r2, r3, #1
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	429a      	cmp	r2, r3
 800759c:	db07      	blt.n	80075ae <tud_rhport_init+0xd6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800759e:	7bfb      	ldrb	r3, [r7, #15]
 80075a0:	4a2c      	ldr	r2, [pc, #176]	@ (8007654 <tud_rhport_init+0x17c>)
 80075a2:	7812      	ldrb	r2, [r2, #0]
 80075a4:	1a9b      	subs	r3, r3, r2
 80075a6:	015b      	lsls	r3, r3, #5
 80075a8:	4a2c      	ldr	r2, [pc, #176]	@ (800765c <tud_rhport_init+0x184>)
 80075aa:	4413      	add	r3, r2
 80075ac:	60bb      	str	r3, [r7, #8]
  return driver;
 80075ae:	68bb      	ldr	r3, [r7, #8]
    usbd_class_driver_t const* driver = get_driver(i);
 80075b0:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 80075b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d003      	beq.n	80075c0 <tud_rhport_init+0xe8>
 80075b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d10a      	bne.n	80075d6 <tud_rhport_init+0xfe>
 80075c0:	4b1d      	ldr	r3, [pc, #116]	@ (8007638 <tud_rhport_init+0x160>)
 80075c2:	623b      	str	r3, [r7, #32]
 80075c4:	6a3b      	ldr	r3, [r7, #32]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f003 0301 	and.w	r3, r3, #1
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d000      	beq.n	80075d2 <tud_rhport_init+0xfa>
 80075d0:	be00      	bkpt	0x0000
 80075d2:	2300      	movs	r3, #0
 80075d4:	e02c      	b.n	8007630 <tud_rhport_init+0x158>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 80075d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80075dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80075e0:	3301      	adds	r3, #1
 80075e2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80075e6:	4b1b      	ldr	r3, [pc, #108]	@ (8007654 <tud_rhport_init+0x17c>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	1c5a      	adds	r2, r3, #1
 80075ec:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80075f0:	429a      	cmp	r2, r3
 80075f2:	dabd      	bge.n	8007570 <tud_rhport_init+0x98>
  }

  _usbd_rhport = rhport;
 80075f4:	4a1a      	ldr	r2, [pc, #104]	@ (8007660 <tud_rhport_init+0x188>)
 80075f6:	79fb      	ldrb	r3, [r7, #7]
 80075f8:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 80075fa:	79fb      	ldrb	r3, [r7, #7]
 80075fc:	6839      	ldr	r1, [r7, #0]
 80075fe:	4618      	mov	r0, r3
 8007600:	f002 f9cc 	bl	800999c <dcd_init>
 8007604:	4603      	mov	r3, r0
 8007606:	f083 0301 	eor.w	r3, r3, #1
 800760a:	b2db      	uxtb	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	d00a      	beq.n	8007626 <tud_rhport_init+0x14e>
 8007610:	4b09      	ldr	r3, [pc, #36]	@ (8007638 <tud_rhport_init+0x160>)
 8007612:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0301 	and.w	r3, r3, #1
 800761c:	2b00      	cmp	r3, #0
 800761e:	d000      	beq.n	8007622 <tud_rhport_init+0x14a>
 8007620:	be00      	bkpt	0x0000
 8007622:	2300      	movs	r3, #0
 8007624:	e004      	b.n	8007630 <tud_rhport_init+0x158>
  dcd_int_enable(rhport);
 8007626:	79fb      	ldrb	r3, [r7, #7]
 8007628:	4618      	mov	r0, r3
 800762a:	f002 fa55 	bl	8009ad8 <dcd_int_enable>

  return true;
 800762e:	2301      	movs	r3, #1
}
 8007630:	4618      	mov	r0, r3
 8007632:	3730      	adds	r7, #48	@ 0x30
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	e000edf0 	.word	0xe000edf0
 800763c:	20000cd0 	.word	0x20000cd0
 8007640:	20000cfc 	.word	0x20000cfc
 8007644:	20000028 	.word	0x20000028
 8007648:	2000002c 	.word	0x2000002c
 800764c:	20000dc8 	.word	0x20000dc8
 8007650:	00000000 	.word	0x00000000
 8007654:	20000d04 	.word	0x20000d04
 8007658:	20000d00 	.word	0x20000d00
 800765c:	0800d1b0 	.word	0x0800d1b0
 8007660:	20000025 	.word	0x20000025

08007664 <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8007664:	b580      	push	{r7, lr}
 8007666:	b088      	sub	sp, #32
 8007668:	af00      	add	r7, sp, #0
 800766a:	4603      	mov	r3, r0
 800766c:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 800766e:	2300      	movs	r3, #0
 8007670:	77fb      	strb	r3, [r7, #31]
 8007672:	e034      	b.n	80076de <configuration_reset+0x7a>
 8007674:	7ffb      	ldrb	r3, [r7, #31]
 8007676:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8007678:	2300      	movs	r3, #0
 800767a:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 800767c:	4b25      	ldr	r3, [pc, #148]	@ (8007714 <configuration_reset+0xb0>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	7cfa      	ldrb	r2, [r7, #19]
 8007682:	429a      	cmp	r2, r3
 8007684:	d206      	bcs.n	8007694 <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 8007686:	4b24      	ldr	r3, [pc, #144]	@ (8007718 <configuration_reset+0xb4>)
 8007688:	681a      	ldr	r2, [r3, #0]
 800768a:	7cfb      	ldrb	r3, [r7, #19]
 800768c:	015b      	lsls	r3, r3, #5
 800768e:	4413      	add	r3, r2
 8007690:	60fb      	str	r3, [r7, #12]
 8007692:	e00d      	b.n	80076b0 <configuration_reset+0x4c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007694:	4b1f      	ldr	r3, [pc, #124]	@ (8007714 <configuration_reset+0xb0>)
 8007696:	781b      	ldrb	r3, [r3, #0]
 8007698:	1c5a      	adds	r2, r3, #1
 800769a:	7cfb      	ldrb	r3, [r7, #19]
 800769c:	429a      	cmp	r2, r3
 800769e:	db07      	blt.n	80076b0 <configuration_reset+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80076a0:	7cfb      	ldrb	r3, [r7, #19]
 80076a2:	4a1c      	ldr	r2, [pc, #112]	@ (8007714 <configuration_reset+0xb0>)
 80076a4:	7812      	ldrb	r2, [r2, #0]
 80076a6:	1a9b      	subs	r3, r3, r2
 80076a8:	015b      	lsls	r3, r3, #5
 80076aa:	4a1c      	ldr	r2, [pc, #112]	@ (800771c <configuration_reset+0xb8>)
 80076ac:	4413      	add	r3, r2
 80076ae:	60fb      	str	r3, [r7, #12]
  return driver;
 80076b0:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 80076b2:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d109      	bne.n	80076ce <configuration_reset+0x6a>
 80076ba:	4b19      	ldr	r3, [pc, #100]	@ (8007720 <configuration_reset+0xbc>)
 80076bc:	617b      	str	r3, [r7, #20]
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 0301 	and.w	r3, r3, #1
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d01f      	beq.n	800770a <configuration_reset+0xa6>
 80076ca:	be00      	bkpt	0x0000
 80076cc:	e01d      	b.n	800770a <configuration_reset+0xa6>
    driver->reset(rhport);
 80076ce:	69bb      	ldr	r3, [r7, #24]
 80076d0:	68db      	ldr	r3, [r3, #12]
 80076d2:	79fa      	ldrb	r2, [r7, #7]
 80076d4:	4610      	mov	r0, r2
 80076d6:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80076d8:	7ffb      	ldrb	r3, [r7, #31]
 80076da:	3301      	adds	r3, #1
 80076dc:	77fb      	strb	r3, [r7, #31]
 80076de:	4b0d      	ldr	r3, [pc, #52]	@ (8007714 <configuration_reset+0xb0>)
 80076e0:	781b      	ldrb	r3, [r3, #0]
 80076e2:	1c5a      	adds	r2, r3, #1
 80076e4:	7ffb      	ldrb	r3, [r7, #31]
 80076e6:	429a      	cmp	r2, r3
 80076e8:	dac4      	bge.n	8007674 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 80076ea:	222c      	movs	r2, #44	@ 0x2c
 80076ec:	2100      	movs	r1, #0
 80076ee:	480d      	ldr	r0, [pc, #52]	@ (8007724 <configuration_reset+0xc0>)
 80076f0:	f003 ffa4 	bl	800b63c <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 80076f4:	2210      	movs	r2, #16
 80076f6:	21ff      	movs	r1, #255	@ 0xff
 80076f8:	480b      	ldr	r0, [pc, #44]	@ (8007728 <configuration_reset+0xc4>)
 80076fa:	f003 ff9f 	bl	800b63c <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 80076fe:	220c      	movs	r2, #12
 8007700:	21ff      	movs	r1, #255	@ 0xff
 8007702:	480a      	ldr	r0, [pc, #40]	@ (800772c <configuration_reset+0xc8>)
 8007704:	f003 ff9a 	bl	800b63c <memset>
 8007708:	e000      	b.n	800770c <configuration_reset+0xa8>
    TU_ASSERT(driver,);
 800770a:	bf00      	nop
}
 800770c:	3720      	adds	r7, #32
 800770e:	46bd      	mov	sp, r7
 8007710:	bd80      	pop	{r7, pc}
 8007712:	bf00      	nop
 8007714:	20000d04 	.word	0x20000d04
 8007718:	20000d00 	.word	0x20000d00
 800771c:	0800d1b0 	.word	0x0800d1b0
 8007720:	e000edf0 	.word	0xe000edf0
 8007724:	20000cd0 	.word	0x20000cd0
 8007728:	20000cd4 	.word	0x20000cd4
 800772c:	20000ce4 	.word	0x20000ce4

08007730 <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 8007730:	b580      	push	{r7, lr}
 8007732:	b082      	sub	sp, #8
 8007734:	af00      	add	r7, sp, #0
 8007736:	4603      	mov	r3, r0
 8007738:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 800773a:	79fb      	ldrb	r3, [r7, #7]
 800773c:	4618      	mov	r0, r3
 800773e:	f7ff ff91 	bl	8007664 <configuration_reset>
  usbd_control_reset();
 8007742:	f001 fc37 	bl	8008fb4 <usbd_control_reset>
}
 8007746:	bf00      	nop
 8007748:	3708      	adds	r7, #8
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
	...

08007750 <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 8007750:	b590      	push	{r4, r7, lr}
 8007752:	b093      	sub	sp, #76	@ 0x4c
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	460b      	mov	r3, r1
 800775a:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 800775c:	f7ff feac 	bl	80074b8 <tud_inited>
 8007760:	4603      	mov	r3, r0
 8007762:	f083 0301 	eor.w	r3, r3, #1
 8007766:	b2db      	uxtb	r3, r3
 8007768:	2b00      	cmp	r3, #0
 800776a:	f040 8189 	bne.w	8007a80 <tud_task_ext+0x330>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 800776e:	4bb1      	ldr	r3, [pc, #708]	@ (8007a34 <tud_task_ext+0x2e4>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	633b      	str	r3, [r7, #48]	@ 0x30
 8007774:	f107 030c 	add.w	r3, r7, #12
 8007778:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 800777e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	2000      	movs	r0, #0
 8007784:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 8007786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007788:	3304      	adds	r3, #4
 800778a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800778c:	4618      	mov	r0, r3
 800778e:	f7ff fcee 	bl	800716e <tu_fifo_read>
 8007792:	4603      	mov	r3, r0
 8007794:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 8007798:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	2001      	movs	r0, #1
 800779e:	4798      	blx	r3

  return success;
 80077a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077a4:	f083 0301 	eor.w	r3, r3, #1
 80077a8:	b2db      	uxtb	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f040 816a 	bne.w	8007a84 <tud_task_ext+0x334>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 80077b0:	7b7b      	ldrb	r3, [r7, #13]
 80077b2:	3b01      	subs	r3, #1
 80077b4:	2b07      	cmp	r3, #7
 80077b6:	f200 814b 	bhi.w	8007a50 <tud_task_ext+0x300>
 80077ba:	a201      	add	r2, pc, #4	@ (adr r2, 80077c0 <tud_task_ext+0x70>)
 80077bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077c0:	080077e1 	.word	0x080077e1
 80077c4:	080077f1 	.word	0x080077f1
 80077c8:	08007a05 	.word	0x08007a05
 80077cc:	080079b7 	.word	0x080079b7
 80077d0:	080079e1 	.word	0x080079e1
 80077d4:	080077ff 	.word	0x080077ff
 80077d8:	080078af 	.word	0x080078af
 80077dc:	080079f5 	.word	0x080079f5
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 80077e0:	7b3b      	ldrb	r3, [r7, #12]
 80077e2:	4618      	mov	r0, r3
 80077e4:	f7ff ffa4 	bl	8007730 <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 80077e8:	7c3a      	ldrb	r2, [r7, #16]
 80077ea:	4b93      	ldr	r3, [pc, #588]	@ (8007a38 <tud_task_ext+0x2e8>)
 80077ec:	709a      	strb	r2, [r3, #2]
        break;
 80077ee:	e146      	b.n	8007a7e <tud_task_ext+0x32e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 80077f0:	7b3b      	ldrb	r3, [r7, #12]
 80077f2:	4618      	mov	r0, r3
 80077f4:	f7ff ff9c 	bl	8007730 <usbd_reset>
        tud_umount_cb();
 80077f8:	f7ff fdd1 	bl	800739e <tud_umount_cb>
        break;
 80077fc:	e13f      	b.n	8007a7e <tud_task_ext+0x32e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 80077fe:	4b8f      	ldr	r3, [pc, #572]	@ (8007a3c <tud_task_ext+0x2ec>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	b2db      	uxtb	r3, r3
 8007804:	2b00      	cmp	r3, #0
 8007806:	d10a      	bne.n	800781e <tud_task_ext+0xce>
 8007808:	4b8d      	ldr	r3, [pc, #564]	@ (8007a40 <tud_task_ext+0x2f0>)
 800780a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800780c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f003 0301 	and.w	r3, r3, #1
 8007814:	2b00      	cmp	r3, #0
 8007816:	f000 8137 	beq.w	8007a88 <tud_task_ext+0x338>
 800781a:	be00      	bkpt	0x0000
 800781c:	e134      	b.n	8007a88 <tud_task_ext+0x338>
        _usbd_queued_setup--;
 800781e:	4b87      	ldr	r3, [pc, #540]	@ (8007a3c <tud_task_ext+0x2ec>)
 8007820:	781b      	ldrb	r3, [r3, #0]
 8007822:	b2db      	uxtb	r3, r3
 8007824:	3b01      	subs	r3, #1
 8007826:	b2da      	uxtb	r2, r3
 8007828:	4b84      	ldr	r3, [pc, #528]	@ (8007a3c <tud_task_ext+0x2ec>)
 800782a:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 800782c:	4b83      	ldr	r3, [pc, #524]	@ (8007a3c <tud_task_ext+0x2ec>)
 800782e:	781b      	ldrb	r3, [r3, #0]
 8007830:	b2db      	uxtb	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	f040 8116 	bne.w	8007a64 <tud_task_ext+0x314>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8007838:	4a7f      	ldr	r2, [pc, #508]	@ (8007a38 <tud_task_ext+0x2e8>)
 800783a:	7813      	ldrb	r3, [r2, #0]
 800783c:	f043 0301 	orr.w	r3, r3, #1
 8007840:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 8007842:	4a7d      	ldr	r2, [pc, #500]	@ (8007a38 <tud_task_ext+0x2e8>)
 8007844:	f892 3020 	ldrb.w	r3, [r2, #32]
 8007848:	f023 0301 	bic.w	r3, r3, #1
 800784c:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 8007850:	4a79      	ldr	r2, [pc, #484]	@ (8007a38 <tud_task_ext+0x2e8>)
 8007852:	f892 3020 	ldrb.w	r3, [r2, #32]
 8007856:	f023 0304 	bic.w	r3, r3, #4
 800785a:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 800785e:	4a76      	ldr	r2, [pc, #472]	@ (8007a38 <tud_task_ext+0x2e8>)
 8007860:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8007864:	f023 0301 	bic.w	r3, r3, #1
 8007868:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 800786c:	4a72      	ldr	r2, [pc, #456]	@ (8007a38 <tud_task_ext+0x2e8>)
 800786e:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8007872:	f023 0304 	bic.w	r3, r3, #4
 8007876:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 800787a:	7b3a      	ldrb	r2, [r7, #12]
 800787c:	f107 030c 	add.w	r3, r7, #12
 8007880:	3304      	adds	r3, #4
 8007882:	4619      	mov	r1, r3
 8007884:	4610      	mov	r0, r2
 8007886:	f000 f91f 	bl	8007ac8 <process_control_request>
 800788a:	4603      	mov	r3, r0
 800788c:	f083 0301 	eor.w	r3, r3, #1
 8007890:	b2db      	uxtb	r3, r3
 8007892:	2b00      	cmp	r3, #0
 8007894:	f000 80e8 	beq.w	8007a68 <tud_task_ext+0x318>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8007898:	7b3b      	ldrb	r3, [r7, #12]
 800789a:	2100      	movs	r1, #0
 800789c:	4618      	mov	r0, r3
 800789e:	f002 fb7b 	bl	8009f98 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 80078a2:	7b3b      	ldrb	r3, [r7, #12]
 80078a4:	2180      	movs	r1, #128	@ 0x80
 80078a6:	4618      	mov	r0, r3
 80078a8:	f002 fb76 	bl	8009f98 <dcd_edpt_stall>
        }
        break;
 80078ac:	e0dc      	b.n	8007a68 <tud_task_ext+0x318>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 80078ae:	7c3b      	ldrb	r3, [r7, #16]
 80078b0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80078b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80078b8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80078bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80078c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80078c4:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 80078c6:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80078ca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80078ce:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80078d2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80078d6:	09db      	lsrs	r3, r3, #7
 80078d8:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 80078da:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 80078de:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80078e2:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80078e6:	4954      	ldr	r1, [pc, #336]	@ (8007a38 <tud_task_ext+0x2e8>)
 80078e8:	0052      	lsls	r2, r2, #1
 80078ea:	440a      	add	r2, r1
 80078ec:	4413      	add	r3, r2
 80078ee:	f103 0220 	add.w	r2, r3, #32
 80078f2:	7813      	ldrb	r3, [r2, #0]
 80078f4:	f023 0301 	bic.w	r3, r3, #1
 80078f8:	7013      	strb	r3, [r2, #0]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80078fa:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80078fe:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007902:	494d      	ldr	r1, [pc, #308]	@ (8007a38 <tud_task_ext+0x2e8>)
 8007904:	0052      	lsls	r2, r2, #1
 8007906:	440a      	add	r2, r1
 8007908:	4413      	add	r3, r2
 800790a:	f103 0220 	add.w	r2, r3, #32
 800790e:	7813      	ldrb	r3, [r2, #0]
 8007910:	f023 0304 	bic.w	r3, r3, #4
 8007914:	7013      	strb	r3, [r2, #0]

        if (0 == epnum) {
 8007916:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800791a:	2b00      	cmp	r3, #0
 800791c:	d107      	bne.n	800792e <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 800791e:	7b38      	ldrb	r0, [r7, #12]
 8007920:	7c7a      	ldrb	r2, [r7, #17]
 8007922:	697b      	ldr	r3, [r7, #20]
 8007924:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8007928:	f001 fb7a 	bl	8009020 <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 800792c:	e0a7      	b.n	8007a7e <tud_task_ext+0x32e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 800792e:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 8007932:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8007936:	4940      	ldr	r1, [pc, #256]	@ (8007a38 <tud_task_ext+0x2e8>)
 8007938:	0052      	lsls	r2, r2, #1
 800793a:	440a      	add	r2, r1
 800793c:	4413      	add	r3, r2
 800793e:	3314      	adds	r3, #20
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 8007946:	2300      	movs	r3, #0
 8007948:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 800794a:	4b3e      	ldr	r3, [pc, #248]	@ (8007a44 <tud_task_ext+0x2f4>)
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8007952:	429a      	cmp	r2, r3
 8007954:	d207      	bcs.n	8007966 <tud_task_ext+0x216>
    driver = &_app_driver[drvid];
 8007956:	4b3c      	ldr	r3, [pc, #240]	@ (8007a48 <tud_task_ext+0x2f8>)
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800795e:	015b      	lsls	r3, r3, #5
 8007960:	4413      	add	r3, r2
 8007962:	623b      	str	r3, [r7, #32]
 8007964:	e00f      	b.n	8007986 <tud_task_ext+0x236>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007966:	4b37      	ldr	r3, [pc, #220]	@ (8007a44 <tud_task_ext+0x2f4>)
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	1c5a      	adds	r2, r3, #1
 800796c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007970:	429a      	cmp	r2, r3
 8007972:	db08      	blt.n	8007986 <tud_task_ext+0x236>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007974:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007978:	4a32      	ldr	r2, [pc, #200]	@ (8007a44 <tud_task_ext+0x2f4>)
 800797a:	7812      	ldrb	r2, [r2, #0]
 800797c:	1a9b      	subs	r3, r3, r2
 800797e:	015b      	lsls	r3, r3, #5
 8007980:	4a32      	ldr	r2, [pc, #200]	@ (8007a4c <tud_task_ext+0x2fc>)
 8007982:	4413      	add	r3, r2
 8007984:	623b      	str	r3, [r7, #32]
  return driver;
 8007986:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8007988:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 800798a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800798c:	2b00      	cmp	r3, #0
 800798e:	d109      	bne.n	80079a4 <tud_task_ext+0x254>
 8007990:	4b2b      	ldr	r3, [pc, #172]	@ (8007a40 <tud_task_ext+0x2f0>)
 8007992:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007994:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f003 0301 	and.w	r3, r3, #1
 800799c:	2b00      	cmp	r3, #0
 800799e:	d075      	beq.n	8007a8c <tud_task_ext+0x33c>
 80079a0:	be00      	bkpt	0x0000
 80079a2:	e073      	b.n	8007a8c <tud_task_ext+0x33c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 80079a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80079a6:	699c      	ldr	r4, [r3, #24]
 80079a8:	7b38      	ldrb	r0, [r7, #12]
 80079aa:	7c7a      	ldrb	r2, [r7, #17]
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80079b2:	47a0      	blx	r4
        break;
 80079b4:	e063      	b.n	8007a7e <tud_task_ext+0x32e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 80079b6:	4b20      	ldr	r3, [pc, #128]	@ (8007a38 <tud_task_ext+0x2e8>)
 80079b8:	781b      	ldrb	r3, [r3, #0]
 80079ba:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80079be:	b2db      	uxtb	r3, r3
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d053      	beq.n	8007a6c <tud_task_ext+0x31c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 80079c4:	4b1c      	ldr	r3, [pc, #112]	@ (8007a38 <tud_task_ext+0x2e8>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80079cc:	b2db      	uxtb	r3, r3
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	bf14      	ite	ne
 80079d2:	2301      	movne	r3, #1
 80079d4:	2300      	moveq	r3, #0
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	4618      	mov	r0, r3
 80079da:	f7ff fce7 	bl	80073ac <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80079de:	e045      	b.n	8007a6c <tud_task_ext+0x31c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 80079e0:	4b15      	ldr	r3, [pc, #84]	@ (8007a38 <tud_task_ext+0x2e8>)
 80079e2:	781b      	ldrb	r3, [r3, #0]
 80079e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80079e8:	b2db      	uxtb	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d040      	beq.n	8007a70 <tud_task_ext+0x320>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 80079ee:	f7ff fce8 	bl	80073c2 <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80079f2:	e03d      	b.n	8007a70 <tud_task_ext+0x320>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) {
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d03c      	beq.n	8007a74 <tud_task_ext+0x324>
          event.func_call.func(event.func_call.param);
 80079fa:	693b      	ldr	r3, [r7, #16]
 80079fc:	697a      	ldr	r2, [r7, #20]
 80079fe:	4610      	mov	r0, r2
 8007a00:	4798      	blx	r3
        }
        break;
 8007a02:	e037      	b.n	8007a74 <tud_task_ext+0x324>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8007a04:	4b0c      	ldr	r3, [pc, #48]	@ (8007a38 <tud_task_ext+0x2e8>)
 8007a06:	78db      	ldrb	r3, [r3, #3]
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	61fb      	str	r3, [r7, #28]
 8007a0c:	2300      	movs	r3, #0
 8007a0e:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8007a10:	7efb      	ldrb	r3, [r7, #27]
 8007a12:	69fa      	ldr	r2, [r7, #28]
 8007a14:	fa22 f303 	lsr.w	r3, r2, r3
 8007a18:	f003 0301 	and.w	r3, r3, #1
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	bf14      	ite	ne
 8007a20:	2301      	movne	r3, #1
 8007a22:	2300      	moveq	r3, #0
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d026      	beq.n	8007a78 <tud_task_ext+0x328>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7ff fc89 	bl	8007344 <tud_sof_cb>
        }
      break;
 8007a32:	e021      	b.n	8007a78 <tud_task_ext+0x328>
 8007a34:	20000dc8 	.word	0x20000dc8
 8007a38:	20000cd0 	.word	0x20000cd0
 8007a3c:	20000cfc 	.word	0x20000cfc
 8007a40:	e000edf0 	.word	0xe000edf0
 8007a44:	20000d04 	.word	0x20000d04
 8007a48:	20000d00 	.word	0x20000d00
 8007a4c:	0800d1b0 	.word	0x0800d1b0

      default:
        TU_BREAKPOINT();
 8007a50:	4b10      	ldr	r3, [pc, #64]	@ (8007a94 <tud_task_ext+0x344>)
 8007a52:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d00d      	beq.n	8007a7c <tud_task_ext+0x32c>
 8007a60:	be00      	bkpt	0x0000
        break;
 8007a62:	e00b      	b.n	8007a7c <tud_task_ext+0x32c>
          break;
 8007a64:	bf00      	nop
 8007a66:	e682      	b.n	800776e <tud_task_ext+0x1e>
        break;
 8007a68:	bf00      	nop
 8007a6a:	e680      	b.n	800776e <tud_task_ext+0x1e>
        break;
 8007a6c:	bf00      	nop
 8007a6e:	e67e      	b.n	800776e <tud_task_ext+0x1e>
        break;
 8007a70:	bf00      	nop
 8007a72:	e67c      	b.n	800776e <tud_task_ext+0x1e>
        break;
 8007a74:	bf00      	nop
 8007a76:	e67a      	b.n	800776e <tud_task_ext+0x1e>
      break;
 8007a78:	bf00      	nop
 8007a7a:	e678      	b.n	800776e <tud_task_ext+0x1e>
        break;
 8007a7c:	bf00      	nop
  while (1) {
 8007a7e:	e676      	b.n	800776e <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 8007a80:	bf00      	nop
 8007a82:	e004      	b.n	8007a8e <tud_task_ext+0x33e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8007a84:	bf00      	nop
 8007a86:	e002      	b.n	8007a8e <tud_task_ext+0x33e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8007a88:	bf00      	nop
 8007a8a:	e000      	b.n	8007a8e <tud_task_ext+0x33e>
          TU_ASSERT(driver,);
 8007a8c:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) { return; }
#endif
  }
}
 8007a8e:	374c      	adds	r7, #76	@ 0x4c
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd90      	pop	{r4, r7, pc}
 8007a94:	e000edf0 	.word	0xe000edf0

08007a98 <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b084      	sub	sp, #16
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	607a      	str	r2, [r7, #4]
 8007aa4:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	695b      	ldr	r3, [r3, #20]
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f001 fa8e 	bl	8008fcc <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	695b      	ldr	r3, [r3, #20]
 8007ab4:	7bf8      	ldrb	r0, [r7, #15]
 8007ab6:	687a      	ldr	r2, [r7, #4]
 8007ab8:	2101      	movs	r1, #1
 8007aba:	4798      	blx	r3
 8007abc:	4603      	mov	r3, r0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3710      	adds	r7, #16
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
	...

08007ac8 <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b09a      	sub	sp, #104	@ 0x68
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	4603      	mov	r3, r0
 8007ad0:	6039      	str	r1, [r7, #0]
 8007ad2:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 8007ad4:	2000      	movs	r0, #0
 8007ad6:	f001 fa79 	bl	8008fcc <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 8007ada:	683b      	ldr	r3, [r7, #0]
 8007adc:	781b      	ldrb	r3, [r3, #0]
 8007ade:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007ae2:	b2db      	uxtb	r3, r3
 8007ae4:	2b60      	cmp	r3, #96	@ 0x60
 8007ae6:	d10a      	bne.n	8007afe <process_control_request+0x36>
 8007ae8:	4ba5      	ldr	r3, [pc, #660]	@ (8007d80 <process_control_request+0x2b8>)
 8007aea:	633b      	str	r3, [r7, #48]	@ 0x30
 8007aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	f003 0301 	and.w	r3, r3, #1
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d000      	beq.n	8007afa <process_control_request+0x32>
 8007af8:	be00      	bkpt	0x0000
 8007afa:	2300      	movs	r3, #0
 8007afc:	e2bb      	b.n	8008076 <process_control_request+0x5ae>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	2b40      	cmp	r3, #64	@ 0x40
 8007b0a:	d10a      	bne.n	8007b22 <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8007b0c:	489d      	ldr	r0, [pc, #628]	@ (8007d84 <process_control_request+0x2bc>)
 8007b0e:	f001 fa5d 	bl	8008fcc <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 8007b12:	79fb      	ldrb	r3, [r7, #7]
 8007b14:	683a      	ldr	r2, [r7, #0]
 8007b16:	2101      	movs	r1, #1
 8007b18:	4618      	mov	r0, r3
 8007b1a:	f7ff fc59 	bl	80073d0 <tud_vendor_control_xfer_cb>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	e2a9      	b.n	8008076 <process_control_request+0x5ae>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 8007b22:	683b      	ldr	r3, [r7, #0]
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8007b2a:	b2db      	uxtb	r3, r3
 8007b2c:	2b02      	cmp	r3, #2
 8007b2e:	f000 81ca 	beq.w	8007ec6 <process_control_request+0x3fe>
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	f300 8292 	bgt.w	800805c <process_control_request+0x594>
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d003      	beq.n	8007b44 <process_control_request+0x7c>
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	f000 8151 	beq.w	8007de4 <process_control_request+0x31c>
 8007b42:	e28b      	b.n	800805c <process_control_request+0x594>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 8007b44:	683b      	ldr	r3, [r7, #0]
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b20      	cmp	r3, #32
 8007b50:	d143      	bne.n	8007bda <process_control_request+0x112>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	889b      	ldrh	r3, [r3, #4]
 8007b56:	b29b      	uxth	r3, r3
 8007b58:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8007b5a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8007b62:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007b66:	2b0f      	cmp	r3, #15
 8007b68:	d901      	bls.n	8007b6e <process_control_request+0xa6>
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	e283      	b.n	8008076 <process_control_request+0x5ae>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8007b6e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007b72:	4a85      	ldr	r2, [pc, #532]	@ (8007d88 <process_control_request+0x2c0>)
 8007b74:	4413      	add	r3, r2
 8007b76:	791b      	ldrb	r3, [r3, #4]
 8007b78:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 8007b80:	4b82      	ldr	r3, [pc, #520]	@ (8007d8c <process_control_request+0x2c4>)
 8007b82:	781b      	ldrb	r3, [r3, #0]
 8007b84:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8007b88:	429a      	cmp	r2, r3
 8007b8a:	d207      	bcs.n	8007b9c <process_control_request+0xd4>
    driver = &_app_driver[drvid];
 8007b8c:	4b80      	ldr	r3, [pc, #512]	@ (8007d90 <process_control_request+0x2c8>)
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007b94:	015b      	lsls	r3, r3, #5
 8007b96:	4413      	add	r3, r2
 8007b98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007b9a:	e00f      	b.n	8007bbc <process_control_request+0xf4>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007b9c:	4b7b      	ldr	r3, [pc, #492]	@ (8007d8c <process_control_request+0x2c4>)
 8007b9e:	781b      	ldrb	r3, [r3, #0]
 8007ba0:	1c5a      	adds	r2, r3, #1
 8007ba2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	db08      	blt.n	8007bbc <process_control_request+0xf4>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007baa:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8007bae:	4a77      	ldr	r2, [pc, #476]	@ (8007d8c <process_control_request+0x2c4>)
 8007bb0:	7812      	ldrb	r2, [r2, #0]
 8007bb2:	1a9b      	subs	r3, r3, r2
 8007bb4:	015b      	lsls	r3, r3, #5
 8007bb6:	4a77      	ldr	r2, [pc, #476]	@ (8007d94 <process_control_request+0x2cc>)
 8007bb8:	4413      	add	r3, r2
 8007bba:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 8007bbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8007bbe:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 8007bc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d101      	bne.n	8007bca <process_control_request+0x102>
 8007bc6:	2300      	movs	r3, #0
 8007bc8:	e255      	b.n	8008076 <process_control_request+0x5ae>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 8007bca:	79fb      	ldrb	r3, [r7, #7]
 8007bcc:	683a      	ldr	r2, [r7, #0]
 8007bce:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7ff ff61 	bl	8007a98 <invoke_class_control>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	e24d      	b.n	8008076 <process_control_request+0x5ae>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8007bda:	683b      	ldr	r3, [r7, #0]
 8007bdc:	781b      	ldrb	r3, [r3, #0]
 8007bde:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d00a      	beq.n	8007bfe <process_control_request+0x136>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 8007be8:	4b65      	ldr	r3, [pc, #404]	@ (8007d80 <process_control_request+0x2b8>)
 8007bea:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d000      	beq.n	8007bfa <process_control_request+0x132>
 8007bf8:	be00      	bkpt	0x0000
        return false;
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	e23b      	b.n	8008076 <process_control_request+0x5ae>
      }

      switch ( p_request->bRequest ) {
 8007bfe:	683b      	ldr	r3, [r7, #0]
 8007c00:	785b      	ldrb	r3, [r3, #1]
 8007c02:	2b09      	cmp	r3, #9
 8007c04:	f200 80e1 	bhi.w	8007dca <process_control_request+0x302>
 8007c08:	a201      	add	r2, pc, #4	@ (adr r2, 8007c10 <process_control_request+0x148>)
 8007c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c0e:	bf00      	nop
 8007c10:	08007d99 	.word	0x08007d99
 8007c14:	08007d5d 	.word	0x08007d5d
 8007c18:	08007dcb 	.word	0x08007dcb
 8007c1c:	08007d37 	.word	0x08007d37
 8007c20:	08007dcb 	.word	0x08007dcb
 8007c24:	08007c39 	.word	0x08007c39
 8007c28:	08007d1d 	.word	0x08007d1d
 8007c2c:	08007dcb 	.word	0x08007dcb
 8007c30:	08007c5d 	.word	0x08007c5d
 8007c34:	08007c75 	.word	0x08007c75
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8007c38:	6838      	ldr	r0, [r7, #0]
 8007c3a:	f001 f9d7 	bl	8008fec <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	885b      	ldrh	r3, [r3, #2]
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	b2da      	uxtb	r2, r3
 8007c46:	79fb      	ldrb	r3, [r7, #7]
 8007c48:	4611      	mov	r1, r2
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f001 ff94 	bl	8009b78 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 8007c50:	4a4d      	ldr	r2, [pc, #308]	@ (8007d88 <process_control_request+0x2c0>)
 8007c52:	7813      	ldrb	r3, [r2, #0]
 8007c54:	f043 0302 	orr.w	r3, r3, #2
 8007c58:	7013      	strb	r3, [r2, #0]
        break;
 8007c5a:	e0c2      	b.n	8007de2 <process_control_request+0x31a>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8007c5c:	4b4a      	ldr	r3, [pc, #296]	@ (8007d88 <process_control_request+0x2c0>)
 8007c5e:	785b      	ldrb	r3, [r3, #1]
 8007c60:	b2db      	uxtb	r3, r3
 8007c62:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8007c64:	f107 0213 	add.w	r2, r7, #19
 8007c68:	79f8      	ldrb	r0, [r7, #7]
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	6839      	ldr	r1, [r7, #0]
 8007c6e:	f001 f931 	bl	8008ed4 <tud_control_xfer>
        }
        break;
 8007c72:	e0b6      	b.n	8007de2 <process_control_request+0x31a>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8007c74:	683b      	ldr	r3, [r7, #0]
 8007c76:	885b      	ldrh	r3, [r3, #2]
 8007c78:	b29b      	uxth	r3, r3
 8007c7a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 8007c7e:	4b42      	ldr	r3, [pc, #264]	@ (8007d88 <process_control_request+0x2c0>)
 8007c80:	785b      	ldrb	r3, [r3, #1]
 8007c82:	b2db      	uxtb	r3, r3
 8007c84:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007c88:	429a      	cmp	r2, r3
 8007c8a:	d041      	beq.n	8007d10 <process_control_request+0x248>
            if ( _usbd_dev.cfg_num ) {
 8007c8c:	4b3e      	ldr	r3, [pc, #248]	@ (8007d88 <process_control_request+0x2c0>)
 8007c8e:	785b      	ldrb	r3, [r3, #1]
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d014      	beq.n	8007cc0 <process_control_request+0x1f8>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 8007c96:	79fb      	ldrb	r3, [r7, #7]
 8007c98:	2100      	movs	r1, #0
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f002 f832 	bl	8009d04 <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 8007ca0:	79fb      	ldrb	r3, [r7, #7]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f002 f896 	bl	8009dd4 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 8007ca8:	4b37      	ldr	r3, [pc, #220]	@ (8007d88 <process_control_request+0x2c0>)
 8007caa:	789b      	ldrb	r3, [r3, #2]
 8007cac:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 8007cb0:	79fb      	ldrb	r3, [r7, #7]
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	f7ff fcd6 	bl	8007664 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 8007cb8:	4a33      	ldr	r2, [pc, #204]	@ (8007d88 <process_control_request+0x2c0>)
 8007cba:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8007cbe:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 8007cc0:	4a31      	ldr	r2, [pc, #196]	@ (8007d88 <process_control_request+0x2c0>)
 8007cc2:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007cc6:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 8007cc8:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d01d      	beq.n	8007d0c <process_control_request+0x244>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 8007cd0:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8007cd4:	79fb      	ldrb	r3, [r7, #7]
 8007cd6:	4611      	mov	r1, r2
 8007cd8:	4618      	mov	r0, r3
 8007cda:	f000 f9d5 	bl	8008088 <process_set_config>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	f083 0301 	eor.w	r3, r3, #1
 8007ce4:	b2db      	uxtb	r3, r3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00d      	beq.n	8007d06 <process_control_request+0x23e>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 8007cea:	4b25      	ldr	r3, [pc, #148]	@ (8007d80 <process_control_request+0x2b8>)
 8007cec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f003 0301 	and.w	r3, r3, #1
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d000      	beq.n	8007cfc <process_control_request+0x234>
 8007cfa:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 8007cfc:	4b22      	ldr	r3, [pc, #136]	@ (8007d88 <process_control_request+0x2c0>)
 8007cfe:	2200      	movs	r2, #0
 8007d00:	705a      	strb	r2, [r3, #1]
                return false;
 8007d02:	2300      	movs	r3, #0
 8007d04:	e1b7      	b.n	8008076 <process_control_request+0x5ae>
              }
              tud_mount_cb();
 8007d06:	f7ff fb43 	bl	8007390 <tud_mount_cb>
 8007d0a:	e001      	b.n	8007d10 <process_control_request+0x248>
            } else {
              tud_umount_cb();
 8007d0c:	f7ff fb47 	bl	800739e <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 8007d10:	79fb      	ldrb	r3, [r7, #7]
 8007d12:	6839      	ldr	r1, [r7, #0]
 8007d14:	4618      	mov	r0, r3
 8007d16:	f001 f86b 	bl	8008df0 <tud_control_status>
        }
        break;
 8007d1a:	e062      	b.n	8007de2 <process_control_request+0x31a>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 8007d1c:	79fb      	ldrb	r3, [r7, #7]
 8007d1e:	6839      	ldr	r1, [r7, #0]
 8007d20:	4618      	mov	r0, r3
 8007d22:	f000 fae5 	bl	80082f0 <process_get_descriptor>
 8007d26:	4603      	mov	r3, r0
 8007d28:	f083 0301 	eor.w	r3, r3, #1
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d056      	beq.n	8007de0 <process_control_request+0x318>
 8007d32:	2300      	movs	r3, #0
 8007d34:	e19f      	b.n	8008076 <process_control_request+0x5ae>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 8007d36:	683b      	ldr	r3, [r7, #0]
 8007d38:	885b      	ldrh	r3, [r3, #2]
 8007d3a:	b29b      	uxth	r3, r3
 8007d3c:	2b01      	cmp	r3, #1
 8007d3e:	d10b      	bne.n	8007d58 <process_control_request+0x290>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 8007d40:	4a11      	ldr	r2, [pc, #68]	@ (8007d88 <process_control_request+0x2c0>)
 8007d42:	7813      	ldrb	r3, [r2, #0]
 8007d44:	f043 0308 	orr.w	r3, r3, #8
 8007d48:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 8007d4a:	79fb      	ldrb	r3, [r7, #7]
 8007d4c:	6839      	ldr	r1, [r7, #0]
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f001 f84e 	bl	8008df0 <tud_control_status>
            break;
 8007d54:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 8007d56:	e044      	b.n	8007de2 <process_control_request+0x31a>
            default: return false;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	e18c      	b.n	8008076 <process_control_request+0x5ae>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	885b      	ldrh	r3, [r3, #2]
 8007d60:	b29b      	uxth	r3, r3
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d001      	beq.n	8007d6a <process_control_request+0x2a2>
 8007d66:	2300      	movs	r3, #0
 8007d68:	e185      	b.n	8008076 <process_control_request+0x5ae>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8007d6a:	4a07      	ldr	r2, [pc, #28]	@ (8007d88 <process_control_request+0x2c0>)
 8007d6c:	7813      	ldrb	r3, [r2, #0]
 8007d6e:	f023 0308 	bic.w	r3, r3, #8
 8007d72:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8007d74:	79fb      	ldrb	r3, [r7, #7]
 8007d76:	6839      	ldr	r1, [r7, #0]
 8007d78:	4618      	mov	r0, r3
 8007d7a:	f001 f839 	bl	8008df0 <tud_control_status>
        break;
 8007d7e:	e030      	b.n	8007de2 <process_control_request+0x31a>
 8007d80:	e000edf0 	.word	0xe000edf0
 8007d84:	080073d1 	.word	0x080073d1
 8007d88:	20000cd0 	.word	0x20000cd0
 8007d8c:	20000d04 	.word	0x20000d04
 8007d90:	20000d00 	.word	0x20000d00
 8007d94:	0800d1b0 	.word	0x0800d1b0

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8007d98:	4b94      	ldr	r3, [pc, #592]	@ (8007fec <process_control_request+0x524>)
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	095b      	lsrs	r3, r3, #5
 8007d9e:	b2db      	uxtb	r3, r3
 8007da0:	f003 0301 	and.w	r3, r3, #1
 8007da4:	b29a      	uxth	r2, r3
 8007da6:	4b91      	ldr	r3, [pc, #580]	@ (8007fec <process_control_request+0x524>)
 8007da8:	781b      	ldrb	r3, [r3, #0]
 8007daa:	089b      	lsrs	r3, r3, #2
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	f003 0302 	and.w	r3, r3, #2
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	4313      	orrs	r3, r2
 8007db6:	b29b      	uxth	r3, r3
 8007db8:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 8007dba:	f107 0210 	add.w	r2, r7, #16
 8007dbe:	79f8      	ldrb	r0, [r7, #7]
 8007dc0:	2302      	movs	r3, #2
 8007dc2:	6839      	ldr	r1, [r7, #0]
 8007dc4:	f001 f886 	bl	8008ed4 <tud_control_xfer>
          break;
 8007dc8:	e00b      	b.n	8007de2 <process_control_request+0x31a>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 8007dca:	4b89      	ldr	r3, [pc, #548]	@ (8007ff0 <process_control_request+0x528>)
 8007dcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8007dce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f003 0301 	and.w	r3, r3, #1
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d000      	beq.n	8007ddc <process_control_request+0x314>
 8007dda:	be00      	bkpt	0x0000
 8007ddc:	2300      	movs	r3, #0
 8007dde:	e14a      	b.n	8008076 <process_control_request+0x5ae>
        break;
 8007de0:	bf00      	nop
      }
    break;
 8007de2:	e147      	b.n	8008074 <process_control_request+0x5ac>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	889b      	ldrh	r3, [r3, #4]
 8007de8:	b29b      	uxth	r3, r3
 8007dea:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8007dec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 8007df4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007df8:	2b0f      	cmp	r3, #15
 8007dfa:	d901      	bls.n	8007e00 <process_control_request+0x338>
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	e13a      	b.n	8008076 <process_control_request+0x5ae>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8007e00:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007e04:	4a79      	ldr	r2, [pc, #484]	@ (8007fec <process_control_request+0x524>)
 8007e06:	4413      	add	r3, r2
 8007e08:	791b      	ldrb	r3, [r3, #4]
 8007e0a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8007e12:	4b78      	ldr	r3, [pc, #480]	@ (8007ff4 <process_control_request+0x52c>)
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8007e1a:	429a      	cmp	r2, r3
 8007e1c:	d207      	bcs.n	8007e2e <process_control_request+0x366>
    driver = &_app_driver[drvid];
 8007e1e:	4b76      	ldr	r3, [pc, #472]	@ (8007ff8 <process_control_request+0x530>)
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007e26:	015b      	lsls	r3, r3, #5
 8007e28:	4413      	add	r3, r2
 8007e2a:	623b      	str	r3, [r7, #32]
 8007e2c:	e00f      	b.n	8007e4e <process_control_request+0x386>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007e2e:	4b71      	ldr	r3, [pc, #452]	@ (8007ff4 <process_control_request+0x52c>)
 8007e30:	781b      	ldrb	r3, [r3, #0]
 8007e32:	1c5a      	adds	r2, r3, #1
 8007e34:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	db08      	blt.n	8007e4e <process_control_request+0x386>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007e3c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007e40:	4a6c      	ldr	r2, [pc, #432]	@ (8007ff4 <process_control_request+0x52c>)
 8007e42:	7812      	ldrb	r2, [r2, #0]
 8007e44:	1a9b      	subs	r3, r3, r2
 8007e46:	015b      	lsls	r3, r3, #5
 8007e48:	4a6c      	ldr	r2, [pc, #432]	@ (8007ffc <process_control_request+0x534>)
 8007e4a:	4413      	add	r3, r2
 8007e4c:	623b      	str	r3, [r7, #32]
  return driver;
 8007e4e:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 8007e50:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 8007e52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d101      	bne.n	8007e5c <process_control_request+0x394>
 8007e58:	2300      	movs	r3, #0
 8007e5a:	e10c      	b.n	8008076 <process_control_request+0x5ae>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 8007e5c:	79fb      	ldrb	r3, [r7, #7]
 8007e5e:	683a      	ldr	r2, [r7, #0]
 8007e60:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007e62:	4618      	mov	r0, r3
 8007e64:	f7ff fe18 	bl	8007a98 <invoke_class_control>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	f083 0301 	eor.w	r3, r3, #1
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	f000 80fe 	beq.w	8008072 <process_control_request+0x5aa>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007e7e:	b2db      	uxtb	r3, r3
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d001      	beq.n	8007e88 <process_control_request+0x3c0>
 8007e84:	2300      	movs	r3, #0
 8007e86:	e0f6      	b.n	8008076 <process_control_request+0x5ae>

        switch(p_request->bRequest) {
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	785b      	ldrb	r3, [r3, #1]
 8007e8c:	3b0a      	subs	r3, #10
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d816      	bhi.n	8007ec0 <process_control_request+0x3f8>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 8007e92:	2000      	movs	r0, #0
 8007e94:	f001 f89a 	bl	8008fcc <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	785b      	ldrb	r3, [r3, #1]
 8007e9c:	2b0a      	cmp	r3, #10
 8007e9e:	d109      	bne.n	8007eb4 <process_control_request+0x3ec>
              uint8_t alternate = 0;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 8007ea4:	f107 020f 	add.w	r2, r7, #15
 8007ea8:	79f8      	ldrb	r0, [r7, #7]
 8007eaa:	2301      	movs	r3, #1
 8007eac:	6839      	ldr	r1, [r7, #0]
 8007eae:	f001 f811 	bl	8008ed4 <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 8007eb2:	e007      	b.n	8007ec4 <process_control_request+0x3fc>
              tud_control_status(rhport, p_request);
 8007eb4:	79fb      	ldrb	r3, [r7, #7]
 8007eb6:	6839      	ldr	r1, [r7, #0]
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f000 ff99 	bl	8008df0 <tud_control_status>
          break;
 8007ebe:	e001      	b.n	8007ec4 <process_control_request+0x3fc>

          default: return false;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	e0d8      	b.n	8008076 <process_control_request+0x5ae>
        }
      }
      break;
 8007ec4:	e0d5      	b.n	8008072 <process_control_request+0x5aa>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	889b      	ldrh	r3, [r3, #4]
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	83bb      	strh	r3, [r7, #28]
 8007ece:	8bbb      	ldrh	r3, [r7, #28]
 8007ed0:	b2db      	uxtb	r3, r3
 8007ed2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8007ed6:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007eda:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007edc:	7fbb      	ldrb	r3, [r7, #30]
 8007ede:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ee2:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 8007ee4:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 8007ee8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8007eec:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007eee:	7ffb      	ldrb	r3, [r7, #31]
 8007ef0:	09db      	lsrs	r3, r3, #7
 8007ef2:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 8007ef4:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 8007ef8:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 8007efc:	2b05      	cmp	r3, #5
 8007efe:	d90a      	bls.n	8007f16 <process_control_request+0x44e>
 8007f00:	4b3b      	ldr	r3, [pc, #236]	@ (8007ff0 <process_control_request+0x528>)
 8007f02:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007f04:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	f003 0301 	and.w	r3, r3, #1
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d000      	beq.n	8007f12 <process_control_request+0x44a>
 8007f10:	be00      	bkpt	0x0000
 8007f12:	2300      	movs	r3, #0
 8007f14:	e0af      	b.n	8008076 <process_control_request+0x5ae>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8007f16:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8007f1a:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8007f1e:	4933      	ldr	r1, [pc, #204]	@ (8007fec <process_control_request+0x524>)
 8007f20:	0052      	lsls	r2, r2, #1
 8007f22:	440a      	add	r2, r1
 8007f24:	4413      	add	r3, r2
 8007f26:	3314      	adds	r3, #20
 8007f28:	781b      	ldrb	r3, [r3, #0]
 8007f2a:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 8007f2c:	2300      	movs	r3, #0
 8007f2e:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 8007f30:	4b30      	ldr	r3, [pc, #192]	@ (8007ff4 <process_control_request+0x52c>)
 8007f32:	781b      	ldrb	r3, [r3, #0]
 8007f34:	7efa      	ldrb	r2, [r7, #27]
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d206      	bcs.n	8007f48 <process_control_request+0x480>
    driver = &_app_driver[drvid];
 8007f3a:	4b2f      	ldr	r3, [pc, #188]	@ (8007ff8 <process_control_request+0x530>)
 8007f3c:	681a      	ldr	r2, [r3, #0]
 8007f3e:	7efb      	ldrb	r3, [r7, #27]
 8007f40:	015b      	lsls	r3, r3, #5
 8007f42:	4413      	add	r3, r2
 8007f44:	617b      	str	r3, [r7, #20]
 8007f46:	e00d      	b.n	8007f64 <process_control_request+0x49c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8007f48:	4b2a      	ldr	r3, [pc, #168]	@ (8007ff4 <process_control_request+0x52c>)
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	1c5a      	adds	r2, r3, #1
 8007f4e:	7efb      	ldrb	r3, [r7, #27]
 8007f50:	429a      	cmp	r2, r3
 8007f52:	db07      	blt.n	8007f64 <process_control_request+0x49c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8007f54:	7efb      	ldrb	r3, [r7, #27]
 8007f56:	4a27      	ldr	r2, [pc, #156]	@ (8007ff4 <process_control_request+0x52c>)
 8007f58:	7812      	ldrb	r2, [r2, #0]
 8007f5a:	1a9b      	subs	r3, r3, r2
 8007f5c:	015b      	lsls	r3, r3, #5
 8007f5e:	4a27      	ldr	r2, [pc, #156]	@ (8007ffc <process_control_request+0x534>)
 8007f60:	4413      	add	r3, r2
 8007f62:	617b      	str	r3, [r7, #20]
  return driver;
 8007f64:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8007f66:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	781b      	ldrb	r3, [r3, #0]
 8007f6c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00c      	beq.n	8007f90 <process_control_request+0x4c8>
        // Forward class request to its driver
        TU_VERIFY(driver);
 8007f76:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d101      	bne.n	8007f80 <process_control_request+0x4b8>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	e07a      	b.n	8008076 <process_control_request+0x5ae>
        return invoke_class_control(rhport, driver, p_request);
 8007f80:	79fb      	ldrb	r3, [r7, #7]
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007f86:	4618      	mov	r0, r3
 8007f88:	f7ff fd86 	bl	8007a98 <invoke_class_control>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	e072      	b.n	8008076 <process_control_request+0x5ae>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 8007f90:	683b      	ldr	r3, [r7, #0]
 8007f92:	785b      	ldrb	r3, [r3, #1]
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d017      	beq.n	8007fc8 <process_control_request+0x500>
 8007f98:	2b03      	cmp	r3, #3
 8007f9a:	dc52      	bgt.n	8008042 <process_control_request+0x57a>
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d002      	beq.n	8007fa6 <process_control_request+0x4de>
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d011      	beq.n	8007fc8 <process_control_request+0x500>
 8007fa4:	e04d      	b.n	8008042 <process_control_request+0x57a>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 8007fa6:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8007faa:	79fb      	ldrb	r3, [r7, #7]
 8007fac:	4611      	mov	r1, r2
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f000 fec8 	bl	8008d44 <usbd_edpt_stalled>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 8007fb8:	f107 020c 	add.w	r2, r7, #12
 8007fbc:	79f8      	ldrb	r0, [r7, #7]
 8007fbe:	2302      	movs	r3, #2
 8007fc0:	6839      	ldr	r1, [r7, #0]
 8007fc2:	f000 ff87 	bl	8008ed4 <tud_control_xfer>
          }
          break;
 8007fc6:	e048      	b.n	800805a <process_control_request+0x592>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 8007fc8:	683b      	ldr	r3, [r7, #0]
 8007fca:	885b      	ldrh	r3, [r3, #2]
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d11d      	bne.n	800800e <process_control_request+0x546>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	785b      	ldrb	r3, [r3, #1]
 8007fd6:	2b01      	cmp	r3, #1
 8007fd8:	d112      	bne.n	8008000 <process_control_request+0x538>
                usbd_edpt_clear_stall(rhport, ep_addr);
 8007fda:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8007fde:	79fb      	ldrb	r3, [r7, #7]
 8007fe0:	4611      	mov	r1, r2
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	f000 fe70 	bl	8008cc8 <usbd_edpt_clear_stall>
 8007fe8:	e011      	b.n	800800e <process_control_request+0x546>
 8007fea:	bf00      	nop
 8007fec:	20000cd0 	.word	0x20000cd0
 8007ff0:	e000edf0 	.word	0xe000edf0
 8007ff4:	20000d04 	.word	0x20000d04
 8007ff8:	20000d00 	.word	0x20000d00
 8007ffc:	0800d1b0 	.word	0x0800d1b0
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 8008000:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8008004:	79fb      	ldrb	r3, [r7, #7]
 8008006:	4611      	mov	r1, r2
 8008008:	4618      	mov	r0, r3
 800800a:	f000 fe1f 	bl	8008c4c <usbd_edpt_stall>
              }
            }

            if (driver) {
 800800e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008010:	2b00      	cmp	r3, #0
 8008012:	d021      	beq.n	8008058 <process_control_request+0x590>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8008014:	79fb      	ldrb	r3, [r7, #7]
 8008016:	683a      	ldr	r2, [r7, #0]
 8008018:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800801a:	4618      	mov	r0, r3
 800801c:	f7ff fd3c 	bl	8007a98 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 8008020:	2000      	movs	r0, #0
 8008022:	f000 ffd3 	bl	8008fcc <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8008026:	4b16      	ldr	r3, [pc, #88]	@ (8008080 <process_control_request+0x5b8>)
 8008028:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800802c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008030:	b2db      	uxtb	r3, r3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d110      	bne.n	8008058 <process_control_request+0x590>
 8008036:	79fb      	ldrb	r3, [r7, #7]
 8008038:	6839      	ldr	r1, [r7, #0]
 800803a:	4618      	mov	r0, r3
 800803c:	f000 fed8 	bl	8008df0 <tud_control_status>
            }
          }
          break;
 8008040:	e00a      	b.n	8008058 <process_control_request+0x590>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 8008042:	4b10      	ldr	r3, [pc, #64]	@ (8008084 <process_control_request+0x5bc>)
 8008044:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008046:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	2b00      	cmp	r3, #0
 8008050:	d000      	beq.n	8008054 <process_control_request+0x58c>
 8008052:	be00      	bkpt	0x0000
            return false;
 8008054:	2300      	movs	r3, #0
 8008056:	e00e      	b.n	8008076 <process_control_request+0x5ae>
          break;
 8008058:	bf00      	nop
        }
      }
    }
    break;
 800805a:	e00b      	b.n	8008074 <process_control_request+0x5ac>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 800805c:	4b09      	ldr	r3, [pc, #36]	@ (8008084 <process_control_request+0x5bc>)
 800805e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008060:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f003 0301 	and.w	r3, r3, #1
 8008068:	2b00      	cmp	r3, #0
 800806a:	d000      	beq.n	800806e <process_control_request+0x5a6>
 800806c:	be00      	bkpt	0x0000
      return false;
 800806e:	2300      	movs	r3, #0
 8008070:	e001      	b.n	8008076 <process_control_request+0x5ae>
      break;
 8008072:	bf00      	nop
  }

  return true;
 8008074:	2301      	movs	r3, #1
}
 8008076:	4618      	mov	r0, r3
 8008078:	3768      	adds	r7, #104	@ 0x68
 800807a:	46bd      	mov	sp, r7
 800807c:	bd80      	pop	{r7, pc}
 800807e:	bf00      	nop
 8008080:	20000cd0 	.word	0x20000cd0
 8008084:	e000edf0 	.word	0xe000edf0

08008088 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8008088:	b580      	push	{r7, lr}
 800808a:	b096      	sub	sp, #88	@ 0x58
 800808c:	af00      	add	r7, sp, #0
 800808e:	4603      	mov	r3, r0
 8008090:	460a      	mov	r2, r1
 8008092:	71fb      	strb	r3, [r7, #7]
 8008094:	4613      	mov	r3, r2
 8008096:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8008098:	79bb      	ldrb	r3, [r7, #6]
 800809a:	3b01      	subs	r3, #1
 800809c:	b2db      	uxtb	r3, r3
 800809e:	4618      	mov	r0, r3
 80080a0:	f7fa fde4 	bl	8002c6c <tud_descriptor_configuration_cb>
 80080a4:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 80080a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d003      	beq.n	80080b4 <process_set_config+0x2c>
 80080ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080ae:	785b      	ldrb	r3, [r3, #1]
 80080b0:	2b02      	cmp	r3, #2
 80080b2:	d00a      	beq.n	80080ca <process_set_config+0x42>
 80080b4:	4b87      	ldr	r3, [pc, #540]	@ (80082d4 <process_set_config+0x24c>)
 80080b6:	623b      	str	r3, [r7, #32]
 80080b8:	6a3b      	ldr	r3, [r7, #32]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	f003 0301 	and.w	r3, r3, #1
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d000      	beq.n	80080c6 <process_set_config+0x3e>
 80080c4:	be00      	bkpt	0x0000
 80080c6:	2300      	movs	r3, #0
 80080c8:	e100      	b.n	80082cc <process_set_config+0x244>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 80080ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080cc:	79db      	ldrb	r3, [r3, #7]
 80080ce:	115b      	asrs	r3, r3, #5
 80080d0:	f003 0301 	and.w	r3, r3, #1
 80080d4:	b2d9      	uxtb	r1, r3
 80080d6:	4a80      	ldr	r2, [pc, #512]	@ (80082d8 <process_set_config+0x250>)
 80080d8:	7813      	ldrb	r3, [r2, #0]
 80080da:	f361 1304 	bfi	r3, r1, #4, #1
 80080de:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 80080e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080e2:	79db      	ldrb	r3, [r3, #7]
 80080e4:	119b      	asrs	r3, r3, #6
 80080e6:	f003 0301 	and.w	r3, r3, #1
 80080ea:	b2d9      	uxtb	r1, r3
 80080ec:	4a7a      	ldr	r2, [pc, #488]	@ (80082d8 <process_set_config+0x250>)
 80080ee:	7813      	ldrb	r3, [r2, #0]
 80080f0:	f361 1345 	bfi	r3, r1, #5, #1
 80080f4:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 80080f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080f8:	3309      	adds	r3, #9
 80080fa:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 80080fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080fe:	885b      	ldrh	r3, [r3, #2]
 8008100:	b29b      	uxth	r3, r3
 8008102:	461a      	mov	r2, r3
 8008104:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008106:	4413      	add	r3, r2
 8008108:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 800810a:	e0d9      	b.n	80082c0 <process_set_config+0x238>
  {
    uint8_t assoc_itf_count = 1;
 800810c:	2301      	movs	r3, #1
 800810e:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8008112:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008114:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8008116:	69fb      	ldr	r3, [r7, #28]
 8008118:	3301      	adds	r3, #1
 800811a:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 800811c:	2b0b      	cmp	r3, #11
 800811e:	d10f      	bne.n	8008140 <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8008120:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008122:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 8008124:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008126:	78db      	ldrb	r3, [r3, #3]
 8008128:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 800812c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800812e:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8008134:	697b      	ldr	r3, [r7, #20]
 8008136:	781b      	ldrb	r3, [r3, #0]
 8008138:	461a      	mov	r2, r3
 800813a:	697b      	ldr	r3, [r7, #20]
 800813c:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 800813e:	657b      	str	r3, [r7, #84]	@ 0x54
 8008140:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008142:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8008144:	693b      	ldr	r3, [r7, #16]
 8008146:	3301      	adds	r3, #1
 8008148:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 800814a:	2b04      	cmp	r3, #4
 800814c:	d00a      	beq.n	8008164 <process_set_config+0xdc>
 800814e:	4b61      	ldr	r3, [pc, #388]	@ (80082d4 <process_set_config+0x24c>)
 8008150:	627b      	str	r3, [r7, #36]	@ 0x24
 8008152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f003 0301 	and.w	r3, r3, #1
 800815a:	2b00      	cmp	r3, #0
 800815c:	d000      	beq.n	8008160 <process_set_config+0xd8>
 800815e:	be00      	bkpt	0x0000
 8008160:	2300      	movs	r3, #0
 8008162:	e0b3      	b.n	80082cc <process_set_config+0x244>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8008164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008166:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8008168:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800816a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800816c:	1ad3      	subs	r3, r2, r3
 800816e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8008170:	2300      	movs	r3, #0
 8008172:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8008176:	e089      	b.n	800828c <process_set_config+0x204>
 8008178:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800817c:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 800817e:	2300      	movs	r3, #0
 8008180:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8008182:	4b56      	ldr	r3, [pc, #344]	@ (80082dc <process_set_config+0x254>)
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	7bfa      	ldrb	r2, [r7, #15]
 8008188:	429a      	cmp	r2, r3
 800818a:	d206      	bcs.n	800819a <process_set_config+0x112>
    driver = &_app_driver[drvid];
 800818c:	4b54      	ldr	r3, [pc, #336]	@ (80082e0 <process_set_config+0x258>)
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	7bfb      	ldrb	r3, [r7, #15]
 8008192:	015b      	lsls	r3, r3, #5
 8008194:	4413      	add	r3, r2
 8008196:	60bb      	str	r3, [r7, #8]
 8008198:	e00d      	b.n	80081b6 <process_set_config+0x12e>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800819a:	4b50      	ldr	r3, [pc, #320]	@ (80082dc <process_set_config+0x254>)
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	1c5a      	adds	r2, r3, #1
 80081a0:	7bfb      	ldrb	r3, [r7, #15]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	db07      	blt.n	80081b6 <process_set_config+0x12e>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80081a6:	7bfb      	ldrb	r3, [r7, #15]
 80081a8:	4a4c      	ldr	r2, [pc, #304]	@ (80082dc <process_set_config+0x254>)
 80081aa:	7812      	ldrb	r2, [r2, #0]
 80081ac:	1a9b      	subs	r3, r3, r2
 80081ae:	015b      	lsls	r3, r3, #5
 80081b0:	4a4c      	ldr	r2, [pc, #304]	@ (80082e4 <process_set_config+0x25c>)
 80081b2:	4413      	add	r3, r2
 80081b4:	60bb      	str	r3, [r7, #8]
  return driver;
 80081b6:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 80081b8:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 80081ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d10a      	bne.n	80081d6 <process_set_config+0x14e>
 80081c0:	4b44      	ldr	r3, [pc, #272]	@ (80082d4 <process_set_config+0x24c>)
 80081c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80081c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 0301 	and.w	r3, r3, #1
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d000      	beq.n	80081d2 <process_set_config+0x14a>
 80081d0:	be00      	bkpt	0x0000
 80081d2:	2300      	movs	r3, #0
 80081d4:	e07a      	b.n	80082cc <process_set_config+0x244>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 80081d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081d8:	691b      	ldr	r3, [r3, #16]
 80081da:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80081dc:	79f8      	ldrb	r0, [r7, #7]
 80081de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80081e0:	4798      	blx	r3
 80081e2:	4603      	mov	r3, r0
 80081e4:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 80081e6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80081e8:	2b08      	cmp	r3, #8
 80081ea:	d94a      	bls.n	8008282 <process_set_config+0x1fa>
 80081ec:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80081ee:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80081f0:	429a      	cmp	r2, r3
 80081f2:	d846      	bhi.n	8008282 <process_set_config+0x1fa>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 80081f4:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80081f8:	2b01      	cmp	r3, #1
 80081fa:	d107      	bne.n	800820c <process_set_config+0x184>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 80081fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081fe:	691b      	ldr	r3, [r3, #16]
 8008200:	4a39      	ldr	r2, [pc, #228]	@ (80082e8 <process_set_config+0x260>)
 8008202:	4293      	cmp	r3, r2
 8008204:	d102      	bne.n	800820c <process_set_config+0x184>
 8008206:	2302      	movs	r3, #2
 8008208:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 800820c:	2300      	movs	r3, #0
 800820e:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8008212:	e024      	b.n	800825e <process_set_config+0x1d6>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8008214:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008216:	789a      	ldrb	r2, [r3, #2]
 8008218:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 800821c:	4413      	add	r3, r2
 800821e:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8008222:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8008226:	4a2c      	ldr	r2, [pc, #176]	@ (80082d8 <process_set_config+0x250>)
 8008228:	4413      	add	r3, r2
 800822a:	791b      	ldrb	r3, [r3, #4]
 800822c:	2bff      	cmp	r3, #255	@ 0xff
 800822e:	d00a      	beq.n	8008246 <process_set_config+0x1be>
 8008230:	4b28      	ldr	r3, [pc, #160]	@ (80082d4 <process_set_config+0x24c>)
 8008232:	633b      	str	r3, [r7, #48]	@ 0x30
 8008234:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 0301 	and.w	r3, r3, #1
 800823c:	2b00      	cmp	r3, #0
 800823e:	d000      	beq.n	8008242 <process_set_config+0x1ba>
 8008240:	be00      	bkpt	0x0000
 8008242:	2300      	movs	r3, #0
 8008244:	e042      	b.n	80082cc <process_set_config+0x244>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8008246:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 800824a:	4a23      	ldr	r2, [pc, #140]	@ (80082d8 <process_set_config+0x250>)
 800824c:	4413      	add	r3, r2
 800824e:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8008252:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8008254:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8008258:	3301      	adds	r3, #1
 800825a:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 800825e:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8008262:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8008266:	429a      	cmp	r2, r3
 8008268:	d3d4      	bcc.n	8008214 <process_set_config+0x18c>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 800826a:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 800826e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8008270:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008272:	481e      	ldr	r0, [pc, #120]	@ (80082ec <process_set_config+0x264>)
 8008274:	f003 f81c 	bl	800b2b0 <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8008278:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800827a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800827c:	4413      	add	r3, r2
 800827e:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 8008280:	e00c      	b.n	800829c <process_set_config+0x214>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8008282:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8008286:	3301      	adds	r3, #1
 8008288:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 800828c:	4b13      	ldr	r3, [pc, #76]	@ (80082dc <process_set_config+0x254>)
 800828e:	781b      	ldrb	r3, [r3, #0]
 8008290:	1c5a      	adds	r2, r3, #1
 8008292:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8008296:	429a      	cmp	r2, r3
 8008298:	f6bf af6e 	bge.w	8008178 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 800829c:	4b0f      	ldr	r3, [pc, #60]	@ (80082dc <process_set_config+0x254>)
 800829e:	781b      	ldrb	r3, [r3, #0]
 80082a0:	1c5a      	adds	r2, r3, #1
 80082a2:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 80082a6:	429a      	cmp	r2, r3
 80082a8:	da0a      	bge.n	80082c0 <process_set_config+0x238>
 80082aa:	4b0a      	ldr	r3, [pc, #40]	@ (80082d4 <process_set_config+0x24c>)
 80082ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d000      	beq.n	80082bc <process_set_config+0x234>
 80082ba:	be00      	bkpt	0x0000
 80082bc:	2300      	movs	r3, #0
 80082be:	e005      	b.n	80082cc <process_set_config+0x244>
  while( p_desc < desc_end )
 80082c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80082c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80082c4:	429a      	cmp	r2, r3
 80082c6:	f4ff af21 	bcc.w	800810c <process_set_config+0x84>
  }

  return true;
 80082ca:	2301      	movs	r3, #1
}
 80082cc:	4618      	mov	r0, r3
 80082ce:	3758      	adds	r7, #88	@ 0x58
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}
 80082d4:	e000edf0 	.word	0xe000edf0
 80082d8:	20000cd0 	.word	0x20000cd0
 80082dc:	20000d04 	.word	0x20000d04
 80082e0:	20000d00 	.word	0x20000d00
 80082e4:	0800d1b0 	.word	0x0800d1b0
 80082e8:	08005805 	.word	0x08005805
 80082ec:	20000ce4 	.word	0x20000ce4

080082f0 <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b094      	sub	sp, #80	@ 0x50
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	4603      	mov	r3, r0
 80082f8:	6039      	str	r1, [r7, #0]
 80082fa:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	885b      	ldrh	r3, [r3, #2]
 8008300:	b29b      	uxth	r3, r3
 8008302:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8008304:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8008306:	0a1b      	lsrs	r3, r3, #8
 8008308:	b29b      	uxth	r3, r3
 800830a:	b2db      	uxtb	r3, r3
 800830c:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	885b      	ldrh	r3, [r3, #2]
 8008314:	b29b      	uxth	r3, r3
 8008316:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8008318:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800831a:	b2db      	uxtb	r3, r3
 800831c:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 8008320:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8008324:	3b01      	subs	r3, #1
 8008326:	2b0e      	cmp	r3, #14
 8008328:	f200 80b4 	bhi.w	8008494 <process_get_descriptor+0x1a4>
 800832c:	a201      	add	r2, pc, #4	@ (adr r2, 8008334 <process_get_descriptor+0x44>)
 800832e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008332:	bf00      	nop
 8008334:	08008371 	.word	0x08008371
 8008338:	080083d5 	.word	0x080083d5
 800833c:	0800843b 	.word	0x0800843b
 8008340:	08008495 	.word	0x08008495
 8008344:	08008495 	.word	0x08008495
 8008348:	0800846f 	.word	0x0800846f
 800834c:	080083d5 	.word	0x080083d5
 8008350:	08008495 	.word	0x08008495
 8008354:	08008495 	.word	0x08008495
 8008358:	08008495 	.word	0x08008495
 800835c:	08008495 	.word	0x08008495
 8008360:	08008495 	.word	0x08008495
 8008364:	08008495 	.word	0x08008495
 8008368:	08008495 	.word	0x08008495
 800836c:	080083a3 	.word	0x080083a3
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8008370:	f7fa fc64 	bl	8002c3c <tud_descriptor_device_cb>
 8008374:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 8008376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008378:	2b00      	cmp	r3, #0
 800837a:	d10a      	bne.n	8008392 <process_get_descriptor+0xa2>
 800837c:	4b48      	ldr	r3, [pc, #288]	@ (80084a0 <process_get_descriptor+0x1b0>)
 800837e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008380:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	2b00      	cmp	r3, #0
 800838a:	d000      	beq.n	800838e <process_get_descriptor+0x9e>
 800838c:	be00      	bkpt	0x0000
 800838e:	2300      	movs	r3, #0
 8008390:	e081      	b.n	8008496 <process_get_descriptor+0x1a6>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8008392:	79f8      	ldrb	r0, [r7, #7]
 8008394:	2312      	movs	r3, #18
 8008396:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008398:	6839      	ldr	r1, [r7, #0]
 800839a:	f000 fd9b 	bl	8008ed4 <tud_control_xfer>
 800839e:	4603      	mov	r3, r0
 80083a0:	e079      	b.n	8008496 <process_get_descriptor+0x1a6>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 80083a2:	f7fe ffd9 	bl	8007358 <tud_descriptor_bos_cb>
 80083a6:	4603      	mov	r3, r0
 80083a8:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 80083aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d101      	bne.n	80083b4 <process_get_descriptor+0xc4>
 80083b0:	2300      	movs	r3, #0
 80083b2:	e070      	b.n	8008496 <process_get_descriptor+0x1a6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 80083b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083b6:	3302      	adds	r3, #2
 80083b8:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 80083ba:	6a3b      	ldr	r3, [r7, #32]
 80083bc:	881b      	ldrh	r3, [r3, #0]
 80083be:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 80083c2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083c4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80083c8:	79f8      	ldrb	r0, [r7, #7]
 80083ca:	6839      	ldr	r1, [r7, #0]
 80083cc:	f000 fd82 	bl	8008ed4 <tud_control_xfer>
 80083d0:	4603      	mov	r3, r0
 80083d2:	e060      	b.n	8008496 <process_get_descriptor+0x1a6>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 80083d4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80083d8:	2b02      	cmp	r3, #2
 80083da:	d114      	bne.n	8008406 <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 80083dc:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80083e0:	4618      	mov	r0, r3
 80083e2:	f7fa fc43 	bl	8002c6c <tud_descriptor_configuration_cb>
 80083e6:	4603      	mov	r3, r0
 80083e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 80083ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d116      	bne.n	800841e <process_get_descriptor+0x12e>
 80083f0:	4b2b      	ldr	r3, [pc, #172]	@ (80084a0 <process_get_descriptor+0x1b0>)
 80083f2:	637b      	str	r3, [r7, #52]	@ 0x34
 80083f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f003 0301 	and.w	r3, r3, #1
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d000      	beq.n	8008402 <process_get_descriptor+0x112>
 8008400:	be00      	bkpt	0x0000
 8008402:	2300      	movs	r3, #0
 8008404:	e047      	b.n	8008496 <process_get_descriptor+0x1a6>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8008406:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800840a:	4618      	mov	r0, r3
 800840c:	f7fe ffb4 	bl	8007378 <tud_descriptor_other_speed_configuration_cb>
 8008410:	4603      	mov	r3, r0
 8008412:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 8008414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008416:	2b00      	cmp	r3, #0
 8008418:	d101      	bne.n	800841e <process_get_descriptor+0x12e>
 800841a:	2300      	movs	r3, #0
 800841c:	e03b      	b.n	8008496 <process_get_descriptor+0x1a6>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 800841e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008420:	3302      	adds	r3, #2
 8008422:	61fb      	str	r3, [r7, #28]
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 800842a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800842c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800842e:	79f8      	ldrb	r0, [r7, #7]
 8008430:	6839      	ldr	r1, [r7, #0]
 8008432:	f000 fd4f 	bl	8008ed4 <tud_control_xfer>
 8008436:	4603      	mov	r3, r0
 8008438:	e02d      	b.n	8008496 <process_get_descriptor+0x1a6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	889b      	ldrh	r3, [r3, #4]
 800843e:	b29a      	uxth	r2, r3
 8008440:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8008444:	4611      	mov	r1, r2
 8008446:	4618      	mov	r0, r3
 8008448:	f7fa fc1e 	bl	8002c88 <tud_descriptor_string_cb>
 800844c:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 800844e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008450:	2b00      	cmp	r3, #0
 8008452:	d101      	bne.n	8008458 <process_get_descriptor+0x168>
 8008454:	2300      	movs	r3, #0
 8008456:	e01e      	b.n	8008496 <process_get_descriptor+0x1a6>
 8008458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800845a:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800845c:	69bb      	ldr	r3, [r7, #24]
 800845e:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8008460:	79f8      	ldrb	r0, [r7, #7]
 8008462:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008464:	6839      	ldr	r1, [r7, #0]
 8008466:	f000 fd35 	bl	8008ed4 <tud_control_xfer>
 800846a:	4603      	mov	r3, r0
 800846c:	e013      	b.n	8008496 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 800846e:	f7fe ff7b 	bl	8007368 <tud_descriptor_device_qualifier_cb>
 8008472:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 8008474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008476:	2b00      	cmp	r3, #0
 8008478:	d101      	bne.n	800847e <process_get_descriptor+0x18e>
 800847a:	2300      	movs	r3, #0
 800847c:	e00b      	b.n	8008496 <process_get_descriptor+0x1a6>
 800847e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008480:	617b      	str	r3, [r7, #20]
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8008486:	79f8      	ldrb	r0, [r7, #7]
 8008488:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800848a:	6839      	ldr	r1, [r7, #0]
 800848c:	f000 fd22 	bl	8008ed4 <tud_control_xfer>
 8008490:	4603      	mov	r3, r0
 8008492:	e000      	b.n	8008496 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    default: return false;
 8008494:	2300      	movs	r3, #0
  }
}
 8008496:	4618      	mov	r0, r3
 8008498:	3750      	adds	r7, #80	@ 0x50
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}
 800849e:	bf00      	nop
 80084a0:	e000edf0 	.word	0xe000edf0

080084a4 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 80084a4:	b580      	push	{r7, lr}
 80084a6:	b0a0      	sub	sp, #128	@ 0x80
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
 80084ac:	460b      	mov	r3, r1
 80084ae:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 80084b0:	2300      	movs	r3, #0
 80084b2:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	785b      	ldrb	r3, [r3, #1]
 80084ba:	3b02      	subs	r3, #2
 80084bc:	2b04      	cmp	r3, #4
 80084be:	f200 8175 	bhi.w	80087ac <dcd_event_handler+0x308>
 80084c2:	a201      	add	r2, pc, #4	@ (adr r2, 80084c8 <dcd_event_handler+0x24>)
 80084c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084c8:	080084dd 	.word	0x080084dd
 80084cc:	0800854d 	.word	0x0800854d
 80084d0:	08008509 	.word	0x08008509
 80084d4:	0800852b 	.word	0x0800852b
 80084d8:	08008779 	.word	0x08008779
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 80084dc:	4aac      	ldr	r2, [pc, #688]	@ (8008790 <dcd_event_handler+0x2ec>)
 80084de:	7813      	ldrb	r3, [r2, #0]
 80084e0:	f023 0301 	bic.w	r3, r3, #1
 80084e4:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 80084e6:	4aaa      	ldr	r2, [pc, #680]	@ (8008790 <dcd_event_handler+0x2ec>)
 80084e8:	7813      	ldrb	r3, [r2, #0]
 80084ea:	f023 0302 	bic.w	r3, r3, #2
 80084ee:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 80084f0:	4ba7      	ldr	r3, [pc, #668]	@ (8008790 <dcd_event_handler+0x2ec>)
 80084f2:	2200      	movs	r2, #0
 80084f4:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 80084f6:	4aa6      	ldr	r2, [pc, #664]	@ (8008790 <dcd_event_handler+0x2ec>)
 80084f8:	7813      	ldrb	r3, [r2, #0]
 80084fa:	f023 0304 	bic.w	r3, r3, #4
 80084fe:	7013      	strb	r3, [r2, #0]
      send = true;
 8008500:	2301      	movs	r3, #1
 8008502:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8008506:	e15a      	b.n	80087be <dcd_event_handler+0x31a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8008508:	4ba1      	ldr	r3, [pc, #644]	@ (8008790 <dcd_event_handler+0x2ec>)
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008510:	b2db      	uxtb	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	f000 814e 	beq.w	80087b4 <dcd_event_handler+0x310>
        _usbd_dev.suspended = 1;
 8008518:	4a9d      	ldr	r2, [pc, #628]	@ (8008790 <dcd_event_handler+0x2ec>)
 800851a:	7813      	ldrb	r3, [r2, #0]
 800851c:	f043 0304 	orr.w	r3, r3, #4
 8008520:	7013      	strb	r3, [r2, #0]
        send = true;
 8008522:	2301      	movs	r3, #1
 8008524:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8008528:	e144      	b.n	80087b4 <dcd_event_handler+0x310>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 800852a:	4b99      	ldr	r3, [pc, #612]	@ (8008790 <dcd_event_handler+0x2ec>)
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008532:	b2db      	uxtb	r3, r3
 8008534:	2b00      	cmp	r3, #0
 8008536:	f000 813f 	beq.w	80087b8 <dcd_event_handler+0x314>
        _usbd_dev.suspended = 0;
 800853a:	4a95      	ldr	r2, [pc, #596]	@ (8008790 <dcd_event_handler+0x2ec>)
 800853c:	7813      	ldrb	r3, [r2, #0]
 800853e:	f023 0304 	bic.w	r3, r3, #4
 8008542:	7013      	strb	r3, [r2, #0]
        send = true;
 8008544:	2301      	movs	r3, #1
 8008546:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 800854a:	e135      	b.n	80087b8 <dcd_event_handler+0x314>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 800854c:	2300      	movs	r3, #0
 800854e:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8008552:	e039      	b.n	80085c8 <dcd_event_handler+0x124>
 8008554:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8008558:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 800855c:	2300      	movs	r3, #0
 800855e:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 8008560:	4b8c      	ldr	r3, [pc, #560]	@ (8008794 <dcd_event_handler+0x2f0>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8008568:	429a      	cmp	r2, r3
 800856a:	d207      	bcs.n	800857c <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 800856c:	4b8a      	ldr	r3, [pc, #552]	@ (8008798 <dcd_event_handler+0x2f4>)
 800856e:	681a      	ldr	r2, [r3, #0]
 8008570:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008574:	015b      	lsls	r3, r3, #5
 8008576:	4413      	add	r3, r2
 8008578:	673b      	str	r3, [r7, #112]	@ 0x70
 800857a:	e00f      	b.n	800859c <dcd_event_handler+0xf8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800857c:	4b85      	ldr	r3, [pc, #532]	@ (8008794 <dcd_event_handler+0x2f0>)
 800857e:	781b      	ldrb	r3, [r3, #0]
 8008580:	1c5a      	adds	r2, r3, #1
 8008582:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8008586:	429a      	cmp	r2, r3
 8008588:	db08      	blt.n	800859c <dcd_event_handler+0xf8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 800858a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800858e:	4a81      	ldr	r2, [pc, #516]	@ (8008794 <dcd_event_handler+0x2f0>)
 8008590:	7812      	ldrb	r2, [r2, #0]
 8008592:	1a9b      	subs	r3, r3, r2
 8008594:	015b      	lsls	r3, r3, #5
 8008596:	4a81      	ldr	r2, [pc, #516]	@ (800879c <dcd_event_handler+0x2f8>)
 8008598:	4413      	add	r3, r2
 800859a:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 800859c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 800859e:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 80085a0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d00b      	beq.n	80085be <dcd_event_handler+0x11a>
 80085a6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085a8:	69db      	ldr	r3, [r3, #28]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d007      	beq.n	80085be <dcd_event_handler+0x11a>
          driver->sof(event->rhport, event->sof.frame_count);
 80085ae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80085b0:	69db      	ldr	r3, [r3, #28]
 80085b2:	687a      	ldr	r2, [r7, #4]
 80085b4:	7810      	ldrb	r0, [r2, #0]
 80085b6:	687a      	ldr	r2, [r7, #4]
 80085b8:	6852      	ldr	r2, [r2, #4]
 80085ba:	4611      	mov	r1, r2
 80085bc:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 80085be:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80085c2:	3301      	adds	r3, #1
 80085c4:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 80085c8:	4b72      	ldr	r3, [pc, #456]	@ (8008794 <dcd_event_handler+0x2f0>)
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	1c5a      	adds	r2, r3, #1
 80085ce:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80085d2:	429a      	cmp	r2, r3
 80085d4:	dabe      	bge.n	8008554 <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 80085d6:	4b6e      	ldr	r3, [pc, #440]	@ (8008790 <dcd_event_handler+0x2ec>)
 80085d8:	781b      	ldrb	r3, [r3, #0]
 80085da:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80085de:	b2db      	uxtb	r3, r3
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d05a      	beq.n	800869a <dcd_event_handler+0x1f6>
        _usbd_dev.suspended = 0;
 80085e4:	4a6a      	ldr	r2, [pc, #424]	@ (8008790 <dcd_event_handler+0x2ec>)
 80085e6:	7813      	ldrb	r3, [r2, #0]
 80085e8:	f023 0304 	bic.w	r3, r3, #4
 80085ec:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 80085ee:	f107 0314 	add.w	r3, r7, #20
 80085f2:	2200      	movs	r2, #0
 80085f4:	601a      	str	r2, [r3, #0]
 80085f6:	605a      	str	r2, [r3, #4]
 80085f8:	609a      	str	r2, [r3, #8]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	781b      	ldrb	r3, [r3, #0]
 80085fe:	753b      	strb	r3, [r7, #20]
 8008600:	2305      	movs	r3, #5
 8008602:	757b      	strb	r3, [r7, #21]
 8008604:	f107 0314 	add.w	r3, r7, #20
 8008608:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800860a:	78fb      	ldrb	r3, [r7, #3]
 800860c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8008610:	4b63      	ldr	r3, [pc, #396]	@ (80087a0 <dcd_event_handler+0x2fc>)
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	667b      	str	r3, [r7, #100]	@ 0x64
 8008616:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008618:	663b      	str	r3, [r7, #96]	@ 0x60
 800861a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800861e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8008622:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8008626:	f083 0301 	eor.w	r3, r3, #1
 800862a:	b2db      	uxtb	r3, r3
 800862c:	2b00      	cmp	r3, #0
 800862e:	d003      	beq.n	8008638 <dcd_event_handler+0x194>
    qhdl->interrupt_set(false);
 8008630:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2000      	movs	r0, #0
 8008636:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 8008638:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800863a:	3304      	adds	r3, #4
 800863c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800863e:	4618      	mov	r0, r3
 8008640:	f7fe fddd 	bl	80071fe <tu_fifo_write>
 8008644:	4603      	mov	r3, r0
 8008646:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 800864a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800864e:	f083 0301 	eor.w	r3, r3, #1
 8008652:	b2db      	uxtb	r3, r3
 8008654:	2b00      	cmp	r3, #0
 8008656:	d003      	beq.n	8008660 <dcd_event_handler+0x1bc>
    qhdl->interrupt_set(true);
 8008658:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	2001      	movs	r0, #1
 800865e:	4798      	blx	r3
  }

  return success;
 8008660:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8008664:	f083 0301 	eor.w	r3, r3, #1
 8008668:	b2db      	uxtb	r3, r3
 800866a:	2b00      	cmp	r3, #0
 800866c:	d009      	beq.n	8008682 <dcd_event_handler+0x1de>
 800866e:	4b4d      	ldr	r3, [pc, #308]	@ (80087a4 <dcd_event_handler+0x300>)
 8008670:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008672:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f003 0301 	and.w	r3, r3, #1
 800867a:	2b00      	cmp	r3, #0
 800867c:	d00c      	beq.n	8008698 <dcd_event_handler+0x1f4>
 800867e:	be00      	bkpt	0x0000
 8008680:	e00a      	b.n	8008698 <dcd_event_handler+0x1f4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8008682:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008684:	7818      	ldrb	r0, [r3, #0]
 8008686:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008688:	785b      	ldrb	r3, [r3, #1]
 800868a:	4619      	mov	r1, r3
 800868c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8008690:	461a      	mov	r2, r3
 8008692:	f7fe fe49 	bl	8007328 <tud_event_hook_cb>
  return true;
 8008696:	e000      	b.n	800869a <dcd_event_handler+0x1f6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8008698:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 800869a:	4b3d      	ldr	r3, [pc, #244]	@ (8008790 <dcd_event_handler+0x2ec>)
 800869c:	78db      	ldrb	r3, [r3, #3]
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	657b      	str	r3, [r7, #84]	@ 0x54
 80086a2:	2300      	movs	r3, #0
 80086a4:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 80086a8:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 80086ac:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80086ae:	fa22 f303 	lsr.w	r3, r2, r3
 80086b2:	f003 0301 	and.w	r3, r3, #1
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	bf14      	ite	ne
 80086ba:	2301      	movne	r3, #1
 80086bc:	2300      	moveq	r3, #0
 80086be:	b2db      	uxtb	r3, r3
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d07b      	beq.n	80087bc <dcd_event_handler+0x318>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 80086c4:	f107 0308 	add.w	r3, r7, #8
 80086c8:	2200      	movs	r2, #0
 80086ca:	601a      	str	r2, [r3, #0]
 80086cc:	605a      	str	r2, [r3, #4]
 80086ce:	609a      	str	r2, [r3, #8]
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	723b      	strb	r3, [r7, #8]
 80086d6:	2303      	movs	r3, #3
 80086d8:	727b      	strb	r3, [r7, #9]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	60fb      	str	r3, [r7, #12]
 80086e0:	f107 0308 	add.w	r3, r7, #8
 80086e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086e6:	78fb      	ldrb	r3, [r7, #3]
 80086e8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80086ec:	4b2c      	ldr	r3, [pc, #176]	@ (80087a0 <dcd_event_handler+0x2fc>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80086f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80086f6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80086fa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 80086fe:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8008702:	f083 0301 	eor.w	r3, r3, #1
 8008706:	b2db      	uxtb	r3, r3
 8008708:	2b00      	cmp	r3, #0
 800870a:	d003      	beq.n	8008714 <dcd_event_handler+0x270>
    qhdl->interrupt_set(false);
 800870c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	2000      	movs	r0, #0
 8008712:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8008714:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008716:	3304      	adds	r3, #4
 8008718:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800871a:	4618      	mov	r0, r3
 800871c:	f7fe fd6f 	bl	80071fe <tu_fifo_write>
 8008720:	4603      	mov	r3, r0
 8008722:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 8008726:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800872a:	f083 0301 	eor.w	r3, r3, #1
 800872e:	b2db      	uxtb	r3, r3
 8008730:	2b00      	cmp	r3, #0
 8008732:	d003      	beq.n	800873c <dcd_event_handler+0x298>
    qhdl->interrupt_set(true);
 8008734:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	2001      	movs	r0, #1
 800873a:	4798      	blx	r3
  return success;
 800873c:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8008740:	f083 0301 	eor.w	r3, r3, #1
 8008744:	b2db      	uxtb	r3, r3
 8008746:	2b00      	cmp	r3, #0
 8008748:	d009      	beq.n	800875e <dcd_event_handler+0x2ba>
 800874a:	4b16      	ldr	r3, [pc, #88]	@ (80087a4 <dcd_event_handler+0x300>)
 800874c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800874e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008750:	681b      	ldr	r3, [r3, #0]
 8008752:	f003 0301 	and.w	r3, r3, #1
 8008756:	2b00      	cmp	r3, #0
 8008758:	d00c      	beq.n	8008774 <dcd_event_handler+0x2d0>
 800875a:	be00      	bkpt	0x0000
 800875c:	e00a      	b.n	8008774 <dcd_event_handler+0x2d0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 800875e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008760:	7818      	ldrb	r0, [r3, #0]
 8008762:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008764:	785b      	ldrb	r3, [r3, #1]
 8008766:	4619      	mov	r1, r3
 8008768:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800876c:	461a      	mov	r2, r3
 800876e:	f7fe fddb 	bl	8007328 <tud_event_hook_cb>
  return true;
 8008772:	e000      	b.n	8008776 <dcd_event_handler+0x2d2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8008774:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 8008776:	e021      	b.n	80087bc <dcd_event_handler+0x318>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 8008778:	4b0b      	ldr	r3, [pc, #44]	@ (80087a8 <dcd_event_handler+0x304>)
 800877a:	781b      	ldrb	r3, [r3, #0]
 800877c:	b2db      	uxtb	r3, r3
 800877e:	3301      	adds	r3, #1
 8008780:	b2da      	uxtb	r2, r3
 8008782:	4b09      	ldr	r3, [pc, #36]	@ (80087a8 <dcd_event_handler+0x304>)
 8008784:	701a      	strb	r2, [r3, #0]
      send = true;
 8008786:	2301      	movs	r3, #1
 8008788:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 800878c:	e017      	b.n	80087be <dcd_event_handler+0x31a>
 800878e:	bf00      	nop
 8008790:	20000cd0 	.word	0x20000cd0
 8008794:	20000d04 	.word	0x20000d04
 8008798:	20000d00 	.word	0x20000d00
 800879c:	0800d1b0 	.word	0x0800d1b0
 80087a0:	20000dc8 	.word	0x20000dc8
 80087a4:	e000edf0 	.word	0xe000edf0
 80087a8:	20000cfc 	.word	0x20000cfc

    default:
      send = true;
 80087ac:	2301      	movs	r3, #1
 80087ae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 80087b2:	e004      	b.n	80087be <dcd_event_handler+0x31a>
      break;
 80087b4:	bf00      	nop
 80087b6:	e002      	b.n	80087be <dcd_event_handler+0x31a>
      break;
 80087b8:	bf00      	nop
 80087ba:	e000      	b.n	80087be <dcd_event_handler+0x31a>
      break;
 80087bc:	bf00      	nop
  }

  if (send) {
 80087be:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d049      	beq.n	800885a <dcd_event_handler+0x3b6>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80087ca:	78fb      	ldrb	r3, [r7, #3]
 80087cc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80087d0:	4b24      	ldr	r3, [pc, #144]	@ (8008864 <dcd_event_handler+0x3c0>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80087d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087da:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80087de:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 80087e2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80087e6:	f083 0301 	eor.w	r3, r3, #1
 80087ea:	b2db      	uxtb	r3, r3
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d003      	beq.n	80087f8 <dcd_event_handler+0x354>
    qhdl->interrupt_set(false);
 80087f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	2000      	movs	r0, #0
 80087f6:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 80087f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087fa:	3304      	adds	r3, #4
 80087fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80087fe:	4618      	mov	r0, r3
 8008800:	f7fe fcfd 	bl	80071fe <tu_fifo_write>
 8008804:	4603      	mov	r3, r0
 8008806:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 800880a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800880e:	f083 0301 	eor.w	r3, r3, #1
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b00      	cmp	r3, #0
 8008816:	d003      	beq.n	8008820 <dcd_event_handler+0x37c>
    qhdl->interrupt_set(true);
 8008818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	2001      	movs	r0, #1
 800881e:	4798      	blx	r3
  return success;
 8008820:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008824:	f083 0301 	eor.w	r3, r3, #1
 8008828:	b2db      	uxtb	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d009      	beq.n	8008842 <dcd_event_handler+0x39e>
 800882e:	4b0e      	ldr	r3, [pc, #56]	@ (8008868 <dcd_event_handler+0x3c4>)
 8008830:	623b      	str	r3, [r7, #32]
 8008832:	6a3b      	ldr	r3, [r7, #32]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	2b00      	cmp	r3, #0
 800883c:	d00c      	beq.n	8008858 <dcd_event_handler+0x3b4>
 800883e:	be00      	bkpt	0x0000
 8008840:	e00a      	b.n	8008858 <dcd_event_handler+0x3b4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8008842:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008844:	7818      	ldrb	r0, [r3, #0]
 8008846:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008848:	785b      	ldrb	r3, [r3, #1]
 800884a:	4619      	mov	r1, r3
 800884c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008850:	461a      	mov	r2, r3
 8008852:	f7fe fd69 	bl	8007328 <tud_event_hook_cb>
  return true;
 8008856:	e000      	b.n	800885a <dcd_event_handler+0x3b6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8008858:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 800885a:	bf00      	nop
 800885c:	3780      	adds	r7, #128	@ 0x80
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}
 8008862:	bf00      	nop
 8008864:	20000dc8 	.word	0x20000dc8
 8008868:	e000edf0 	.word	0xe000edf0

0800886c <usbd_int_set>:

//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled) {
 800886c:	b580      	push	{r7, lr}
 800886e:	b082      	sub	sp, #8
 8008870:	af00      	add	r7, sp, #0
 8008872:	4603      	mov	r3, r0
 8008874:	71fb      	strb	r3, [r7, #7]
  if (enabled) {
 8008876:	79fb      	ldrb	r3, [r7, #7]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d005      	beq.n	8008888 <usbd_int_set+0x1c>
    dcd_int_enable(_usbd_rhport);
 800887c:	4b07      	ldr	r3, [pc, #28]	@ (800889c <usbd_int_set+0x30>)
 800887e:	781b      	ldrb	r3, [r3, #0]
 8008880:	4618      	mov	r0, r3
 8008882:	f001 f929 	bl	8009ad8 <dcd_int_enable>
  } else {
    dcd_int_disable(_usbd_rhport);
  }
}
 8008886:	e004      	b.n	8008892 <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8008888:	4b04      	ldr	r3, [pc, #16]	@ (800889c <usbd_int_set+0x30>)
 800888a:	781b      	ldrb	r3, [r3, #0]
 800888c:	4618      	mov	r0, r3
 800888e:	f001 f94b 	bl	8009b28 <dcd_int_disable>
}
 8008892:	bf00      	nop
 8008894:	3708      	adds	r7, #8
 8008896:	46bd      	mov	sp, r7
 8008898:	bd80      	pop	{r7, pc}
 800889a:	bf00      	nop
 800889c:	20000025 	.word	0x20000025

080088a0 <usbd_spin_lock>:

void usbd_spin_lock(bool in_isr) {
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	4603      	mov	r3, r0
 80088a8:	71fb      	strb	r3, [r7, #7]
 80088aa:	4b09      	ldr	r3, [pc, #36]	@ (80088d0 <usbd_spin_lock+0x30>)
 80088ac:	60fb      	str	r3, [r7, #12]
 80088ae:	79fb      	ldrb	r3, [r7, #7]
 80088b0:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 80088b2:	7afb      	ldrb	r3, [r7, #11]
 80088b4:	f083 0301 	eor.w	r3, r3, #1
 80088b8:	b2db      	uxtb	r3, r3
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d003      	beq.n	80088c6 <usbd_spin_lock+0x26>
    ctx->interrupt_set(false);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	2000      	movs	r0, #0
 80088c4:	4798      	blx	r3
}
 80088c6:	bf00      	nop
  osal_spin_lock(&_usbd_spin, in_isr);
}
 80088c8:	bf00      	nop
 80088ca:	3710      	adds	r7, #16
 80088cc:	46bd      	mov	sp, r7
 80088ce:	bd80      	pop	{r7, pc}
 80088d0:	20000028 	.word	0x20000028

080088d4 <usbd_spin_unlock>:
void usbd_spin_unlock(bool in_isr) {
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	4603      	mov	r3, r0
 80088dc:	71fb      	strb	r3, [r7, #7]
 80088de:	4b09      	ldr	r3, [pc, #36]	@ (8008904 <usbd_spin_unlock+0x30>)
 80088e0:	60fb      	str	r3, [r7, #12]
 80088e2:	79fb      	ldrb	r3, [r7, #7]
 80088e4:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 80088e6:	7afb      	ldrb	r3, [r7, #11]
 80088e8:	f083 0301 	eor.w	r3, r3, #1
 80088ec:	b2db      	uxtb	r3, r3
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d003      	beq.n	80088fa <usbd_spin_unlock+0x26>
    ctx->interrupt_set(true);
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2001      	movs	r0, #1
 80088f8:	4798      	blx	r3
}
 80088fa:	bf00      	nop
  osal_spin_unlock(&_usbd_spin, in_isr);
}
 80088fc:	bf00      	nop
 80088fe:	3710      	adds	r7, #16
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}
 8008904:	20000028 	.word	0x20000028

08008908 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b08a      	sub	sp, #40	@ 0x28
 800890c:	af00      	add	r7, sp, #0
 800890e:	6039      	str	r1, [r7, #0]
 8008910:	4611      	mov	r1, r2
 8008912:	461a      	mov	r2, r3
 8008914:	4603      	mov	r3, r0
 8008916:	71fb      	strb	r3, [r7, #7]
 8008918:	460b      	mov	r3, r1
 800891a:	71bb      	strb	r3, [r7, #6]
 800891c:	4613      	mov	r3, r2
 800891e:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 8008920:	2300      	movs	r3, #0
 8008922:	627b      	str	r3, [r7, #36]	@ 0x24
 8008924:	e04d      	b.n	80089c2 <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 800892a:	6a3b      	ldr	r3, [r7, #32]
 800892c:	785b      	ldrb	r3, [r3, #1]
 800892e:	2b05      	cmp	r3, #5
 8008930:	d108      	bne.n	8008944 <usbd_open_edpt_pair+0x3c>
 8008932:	6a3b      	ldr	r3, [r7, #32]
 8008934:	78db      	ldrb	r3, [r3, #3]
 8008936:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800893a:	b2db      	uxtb	r3, r3
 800893c:	461a      	mov	r2, r3
 800893e:	797b      	ldrb	r3, [r7, #5]
 8008940:	4293      	cmp	r3, r2
 8008942:	d00a      	beq.n	800895a <usbd_open_edpt_pair+0x52>
 8008944:	4b23      	ldr	r3, [pc, #140]	@ (80089d4 <usbd_open_edpt_pair+0xcc>)
 8008946:	61bb      	str	r3, [r7, #24]
 8008948:	69bb      	ldr	r3, [r7, #24]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 0301 	and.w	r3, r3, #1
 8008950:	2b00      	cmp	r3, #0
 8008952:	d000      	beq.n	8008956 <usbd_open_edpt_pair+0x4e>
 8008954:	be00      	bkpt	0x0000
 8008956:	2300      	movs	r3, #0
 8008958:	e038      	b.n	80089cc <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 800895a:	79fb      	ldrb	r3, [r7, #7]
 800895c:	6a39      	ldr	r1, [r7, #32]
 800895e:	4618      	mov	r0, r3
 8008960:	f000 f83a 	bl	80089d8 <usbd_edpt_open>
 8008964:	4603      	mov	r3, r0
 8008966:	f083 0301 	eor.w	r3, r3, #1
 800896a:	b2db      	uxtb	r3, r3
 800896c:	2b00      	cmp	r3, #0
 800896e:	d00a      	beq.n	8008986 <usbd_open_edpt_pair+0x7e>
 8008970:	4b18      	ldr	r3, [pc, #96]	@ (80089d4 <usbd_open_edpt_pair+0xcc>)
 8008972:	61fb      	str	r3, [r7, #28]
 8008974:	69fb      	ldr	r3, [r7, #28]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0301 	and.w	r3, r3, #1
 800897c:	2b00      	cmp	r3, #0
 800897e:	d000      	beq.n	8008982 <usbd_open_edpt_pair+0x7a>
 8008980:	be00      	bkpt	0x0000
 8008982:	2300      	movs	r3, #0
 8008984:	e022      	b.n	80089cc <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8008986:	6a3b      	ldr	r3, [r7, #32]
 8008988:	789b      	ldrb	r3, [r3, #2]
 800898a:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800898c:	7dfb      	ldrb	r3, [r7, #23]
 800898e:	09db      	lsrs	r3, r3, #7
 8008990:	b2db      	uxtb	r3, r3
 8008992:	2b01      	cmp	r3, #1
 8008994:	d104      	bne.n	80089a0 <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8008996:	6a3b      	ldr	r3, [r7, #32]
 8008998:	789a      	ldrb	r2, [r3, #2]
 800899a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800899c:	701a      	strb	r2, [r3, #0]
 800899e:	e003      	b.n	80089a8 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 80089a0:	6a3b      	ldr	r3, [r7, #32]
 80089a2:	789a      	ldrb	r2, [r3, #2]
 80089a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089a6:	701a      	strb	r2, [r3, #0]
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80089ac:	693b      	ldr	r3, [r7, #16]
 80089ae:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	781b      	ldrb	r3, [r3, #0]
 80089b4:	461a      	mov	r2, r3
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 80089ba:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 80089bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80089be:	3301      	adds	r3, #1
 80089c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80089c2:	79bb      	ldrb	r3, [r7, #6]
 80089c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80089c6:	429a      	cmp	r2, r3
 80089c8:	dbad      	blt.n	8008926 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 80089ca:	2301      	movs	r3, #1
}
 80089cc:	4618      	mov	r0, r3
 80089ce:	3728      	adds	r7, #40	@ 0x28
 80089d0:	46bd      	mov	sp, r7
 80089d2:	bd80      	pop	{r7, pc}
 80089d4:	e000edf0 	.word	0xe000edf0

080089d8 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 80089d8:	b580      	push	{r7, lr}
 80089da:	b086      	sub	sp, #24
 80089dc:	af00      	add	r7, sp, #0
 80089de:	4603      	mov	r3, r0
 80089e0:	6039      	str	r1, [r7, #0]
 80089e2:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 80089e4:	4b1c      	ldr	r3, [pc, #112]	@ (8008a58 <usbd_edpt_open+0x80>)
 80089e6:	781b      	ldrb	r3, [r3, #0]
 80089e8:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 80089ea:	683b      	ldr	r3, [r7, #0]
 80089ec:	789b      	ldrb	r3, [r3, #2]
 80089ee:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80089f0:	7bfb      	ldrb	r3, [r7, #15]
 80089f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80089f6:	b2db      	uxtb	r3, r3
 80089f8:	2b05      	cmp	r3, #5
 80089fa:	d90a      	bls.n	8008a12 <usbd_edpt_open+0x3a>
 80089fc:	4b17      	ldr	r3, [pc, #92]	@ (8008a5c <usbd_edpt_open+0x84>)
 80089fe:	613b      	str	r3, [r7, #16]
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f003 0301 	and.w	r3, r3, #1
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d000      	beq.n	8008a0e <usbd_edpt_open+0x36>
 8008a0c:	be00      	bkpt	0x0000
 8008a0e:	2300      	movs	r3, #0
 8008a10:	e01d      	b.n	8008a4e <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 8008a12:	4b13      	ldr	r3, [pc, #76]	@ (8008a60 <usbd_edpt_open+0x88>)
 8008a14:	789b      	ldrb	r3, [r3, #2]
 8008a16:	2200      	movs	r2, #0
 8008a18:	4619      	mov	r1, r3
 8008a1a:	6838      	ldr	r0, [r7, #0]
 8008a1c:	f002 fbae 	bl	800b17c <tu_edpt_validate>
 8008a20:	4603      	mov	r3, r0
 8008a22:	f083 0301 	eor.w	r3, r3, #1
 8008a26:	b2db      	uxtb	r3, r3
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d00a      	beq.n	8008a42 <usbd_edpt_open+0x6a>
 8008a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8008a5c <usbd_edpt_open+0x84>)
 8008a2e:	617b      	str	r3, [r7, #20]
 8008a30:	697b      	ldr	r3, [r7, #20]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f003 0301 	and.w	r3, r3, #1
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d000      	beq.n	8008a3e <usbd_edpt_open+0x66>
 8008a3c:	be00      	bkpt	0x0000
 8008a3e:	2300      	movs	r3, #0
 8008a40:	e005      	b.n	8008a4e <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 8008a42:	79fb      	ldrb	r3, [r7, #7]
 8008a44:	6839      	ldr	r1, [r7, #0]
 8008a46:	4618      	mov	r0, r3
 8008a48:	f001 f992 	bl	8009d70 <dcd_edpt_open>
 8008a4c:	4603      	mov	r3, r0
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3718      	adds	r7, #24
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	20000025 	.word	0x20000025
 8008a5c:	e000edf0 	.word	0xe000edf0
 8008a60:	20000cd0 	.word	0x20000cd0

08008a64 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	4603      	mov	r3, r0
 8008a6c:	460a      	mov	r2, r1
 8008a6e:	71fb      	strb	r3, [r7, #7]
 8008a70:	4613      	mov	r3, r2
 8008a72:	71bb      	strb	r3, [r7, #6]
 8008a74:	79bb      	ldrb	r3, [r7, #6]
 8008a76:	73bb      	strb	r3, [r7, #14]
 8008a78:	7bbb      	ldrb	r3, [r7, #14]
 8008a7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008a7e:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008a80:	75fb      	strb	r3, [r7, #23]
 8008a82:	79bb      	ldrb	r3, [r7, #6]
 8008a84:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008a86:	7bfb      	ldrb	r3, [r7, #15]
 8008a88:	09db      	lsrs	r3, r3, #7
 8008a8a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008a8c:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8008a8e:	7dfa      	ldrb	r2, [r7, #23]
 8008a90:	7dbb      	ldrb	r3, [r7, #22]
 8008a92:	0052      	lsls	r2, r2, #1
 8008a94:	4413      	add	r3, r2
 8008a96:	3320      	adds	r3, #32
 8008a98:	4a05      	ldr	r2, [pc, #20]	@ (8008ab0 <usbd_edpt_claim+0x4c>)
 8008a9a:	4413      	add	r3, r2
 8008a9c:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 8008a9e:	2100      	movs	r1, #0
 8008aa0:	6938      	ldr	r0, [r7, #16]
 8008aa2:	f002 fb07 	bl	800b0b4 <tu_edpt_claim>
 8008aa6:	4603      	mov	r3, r0
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3718      	adds	r7, #24
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}
 8008ab0:	20000cd0 	.word	0x20000cd0

08008ab4 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b086      	sub	sp, #24
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	4603      	mov	r3, r0
 8008abc:	460a      	mov	r2, r1
 8008abe:	71fb      	strb	r3, [r7, #7]
 8008ac0:	4613      	mov	r3, r2
 8008ac2:	71bb      	strb	r3, [r7, #6]
 8008ac4:	79bb      	ldrb	r3, [r7, #6]
 8008ac6:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
 8008aca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ace:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008ad0:	75fb      	strb	r3, [r7, #23]
 8008ad2:	79bb      	ldrb	r3, [r7, #6]
 8008ad4:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008ad6:	7bfb      	ldrb	r3, [r7, #15]
 8008ad8:	09db      	lsrs	r3, r3, #7
 8008ada:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008adc:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 8008ade:	7dfa      	ldrb	r2, [r7, #23]
 8008ae0:	7dbb      	ldrb	r3, [r7, #22]
 8008ae2:	0052      	lsls	r2, r2, #1
 8008ae4:	4413      	add	r3, r2
 8008ae6:	3320      	adds	r3, #32
 8008ae8:	4a05      	ldr	r2, [pc, #20]	@ (8008b00 <usbd_edpt_release+0x4c>)
 8008aea:	4413      	add	r3, r2
 8008aec:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 8008aee:	2100      	movs	r1, #0
 8008af0:	6938      	ldr	r0, [r7, #16]
 8008af2:	f002 fb19 	bl	800b128 <tu_edpt_release>
 8008af6:	4603      	mov	r3, r0
}
 8008af8:	4618      	mov	r0, r3
 8008afa:	3718      	adds	r7, #24
 8008afc:	46bd      	mov	sp, r7
 8008afe:	bd80      	pop	{r7, pc}
 8008b00:	20000cd0 	.word	0x20000cd0

08008b04 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b086      	sub	sp, #24
 8008b08:	af00      	add	r7, sp, #0
 8008b0a:	603a      	str	r2, [r7, #0]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	4603      	mov	r3, r0
 8008b10:	71fb      	strb	r3, [r7, #7]
 8008b12:	460b      	mov	r3, r1
 8008b14:	71bb      	strb	r3, [r7, #6]
 8008b16:	4613      	mov	r3, r2
 8008b18:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 8008b1a:	4b32      	ldr	r3, [pc, #200]	@ (8008be4 <usbd_edpt_xfer+0xe0>)
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	71fb      	strb	r3, [r7, #7]
 8008b20:	79bb      	ldrb	r3, [r7, #6]
 8008b22:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008b24:	7abb      	ldrb	r3, [r7, #10]
 8008b26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008b2a:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008b2c:	75fb      	strb	r3, [r7, #23]
 8008b2e:	79bb      	ldrb	r3, [r7, #6]
 8008b30:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008b32:	7afb      	ldrb	r3, [r7, #11]
 8008b34:	09db      	lsrs	r3, r3, #7
 8008b36:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008b38:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8008b3a:	7dfa      	ldrb	r2, [r7, #23]
 8008b3c:	7dbb      	ldrb	r3, [r7, #22]
 8008b3e:	492a      	ldr	r1, [pc, #168]	@ (8008be8 <usbd_edpt_xfer+0xe4>)
 8008b40:	0052      	lsls	r2, r2, #1
 8008b42:	440a      	add	r2, r1
 8008b44:	4413      	add	r3, r2
 8008b46:	3320      	adds	r3, #32
 8008b48:	781b      	ldrb	r3, [r3, #0]
 8008b4a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00a      	beq.n	8008b6a <usbd_edpt_xfer+0x66>
 8008b54:	4b25      	ldr	r3, [pc, #148]	@ (8008bec <usbd_edpt_xfer+0xe8>)
 8008b56:	60fb      	str	r3, [r7, #12]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f003 0301 	and.w	r3, r3, #1
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d000      	beq.n	8008b66 <usbd_edpt_xfer+0x62>
 8008b64:	be00      	bkpt	0x0000
 8008b66:	2300      	movs	r3, #0
 8008b68:	e038      	b.n	8008bdc <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8008b6a:	7dfa      	ldrb	r2, [r7, #23]
 8008b6c:	7dbb      	ldrb	r3, [r7, #22]
 8008b6e:	491e      	ldr	r1, [pc, #120]	@ (8008be8 <usbd_edpt_xfer+0xe4>)
 8008b70:	0052      	lsls	r2, r2, #1
 8008b72:	440a      	add	r2, r1
 8008b74:	4413      	add	r3, r2
 8008b76:	f103 0220 	add.w	r2, r3, #32
 8008b7a:	7813      	ldrb	r3, [r2, #0]
 8008b7c:	f043 0301 	orr.w	r3, r3, #1
 8008b80:	7013      	strb	r3, [r2, #0]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 8008b82:	88bb      	ldrh	r3, [r7, #4]
 8008b84:	79b9      	ldrb	r1, [r7, #6]
 8008b86:	79f8      	ldrb	r0, [r7, #7]
 8008b88:	683a      	ldr	r2, [r7, #0]
 8008b8a:	f001 f9b5 	bl	8009ef8 <dcd_edpt_xfer>
 8008b8e:	4603      	mov	r3, r0
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d001      	beq.n	8008b98 <usbd_edpt_xfer+0x94>
    return true;
 8008b94:	2301      	movs	r3, #1
 8008b96:	e021      	b.n	8008bdc <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8008b98:	7dfa      	ldrb	r2, [r7, #23]
 8008b9a:	7dbb      	ldrb	r3, [r7, #22]
 8008b9c:	4912      	ldr	r1, [pc, #72]	@ (8008be8 <usbd_edpt_xfer+0xe4>)
 8008b9e:	0052      	lsls	r2, r2, #1
 8008ba0:	440a      	add	r2, r1
 8008ba2:	4413      	add	r3, r2
 8008ba4:	f103 0220 	add.w	r2, r3, #32
 8008ba8:	7813      	ldrb	r3, [r2, #0]
 8008baa:	f023 0301 	bic.w	r3, r3, #1
 8008bae:	7013      	strb	r3, [r2, #0]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 8008bb0:	7dfa      	ldrb	r2, [r7, #23]
 8008bb2:	7dbb      	ldrb	r3, [r7, #22]
 8008bb4:	490c      	ldr	r1, [pc, #48]	@ (8008be8 <usbd_edpt_xfer+0xe4>)
 8008bb6:	0052      	lsls	r2, r2, #1
 8008bb8:	440a      	add	r2, r1
 8008bba:	4413      	add	r3, r2
 8008bbc:	f103 0220 	add.w	r2, r3, #32
 8008bc0:	7813      	ldrb	r3, [r2, #0]
 8008bc2:	f023 0304 	bic.w	r3, r3, #4
 8008bc6:	7013      	strb	r3, [r2, #0]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 8008bc8:	4b08      	ldr	r3, [pc, #32]	@ (8008bec <usbd_edpt_xfer+0xe8>)
 8008bca:	613b      	str	r3, [r7, #16]
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0301 	and.w	r3, r3, #1
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d000      	beq.n	8008bda <usbd_edpt_xfer+0xd6>
 8008bd8:	be00      	bkpt	0x0000
    return false;
 8008bda:	2300      	movs	r3, #0
  }
}
 8008bdc:	4618      	mov	r0, r3
 8008bde:	3718      	adds	r7, #24
 8008be0:	46bd      	mov	sp, r7
 8008be2:	bd80      	pop	{r7, pc}
 8008be4:	20000025 	.word	0x20000025
 8008be8:	20000cd0 	.word	0x20000cd0
 8008bec:	e000edf0 	.word	0xe000edf0

08008bf0 <usbd_edpt_busy>:
    TU_BREAKPOINT();
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr) {
 8008bf0:	b480      	push	{r7}
 8008bf2:	b085      	sub	sp, #20
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	460a      	mov	r2, r1
 8008bfa:	71fb      	strb	r3, [r7, #7]
 8008bfc:	4613      	mov	r3, r2
 8008bfe:	71bb      	strb	r3, [r7, #6]
 8008c00:	79bb      	ldrb	r3, [r7, #6]
 8008c02:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008c04:	7b3b      	ldrb	r3, [r7, #12]
 8008c06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c0a:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008c0c:	73fb      	strb	r3, [r7, #15]
 8008c0e:	79bb      	ldrb	r3, [r7, #6]
 8008c10:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008c12:	7b7b      	ldrb	r3, [r7, #13]
 8008c14:	09db      	lsrs	r3, r3, #7
 8008c16:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008c18:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 8008c1a:	7bfa      	ldrb	r2, [r7, #15]
 8008c1c:	7bbb      	ldrb	r3, [r7, #14]
 8008c1e:	490a      	ldr	r1, [pc, #40]	@ (8008c48 <usbd_edpt_busy+0x58>)
 8008c20:	0052      	lsls	r2, r2, #1
 8008c22:	440a      	add	r2, r1
 8008c24:	4413      	add	r3, r2
 8008c26:	3320      	adds	r3, #32
 8008c28:	781b      	ldrb	r3, [r3, #0]
 8008c2a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	bf14      	ite	ne
 8008c34:	2301      	movne	r3, #1
 8008c36:	2300      	moveq	r3, #0
 8008c38:	b2db      	uxtb	r3, r3
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3714      	adds	r7, #20
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr
 8008c46:	bf00      	nop
 8008c48:	20000cd0 	.word	0x20000cd0

08008c4c <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b084      	sub	sp, #16
 8008c50:	af00      	add	r7, sp, #0
 8008c52:	4603      	mov	r3, r0
 8008c54:	460a      	mov	r2, r1
 8008c56:	71fb      	strb	r3, [r7, #7]
 8008c58:	4613      	mov	r3, r2
 8008c5a:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8008c5c:	4b18      	ldr	r3, [pc, #96]	@ (8008cc0 <usbd_edpt_stall+0x74>)
 8008c5e:	781b      	ldrb	r3, [r3, #0]
 8008c60:	71fb      	strb	r3, [r7, #7]
 8008c62:	79bb      	ldrb	r3, [r7, #6]
 8008c64:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008c66:	7b3b      	ldrb	r3, [r7, #12]
 8008c68:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008c6c:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008c6e:	73fb      	strb	r3, [r7, #15]
 8008c70:	79bb      	ldrb	r3, [r7, #6]
 8008c72:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008c74:	7b7b      	ldrb	r3, [r7, #13]
 8008c76:	09db      	lsrs	r3, r3, #7
 8008c78:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008c7a:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 8008c7c:	79ba      	ldrb	r2, [r7, #6]
 8008c7e:	79fb      	ldrb	r3, [r7, #7]
 8008c80:	4611      	mov	r1, r2
 8008c82:	4618      	mov	r0, r3
 8008c84:	f001 f988 	bl	8009f98 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 8008c88:	7bfa      	ldrb	r2, [r7, #15]
 8008c8a:	7bbb      	ldrb	r3, [r7, #14]
 8008c8c:	490d      	ldr	r1, [pc, #52]	@ (8008cc4 <usbd_edpt_stall+0x78>)
 8008c8e:	0052      	lsls	r2, r2, #1
 8008c90:	440a      	add	r2, r1
 8008c92:	4413      	add	r3, r2
 8008c94:	f103 0220 	add.w	r2, r3, #32
 8008c98:	7813      	ldrb	r3, [r2, #0]
 8008c9a:	f043 0302 	orr.w	r3, r3, #2
 8008c9e:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8008ca0:	7bfa      	ldrb	r2, [r7, #15]
 8008ca2:	7bbb      	ldrb	r3, [r7, #14]
 8008ca4:	4907      	ldr	r1, [pc, #28]	@ (8008cc4 <usbd_edpt_stall+0x78>)
 8008ca6:	0052      	lsls	r2, r2, #1
 8008ca8:	440a      	add	r2, r1
 8008caa:	4413      	add	r3, r2
 8008cac:	f103 0220 	add.w	r2, r3, #32
 8008cb0:	7813      	ldrb	r3, [r2, #0]
 8008cb2:	f043 0301 	orr.w	r3, r3, #1
 8008cb6:	7013      	strb	r3, [r2, #0]
}
 8008cb8:	bf00      	nop
 8008cba:	3710      	adds	r7, #16
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	bd80      	pop	{r7, pc}
 8008cc0:	20000025 	.word	0x20000025
 8008cc4:	20000cd0 	.word	0x20000cd0

08008cc8 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 8008cc8:	b580      	push	{r7, lr}
 8008cca:	b084      	sub	sp, #16
 8008ccc:	af00      	add	r7, sp, #0
 8008cce:	4603      	mov	r3, r0
 8008cd0:	460a      	mov	r2, r1
 8008cd2:	71fb      	strb	r3, [r7, #7]
 8008cd4:	4613      	mov	r3, r2
 8008cd6:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8008cd8:	4b18      	ldr	r3, [pc, #96]	@ (8008d3c <usbd_edpt_clear_stall+0x74>)
 8008cda:	781b      	ldrb	r3, [r3, #0]
 8008cdc:	71fb      	strb	r3, [r7, #7]
 8008cde:	79bb      	ldrb	r3, [r7, #6]
 8008ce0:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008ce2:	7b3b      	ldrb	r3, [r7, #12]
 8008ce4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008ce8:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008cea:	73fb      	strb	r3, [r7, #15]
 8008cec:	79bb      	ldrb	r3, [r7, #6]
 8008cee:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008cf0:	7b7b      	ldrb	r3, [r7, #13]
 8008cf2:	09db      	lsrs	r3, r3, #7
 8008cf4:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008cf6:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 8008cf8:	79ba      	ldrb	r2, [r7, #6]
 8008cfa:	79fb      	ldrb	r3, [r7, #7]
 8008cfc:	4611      	mov	r1, r2
 8008cfe:	4618      	mov	r0, r3
 8008d00:	f001 f980 	bl	800a004 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8008d04:	7bfa      	ldrb	r2, [r7, #15]
 8008d06:	7bbb      	ldrb	r3, [r7, #14]
 8008d08:	490d      	ldr	r1, [pc, #52]	@ (8008d40 <usbd_edpt_clear_stall+0x78>)
 8008d0a:	0052      	lsls	r2, r2, #1
 8008d0c:	440a      	add	r2, r1
 8008d0e:	4413      	add	r3, r2
 8008d10:	f103 0220 	add.w	r2, r3, #32
 8008d14:	7813      	ldrb	r3, [r2, #0]
 8008d16:	f023 0302 	bic.w	r3, r3, #2
 8008d1a:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 8008d1c:	7bfa      	ldrb	r2, [r7, #15]
 8008d1e:	7bbb      	ldrb	r3, [r7, #14]
 8008d20:	4907      	ldr	r1, [pc, #28]	@ (8008d40 <usbd_edpt_clear_stall+0x78>)
 8008d22:	0052      	lsls	r2, r2, #1
 8008d24:	440a      	add	r2, r1
 8008d26:	4413      	add	r3, r2
 8008d28:	f103 0220 	add.w	r2, r3, #32
 8008d2c:	7813      	ldrb	r3, [r2, #0]
 8008d2e:	f023 0301 	bic.w	r3, r3, #1
 8008d32:	7013      	strb	r3, [r2, #0]
}
 8008d34:	bf00      	nop
 8008d36:	3710      	adds	r7, #16
 8008d38:	46bd      	mov	sp, r7
 8008d3a:	bd80      	pop	{r7, pc}
 8008d3c:	20000025 	.word	0x20000025
 8008d40:	20000cd0 	.word	0x20000cd0

08008d44 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	4603      	mov	r3, r0
 8008d4c:	460a      	mov	r2, r1
 8008d4e:	71fb      	strb	r3, [r7, #7]
 8008d50:	4613      	mov	r3, r2
 8008d52:	71bb      	strb	r3, [r7, #6]
 8008d54:	79bb      	ldrb	r3, [r7, #6]
 8008d56:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8008d58:	7b3b      	ldrb	r3, [r7, #12]
 8008d5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008d5e:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008d60:	73fb      	strb	r3, [r7, #15]
 8008d62:	79bb      	ldrb	r3, [r7, #6]
 8008d64:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8008d66:	7b7b      	ldrb	r3, [r7, #13]
 8008d68:	09db      	lsrs	r3, r3, #7
 8008d6a:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008d6c:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 8008d6e:	7bfa      	ldrb	r2, [r7, #15]
 8008d70:	7bbb      	ldrb	r3, [r7, #14]
 8008d72:	490a      	ldr	r1, [pc, #40]	@ (8008d9c <usbd_edpt_stalled+0x58>)
 8008d74:	0052      	lsls	r2, r2, #1
 8008d76:	440a      	add	r2, r1
 8008d78:	4413      	add	r3, r2
 8008d7a:	3320      	adds	r3, #32
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	bf14      	ite	ne
 8008d88:	2301      	movne	r3, #1
 8008d8a:	2300      	moveq	r3, #0
 8008d8c:	b2db      	uxtb	r3, r3
}
 8008d8e:	4618      	mov	r0, r3
 8008d90:	3714      	adds	r7, #20
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	20000cd0 	.word	0x20000cd0

08008da0 <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, const tusb_control_request_t* request) {
 8008da0:	b480      	push	{r7}
 8008da2:	b083      	sub	sp, #12
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	4603      	mov	r3, r0
 8008da8:	6039      	str	r1, [r7, #0]
 8008daa:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 8008dac:	bf00      	nop
 8008dae:	370c      	adds	r7, #12
 8008db0:	46bd      	mov	sp, r7
 8008db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db6:	4770      	bx	lr

08008db8 <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 8008db8:	b580      	push	{r7, lr}
 8008dba:	b084      	sub	sp, #16
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	6039      	str	r1, [r7, #0]
 8008dc2:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 8008dc4:	683b      	ldr	r3, [r7, #0]
 8008dc6:	781b      	ldrb	r3, [r3, #0]
 8008dc8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008dcc:	b2db      	uxtb	r3, r3
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <status_stage_xact+0x1e>
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	e000      	b.n	8008dd8 <status_stage_xact+0x20>
 8008dd6:	2380      	movs	r3, #128	@ 0x80
 8008dd8:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 8008dda:	7bf9      	ldrb	r1, [r7, #15]
 8008ddc:	79f8      	ldrb	r0, [r7, #7]
 8008dde:	2300      	movs	r3, #0
 8008de0:	2200      	movs	r2, #0
 8008de2:	f7ff fe8f 	bl	8008b04 <usbd_edpt_xfer>
 8008de6:	4603      	mov	r3, r0
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	4603      	mov	r3, r0
 8008df8:	6039      	str	r1, [r7, #0]
 8008dfa:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 8008dfc:	4b0b      	ldr	r3, [pc, #44]	@ (8008e2c <tud_control_status+0x3c>)
 8008dfe:	683a      	ldr	r2, [r7, #0]
 8008e00:	6810      	ldr	r0, [r2, #0]
 8008e02:	6851      	ldr	r1, [r2, #4]
 8008e04:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 8008e06:	4b09      	ldr	r3, [pc, #36]	@ (8008e2c <tud_control_status+0x3c>)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8008e0c:	4b07      	ldr	r3, [pc, #28]	@ (8008e2c <tud_control_status+0x3c>)
 8008e0e:	2200      	movs	r2, #0
 8008e10:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 8008e12:	4b06      	ldr	r3, [pc, #24]	@ (8008e2c <tud_control_status+0x3c>)
 8008e14:	2200      	movs	r2, #0
 8008e16:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 8008e18:	79fb      	ldrb	r3, [r7, #7]
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7ff ffcb 	bl	8008db8 <status_stage_xact>
 8008e22:	4603      	mov	r3, r0
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3708      	adds	r7, #8
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	20000dcc 	.word	0x20000dcc

08008e30 <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 8008e30:	b580      	push	{r7, lr}
 8008e32:	b088      	sub	sp, #32
 8008e34:	af00      	add	r7, sp, #0
 8008e36:	4603      	mov	r3, r0
 8008e38:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8008e3a:	4b24      	ldr	r3, [pc, #144]	@ (8008ecc <data_stage_xact+0x9c>)
 8008e3c:	899a      	ldrh	r2, [r3, #12]
 8008e3e:	4b23      	ldr	r3, [pc, #140]	@ (8008ecc <data_stage_xact+0x9c>)
 8008e40:	89db      	ldrh	r3, [r3, #14]
 8008e42:	1ad3      	subs	r3, r2, r3
 8008e44:	b29b      	uxth	r3, r3
 8008e46:	837b      	strh	r3, [r7, #26]
 8008e48:	2340      	movs	r3, #64	@ 0x40
 8008e4a:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008e4c:	8b7a      	ldrh	r2, [r7, #26]
 8008e4e:	8b3b      	ldrh	r3, [r7, #24]
 8008e50:	4293      	cmp	r3, r2
 8008e52:	bf28      	it	cs
 8008e54:	4613      	movcs	r3, r2
 8008e56:	b29b      	uxth	r3, r3
 8008e58:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 8008e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8008ecc <data_stage_xact+0x9c>)
 8008e60:	781b      	ldrb	r3, [r3, #0]
 8008e62:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008e66:	b2db      	uxtb	r3, r3
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d01e      	beq.n	8008eaa <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 8008e6c:	2380      	movs	r3, #128	@ 0x80
 8008e6e:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 8008e70:	8bbb      	ldrh	r3, [r7, #28]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d019      	beq.n	8008eaa <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 8008e76:	4b15      	ldr	r3, [pc, #84]	@ (8008ecc <data_stage_xact+0x9c>)
 8008e78:	689a      	ldr	r2, [r3, #8]
 8008e7a:	8bbb      	ldrh	r3, [r7, #28]
 8008e7c:	4914      	ldr	r1, [pc, #80]	@ (8008ed0 <data_stage_xact+0xa0>)
 8008e7e:	6179      	str	r1, [r7, #20]
 8008e80:	2140      	movs	r1, #64	@ 0x40
 8008e82:	6139      	str	r1, [r7, #16]
 8008e84:	60fa      	str	r2, [r7, #12]
 8008e86:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 8008e88:	693a      	ldr	r2, [r7, #16]
 8008e8a:	68bb      	ldr	r3, [r7, #8]
 8008e8c:	429a      	cmp	r2, r3
 8008e8e:	d202      	bcs.n	8008e96 <data_stage_xact+0x66>
    return -1;
 8008e90:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008e94:	e005      	b.n	8008ea2 <data_stage_xact+0x72>
  memcpy(dest, src, count);
 8008e96:	68ba      	ldr	r2, [r7, #8]
 8008e98:	68f9      	ldr	r1, [r7, #12]
 8008e9a:	6978      	ldr	r0, [r7, #20]
 8008e9c:	f002 fc5f 	bl	800b75e <memcpy>
  return 0;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d001      	beq.n	8008eaa <data_stage_xact+0x7a>
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	e00b      	b.n	8008ec2 <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 8008eaa:	8bbb      	ldrh	r3, [r7, #28]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d001      	beq.n	8008eb4 <data_stage_xact+0x84>
 8008eb0:	4a07      	ldr	r2, [pc, #28]	@ (8008ed0 <data_stage_xact+0xa0>)
 8008eb2:	e000      	b.n	8008eb6 <data_stage_xact+0x86>
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	8bbb      	ldrh	r3, [r7, #28]
 8008eb8:	7ff9      	ldrb	r1, [r7, #31]
 8008eba:	79f8      	ldrb	r0, [r7, #7]
 8008ebc:	f7ff fe22 	bl	8008b04 <usbd_edpt_xfer>
 8008ec0:	4603      	mov	r3, r0
}
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	3720      	adds	r7, #32
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	bd80      	pop	{r7, pc}
 8008eca:	bf00      	nop
 8008ecc:	20000dcc 	.word	0x20000dcc
 8008ed0:	20000de0 	.word	0x20000de0

08008ed4 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b088      	sub	sp, #32
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	60b9      	str	r1, [r7, #8]
 8008edc:	607a      	str	r2, [r7, #4]
 8008ede:	461a      	mov	r2, r3
 8008ee0:	4603      	mov	r3, r0
 8008ee2:	73fb      	strb	r3, [r7, #15]
 8008ee4:	4613      	mov	r3, r2
 8008ee6:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 8008ee8:	4b30      	ldr	r3, [pc, #192]	@ (8008fac <tud_control_xfer+0xd8>)
 8008eea:	68ba      	ldr	r2, [r7, #8]
 8008eec:	6810      	ldr	r0, [r2, #0]
 8008eee:	6851      	ldr	r1, [r2, #4]
 8008ef0:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 8008ef2:	4a2e      	ldr	r2, [pc, #184]	@ (8008fac <tud_control_xfer+0xd8>)
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 8008ef8:	4b2c      	ldr	r3, [pc, #176]	@ (8008fac <tud_control_xfer+0xd8>)
 8008efa:	2200      	movs	r2, #0
 8008efc:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	88db      	ldrh	r3, [r3, #6]
 8008f02:	b29a      	uxth	r2, r3
 8008f04:	89bb      	ldrh	r3, [r7, #12]
 8008f06:	827b      	strh	r3, [r7, #18]
 8008f08:	4613      	mov	r3, r2
 8008f0a:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008f0c:	8a7a      	ldrh	r2, [r7, #18]
 8008f0e:	8a3b      	ldrh	r3, [r7, #16]
 8008f10:	4293      	cmp	r3, r2
 8008f12:	bf28      	it	cs
 8008f14:	4613      	movcs	r3, r2
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	4b24      	ldr	r3, [pc, #144]	@ (8008fac <tud_control_xfer+0xd8>)
 8008f1a:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	88db      	ldrh	r3, [r3, #6]
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d026      	beq.n	8008f74 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 8008f26:	4b21      	ldr	r3, [pc, #132]	@ (8008fac <tud_control_xfer+0xd8>)
 8008f28:	899b      	ldrh	r3, [r3, #12]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d00d      	beq.n	8008f4a <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d10a      	bne.n	8008f4a <tud_control_xfer+0x76>
 8008f34:	4b1e      	ldr	r3, [pc, #120]	@ (8008fb0 <tud_control_xfer+0xdc>)
 8008f36:	61bb      	str	r3, [r7, #24]
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	f003 0301 	and.w	r3, r3, #1
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d000      	beq.n	8008f46 <tud_control_xfer+0x72>
 8008f44:	be00      	bkpt	0x0000
 8008f46:	2300      	movs	r3, #0
 8008f48:	e02b      	b.n	8008fa2 <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 8008f4a:	7bfb      	ldrb	r3, [r7, #15]
 8008f4c:	4618      	mov	r0, r3
 8008f4e:	f7ff ff6f 	bl	8008e30 <data_stage_xact>
 8008f52:	4603      	mov	r3, r0
 8008f54:	f083 0301 	eor.w	r3, r3, #1
 8008f58:	b2db      	uxtb	r3, r3
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d020      	beq.n	8008fa0 <tud_control_xfer+0xcc>
 8008f5e:	4b14      	ldr	r3, [pc, #80]	@ (8008fb0 <tud_control_xfer+0xdc>)
 8008f60:	617b      	str	r3, [r7, #20]
 8008f62:	697b      	ldr	r3, [r7, #20]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	f003 0301 	and.w	r3, r3, #1
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d000      	beq.n	8008f70 <tud_control_xfer+0x9c>
 8008f6e:	be00      	bkpt	0x0000
 8008f70:	2300      	movs	r3, #0
 8008f72:	e016      	b.n	8008fa2 <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 8008f74:	7bfb      	ldrb	r3, [r7, #15]
 8008f76:	68b9      	ldr	r1, [r7, #8]
 8008f78:	4618      	mov	r0, r3
 8008f7a:	f7ff ff1d 	bl	8008db8 <status_stage_xact>
 8008f7e:	4603      	mov	r3, r0
 8008f80:	f083 0301 	eor.w	r3, r3, #1
 8008f84:	b2db      	uxtb	r3, r3
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d00a      	beq.n	8008fa0 <tud_control_xfer+0xcc>
 8008f8a:	4b09      	ldr	r3, [pc, #36]	@ (8008fb0 <tud_control_xfer+0xdc>)
 8008f8c:	61fb      	str	r3, [r7, #28]
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 0301 	and.w	r3, r3, #1
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d000      	beq.n	8008f9c <tud_control_xfer+0xc8>
 8008f9a:	be00      	bkpt	0x0000
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	e000      	b.n	8008fa2 <tud_control_xfer+0xce>
  }

  return true;
 8008fa0:	2301      	movs	r3, #1
}
 8008fa2:	4618      	mov	r0, r3
 8008fa4:	3720      	adds	r7, #32
 8008fa6:	46bd      	mov	sp, r7
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	20000dcc 	.word	0x20000dcc
 8008fb0:	e000edf0 	.word	0xe000edf0

08008fb4 <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 8008fb4:	b580      	push	{r7, lr}
 8008fb6:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 8008fb8:	2214      	movs	r2, #20
 8008fba:	2100      	movs	r1, #0
 8008fbc:	4802      	ldr	r0, [pc, #8]	@ (8008fc8 <usbd_control_reset+0x14>)
 8008fbe:	f002 fb3d 	bl	800b63c <memset>
}
 8008fc2:	bf00      	nop
 8008fc4:	bd80      	pop	{r7, pc}
 8008fc6:	bf00      	nop
 8008fc8:	20000dcc 	.word	0x20000dcc

08008fcc <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 8008fd4:	4a04      	ldr	r2, [pc, #16]	@ (8008fe8 <usbd_control_set_complete_callback+0x1c>)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	6113      	str	r3, [r2, #16]
}
 8008fda:	bf00      	nop
 8008fdc:	370c      	adds	r7, #12
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	20000dcc 	.word	0x20000dcc

08008fec <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 8008fec:	b480      	push	{r7}
 8008fee:	b083      	sub	sp, #12
 8008ff0:	af00      	add	r7, sp, #0
 8008ff2:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 8008ff4:	4b09      	ldr	r3, [pc, #36]	@ (800901c <usbd_control_set_request+0x30>)
 8008ff6:	687a      	ldr	r2, [r7, #4]
 8008ff8:	6810      	ldr	r0, [r2, #0]
 8008ffa:	6851      	ldr	r1, [r2, #4]
 8008ffc:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 8008ffe:	4b07      	ldr	r3, [pc, #28]	@ (800901c <usbd_control_set_request+0x30>)
 8009000:	2200      	movs	r2, #0
 8009002:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8009004:	4b05      	ldr	r3, [pc, #20]	@ (800901c <usbd_control_set_request+0x30>)
 8009006:	2200      	movs	r2, #0
 8009008:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800900a:	4b04      	ldr	r3, [pc, #16]	@ (800901c <usbd_control_set_request+0x30>)
 800900c:	2200      	movs	r2, #0
 800900e:	819a      	strh	r2, [r3, #12]
}
 8009010:	bf00      	nop
 8009012:	370c      	adds	r7, #12
 8009014:	46bd      	mov	sp, r7
 8009016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800901a:	4770      	bx	lr
 800901c:	20000dcc 	.word	0x20000dcc

08009020 <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8009020:	b580      	push	{r7, lr}
 8009022:	b088      	sub	sp, #32
 8009024:	af00      	add	r7, sp, #0
 8009026:	603b      	str	r3, [r7, #0]
 8009028:	4603      	mov	r3, r0
 800902a:	71fb      	strb	r3, [r7, #7]
 800902c:	460b      	mov	r3, r1
 800902e:	71bb      	strb	r3, [r7, #6]
 8009030:	4613      	mov	r3, r2
 8009032:	717b      	strb	r3, [r7, #5]
 8009034:	79bb      	ldrb	r3, [r7, #6]
 8009036:	73fb      	strb	r3, [r7, #15]
 8009038:	7bfb      	ldrb	r3, [r7, #15]
 800903a:	09db      	lsrs	r3, r3, #7
 800903c:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 800903e:	4a4f      	ldr	r2, [pc, #316]	@ (800917c <usbd_control_xfer_cb+0x15c>)
 8009040:	7812      	ldrb	r2, [r2, #0]
 8009042:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8009046:	b2d2      	uxtb	r2, r2
 8009048:	4293      	cmp	r3, r2
 800904a:	d01e      	beq.n	800908a <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d00a      	beq.n	8009068 <usbd_control_xfer_cb+0x48>
 8009052:	4b4b      	ldr	r3, [pc, #300]	@ (8009180 <usbd_control_xfer_cb+0x160>)
 8009054:	613b      	str	r3, [r7, #16]
 8009056:	693b      	ldr	r3, [r7, #16]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	2b00      	cmp	r3, #0
 8009060:	d000      	beq.n	8009064 <usbd_control_xfer_cb+0x44>
 8009062:	be00      	bkpt	0x0000
 8009064:	2300      	movs	r3, #0
 8009066:	e084      	b.n	8009172 <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8009068:	79fb      	ldrb	r3, [r7, #7]
 800906a:	4944      	ldr	r1, [pc, #272]	@ (800917c <usbd_control_xfer_cb+0x15c>)
 800906c:	4618      	mov	r0, r3
 800906e:	f7ff fe97 	bl	8008da0 <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 8009072:	4b42      	ldr	r3, [pc, #264]	@ (800917c <usbd_control_xfer_cb+0x15c>)
 8009074:	691b      	ldr	r3, [r3, #16]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d005      	beq.n	8009086 <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 800907a:	4b40      	ldr	r3, [pc, #256]	@ (800917c <usbd_control_xfer_cb+0x15c>)
 800907c:	691b      	ldr	r3, [r3, #16]
 800907e:	79f8      	ldrb	r0, [r7, #7]
 8009080:	4a3e      	ldr	r2, [pc, #248]	@ (800917c <usbd_control_xfer_cb+0x15c>)
 8009082:	2103      	movs	r1, #3
 8009084:	4798      	blx	r3
    }

    return true;
 8009086:	2301      	movs	r3, #1
 8009088:	e073      	b.n	8009172 <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 800908a:	4b3c      	ldr	r3, [pc, #240]	@ (800917c <usbd_control_xfer_cb+0x15c>)
 800908c:	781b      	ldrb	r3, [r3, #0]
 800908e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009092:	b2db      	uxtb	r3, r3
 8009094:	2b00      	cmp	r3, #0
 8009096:	d10c      	bne.n	80090b2 <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 8009098:	4b38      	ldr	r3, [pc, #224]	@ (800917c <usbd_control_xfer_cb+0x15c>)
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d101      	bne.n	80090a4 <usbd_control_xfer_cb+0x84>
 80090a0:	2300      	movs	r3, #0
 80090a2:	e066      	b.n	8009172 <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 80090a4:	4b35      	ldr	r3, [pc, #212]	@ (800917c <usbd_control_xfer_cb+0x15c>)
 80090a6:	689b      	ldr	r3, [r3, #8]
 80090a8:	683a      	ldr	r2, [r7, #0]
 80090aa:	4936      	ldr	r1, [pc, #216]	@ (8009184 <usbd_control_xfer_cb+0x164>)
 80090ac:	4618      	mov	r0, r3
 80090ae:	f002 fb56 	bl	800b75e <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 80090b2:	4b32      	ldr	r3, [pc, #200]	@ (800917c <usbd_control_xfer_cb+0x15c>)
 80090b4:	89da      	ldrh	r2, [r3, #14]
 80090b6:	683b      	ldr	r3, [r7, #0]
 80090b8:	b29b      	uxth	r3, r3
 80090ba:	4413      	add	r3, r2
 80090bc:	b29a      	uxth	r2, r3
 80090be:	4b2f      	ldr	r3, [pc, #188]	@ (800917c <usbd_control_xfer_cb+0x15c>)
 80090c0:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 80090c2:	4b2e      	ldr	r3, [pc, #184]	@ (800917c <usbd_control_xfer_cb+0x15c>)
 80090c4:	689a      	ldr	r2, [r3, #8]
 80090c6:	683b      	ldr	r3, [r7, #0]
 80090c8:	4413      	add	r3, r2
 80090ca:	4a2c      	ldr	r2, [pc, #176]	@ (800917c <usbd_control_xfer_cb+0x15c>)
 80090cc:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 80090ce:	4b2b      	ldr	r3, [pc, #172]	@ (800917c <usbd_control_xfer_cb+0x15c>)
 80090d0:	88da      	ldrh	r2, [r3, #6]
 80090d2:	4b2a      	ldr	r3, [pc, #168]	@ (800917c <usbd_control_xfer_cb+0x15c>)
 80090d4:	89db      	ldrh	r3, [r3, #14]
 80090d6:	429a      	cmp	r2, r3
 80090d8:	d002      	beq.n	80090e0 <usbd_control_xfer_cb+0xc0>
 80090da:	683b      	ldr	r3, [r7, #0]
 80090dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80090de:	d831      	bhi.n	8009144 <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 80090e0:	2301      	movs	r3, #1
 80090e2:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 80090e4:	4b25      	ldr	r3, [pc, #148]	@ (800917c <usbd_control_xfer_cb+0x15c>)
 80090e6:	691b      	ldr	r3, [r3, #16]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d007      	beq.n	80090fc <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 80090ec:	4b23      	ldr	r3, [pc, #140]	@ (800917c <usbd_control_xfer_cb+0x15c>)
 80090ee:	691b      	ldr	r3, [r3, #16]
 80090f0:	79f8      	ldrb	r0, [r7, #7]
 80090f2:	4a22      	ldr	r2, [pc, #136]	@ (800917c <usbd_control_xfer_cb+0x15c>)
 80090f4:	2102      	movs	r1, #2
 80090f6:	4798      	blx	r3
 80090f8:	4603      	mov	r3, r0
 80090fa:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 80090fc:	7ffb      	ldrb	r3, [r7, #31]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d015      	beq.n	800912e <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 8009102:	79fb      	ldrb	r3, [r7, #7]
 8009104:	491d      	ldr	r1, [pc, #116]	@ (800917c <usbd_control_xfer_cb+0x15c>)
 8009106:	4618      	mov	r0, r3
 8009108:	f7ff fe56 	bl	8008db8 <status_stage_xact>
 800910c:	4603      	mov	r3, r0
 800910e:	f083 0301 	eor.w	r3, r3, #1
 8009112:	b2db      	uxtb	r3, r3
 8009114:	2b00      	cmp	r3, #0
 8009116:	d02a      	beq.n	800916e <usbd_control_xfer_cb+0x14e>
 8009118:	4b19      	ldr	r3, [pc, #100]	@ (8009180 <usbd_control_xfer_cb+0x160>)
 800911a:	617b      	str	r3, [r7, #20]
 800911c:	697b      	ldr	r3, [r7, #20]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	f003 0301 	and.w	r3, r3, #1
 8009124:	2b00      	cmp	r3, #0
 8009126:	d000      	beq.n	800912a <usbd_control_xfer_cb+0x10a>
 8009128:	be00      	bkpt	0x0000
 800912a:	2300      	movs	r3, #0
 800912c:	e021      	b.n	8009172 <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 800912e:	79fb      	ldrb	r3, [r7, #7]
 8009130:	2100      	movs	r1, #0
 8009132:	4618      	mov	r0, r3
 8009134:	f000 ff30 	bl	8009f98 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8009138:	79fb      	ldrb	r3, [r7, #7]
 800913a:	2180      	movs	r1, #128	@ 0x80
 800913c:	4618      	mov	r0, r3
 800913e:	f000 ff2b 	bl	8009f98 <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8009142:	e014      	b.n	800916e <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 8009144:	79fb      	ldrb	r3, [r7, #7]
 8009146:	4618      	mov	r0, r3
 8009148:	f7ff fe72 	bl	8008e30 <data_stage_xact>
 800914c:	4603      	mov	r3, r0
 800914e:	f083 0301 	eor.w	r3, r3, #1
 8009152:	b2db      	uxtb	r3, r3
 8009154:	2b00      	cmp	r3, #0
 8009156:	d00b      	beq.n	8009170 <usbd_control_xfer_cb+0x150>
 8009158:	4b09      	ldr	r3, [pc, #36]	@ (8009180 <usbd_control_xfer_cb+0x160>)
 800915a:	61bb      	str	r3, [r7, #24]
 800915c:	69bb      	ldr	r3, [r7, #24]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f003 0301 	and.w	r3, r3, #1
 8009164:	2b00      	cmp	r3, #0
 8009166:	d000      	beq.n	800916a <usbd_control_xfer_cb+0x14a>
 8009168:	be00      	bkpt	0x0000
 800916a:	2300      	movs	r3, #0
 800916c:	e001      	b.n	8009172 <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 800916e:	bf00      	nop
  }

  return true;
 8009170:	2301      	movs	r3, #1
}
 8009172:	4618      	mov	r0, r3
 8009174:	3720      	adds	r7, #32
 8009176:	46bd      	mov	sp, r7
 8009178:	bd80      	pop	{r7, pc}
 800917a:	bf00      	nop
 800917c:	20000dcc 	.word	0x20000dcc
 8009180:	e000edf0 	.word	0xe000edf0
 8009184:	20000de0 	.word	0x20000de0

08009188 <__NVIC_EnableIRQ>:
{
 8009188:	b480      	push	{r7}
 800918a:	b083      	sub	sp, #12
 800918c:	af00      	add	r7, sp, #0
 800918e:	4603      	mov	r3, r0
 8009190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009196:	2b00      	cmp	r3, #0
 8009198:	db0b      	blt.n	80091b2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800919a:	79fb      	ldrb	r3, [r7, #7]
 800919c:	f003 021f 	and.w	r2, r3, #31
 80091a0:	4907      	ldr	r1, [pc, #28]	@ (80091c0 <__NVIC_EnableIRQ+0x38>)
 80091a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091a6:	095b      	lsrs	r3, r3, #5
 80091a8:	2001      	movs	r0, #1
 80091aa:	fa00 f202 	lsl.w	r2, r0, r2
 80091ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80091b2:	bf00      	nop
 80091b4:	370c      	adds	r7, #12
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	e000e100 	.word	0xe000e100

080091c4 <__NVIC_DisableIRQ>:
{
 80091c4:	b480      	push	{r7}
 80091c6:	b083      	sub	sp, #12
 80091c8:	af00      	add	r7, sp, #0
 80091ca:	4603      	mov	r3, r0
 80091cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	db12      	blt.n	80091fc <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80091d6:	79fb      	ldrb	r3, [r7, #7]
 80091d8:	f003 021f 	and.w	r2, r3, #31
 80091dc:	490a      	ldr	r1, [pc, #40]	@ (8009208 <__NVIC_DisableIRQ+0x44>)
 80091de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091e2:	095b      	lsrs	r3, r3, #5
 80091e4:	2001      	movs	r0, #1
 80091e6:	fa00 f202 	lsl.w	r2, r0, r2
 80091ea:	3320      	adds	r3, #32
 80091ec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80091f0:	f3bf 8f4f 	dsb	sy
}
 80091f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80091f6:	f3bf 8f6f 	isb	sy
}
 80091fa:	bf00      	nop
}
 80091fc:	bf00      	nop
 80091fe:	370c      	adds	r7, #12
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr
 8009208:	e000e100 	.word	0xe000e100

0800920c <dma_setup_prepare>:
  // Internal DMA only
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	4603      	mov	r3, r0
 8009214:	71fb      	strb	r3, [r7, #7]
 8009216:	79fb      	ldrb	r3, [r7, #7]
 8009218:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800921a:	7afb      	ldrb	r3, [r7, #11]
 800921c:	2b00      	cmp	r3, #0
 800921e:	d001      	beq.n	8009224 <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 8009220:	2300      	movs	r3, #0
 8009222:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009224:	7afb      	ldrb	r3, [r7, #11]
 8009226:	4a13      	ldr	r2, [pc, #76]	@ (8009274 <dma_setup_prepare+0x68>)
 8009228:	011b      	lsls	r3, r3, #4
 800922a:	4413      	add	r3, r2
 800922c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800922e:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009234:	4a10      	ldr	r2, [pc, #64]	@ (8009278 <dma_setup_prepare+0x6c>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d904      	bls.n	8009244 <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8009240:	2b00      	cmp	r3, #0
 8009242:	db10      	blt.n	8009266 <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	4a0d      	ldr	r2, [pc, #52]	@ (800927c <dma_setup_prepare+0x70>)
 8009248:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 800924c:	4a0c      	ldr	r2, [pc, #48]	@ (8009280 <dma_setup_prepare+0x74>)
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800925a:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8009264:	e000      	b.n	8009268 <dma_setup_prepare+0x5c>
      return;
 8009266:	bf00      	nop
}
 8009268:	3714      	adds	r7, #20
 800926a:	46bd      	mov	sp, r7
 800926c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	0800d1f0 	.word	0x0800d1f0
 8009278:	4f543009 	.word	0x4f543009
 800927c:	20080008 	.word	0x20080008
 8009280:	20000ea8 	.word	0x20000ea8

08009284 <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 8009284:	b480      	push	{r7}
 8009286:	b091      	sub	sp, #68	@ 0x44
 8009288:	af00      	add	r7, sp, #0
 800928a:	4603      	mov	r3, r0
 800928c:	71fb      	strb	r3, [r7, #7]
 800928e:	460b      	mov	r3, r1
 8009290:	71bb      	strb	r3, [r7, #6]
 8009292:	4613      	mov	r3, r2
 8009294:	80bb      	strh	r3, [r7, #4]
 8009296:	79fb      	ldrb	r3, [r7, #7]
 8009298:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800929a:	7e7b      	ldrb	r3, [r7, #25]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d001      	beq.n	80092a4 <dfifo_alloc+0x20>
    rhport = 0;
 80092a0:	2300      	movs	r3, #0
 80092a2:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80092a4:	7e7b      	ldrb	r3, [r7, #25]
 80092a6:	4a65      	ldr	r2, [pc, #404]	@ (800943c <dfifo_alloc+0x1b8>)
 80092a8:	011b      	lsls	r3, r3, #4
 80092aa:	4413      	add	r3, r2
 80092ac:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80092ae:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 80092b0:	79fb      	ldrb	r3, [r7, #7]
 80092b2:	011b      	lsls	r3, r3, #4
 80092b4:	4a61      	ldr	r2, [pc, #388]	@ (800943c <dfifo_alloc+0x1b8>)
 80092b6:	4413      	add	r3, r2
 80092b8:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 80092ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80092bc:	7a1b      	ldrb	r3, [r3, #8]
 80092be:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80092c2:	79bb      	ldrb	r3, [r7, #6]
 80092c4:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80092c6:	7ebb      	ldrb	r3, [r7, #26]
 80092c8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80092cc:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 80092ce:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 80092d2:	79bb      	ldrb	r3, [r7, #6]
 80092d4:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80092d6:	7efb      	ldrb	r3, [r7, #27]
 80092d8:	09db      	lsrs	r3, r3, #7
 80092da:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 80092dc:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 80092e0:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80092e4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80092e8:	429a      	cmp	r2, r3
 80092ea:	d30a      	bcc.n	8009302 <dfifo_alloc+0x7e>
 80092ec:	4b54      	ldr	r3, [pc, #336]	@ (8009440 <dfifo_alloc+0x1bc>)
 80092ee:	61fb      	str	r3, [r7, #28]
 80092f0:	69fb      	ldr	r3, [r7, #28]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	f003 0301 	and.w	r3, r3, #1
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d000      	beq.n	80092fe <dfifo_alloc+0x7a>
 80092fc:	be00      	bkpt	0x0000
 80092fe:	2300      	movs	r3, #0
 8009300:	e095      	b.n	800942e <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 8009302:	88bb      	ldrh	r3, [r7, #4]
 8009304:	617b      	str	r3, [r7, #20]
 8009306:	2304      	movs	r3, #4
 8009308:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800930a:	697a      	ldr	r2, [r7, #20]
 800930c:	693b      	ldr	r3, [r7, #16]
 800930e:	4413      	add	r3, r2
 8009310:	1e5a      	subs	r2, r3, #1
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	fbb2 f3f3 	udiv	r3, r2, r3
 8009318:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 800931a:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 800931e:	2b00      	cmp	r3, #0
 8009320:	d12a      	bne.n	8009378 <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8009322:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009324:	009b      	lsls	r3, r3, #2
 8009326:	b29b      	uxth	r3, r3
 8009328:	81fb      	strh	r3, [r7, #14]
 800932a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800932e:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8009330:	89fb      	ldrh	r3, [r7, #14]
 8009332:	089b      	lsrs	r3, r3, #2
 8009334:	b29b      	uxth	r3, r3
 8009336:	f103 0208 	add.w	r2, r3, #8
 800933a:	7b7b      	ldrb	r3, [r7, #13]
 800933c:	4413      	add	r3, r2
 800933e:	b29b      	uxth	r3, r3
 8009340:	005b      	lsls	r3, r3, #1
 8009342:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8009344:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 8009346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009348:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800934a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800934c:	429a      	cmp	r2, r3
 800934e:	d26d      	bcs.n	800942c <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 8009350:	4b3c      	ldr	r3, [pc, #240]	@ (8009444 <dfifo_alloc+0x1c0>)
 8009352:	889b      	ldrh	r3, [r3, #4]
 8009354:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009356:	429a      	cmp	r2, r3
 8009358:	d90a      	bls.n	8009370 <dfifo_alloc+0xec>
 800935a:	4b39      	ldr	r3, [pc, #228]	@ (8009440 <dfifo_alloc+0x1bc>)
 800935c:	623b      	str	r3, [r7, #32]
 800935e:	6a3b      	ldr	r3, [r7, #32]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b00      	cmp	r3, #0
 8009368:	d000      	beq.n	800936c <dfifo_alloc+0xe8>
 800936a:	be00      	bkpt	0x0000
 800936c:	2300      	movs	r3, #0
 800936e:	e05e      	b.n	800942e <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 8009370:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009374:	625a      	str	r2, [r3, #36]	@ 0x24
 8009376:	e059      	b.n	800942c <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 8009378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800937a:	7a5b      	ldrb	r3, [r3, #9]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d016      	beq.n	80093ae <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 8009380:	4b30      	ldr	r3, [pc, #192]	@ (8009444 <dfifo_alloc+0x1c0>)
 8009382:	799a      	ldrb	r2, [r3, #6]
 8009384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009386:	7a5b      	ldrb	r3, [r3, #9]
 8009388:	429a      	cmp	r2, r3
 800938a:	d30a      	bcc.n	80093a2 <dfifo_alloc+0x11e>
 800938c:	4b2c      	ldr	r3, [pc, #176]	@ (8009440 <dfifo_alloc+0x1bc>)
 800938e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f003 0301 	and.w	r3, r3, #1
 8009398:	2b00      	cmp	r3, #0
 800939a:	d000      	beq.n	800939e <dfifo_alloc+0x11a>
 800939c:	be00      	bkpt	0x0000
 800939e:	2300      	movs	r3, #0
 80093a0:	e045      	b.n	800942e <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 80093a2:	4b28      	ldr	r3, [pc, #160]	@ (8009444 <dfifo_alloc+0x1c0>)
 80093a4:	799b      	ldrb	r3, [r3, #6]
 80093a6:	3301      	adds	r3, #1
 80093a8:	b2da      	uxtb	r2, r3
 80093aa:	4b26      	ldr	r3, [pc, #152]	@ (8009444 <dfifo_alloc+0x1c0>)
 80093ac:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 80093ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d102      	bne.n	80093c0 <dfifo_alloc+0x13c>
      fifo_size *= 2;
 80093ba:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80093bc:	005b      	lsls	r3, r3, #1
 80093be:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 80093c0:	4b20      	ldr	r3, [pc, #128]	@ (8009444 <dfifo_alloc+0x1c0>)
 80093c2:	889b      	ldrh	r3, [r3, #4]
 80093c4:	4619      	mov	r1, r3
 80093c6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 80093c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80093ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093cc:	4413      	add	r3, r2
 80093ce:	4299      	cmp	r1, r3
 80093d0:	d20a      	bcs.n	80093e8 <dfifo_alloc+0x164>
 80093d2:	4b1b      	ldr	r3, [pc, #108]	@ (8009440 <dfifo_alloc+0x1bc>)
 80093d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80093d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f003 0301 	and.w	r3, r3, #1
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d000      	beq.n	80093e4 <dfifo_alloc+0x160>
 80093e2:	be00      	bkpt	0x0000
 80093e4:	2300      	movs	r3, #0
 80093e6:	e022      	b.n	800942e <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 80093e8:	4b16      	ldr	r3, [pc, #88]	@ (8009444 <dfifo_alloc+0x1c0>)
 80093ea:	889a      	ldrh	r2, [r3, #4]
 80093ec:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80093ee:	1ad3      	subs	r3, r2, r3
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	4b14      	ldr	r3, [pc, #80]	@ (8009444 <dfifo_alloc+0x1c0>)
 80093f4:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 80093f6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d108      	bne.n	8009410 <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 80093fe:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009400:	041b      	lsls	r3, r3, #16
 8009402:	4a10      	ldr	r2, [pc, #64]	@ (8009444 <dfifo_alloc+0x1c0>)
 8009404:	8892      	ldrh	r2, [r2, #4]
 8009406:	4313      	orrs	r3, r2
 8009408:	461a      	mov	r2, r3
 800940a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800940c:	629a      	str	r2, [r3, #40]	@ 0x28
 800940e:	e00d      	b.n	800942c <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 8009410:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009412:	041b      	lsls	r3, r3, #16
 8009414:	4a0b      	ldr	r2, [pc, #44]	@ (8009444 <dfifo_alloc+0x1c0>)
 8009416:	8892      	ldrh	r2, [r2, #4]
 8009418:	431a      	orrs	r2, r3
 800941a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800941e:	3b01      	subs	r3, #1
 8009420:	4611      	mov	r1, r2
 8009422:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8009424:	3340      	adds	r3, #64	@ 0x40
 8009426:	009b      	lsls	r3, r3, #2
 8009428:	4413      	add	r3, r2
 800942a:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 800942c:	2301      	movs	r3, #1
}
 800942e:	4618      	mov	r0, r3
 8009430:	3744      	adds	r7, #68	@ 0x44
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	0800d1f0 	.word	0x0800d1f0
 8009440:	e000edf0 	.word	0xe000edf0
 8009444:	20000ea0 	.word	0x20000ea0

08009448 <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 8009448:	b580      	push	{r7, lr}
 800944a:	b088      	sub	sp, #32
 800944c:	af00      	add	r7, sp, #0
 800944e:	4603      	mov	r3, r0
 8009450:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8009452:	79fb      	ldrb	r3, [r7, #7]
 8009454:	011b      	lsls	r3, r3, #4
 8009456:	4a27      	ldr	r2, [pc, #156]	@ (80094f4 <dfifo_device_init+0xac>)
 8009458:	4413      	add	r3, r2
 800945a:	61fb      	str	r3, [r7, #28]
 800945c:	79fb      	ldrb	r3, [r7, #7]
 800945e:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009460:	7b3b      	ldrb	r3, [r7, #12]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d001      	beq.n	800946a <dfifo_device_init+0x22>
    rhport = 0;
 8009466:	2300      	movs	r3, #0
 8009468:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800946a:	7b3b      	ldrb	r3, [r7, #12]
 800946c:	4a21      	ldr	r2, [pc, #132]	@ (80094f4 <dfifo_device_init+0xac>)
 800946e:	011b      	lsls	r3, r3, #4
 8009470:	4413      	add	r3, r2
 8009472:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009474:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8009476:	69fb      	ldr	r3, [r7, #28]
 8009478:	7a1b      	ldrb	r3, [r3, #8]
 800947a:	2240      	movs	r2, #64	@ 0x40
 800947c:	81fa      	strh	r2, [r7, #14]
 800947e:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8009480:	89fb      	ldrh	r3, [r7, #14]
 8009482:	089b      	lsrs	r3, r3, #2
 8009484:	b29b      	uxth	r3, r3
 8009486:	f103 0208 	add.w	r2, r3, #8
 800948a:	7b7b      	ldrb	r3, [r7, #13]
 800948c:	4413      	add	r3, r2
 800948e:	b29b      	uxth	r3, r3
 8009490:	005b      	lsls	r3, r3, #1
 8009492:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8009494:	461a      	mov	r2, r3
 8009496:	69bb      	ldr	r3, [r7, #24]
 8009498:	625a      	str	r2, [r3, #36]	@ 0x24
 800949a:	69bb      	ldr	r3, [r7, #24]
 800949c:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094a2:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 80094a4:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 80094a6:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 80094a8:	69fb      	ldr	r3, [r7, #28]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	089b      	lsrs	r3, r3, #2
 80094ae:	b29a      	uxth	r2, r3
 80094b0:	4b11      	ldr	r3, [pc, #68]	@ (80094f8 <dfifo_device_init+0xb0>)
 80094b2:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 80094b4:	7dfb      	ldrb	r3, [r7, #23]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d009      	beq.n	80094ce <dfifo_device_init+0x86>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 80094ba:	4b0f      	ldr	r3, [pc, #60]	@ (80094f8 <dfifo_device_init+0xb0>)
 80094bc:	889a      	ldrh	r2, [r3, #4]
 80094be:	69fb      	ldr	r3, [r7, #28]
 80094c0:	7a1b      	ldrb	r3, [r3, #8]
 80094c2:	005b      	lsls	r3, r3, #1
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	1ad3      	subs	r3, r2, r3
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	4b0b      	ldr	r3, [pc, #44]	@ (80094f8 <dfifo_device_init+0xb0>)
 80094cc:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 80094ce:	4b0a      	ldr	r3, [pc, #40]	@ (80094f8 <dfifo_device_init+0xb0>)
 80094d0:	889b      	ldrh	r3, [r3, #4]
 80094d2:	461a      	mov	r2, r3
 80094d4:	4613      	mov	r3, r2
 80094d6:	041b      	lsls	r3, r3, #16
 80094d8:	441a      	add	r2, r3
 80094da:	69bb      	ldr	r3, [r7, #24]
 80094dc:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 80094de:	79fb      	ldrb	r3, [r7, #7]
 80094e0:	2240      	movs	r2, #64	@ 0x40
 80094e2:	2180      	movs	r1, #128	@ 0x80
 80094e4:	4618      	mov	r0, r3
 80094e6:	f7ff fecd 	bl	8009284 <dfifo_alloc>
}
 80094ea:	bf00      	nop
 80094ec:	3720      	adds	r7, #32
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	bf00      	nop
 80094f4:	0800d1f0 	.word	0x0800d1f0
 80094f8:	20000ea0 	.word	0x20000ea0

080094fc <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 80094fc:	b480      	push	{r7}
 80094fe:	b08b      	sub	sp, #44	@ 0x2c
 8009500:	af00      	add	r7, sp, #0
 8009502:	4603      	mov	r3, r0
 8009504:	6039      	str	r1, [r7, #0]
 8009506:	71fb      	strb	r3, [r7, #7]
 8009508:	79fb      	ldrb	r3, [r7, #7]
 800950a:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800950c:	7c7b      	ldrb	r3, [r7, #17]
 800950e:	2b00      	cmp	r3, #0
 8009510:	d001      	beq.n	8009516 <edpt_activate+0x1a>
    rhport = 0;
 8009512:	2300      	movs	r3, #0
 8009514:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009516:	7c7b      	ldrb	r3, [r7, #17]
 8009518:	4a45      	ldr	r2, [pc, #276]	@ (8009630 <edpt_activate+0x134>)
 800951a:	011b      	lsls	r3, r3, #4
 800951c:	4413      	add	r3, r2
 800951e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009520:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 8009522:	683b      	ldr	r3, [r7, #0]
 8009524:	789b      	ldrb	r3, [r3, #2]
 8009526:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009528:	7cbb      	ldrb	r3, [r7, #18]
 800952a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800952e:	b2db      	uxtb	r3, r3
 8009530:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 8009534:	683b      	ldr	r3, [r7, #0]
 8009536:	789b      	ldrb	r3, [r3, #2]
 8009538:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800953a:	7cfb      	ldrb	r3, [r7, #19]
 800953c:	09db      	lsrs	r3, r3, #7
 800953e:	b2db      	uxtb	r3, r3
 8009540:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8009544:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8009548:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800954c:	0052      	lsls	r2, r2, #1
 800954e:	4413      	add	r3, r2
 8009550:	011b      	lsls	r3, r3, #4
 8009552:	4a38      	ldr	r2, [pc, #224]	@ (8009634 <edpt_activate+0x138>)
 8009554:	4413      	add	r3, r2
 8009556:	61fb      	str	r3, [r7, #28]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800955c:	697b      	ldr	r3, [r7, #20]
 800955e:	889b      	ldrh	r3, [r3, #4]
 8009560:	b29b      	uxth	r3, r3
 8009562:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009566:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 8009568:	69fb      	ldr	r3, [r7, #28]
 800956a:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	799a      	ldrb	r2, [r3, #6]
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	731a      	strb	r2, [r3, #12]

  // Endpoint control
  dwc2_depctl_t depctl = {.value = 0};
 8009574:	2300      	movs	r3, #0
 8009576:	60fb      	str	r3, [r7, #12]
  depctl.mps = xfer->max_size;
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	895b      	ldrh	r3, [r3, #10]
 800957c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009580:	b29a      	uxth	r2, r3
 8009582:	89bb      	ldrh	r3, [r7, #12]
 8009584:	f362 030a 	bfi	r3, r2, #0, #11
 8009588:	81bb      	strh	r3, [r7, #12]
  depctl.active = 1;
 800958a:	7b7b      	ldrb	r3, [r7, #13]
 800958c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009590:	737b      	strb	r3, [r7, #13]
  depctl.type = p_endpoint_desc->bmAttributes.xfer;
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	78db      	ldrb	r3, [r3, #3]
 8009596:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800959a:	b2da      	uxtb	r2, r3
 800959c:	7bbb      	ldrb	r3, [r7, #14]
 800959e:	f362 0383 	bfi	r3, r2, #2, #2
 80095a2:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	78db      	ldrb	r3, [r3, #3]
 80095a8:	f003 0303 	and.w	r3, r3, #3
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	2b01      	cmp	r3, #1
 80095b0:	d003      	beq.n	80095ba <edpt_activate+0xbe>
    depctl.set_data0_iso_even = 1;
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
 80095b4:	f043 0310 	orr.w	r3, r3, #16
 80095b8:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 80095ba:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80095be:	2b01      	cmp	r3, #1
 80095c0:	d108      	bne.n	80095d4 <edpt_activate+0xd8>
    depctl.tx_fifo_num = epnum;
 80095c2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80095c6:	f003 030f 	and.w	r3, r3, #15
 80095ca:	b2da      	uxtb	r2, r3
 80095cc:	89fb      	ldrh	r3, [r7, #14]
 80095ce:	f362 1389 	bfi	r3, r2, #6, #4
 80095d2:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 80095d4:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80095d8:	2b01      	cmp	r3, #1
 80095da:	bf14      	ite	ne
 80095dc:	2301      	movne	r3, #1
 80095de:	2300      	moveq	r3, #0
 80095e0:	b2db      	uxtb	r3, r3
 80095e2:	461a      	mov	r2, r3
 80095e4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80095e8:	0112      	lsls	r2, r2, #4
 80095ea:	4413      	add	r3, r2
 80095ec:	3348      	adds	r3, #72	@ 0x48
 80095ee:	015b      	lsls	r3, r3, #5
 80095f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095f2:	4413      	add	r3, r2
 80095f4:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 80095f6:	68fa      	ldr	r2, [r7, #12]
 80095f8:	69bb      	ldr	r3, [r7, #24]
 80095fa:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 80095fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80095fe:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 8009602:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009606:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 800960a:	2901      	cmp	r1, #1
 800960c:	d101      	bne.n	8009612 <edpt_activate+0x116>
 800960e:	2100      	movs	r1, #0
 8009610:	e000      	b.n	8009614 <edpt_activate+0x118>
 8009612:	2110      	movs	r1, #16
 8009614:	440b      	add	r3, r1
 8009616:	2101      	movs	r1, #1
 8009618:	fa01 f303 	lsl.w	r3, r1, r3
 800961c:	431a      	orrs	r2, r3
 800961e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009620:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 8009624:	bf00      	nop
 8009626:	372c      	adds	r7, #44	@ 0x2c
 8009628:	46bd      	mov	sp, r7
 800962a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962e:	4770      	bx	lr
 8009630:	0800d1f0 	.word	0x0800d1f0
 8009634:	20000e20 	.word	0x20000e20

08009638 <edpt_disable>:

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 8009638:	b480      	push	{r7}
 800963a:	b089      	sub	sp, #36	@ 0x24
 800963c:	af00      	add	r7, sp, #0
 800963e:	4603      	mov	r3, r0
 8009640:	71fb      	strb	r3, [r7, #7]
 8009642:	460b      	mov	r3, r1
 8009644:	71bb      	strb	r3, [r7, #6]
 8009646:	4613      	mov	r3, r2
 8009648:	717b      	strb	r3, [r7, #5]
 800964a:	79fb      	ldrb	r3, [r7, #7]
 800964c:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800964e:	7c7b      	ldrb	r3, [r7, #17]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d001      	beq.n	8009658 <edpt_disable+0x20>
    rhport = 0;
 8009654:	2300      	movs	r3, #0
 8009656:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009658:	7c7b      	ldrb	r3, [r7, #17]
 800965a:	4a5b      	ldr	r2, [pc, #364]	@ (80097c8 <edpt_disable+0x190>)
 800965c:	011b      	lsls	r3, r3, #4
 800965e:	4413      	add	r3, r2
 8009660:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009662:	61fb      	str	r3, [r7, #28]
 8009664:	79bb      	ldrb	r3, [r7, #6]
 8009666:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009668:	7cbb      	ldrb	r3, [r7, #18]
 800966a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800966e:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8009670:	76fb      	strb	r3, [r7, #27]
 8009672:	79bb      	ldrb	r3, [r7, #6]
 8009674:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009676:	7cfb      	ldrb	r3, [r7, #19]
 8009678:	09db      	lsrs	r3, r3, #7
 800967a:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 800967c:	76bb      	strb	r3, [r7, #26]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800967e:	7ebb      	ldrb	r3, [r7, #26]
 8009680:	2b01      	cmp	r3, #1
 8009682:	bf14      	ite	ne
 8009684:	2301      	movne	r3, #1
 8009686:	2300      	moveq	r3, #0
 8009688:	b2db      	uxtb	r3, r3
 800968a:	461a      	mov	r2, r3
 800968c:	7efb      	ldrb	r3, [r7, #27]
 800968e:	0112      	lsls	r2, r2, #4
 8009690:	4413      	add	r3, r2
 8009692:	3348      	adds	r3, #72	@ 0x48
 8009694:	015b      	lsls	r3, r3, #5
 8009696:	69fa      	ldr	r2, [r7, #28]
 8009698:	4413      	add	r3, r2
 800969a:	617b      	str	r3, [r7, #20]

  if (dir == TUSB_DIR_IN) {
 800969c:	7ebb      	ldrb	r3, [r7, #26]
 800969e:	2b01      	cmp	r3, #1
 80096a0:	d149      	bne.n	8009736 <edpt_disable+0xfe>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 80096a2:	7efb      	ldrb	r3, [r7, #27]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d003      	beq.n	80096b0 <edpt_disable+0x78>
 80096a8:	697b      	ldr	r3, [r7, #20]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	db0d      	blt.n	80096cc <edpt_disable+0x94>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	797a      	ldrb	r2, [r7, #5]
 80096b6:	2a00      	cmp	r2, #0
 80096b8:	d002      	beq.n	80096c0 <edpt_disable+0x88>
 80096ba:	f04f 6202 	mov.w	r2, #136314880	@ 0x8200000
 80096be:	e001      	b.n	80096c4 <edpt_disable+0x8c>
 80096c0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80096c4:	431a      	orrs	r2, r3
 80096c6:	697b      	ldr	r3, [r7, #20]
 80096c8:	601a      	str	r2, [r3, #0]
 80096ca:	e022      	b.n	8009712 <edpt_disable+0xda>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      dep->diepctl |= DIEPCTL_SNAK;
 80096cc:	697b      	ldr	r3, [r7, #20]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80096d4:	697b      	ldr	r3, [r7, #20]
 80096d6:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 80096d8:	bf00      	nop
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	689b      	ldr	r3, [r3, #8]
 80096de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d0f9      	beq.n	80096da <edpt_disable+0xa2>

      // Disable the endpoint.
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 80096e6:	697b      	ldr	r3, [r7, #20]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	797a      	ldrb	r2, [r7, #5]
 80096ec:	2a00      	cmp	r2, #0
 80096ee:	d001      	beq.n	80096f4 <edpt_disable+0xbc>
 80096f0:	4a36      	ldr	r2, [pc, #216]	@ (80097cc <edpt_disable+0x194>)
 80096f2:	e001      	b.n	80096f8 <edpt_disable+0xc0>
 80096f4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80096f8:	431a      	orrs	r2, r3
 80096fa:	697b      	ldr	r3, [r7, #20]
 80096fc:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 80096fe:	bf00      	nop
 8009700:	697b      	ldr	r3, [r7, #20]
 8009702:	689b      	ldr	r3, [r3, #8]
 8009704:	f003 0302 	and.w	r3, r3, #2
 8009708:	2b00      	cmp	r3, #0
 800970a:	d0f9      	beq.n	8009700 <edpt_disable+0xc8>

      dep->diepint = DIEPINT_EPDISD;
 800970c:	697b      	ldr	r3, [r7, #20]
 800970e:	2202      	movs	r2, #2
 8009710:	609a      	str	r2, [r3, #8]
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	60fb      	str	r3, [r7, #12]
 8009716:	7efb      	ldrb	r3, [r7, #27]
 8009718:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800971a:	7afb      	ldrb	r3, [r7, #11]
 800971c:	019b      	lsls	r3, r3, #6
 800971e:	f043 0220 	orr.w	r2, r3, #32
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8009726:	bf00      	nop
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	691b      	ldr	r3, [r3, #16]
 800972c:	f003 0320 	and.w	r3, r3, #32
 8009730:	2b00      	cmp	r3, #0
 8009732:	d1f9      	bne.n	8009728 <edpt_disable+0xf0>
}
 8009734:	e041      	b.n	80097ba <edpt_disable+0x182>

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dfifo_flush_tx(dwc2, epnum);
  } else {
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 8009736:	7efb      	ldrb	r3, [r7, #27]
 8009738:	2b00      	cmp	r3, #0
 800973a:	d003      	beq.n	8009744 <edpt_disable+0x10c>
 800973c:	697b      	ldr	r3, [r7, #20]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	db0c      	blt.n	800975e <edpt_disable+0x126>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	797a      	ldrb	r2, [r7, #5]
 800974a:	2a00      	cmp	r2, #0
 800974c:	d002      	beq.n	8009754 <edpt_disable+0x11c>
 800974e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8009752:	e000      	b.n	8009756 <edpt_disable+0x11e>
 8009754:	2200      	movs	r2, #0
 8009756:	431a      	orrs	r2, r3
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	601a      	str	r2, [r3, #0]
 800975c:	e02d      	b.n	80097ba <edpt_disable+0x182>
    } else {
      // Asserting GONAK is required to STALL an OUT endpoint.
      // Simpler to use polling here, we don't use the "B"OUTNAKEFF interrupt
      // anyway, and it can't be cleared by user code. If this while loop never
      // finishes, we have bigger problems than just the stack.
      dwc2->dctl |= DCTL_SGONAK;
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8009764:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8009768:	69fb      	ldr	r3, [r7, #28]
 800976a:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 800976e:	bf00      	nop
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	695b      	ldr	r3, [r3, #20]
 8009774:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009778:	2b00      	cmp	r3, #0
 800977a:	d0f9      	beq.n	8009770 <edpt_disable+0x138>

      // Ditto here disable the endpoint.
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	797a      	ldrb	r2, [r7, #5]
 8009782:	2a00      	cmp	r2, #0
 8009784:	d001      	beq.n	800978a <edpt_disable+0x152>
 8009786:	4a11      	ldr	r2, [pc, #68]	@ (80097cc <edpt_disable+0x194>)
 8009788:	e001      	b.n	800978e <edpt_disable+0x156>
 800978a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800978e:	431a      	orrs	r2, r3
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	601a      	str	r2, [r3, #0]
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 8009794:	bf00      	nop
 8009796:	697b      	ldr	r3, [r7, #20]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	f003 0302 	and.w	r3, r3, #2
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d0f9      	beq.n	8009796 <edpt_disable+0x15e>

      dep->doepint = DOEPINT_EPDISD;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	2202      	movs	r2, #2
 80097a6:	609a      	str	r2, [r3, #8]

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
 80097a8:	69fb      	ldr	r3, [r7, #28]
 80097aa:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80097ae:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80097b2:	69fb      	ldr	r3, [r7, #28]
 80097b4:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
  }
}
 80097b8:	bf00      	nop
 80097ba:	bf00      	nop
 80097bc:	3724      	adds	r7, #36	@ 0x24
 80097be:	46bd      	mov	sp, r7
 80097c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097c4:	4770      	bx	lr
 80097c6:	bf00      	nop
 80097c8:	0800d1f0 	.word	0x0800d1f0
 80097cc:	40200000 	.word	0x40200000

080097d0 <edpt_schedule_packets>:

// Since this function returns void, it is not possible to return a boolean success message
// We must make sure that this function is not called when the EP is disabled
// Must be called from critical section
static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b090      	sub	sp, #64	@ 0x40
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	4603      	mov	r3, r0
 80097d8:	71fb      	strb	r3, [r7, #7]
 80097da:	460b      	mov	r3, r1
 80097dc:	71bb      	strb	r3, [r7, #6]
 80097de:	4613      	mov	r3, r2
 80097e0:	717b      	strb	r3, [r7, #5]
 80097e2:	79fb      	ldrb	r3, [r7, #7]
 80097e4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80097e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d002      	beq.n	80097f6 <edpt_schedule_packets+0x26>
    rhport = 0;
 80097f0:	2300      	movs	r3, #0
 80097f2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80097f6:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80097fa:	4a65      	ldr	r2, [pc, #404]	@ (8009990 <edpt_schedule_packets+0x1c0>)
 80097fc:	011b      	lsls	r3, r3, #4
 80097fe:	4413      	add	r3, r2
 8009800:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009802:	63bb      	str	r3, [r7, #56]	@ 0x38
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 8009804:	79ba      	ldrb	r2, [r7, #6]
 8009806:	797b      	ldrb	r3, [r7, #5]
 8009808:	0052      	lsls	r2, r2, #1
 800980a:	4413      	add	r3, r2
 800980c:	011b      	lsls	r3, r3, #4
 800980e:	4a61      	ldr	r2, [pc, #388]	@ (8009994 <edpt_schedule_packets+0x1c4>)
 8009810:	4413      	add	r3, r2
 8009812:	637b      	str	r3, [r7, #52]	@ 0x34
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8009814:	797b      	ldrb	r3, [r7, #5]
 8009816:	2b01      	cmp	r3, #1
 8009818:	bf14      	ite	ne
 800981a:	2301      	movne	r3, #1
 800981c:	2300      	moveq	r3, #0
 800981e:	b2db      	uxtb	r3, r3
 8009820:	461a      	mov	r2, r3
 8009822:	79bb      	ldrb	r3, [r7, #6]
 8009824:	0112      	lsls	r2, r2, #4
 8009826:	4413      	add	r3, r2
 8009828:	3348      	adds	r3, #72	@ 0x48
 800982a:	015b      	lsls	r3, r3, #5
 800982c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800982e:	4413      	add	r3, r2
 8009830:	633b      	str	r3, [r7, #48]	@ 0x30

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 8009832:	79bb      	ldrb	r3, [r7, #6]
 8009834:	2b00      	cmp	r3, #0
 8009836:	d11c      	bne.n	8009872 <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 8009838:	797b      	ldrb	r3, [r7, #5]
 800983a:	4a57      	ldr	r2, [pc, #348]	@ (8009998 <edpt_schedule_packets+0x1c8>)
 800983c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8009840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009842:	895b      	ldrh	r3, [r3, #10]
 8009844:	853a      	strh	r2, [r7, #40]	@ 0x28
 8009846:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8009848:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800984a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800984c:	4293      	cmp	r3, r2
 800984e:	bf28      	it	cs
 8009850:	4613      	movcs	r3, r2
 8009852:	b29b      	uxth	r3, r3
 8009854:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    _dcd_data.ep0_pending[dir] -= total_bytes;
 8009856:	797b      	ldrb	r3, [r7, #5]
 8009858:	4a4f      	ldr	r2, [pc, #316]	@ (8009998 <edpt_schedule_packets+0x1c8>)
 800985a:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800985e:	797b      	ldrb	r3, [r7, #5]
 8009860:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8009862:	1a8a      	subs	r2, r1, r2
 8009864:	b291      	uxth	r1, r2
 8009866:	4a4c      	ldr	r2, [pc, #304]	@ (8009998 <edpt_schedule_packets+0x1c8>)
 8009868:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 800986c:	2301      	movs	r3, #1
 800986e:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8009870:	e014      	b.n	800989c <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 8009872:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009874:	891b      	ldrh	r3, [r3, #8]
 8009876:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 8009878:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800987a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800987c:	8952      	ldrh	r2, [r2, #10]
 800987e:	623b      	str	r3, [r7, #32]
 8009880:	61fa      	str	r2, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8009882:	6a3a      	ldr	r2, [r7, #32]
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	4413      	add	r3, r2
 8009888:	1e5a      	subs	r2, r3, #1
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009890:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if (num_packets == 0) {
 8009892:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8009894:	2b00      	cmp	r3, #0
 8009896:	d101      	bne.n	800989c <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 8009898:	2301      	movs	r3, #1
 800989a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }
  }

  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  dwc2_ep_tsize_t deptsiz = {.value = 0};
 800989c:	2300      	movs	r3, #0
 800989e:	617b      	str	r3, [r7, #20]
  deptsiz.xfer_size = total_bytes;
 80098a0:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 80098a2:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80098a6:	697b      	ldr	r3, [r7, #20]
 80098a8:	f362 0312 	bfi	r3, r2, #0, #19
 80098ac:	617b      	str	r3, [r7, #20]
  deptsiz.packet_count = num_packets;
 80098ae:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80098b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80098b4:	b29a      	uxth	r2, r3
 80098b6:	8afb      	ldrh	r3, [r7, #22]
 80098b8:	f362 03cc 	bfi	r3, r2, #3, #10
 80098bc:	82fb      	strh	r3, [r7, #22]
  dep->tsiz = deptsiz.value;
 80098be:	697a      	ldr	r2, [r7, #20]
 80098c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c2:	611a      	str	r2, [r3, #16]

  // control
  dwc2_depctl_t depctl = {.value = dep->ctl};
 80098c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	613b      	str	r3, [r7, #16]
  depctl.clear_nak = 1;
 80098ca:	7cfb      	ldrb	r3, [r7, #19]
 80098cc:	f043 0304 	orr.w	r3, r3, #4
 80098d0:	74fb      	strb	r3, [r7, #19]
  depctl.enable = 1;
 80098d2:	7cfb      	ldrb	r3, [r7, #19]
 80098d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80098d8:	74fb      	strb	r3, [r7, #19]
  if (depctl.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 80098da:	7cbb      	ldrb	r3, [r7, #18]
 80098dc:	f003 030c 	and.w	r3, r3, #12
 80098e0:	b2db      	uxtb	r3, r3
 80098e2:	2b04      	cmp	r3, #4
 80098e4:	d11a      	bne.n	800991c <edpt_schedule_packets+0x14c>
 80098e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80098e8:	7b1b      	ldrb	r3, [r3, #12]
 80098ea:	2b01      	cmp	r3, #1
 80098ec:	d116      	bne.n	800991c <edpt_schedule_packets+0x14c>
    const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 80098ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80098f0:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80098f4:	60bb      	str	r3, [r7, #8]
    const uint32_t odd_now = dsts.frame_number & 1u;
 80098f6:	68bb      	ldr	r3, [r7, #8]
 80098f8:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80098fc:	b29b      	uxth	r3, r3
 80098fe:	f003 0301 	and.w	r3, r3, #1
 8009902:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (odd_now) {
 8009904:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009906:	2b00      	cmp	r3, #0
 8009908:	d004      	beq.n	8009914 <edpt_schedule_packets+0x144>
      depctl.set_data0_iso_even = 1;
 800990a:	7cfb      	ldrb	r3, [r7, #19]
 800990c:	f043 0310 	orr.w	r3, r3, #16
 8009910:	74fb      	strb	r3, [r7, #19]
 8009912:	e003      	b.n	800991c <edpt_schedule_packets+0x14c>
    } else {
      depctl.set_data1_iso_odd = 1;
 8009914:	7cfb      	ldrb	r3, [r7, #19]
 8009916:	f043 0320 	orr.w	r3, r3, #32
 800991a:	74fb      	strb	r3, [r7, #19]
 800991c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800991e:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009924:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8009926:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 8009928:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if(is_dma) {
 800992c:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009930:	2b00      	cmp	r3, #0
 8009932:	d015      	beq.n	8009960 <edpt_schedule_packets+0x190>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 8009934:	797b      	ldrb	r3, [r7, #5]
 8009936:	2b01      	cmp	r3, #1
 8009938:	d109      	bne.n	800994e <edpt_schedule_packets+0x17e>
 800993a:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800993c:	2b00      	cmp	r3, #0
 800993e:	d006      	beq.n	800994e <edpt_schedule_packets+0x17e>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 8009940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8009946:	4611      	mov	r1, r2
 8009948:	4618      	mov	r0, r3
 800994a:	f7fd fd50 	bl	80073ee <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 800994e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	461a      	mov	r2, r3
 8009954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009956:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 8009958:	693a      	ldr	r2, [r7, #16]
 800995a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800995c:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 800995e:	e013      	b.n	8009988 <edpt_schedule_packets+0x1b8>
    dep->diepctl = depctl.value; // enable endpoint
 8009960:	693a      	ldr	r2, [r7, #16]
 8009962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009964:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 8009966:	797b      	ldrb	r3, [r7, #5]
 8009968:	2b01      	cmp	r3, #1
 800996a:	d10d      	bne.n	8009988 <edpt_schedule_packets+0x1b8>
 800996c:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800996e:	2b00      	cmp	r3, #0
 8009970:	d00a      	beq.n	8009988 <edpt_schedule_packets+0x1b8>
      dwc2->diepempmsk |= (1 << epnum);
 8009972:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009974:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8009978:	79ba      	ldrb	r2, [r7, #6]
 800997a:	2101      	movs	r1, #1
 800997c:	fa01 f202 	lsl.w	r2, r1, r2
 8009980:	431a      	orrs	r2, r3
 8009982:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009984:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 8009988:	bf00      	nop
 800998a:	3740      	adds	r7, #64	@ 0x40
 800998c:	46bd      	mov	sp, r7
 800998e:	bd80      	pop	{r7, pc}
 8009990:	0800d1f0 	.word	0x0800d1f0
 8009994:	20000e20 	.word	0x20000e20
 8009998:	20000ea0 	.word	0x20000ea0

0800999c <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800999c:	b580      	push	{r7, lr}
 800999e:	b08c      	sub	sp, #48	@ 0x30
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	4603      	mov	r3, r0
 80099a4:	6039      	str	r1, [r7, #0]
 80099a6:	71fb      	strb	r3, [r7, #7]
 80099a8:	79fb      	ldrb	r3, [r7, #7]
 80099aa:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80099ac:	7dfb      	ldrb	r3, [r7, #23]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	d001      	beq.n	80099b6 <dcd_init+0x1a>
    rhport = 0;
 80099b2:	2300      	movs	r3, #0
 80099b4:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80099b6:	7dfb      	ldrb	r3, [r7, #23]
 80099b8:	4a43      	ldr	r2, [pc, #268]	@ (8009ac8 <dcd_init+0x12c>)
 80099ba:	011b      	lsls	r3, r3, #4
 80099bc:	4413      	add	r3, r2
 80099be:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80099c0:	62bb      	str	r3, [r7, #40]	@ 0x28

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 80099c2:	2208      	movs	r2, #8
 80099c4:	2100      	movs	r1, #0
 80099c6:	4841      	ldr	r0, [pc, #260]	@ (8009acc <dcd_init+0x130>)
 80099c8:	f001 fe38 	bl	800b63c <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 80099cc:	2101      	movs	r1, #1
 80099ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099d0:	f001 f9c6 	bl	800ad60 <dwc2_core_is_highspeed>
 80099d4:	4603      	mov	r3, r0
 80099d6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80099da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099dc:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80099e2:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 80099e4:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 80099e6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 80099ea:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80099ee:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80099f2:	79fb      	ldrb	r3, [r7, #7]
 80099f4:	4618      	mov	r0, r3
 80099f6:	f001 f9d1 	bl	800ad9c <dwc2_core_init>
 80099fa:	4603      	mov	r3, r0
 80099fc:	f083 0301 	eor.w	r3, r3, #1
 8009a00:	b2db      	uxtb	r3, r3
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d00a      	beq.n	8009a1c <dcd_init+0x80>
 8009a06:	4b32      	ldr	r3, [pc, #200]	@ (8009ad0 <dcd_init+0x134>)
 8009a08:	61fb      	str	r3, [r7, #28]
 8009a0a:	69fb      	ldr	r3, [r7, #28]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	f003 0301 	and.w	r3, r3, #1
 8009a12:	2b00      	cmp	r3, #0
 8009a14:	d000      	beq.n	8009a18 <dcd_init+0x7c>
 8009a16:	be00      	bkpt	0x0000
 8009a18:	2300      	movs	r3, #0
 8009a1a:	e050      	b.n	8009abe <dcd_init+0x122>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 8009a1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a1e:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8009a22:	f023 0303 	bic.w	r3, r3, #3
 8009a26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (is_highspeed) {
 8009a28:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d00d      	beq.n	8009a4c <dcd_init+0xb0>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a32:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009a34:	60fb      	str	r3, [r7, #12]
    if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 8009a36:	7b3b      	ldrb	r3, [r7, #12]
 8009a38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	2b80      	cmp	r3, #128	@ 0x80
 8009a40:	d108      	bne.n	8009a54 <dcd_init+0xb8>
      dcfg |= DCFG_XCVRDLY;
 8009a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a44:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a4a:	e003      	b.n	8009a54 <dcd_init+0xb8>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 8009a4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a4e:	f043 0303 	orr.w	r3, r3, #3
 8009a52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 8009a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009a56:	f043 0304 	orr.w	r3, r3, #4
 8009a5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2->dcfg = dcfg;
 8009a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009a60:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 8009a64:	79fb      	ldrb	r3, [r7, #7]
 8009a66:	4618      	mov	r0, r3
 8009a68:	f000 f92a 	bl	8009cc0 <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 8009a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a6e:	68db      	ldr	r3, [r3, #12]
 8009a70:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009a74:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a7a:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8009a7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8009a84:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 8009a88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8a:	601a      	str	r2, [r3, #0]
  // No hardware detection of Vbus B-session is available on the STM32N6
  dwc2->stm32_gccfg |= STM32_GCCFG_VBVALOVAL;
#endif

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 8009a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a8e:	699a      	ldr	r2, [r3, #24]
 8009a90:	4b10      	ldr	r3, [pc, #64]	@ (8009ad4 <dcd_init+0x138>)
 8009a92:	4313      	orrs	r3, r2
 8009a94:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a96:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 8009a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a9a:	689b      	ldr	r3, [r3, #8]
 8009a9c:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 8009a9e:	6a3b      	ldr	r3, [r7, #32]
 8009aa0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009aa4:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 8009aa6:	6a3b      	ldr	r3, [r7, #32]
 8009aa8:	f043 0301 	orr.w	r3, r3, #1
 8009aac:	623b      	str	r3, [r7, #32]
  dwc2->gahbcfg = gahbcfg;
 8009aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ab0:	6a3a      	ldr	r2, [r7, #32]
 8009ab2:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 8009ab4:	79fb      	ldrb	r3, [r7, #7]
 8009ab6:	4618      	mov	r0, r3
 8009ab8:	f000 f8e0 	bl	8009c7c <dcd_connect>
  return true;
 8009abc:	2301      	movs	r3, #1
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3730      	adds	r7, #48	@ 0x30
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	0800d1f0 	.word	0x0800d1f0
 8009acc:	20000ea0 	.word	0x20000ea0
 8009ad0:	e000edf0 	.word	0xe000edf0
 8009ad4:	80003804 	.word	0x80003804

08009ad8 <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 8009ad8:	b580      	push	{r7, lr}
 8009ada:	b084      	sub	sp, #16
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	4603      	mov	r3, r0
 8009ae0:	71fb      	strb	r3, [r7, #7]
 8009ae2:	79fb      	ldrb	r3, [r7, #7]
 8009ae4:	73fb      	strb	r3, [r7, #15]
 8009ae6:	2301      	movs	r3, #1
 8009ae8:	73bb      	strb	r3, [r7, #14]
 8009aea:	2301      	movs	r3, #1
 8009aec:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 8009aee:	7bfb      	ldrb	r3, [r7, #15]
 8009af0:	4a0c      	ldr	r2, [pc, #48]	@ (8009b24 <dcd_int_enable+0x4c>)
 8009af2:	011b      	lsls	r3, r3, #4
 8009af4:	4413      	add	r3, r2
 8009af6:	3304      	adds	r3, #4
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 8009afc:	7b7b      	ldrb	r3, [r7, #13]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d005      	beq.n	8009b0e <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 8009b02:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009b06:	4618      	mov	r0, r3
 8009b08:	f7ff fb3e 	bl	8009188 <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 8009b0c:	e004      	b.n	8009b18 <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 8009b0e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009b12:	4618      	mov	r0, r3
 8009b14:	f7ff fb56 	bl	80091c4 <__NVIC_DisableIRQ>
}
 8009b18:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 8009b1a:	bf00      	nop
 8009b1c:	3710      	adds	r7, #16
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop
 8009b24:	0800d1f0 	.word	0x0800d1f0

08009b28 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b084      	sub	sp, #16
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	4603      	mov	r3, r0
 8009b30:	71fb      	strb	r3, [r7, #7]
 8009b32:	79fb      	ldrb	r3, [r7, #7]
 8009b34:	73fb      	strb	r3, [r7, #15]
 8009b36:	2301      	movs	r3, #1
 8009b38:	73bb      	strb	r3, [r7, #14]
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 8009b3e:	7bfb      	ldrb	r3, [r7, #15]
 8009b40:	4a0c      	ldr	r2, [pc, #48]	@ (8009b74 <dcd_int_disable+0x4c>)
 8009b42:	011b      	lsls	r3, r3, #4
 8009b44:	4413      	add	r3, r2
 8009b46:	3304      	adds	r3, #4
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 8009b4c:	7b7b      	ldrb	r3, [r7, #13]
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d005      	beq.n	8009b5e <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 8009b52:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009b56:	4618      	mov	r0, r3
 8009b58:	f7ff fb16 	bl	8009188 <__NVIC_EnableIRQ>
}
 8009b5c:	e004      	b.n	8009b68 <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 8009b5e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8009b62:	4618      	mov	r0, r3
 8009b64:	f7ff fb2e 	bl	80091c4 <__NVIC_DisableIRQ>
}
 8009b68:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 8009b6a:	bf00      	nop
 8009b6c:	3710      	adds	r7, #16
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	bd80      	pop	{r7, pc}
 8009b72:	bf00      	nop
 8009b74:	0800d1f0 	.word	0x0800d1f0

08009b78 <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	4603      	mov	r3, r0
 8009b80:	460a      	mov	r2, r1
 8009b82:	71fb      	strb	r3, [r7, #7]
 8009b84:	4613      	mov	r3, r2
 8009b86:	71bb      	strb	r3, [r7, #6]
 8009b88:	79fb      	ldrb	r3, [r7, #7]
 8009b8a:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009b8c:	7a7b      	ldrb	r3, [r7, #9]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d001      	beq.n	8009b96 <dcd_set_address+0x1e>
    rhport = 0;
 8009b92:	2300      	movs	r3, #0
 8009b94:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009b96:	7a7b      	ldrb	r3, [r7, #9]
 8009b98:	4a14      	ldr	r2, [pc, #80]	@ (8009bec <dcd_set_address+0x74>)
 8009b9a:	011b      	lsls	r3, r3, #4
 8009b9c:	4413      	add	r3, r2
 8009b9e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009ba0:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8009ba8:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 8009bac:	79bb      	ldrb	r3, [r7, #6]
 8009bae:	011b      	lsls	r3, r3, #4
 8009bb0:	431a      	orrs	r2, r3
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 8009bb8:	2300      	movs	r3, #0
 8009bba:	72fb      	strb	r3, [r7, #11]
 8009bbc:	2301      	movs	r3, #1
 8009bbe:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 8009bc0:	7abb      	ldrb	r3, [r7, #10]
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	d002      	beq.n	8009bcc <dcd_set_address+0x54>
 8009bc6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 8009bca:	e000      	b.n	8009bce <dcd_set_address+0x56>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8009bd2:	4313      	orrs	r3, r2
 8009bd4:	b25b      	sxtb	r3, r3
 8009bd6:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 8009bd8:	79f8      	ldrb	r0, [r7, #7]
 8009bda:	2300      	movs	r3, #0
 8009bdc:	2200      	movs	r2, #0
 8009bde:	f000 f98b 	bl	8009ef8 <dcd_edpt_xfer>
}
 8009be2:	bf00      	nop
 8009be4:	3710      	adds	r7, #16
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	0800d1f0 	.word	0x0800d1f0

08009bf0 <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 8009bf0:	b480      	push	{r7}
 8009bf2:	b087      	sub	sp, #28
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	4603      	mov	r3, r0
 8009bf8:	71fb      	strb	r3, [r7, #7]
 8009bfa:	79fb      	ldrb	r3, [r7, #7]
 8009bfc:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009bfe:	7bfb      	ldrb	r3, [r7, #15]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	d001      	beq.n	8009c08 <dcd_remote_wakeup+0x18>
    rhport = 0;
 8009c04:	2300      	movs	r3, #0
 8009c06:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009c08:	7bfb      	ldrb	r3, [r7, #15]
 8009c0a:	4a19      	ldr	r2, [pc, #100]	@ (8009c70 <dcd_remote_wakeup+0x80>)
 8009c0c:	011b      	lsls	r3, r3, #4
 8009c0e:	4413      	add	r3, r2
 8009c10:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009c12:	617b      	str	r3, [r7, #20]

  // set remote wakeup
  dwc2->dctl |= DCTL_RWUSIG;
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8009c1a:	f043 0201 	orr.w	r2, r3, #1
 8009c1e:	697b      	ldr	r3, [r7, #20]
 8009c20:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  // enable SOF to detect bus resume
  dwc2->gintsts = GINTSTS_SOF;
 8009c24:	697b      	ldr	r3, [r7, #20]
 8009c26:	2208      	movs	r2, #8
 8009c28:	615a      	str	r2, [r3, #20]
  dwc2->gintmsk |= GINTMSK_SOFM;
 8009c2a:	697b      	ldr	r3, [r7, #20]
 8009c2c:	699b      	ldr	r3, [r3, #24]
 8009c2e:	f043 0208 	orr.w	r2, r3, #8
 8009c32:	697b      	ldr	r3, [r7, #20]
 8009c34:	619a      	str	r2, [r3, #24]
#define dwc2_dcd_int_disable(_rhport) dwc2_int_set(_rhport, TUSB_ROLE_DEVICE, false)


TU_ATTR_ALWAYS_INLINE static inline void dwc2_remote_wakeup_delay(void) {
  // try to delay for 1 ms
  uint32_t count = SystemCoreClock / 1000;
 8009c36:	4b0f      	ldr	r3, [pc, #60]	@ (8009c74 <dcd_remote_wakeup+0x84>)
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a0f      	ldr	r2, [pc, #60]	@ (8009c78 <dcd_remote_wakeup+0x88>)
 8009c3c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c40:	099b      	lsrs	r3, r3, #6
 8009c42:	613b      	str	r3, [r7, #16]
  while (count--) __NOP();
 8009c44:	e000      	b.n	8009c48 <dcd_remote_wakeup+0x58>
 8009c46:	bf00      	nop
 8009c48:	693b      	ldr	r3, [r7, #16]
 8009c4a:	1e5a      	subs	r2, r3, #1
 8009c4c:	613a      	str	r2, [r7, #16]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d1f9      	bne.n	8009c46 <dcd_remote_wakeup+0x56>
}
 8009c52:	bf00      	nop

  // Per specs: remote wakeup signal bit must be clear within 1-15ms
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8009c5a:	f023 0201 	bic.w	r2, r3, #1
 8009c5e:	697b      	ldr	r3, [r7, #20]
 8009c60:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8009c64:	bf00      	nop
 8009c66:	371c      	adds	r7, #28
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	0800d1f0 	.word	0x0800d1f0
 8009c74:	20000000 	.word	0x20000000
 8009c78:	10624dd3 	.word	0x10624dd3

08009c7c <dcd_connect>:

void dcd_connect(uint8_t rhport) {
 8009c7c:	b480      	push	{r7}
 8009c7e:	b085      	sub	sp, #20
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	4603      	mov	r3, r0
 8009c84:	71fb      	strb	r3, [r7, #7]
 8009c86:	79fb      	ldrb	r3, [r7, #7]
 8009c88:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009c8a:	7afb      	ldrb	r3, [r7, #11]
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d001      	beq.n	8009c94 <dcd_connect+0x18>
    rhport = 0;
 8009c90:	2300      	movs	r3, #0
 8009c92:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009c94:	7afb      	ldrb	r3, [r7, #11]
 8009c96:	4a09      	ldr	r2, [pc, #36]	@ (8009cbc <dcd_connect+0x40>)
 8009c98:	011b      	lsls	r3, r3, #4
 8009c9a:	4413      	add	r3, r2
 8009c9c:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009c9e:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8009ca6:	f023 0202 	bic.w	r2, r3, #2
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8009cb0:	bf00      	nop
 8009cb2:	3714      	adds	r7, #20
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cba:	4770      	bx	lr
 8009cbc:	0800d1f0 	.word	0x0800d1f0

08009cc0 <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 8009cc0:	b480      	push	{r7}
 8009cc2:	b085      	sub	sp, #20
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	4603      	mov	r3, r0
 8009cc8:	71fb      	strb	r3, [r7, #7]
 8009cca:	79fb      	ldrb	r3, [r7, #7]
 8009ccc:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009cce:	7afb      	ldrb	r3, [r7, #11]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d001      	beq.n	8009cd8 <dcd_disconnect+0x18>
    rhport = 0;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009cd8:	7afb      	ldrb	r3, [r7, #11]
 8009cda:	4a09      	ldr	r2, [pc, #36]	@ (8009d00 <dcd_disconnect+0x40>)
 8009cdc:	011b      	lsls	r3, r3, #4
 8009cde:	4413      	add	r3, r2
 8009ce0:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009ce2:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8009cea:	f043 0202 	orr.w	r2, r3, #2
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8009cf4:	bf00      	nop
 8009cf6:	3714      	adds	r7, #20
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cfe:	4770      	bx	lr
 8009d00:	0800d1f0 	.word	0x0800d1f0

08009d04 <dcd_sof_enable>:

// Be advised: audio, video and possibly other iso-ep classes use dcd_sof_enable() to enable/disable its corresponding ISR on purpose!
void dcd_sof_enable(uint8_t rhport, bool en) {
 8009d04:	b480      	push	{r7}
 8009d06:	b085      	sub	sp, #20
 8009d08:	af00      	add	r7, sp, #0
 8009d0a:	4603      	mov	r3, r0
 8009d0c:	460a      	mov	r2, r1
 8009d0e:	71fb      	strb	r3, [r7, #7]
 8009d10:	4613      	mov	r3, r2
 8009d12:	71bb      	strb	r3, [r7, #6]
 8009d14:	79fb      	ldrb	r3, [r7, #7]
 8009d16:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009d18:	7afb      	ldrb	r3, [r7, #11]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d001      	beq.n	8009d22 <dcd_sof_enable+0x1e>
    rhport = 0;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009d22:	7afb      	ldrb	r3, [r7, #11]
 8009d24:	4a10      	ldr	r2, [pc, #64]	@ (8009d68 <dcd_sof_enable+0x64>)
 8009d26:	011b      	lsls	r3, r3, #4
 8009d28:	4413      	add	r3, r2
 8009d2a:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009d2c:	60fb      	str	r3, [r7, #12]

  _dcd_data.sof_en = en;
 8009d2e:	4a0f      	ldr	r2, [pc, #60]	@ (8009d6c <dcd_sof_enable+0x68>)
 8009d30:	79bb      	ldrb	r3, [r7, #6]
 8009d32:	71d3      	strb	r3, [r2, #7]

  if (en) {
 8009d34:	79bb      	ldrb	r3, [r7, #6]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d009      	beq.n	8009d4e <dcd_sof_enable+0x4a>
    dwc2->gintsts = GINTSTS_SOF;
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2208      	movs	r2, #8
 8009d3e:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	699b      	ldr	r3, [r3, #24]
 8009d44:	f043 0208 	orr.w	r2, r3, #8
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	619a      	str	r2, [r3, #24]
  } else {
    dwc2->gintmsk &= ~GINTMSK_SOFM;
  }
}
 8009d4c:	e005      	b.n	8009d5a <dcd_sof_enable+0x56>
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	699b      	ldr	r3, [r3, #24]
 8009d52:	f023 0208 	bic.w	r2, r3, #8
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	619a      	str	r2, [r3, #24]
}
 8009d5a:	bf00      	nop
 8009d5c:	3714      	adds	r7, #20
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d64:	4770      	bx	lr
 8009d66:	bf00      	nop
 8009d68:	0800d1f0 	.word	0x0800d1f0
 8009d6c:	20000ea0 	.word	0x20000ea0

08009d70 <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b084      	sub	sp, #16
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	4603      	mov	r3, r0
 8009d78:	6039      	str	r1, [r7, #0]
 8009d7a:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	7899      	ldrb	r1, [r3, #2]
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	889b      	ldrh	r3, [r3, #4]
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009d8e:	b29a      	uxth	r2, r3
 8009d90:	79fb      	ldrb	r3, [r7, #7]
 8009d92:	4618      	mov	r0, r3
 8009d94:	f7ff fa76 	bl	8009284 <dfifo_alloc>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	f083 0301 	eor.w	r3, r3, #1
 8009d9e:	b2db      	uxtb	r3, r3
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d00a      	beq.n	8009dba <dcd_edpt_open+0x4a>
 8009da4:	4b0a      	ldr	r3, [pc, #40]	@ (8009dd0 <dcd_edpt_open+0x60>)
 8009da6:	60fb      	str	r3, [r7, #12]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f003 0301 	and.w	r3, r3, #1
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d000      	beq.n	8009db6 <dcd_edpt_open+0x46>
 8009db4:	be00      	bkpt	0x0000
 8009db6:	2300      	movs	r3, #0
 8009db8:	e005      	b.n	8009dc6 <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 8009dba:	79fb      	ldrb	r3, [r7, #7]
 8009dbc:	6839      	ldr	r1, [r7, #0]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f7ff fb9c 	bl	80094fc <edpt_activate>
  return true;
 8009dc4:	2301      	movs	r3, #1
}
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	3710      	adds	r7, #16
 8009dca:	46bd      	mov	sp, r7
 8009dcc:	bd80      	pop	{r7, pc}
 8009dce:	bf00      	nop
 8009dd0:	e000edf0 	.word	0xe000edf0

08009dd4 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 8009dd4:	b580      	push	{r7, lr}
 8009dd6:	b08a      	sub	sp, #40	@ 0x28
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	4603      	mov	r3, r0
 8009ddc:	71fb      	strb	r3, [r7, #7]
 8009dde:	79fb      	ldrb	r3, [r7, #7]
 8009de0:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009de2:	7dfb      	ldrb	r3, [r7, #23]
 8009de4:	2b00      	cmp	r3, #0
 8009de6:	d001      	beq.n	8009dec <dcd_edpt_close_all+0x18>
    rhport = 0;
 8009de8:	2300      	movs	r3, #0
 8009dea:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009dec:	7dfb      	ldrb	r3, [r7, #23]
 8009dee:	4a3f      	ldr	r2, [pc, #252]	@ (8009eec <dcd_edpt_close_all+0x118>)
 8009df0:	011b      	lsls	r3, r3, #4
 8009df2:	4413      	add	r3, r2
 8009df4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009df6:	623b      	str	r3, [r7, #32]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 8009df8:	79fb      	ldrb	r3, [r7, #7]
 8009dfa:	4a3c      	ldr	r2, [pc, #240]	@ (8009eec <dcd_edpt_close_all+0x118>)
 8009dfc:	011b      	lsls	r3, r3, #4
 8009dfe:	4413      	add	r3, r2
 8009e00:	3308      	adds	r3, #8
 8009e02:	781b      	ldrb	r3, [r3, #0]
 8009e04:	77fb      	strb	r3, [r7, #31]

  usbd_spin_lock(false);
 8009e06:	2000      	movs	r0, #0
 8009e08:	f7fe fd4a 	bl	80088a0 <usbd_spin_lock>

  _dcd_data.allocated_epin_count = 0;
 8009e0c:	4b38      	ldr	r3, [pc, #224]	@ (8009ef0 <dcd_edpt_close_all+0x11c>)
 8009e0e:	2200      	movs	r2, #0
 8009e10:	719a      	strb	r2, [r3, #6]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 8009e12:	6a3b      	ldr	r3, [r7, #32]
 8009e14:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8009e18:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 8009e1c:	2301      	movs	r3, #1
 8009e1e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009e22:	e034      	b.n	8009e8e <dcd_edpt_close_all+0xba>
    for (uint8_t d = 0; d < 2; d++) {
 8009e24:	2300      	movs	r3, #0
 8009e26:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009e2a:	e027      	b.n	8009e7c <dcd_edpt_close_all+0xa8>
      dwc2_dep_t* dep = &dwc2->ep[d][n];
 8009e2c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009e30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e34:	0112      	lsls	r2, r2, #4
 8009e36:	4413      	add	r3, r2
 8009e38:	3348      	adds	r3, #72	@ 0x48
 8009e3a:	015b      	lsls	r3, r3, #5
 8009e3c:	6a3a      	ldr	r2, [r7, #32]
 8009e3e:	4413      	add	r3, r2
 8009e40:	61bb      	str	r3, [r7, #24]
      if (dep->ctl & EPCTL_EPENA) {
 8009e42:	69bb      	ldr	r3, [r7, #24]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	da05      	bge.n	8009e56 <dcd_edpt_close_all+0x82>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 8009e4a:	69bb      	ldr	r3, [r7, #24]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f043 4290 	orr.w	r2, r3, #1207959552	@ 0x48000000
 8009e52:	69bb      	ldr	r3, [r7, #24]
 8009e54:	601a      	str	r2, [r3, #0]
      }
      xfer_status[n][1-d].max_size = 0;
 8009e56:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009e5a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e5e:	f1c3 0301 	rsb	r3, r3, #1
 8009e62:	4924      	ldr	r1, [pc, #144]	@ (8009ef4 <dcd_edpt_close_all+0x120>)
 8009e64:	0052      	lsls	r2, r2, #1
 8009e66:	4413      	add	r3, r2
 8009e68:	011b      	lsls	r3, r3, #4
 8009e6a:	440b      	add	r3, r1
 8009e6c:	330a      	adds	r3, #10
 8009e6e:	2200      	movs	r2, #0
 8009e70:	801a      	strh	r2, [r3, #0]
    for (uint8_t d = 0; d < 2; d++) {
 8009e72:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e76:	3301      	adds	r3, #1
 8009e78:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8009e7c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009e80:	2b01      	cmp	r3, #1
 8009e82:	d9d3      	bls.n	8009e2c <dcd_edpt_close_all+0x58>
  for (uint8_t n = 1; n < ep_count; n++) {
 8009e84:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e88:	3301      	adds	r3, #1
 8009e8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009e8e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009e92:	7ffb      	ldrb	r3, [r7, #31]
 8009e94:	429a      	cmp	r2, r3
 8009e96:	d3c5      	bcc.n	8009e24 <dcd_edpt_close_all+0x50>
 8009e98:	6a3b      	ldr	r3, [r7, #32]
 8009e9a:	60fb      	str	r3, [r7, #12]
 8009e9c:	2310      	movs	r3, #16
 8009e9e:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8009ea0:	7afb      	ldrb	r3, [r7, #11]
 8009ea2:	019b      	lsls	r3, r3, #6
 8009ea4:	f043 0220 	orr.w	r2, r3, #32
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8009eac:	bf00      	nop
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	691b      	ldr	r3, [r3, #16]
 8009eb2:	f003 0320 	and.w	r3, r3, #32
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d1f9      	bne.n	8009eae <dcd_edpt_close_all+0xda>
}
 8009eba:	bf00      	nop
 8009ebc:	6a3b      	ldr	r3, [r7, #32]
 8009ebe:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	2210      	movs	r2, #16
 8009ec4:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8009ec6:	bf00      	nop
 8009ec8:	693b      	ldr	r3, [r7, #16]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	f003 0310 	and.w	r3, r3, #16
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d1f9      	bne.n	8009ec8 <dcd_edpt_close_all+0xf4>
}
 8009ed4:	bf00      	nop
    }
  }

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport); // re-init dfifo
 8009ed6:	79fb      	ldrb	r3, [r7, #7]
 8009ed8:	4618      	mov	r0, r3
 8009eda:	f7ff fab5 	bl	8009448 <dfifo_device_init>

  usbd_spin_unlock(false);
 8009ede:	2000      	movs	r0, #0
 8009ee0:	f7fe fcf8 	bl	80088d4 <usbd_spin_unlock>
}
 8009ee4:	bf00      	nop
 8009ee6:	3728      	adds	r7, #40	@ 0x28
 8009ee8:	46bd      	mov	sp, r7
 8009eea:	bd80      	pop	{r7, pc}
 8009eec:	0800d1f0 	.word	0x0800d1f0
 8009ef0:	20000ea0 	.word	0x20000ea0
 8009ef4:	20000e20 	.word	0x20000e20

08009ef8 <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8009ef8:	b580      	push	{r7, lr}
 8009efa:	b086      	sub	sp, #24
 8009efc:	af00      	add	r7, sp, #0
 8009efe:	603a      	str	r2, [r7, #0]
 8009f00:	461a      	mov	r2, r3
 8009f02:	4603      	mov	r3, r0
 8009f04:	71fb      	strb	r3, [r7, #7]
 8009f06:	460b      	mov	r3, r1
 8009f08:	71bb      	strb	r3, [r7, #6]
 8009f0a:	4613      	mov	r3, r2
 8009f0c:	80bb      	strh	r3, [r7, #4]
 8009f0e:	79bb      	ldrb	r3, [r7, #6]
 8009f10:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009f12:	7bbb      	ldrb	r3, [r7, #14]
 8009f14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009f18:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8009f1a:	75bb      	strb	r3, [r7, #22]
 8009f1c:	79bb      	ldrb	r3, [r7, #6]
 8009f1e:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009f20:	7bfb      	ldrb	r3, [r7, #15]
 8009f22:	09db      	lsrs	r3, r3, #7
 8009f24:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8009f26:	757b      	strb	r3, [r7, #21]
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8009f28:	7dba      	ldrb	r2, [r7, #22]
 8009f2a:	7d7b      	ldrb	r3, [r7, #21]
 8009f2c:	0052      	lsls	r2, r2, #1
 8009f2e:	4413      	add	r3, r2
 8009f30:	011b      	lsls	r3, r3, #4
 8009f32:	4a17      	ldr	r2, [pc, #92]	@ (8009f90 <dcd_edpt_xfer+0x98>)
 8009f34:	4413      	add	r3, r2
 8009f36:	613b      	str	r3, [r7, #16]
  bool ret;

  usbd_spin_lock(false);
 8009f38:	2000      	movs	r0, #0
 8009f3a:	f7fe fcb1 	bl	80088a0 <usbd_spin_lock>

  if (xfer->max_size == 0) {
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	895b      	ldrh	r3, [r3, #10]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d102      	bne.n	8009f4c <dcd_edpt_xfer+0x54>
    ret = false;  // Endpoint is closed
 8009f46:	2300      	movs	r3, #0
 8009f48:	75fb      	strb	r3, [r7, #23]
 8009f4a:	e018      	b.n	8009f7e <dcd_edpt_xfer+0x86>
  } else {
    xfer->buffer = buffer;
 8009f4c:	693b      	ldr	r3, [r7, #16]
 8009f4e:	683a      	ldr	r2, [r7, #0]
 8009f50:	601a      	str	r2, [r3, #0]
    xfer->ff = NULL;
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	2200      	movs	r2, #0
 8009f56:	605a      	str	r2, [r3, #4]
    xfer->total_len = total_bytes;
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	88ba      	ldrh	r2, [r7, #4]
 8009f5c:	811a      	strh	r2, [r3, #8]

    // EP0 can only handle one packet
    if (epnum == 0) {
 8009f5e:	7dbb      	ldrb	r3, [r7, #22]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d104      	bne.n	8009f6e <dcd_edpt_xfer+0x76>
      _dcd_data.ep0_pending[dir] = total_bytes;
 8009f64:	7d7b      	ldrb	r3, [r7, #21]
 8009f66:	490b      	ldr	r1, [pc, #44]	@ (8009f94 <dcd_edpt_xfer+0x9c>)
 8009f68:	88ba      	ldrh	r2, [r7, #4]
 8009f6a:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir);
 8009f6e:	7d7a      	ldrb	r2, [r7, #21]
 8009f70:	7db9      	ldrb	r1, [r7, #22]
 8009f72:	79fb      	ldrb	r3, [r7, #7]
 8009f74:	4618      	mov	r0, r3
 8009f76:	f7ff fc2b 	bl	80097d0 <edpt_schedule_packets>
    ret = true;
 8009f7a:	2301      	movs	r3, #1
 8009f7c:	75fb      	strb	r3, [r7, #23]
  }

  usbd_spin_unlock(false);
 8009f7e:	2000      	movs	r0, #0
 8009f80:	f7fe fca8 	bl	80088d4 <usbd_spin_unlock>

  return ret;
 8009f84:	7dfb      	ldrb	r3, [r7, #23]
}
 8009f86:	4618      	mov	r0, r3
 8009f88:	3718      	adds	r7, #24
 8009f8a:	46bd      	mov	sp, r7
 8009f8c:	bd80      	pop	{r7, pc}
 8009f8e:	bf00      	nop
 8009f90:	20000e20 	.word	0x20000e20
 8009f94:	20000ea0 	.word	0x20000ea0

08009f98 <dcd_edpt_stall>:
  usbd_spin_unlock(false);

  return ret;
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b086      	sub	sp, #24
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	4603      	mov	r3, r0
 8009fa0:	460a      	mov	r2, r1
 8009fa2:	71fb      	strb	r3, [r7, #7]
 8009fa4:	4613      	mov	r3, r2
 8009fa6:	71bb      	strb	r3, [r7, #6]
 8009fa8:	79fb      	ldrb	r3, [r7, #7]
 8009faa:	74bb      	strb	r3, [r7, #18]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009fac:	7cbb      	ldrb	r3, [r7, #18]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d001      	beq.n	8009fb6 <dcd_edpt_stall+0x1e>
    rhport = 0;
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	74bb      	strb	r3, [r7, #18]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009fb6:	7cbb      	ldrb	r3, [r7, #18]
 8009fb8:	4a11      	ldr	r2, [pc, #68]	@ (800a000 <dcd_edpt_stall+0x68>)
 8009fba:	011b      	lsls	r3, r3, #4
 8009fbc:	4413      	add	r3, r2
 8009fbe:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009fc0:	617b      	str	r3, [r7, #20]
  edpt_disable(rhport, ep_addr, true);
 8009fc2:	79b9      	ldrb	r1, [r7, #6]
 8009fc4:	79fb      	ldrb	r3, [r7, #7]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	4618      	mov	r0, r3
 8009fca:	f7ff fb35 	bl	8009638 <edpt_disable>
 8009fce:	79bb      	ldrb	r3, [r7, #6]
 8009fd0:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009fd2:	7cfb      	ldrb	r3, [r7, #19]
 8009fd4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009fd8:	b2db      	uxtb	r3, r3
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10b      	bne.n	8009ff6 <dcd_edpt_stall+0x5e>
 8009fde:	697b      	ldr	r3, [r7, #20]
 8009fe0:	60fb      	str	r3, [r7, #12]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009fe6:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8009fe8:	2300      	movs	r3, #0
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d003      	beq.n	8009ff6 <dcd_edpt_stall+0x5e>
    dma_setup_prepare(rhport);
 8009fee:	79fb      	ldrb	r3, [r7, #7]
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7ff f90b 	bl	800920c <dma_setup_prepare>
  }
}
 8009ff6:	bf00      	nop
 8009ff8:	3718      	adds	r7, #24
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bd80      	pop	{r7, pc}
 8009ffe:	bf00      	nop
 800a000:	0800d1f0 	.word	0x0800d1f0

0800a004 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 800a004:	b480      	push	{r7}
 800a006:	b087      	sub	sp, #28
 800a008:	af00      	add	r7, sp, #0
 800a00a:	4603      	mov	r3, r0
 800a00c:	460a      	mov	r2, r1
 800a00e:	71fb      	strb	r3, [r7, #7]
 800a010:	4613      	mov	r3, r2
 800a012:	71bb      	strb	r3, [r7, #6]
 800a014:	79fb      	ldrb	r3, [r7, #7]
 800a016:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a018:	7a7b      	ldrb	r3, [r7, #9]
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <dcd_edpt_clear_stall+0x1e>
    rhport = 0;
 800a01e:	2300      	movs	r3, #0
 800a020:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a022:	7a7b      	ldrb	r3, [r7, #9]
 800a024:	4a19      	ldr	r2, [pc, #100]	@ (800a08c <dcd_edpt_clear_stall+0x88>)
 800a026:	011b      	lsls	r3, r3, #4
 800a028:	4413      	add	r3, r2
 800a02a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a02c:	617b      	str	r3, [r7, #20]
 800a02e:	79bb      	ldrb	r3, [r7, #6]
 800a030:	72bb      	strb	r3, [r7, #10]
 800a032:	7abb      	ldrb	r3, [r7, #10]
 800a034:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a038:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 800a03a:	74fb      	strb	r3, [r7, #19]
 800a03c:	79bb      	ldrb	r3, [r7, #6]
 800a03e:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800a040:	7afb      	ldrb	r3, [r7, #11]
 800a042:	09db      	lsrs	r3, r3, #7
 800a044:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 800a046:	74bb      	strb	r3, [r7, #18]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 800a048:	7cbb      	ldrb	r3, [r7, #18]
 800a04a:	2b01      	cmp	r3, #1
 800a04c:	bf14      	ite	ne
 800a04e:	2301      	movne	r3, #1
 800a050:	2300      	moveq	r3, #0
 800a052:	b2db      	uxtb	r3, r3
 800a054:	461a      	mov	r2, r3
 800a056:	7cfb      	ldrb	r3, [r7, #19]
 800a058:	0112      	lsls	r2, r2, #4
 800a05a:	4413      	add	r3, r2
 800a05c:	3348      	adds	r3, #72	@ 0x48
 800a05e:	015b      	lsls	r3, r3, #5
 800a060:	697a      	ldr	r2, [r7, #20]
 800a062:	4413      	add	r3, r2
 800a064:	60fb      	str	r3, [r7, #12]

  // Clear stall and reset data toggle
  dep->ctl &= ~EPCTL_STALL;;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	601a      	str	r2, [r3, #0]
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	601a      	str	r2, [r3, #0]
}
 800a07e:	bf00      	nop
 800a080:	371c      	adds	r7, #28
 800a082:	46bd      	mov	sp, r7
 800a084:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a088:	4770      	bx	lr
 800a08a:	bf00      	nop
 800a08c:	0800d1f0 	.word	0x0800d1f0

0800a090 <handle_bus_reset>:
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
// Must be called from critical section
static void handle_bus_reset(uint8_t rhport) {
 800a090:	b580      	push	{r7, lr}
 800a092:	b08e      	sub	sp, #56	@ 0x38
 800a094:	af00      	add	r7, sp, #0
 800a096:	4603      	mov	r3, r0
 800a098:	71fb      	strb	r3, [r7, #7]
 800a09a:	79fb      	ldrb	r3, [r7, #7]
 800a09c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a0a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d002      	beq.n	800a0ae <handle_bus_reset+0x1e>
    rhport = 0;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a0ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a0b2:	4a6a      	ldr	r2, [pc, #424]	@ (800a25c <handle_bus_reset+0x1cc>)
 800a0b4:	011b      	lsls	r3, r3, #4
 800a0b6:	4413      	add	r3, r2
 800a0b8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800a0ba:	633b      	str	r3, [r7, #48]	@ 0x30
 800a0bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a0be:	62bb      	str	r3, [r7, #40]	@ 0x28
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a0c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a0c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a0c4:	60bb      	str	r3, [r7, #8]
  return ghwcfg2.num_dev_ep + 1;
 800a0c6:	7a7b      	ldrb	r3, [r7, #9]
 800a0c8:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800a0cc:	b2db      	uxtb	r3, r3
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	b2db      	uxtb	r3, r3
  const uint8_t ep_count =  dwc2_ep_count(dwc2);
 800a0d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  tu_memclr(xfer_status, sizeof(xfer_status));
 800a0d6:	2280      	movs	r2, #128	@ 0x80
 800a0d8:	2100      	movs	r1, #0
 800a0da:	4861      	ldr	r0, [pc, #388]	@ (800a260 <handle_bus_reset+0x1d0>)
 800a0dc:	f001 faae 	bl	800b63c <memset>

  _dcd_data.sof_en = false;
 800a0e0:	4b60      	ldr	r3, [pc, #384]	@ (800a264 <handle_bus_reset+0x1d4>)
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 800a0e6:	4b5f      	ldr	r3, [pc, #380]	@ (800a264 <handle_bus_reset+0x1d4>)
 800a0e8:	2200      	movs	r2, #0
 800a0ea:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a0f2:	e014      	b.n	800a11e <handle_bus_reset+0x8e>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 800a0f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a0f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a0fa:	3358      	adds	r3, #88	@ 0x58
 800a0fc:	015b      	lsls	r3, r3, #5
 800a0fe:	4413      	add	r3, r2
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a106:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 800a10a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a10c:	3358      	adds	r3, #88	@ 0x58
 800a10e:	015b      	lsls	r3, r3, #5
 800a110:	440b      	add	r3, r1
 800a112:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 800a114:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a118:	3301      	adds	r3, #1
 800a11a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a11e:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800a122:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a126:	429a      	cmp	r2, r3
 800a128:	d3e4      	bcc.n	800a0f4 <handle_bus_reset+0x64>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 800a12a:	2300      	movs	r3, #0
 800a12c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800a130:	e01d      	b.n	800a16e <handle_bus_reset+0xde>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 800a132:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a136:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a138:	3348      	adds	r3, #72	@ 0x48
 800a13a:	015b      	lsls	r3, r3, #5
 800a13c:	4413      	add	r3, r2
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	2b00      	cmp	r3, #0
 800a142:	da0f      	bge.n	800a164 <handle_bus_reset+0xd4>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 800a144:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a148:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a14a:	3348      	adds	r3, #72	@ 0x48
 800a14c:	015b      	lsls	r3, r3, #5
 800a14e:	4413      	add	r3, r2
 800a150:	681a      	ldr	r2, [r3, #0]
 800a152:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a156:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 800a15a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a15c:	3348      	adds	r3, #72	@ 0x48
 800a15e:	015b      	lsls	r3, r3, #5
 800a160:	440b      	add	r3, r1
 800a162:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 800a164:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a168:	3301      	adds	r3, #1
 800a16a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 800a16e:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 800a172:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a176:	429a      	cmp	r2, r3
 800a178:	d3db      	bcc.n	800a132 <handle_bus_reset+0xa2>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 800a17a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a17c:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 800a180:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 800a184:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a186:	2209      	movs	r2, #9
 800a188:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 800a18c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18e:	2209      	movs	r2, #9
 800a190:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 800a194:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a196:	61bb      	str	r3, [r7, #24]
 800a198:	2310      	movs	r3, #16
 800a19a:	75fb      	strb	r3, [r7, #23]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800a19c:	7dfb      	ldrb	r3, [r7, #23]
 800a19e:	019b      	lsls	r3, r3, #6
 800a1a0:	f043 0220 	orr.w	r2, r3, #32
 800a1a4:	69bb      	ldr	r3, [r7, #24]
 800a1a6:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800a1a8:	bf00      	nop
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	f003 0320 	and.w	r3, r3, #32
 800a1b2:	2b00      	cmp	r3, #0
 800a1b4:	d1f9      	bne.n	800a1aa <handle_bus_reset+0x11a>
}
 800a1b6:	bf00      	nop
 800a1b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ba:	61fb      	str	r3, [r7, #28]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800a1bc:	69fb      	ldr	r3, [r7, #28]
 800a1be:	2210      	movs	r2, #16
 800a1c0:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800a1c2:	bf00      	nop
 800a1c4:	69fb      	ldr	r3, [r7, #28]
 800a1c6:	691b      	ldr	r3, [r3, #16]
 800a1c8:	f003 0310 	and.w	r3, r3, #16
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d1f9      	bne.n	800a1c4 <handle_bus_reset+0x134>
}
 800a1d0:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 800a1d2:	79fb      	ldrb	r3, [r7, #7]
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	f7ff f937 	bl	8009448 <dfifo_device_init>

  // 5. Reset device address
  dwc2_dcfg_t dcfg = {.value = dwc2->dcfg};
 800a1da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1dc:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800a1e0:	613b      	str	r3, [r7, #16]
  dcfg.address = 0;
 800a1e2:	8a3b      	ldrh	r3, [r7, #16]
 800a1e4:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a1e8:	823b      	strh	r3, [r7, #16]
  dwc2->dcfg = dcfg.value;
 800a1ea:	693a      	ldr	r2, [r7, #16]
 800a1ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ee:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 800a1f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f4:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 800a1f8:	f023 0203 	bic.w	r2, r3, #3
 800a1fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1fe:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 800a202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a204:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 800a208:	f023 0203 	bic.w	r2, r3, #3
 800a20c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a20e:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 800a212:	4b13      	ldr	r3, [pc, #76]	@ (800a260 <handle_bus_reset+0x1d0>)
 800a214:	2240      	movs	r2, #64	@ 0x40
 800a216:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 800a218:	4b11      	ldr	r3, [pc, #68]	@ (800a260 <handle_bus_reset+0x1d0>)
 800a21a:	2240      	movs	r2, #64	@ 0x40
 800a21c:	835a      	strh	r2, [r3, #26]
 800a21e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a220:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a222:	6a3b      	ldr	r3, [r7, #32]
 800a224:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a226:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800a228:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d004      	beq.n	800a238 <handle_bus_reset+0x1a8>
    dma_setup_prepare(rhport);
 800a22e:	79fb      	ldrb	r3, [r7, #7]
 800a230:	4618      	mov	r0, r3
 800a232:	f7fe ffeb 	bl	800920c <dma_setup_prepare>
 800a236:	e007      	b.n	800a248 <handle_bus_reset+0x1b8>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800a238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a23a:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 800a23e:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800a242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a244:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 800a248:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a24a:	699b      	ldr	r3, [r3, #24]
 800a24c:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 800a250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a252:	619a      	str	r2, [r3, #24]
}
 800a254:	bf00      	nop
 800a256:	3738      	adds	r7, #56	@ 0x38
 800a258:	46bd      	mov	sp, r7
 800a25a:	bd80      	pop	{r7, pc}
 800a25c:	0800d1f0 	.word	0x0800d1f0
 800a260:	20000e20 	.word	0x20000e20
 800a264:	20000ea0 	.word	0x20000ea0

0800a268 <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 800a268:	b580      	push	{r7, lr}
 800a26a:	b08a      	sub	sp, #40	@ 0x28
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	4603      	mov	r3, r0
 800a270:	71fb      	strb	r3, [r7, #7]
 800a272:	79fb      	ldrb	r3, [r7, #7]
 800a274:	77fb      	strb	r3, [r7, #31]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a276:	7ffb      	ldrb	r3, [r7, #31]
 800a278:	2b00      	cmp	r3, #0
 800a27a:	d001      	beq.n	800a280 <handle_enum_done+0x18>
    rhport = 0;
 800a27c:	2300      	movs	r3, #0
 800a27e:	77fb      	strb	r3, [r7, #31]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a280:	7ffb      	ldrb	r3, [r7, #31]
 800a282:	4a1b      	ldr	r2, [pc, #108]	@ (800a2f0 <handle_enum_done+0x88>)
 800a284:	011b      	lsls	r3, r3, #4
 800a286:	4413      	add	r3, r2
 800a288:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 800a28a:	623b      	str	r3, [r7, #32]
  const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800a292:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dsts.enum_speed) {
 800a294:	7e3b      	ldrb	r3, [r7, #24]
 800a296:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800a29a:	b2db      	uxtb	r3, r3
 800a29c:	2b00      	cmp	r3, #0
 800a29e:	d002      	beq.n	800a2a6 <handle_enum_done+0x3e>
 800a2a0:	2b02      	cmp	r3, #2
 800a2a2:	d004      	beq.n	800a2ae <handle_enum_done+0x46>
 800a2a4:	e007      	b.n	800a2b6 <handle_enum_done+0x4e>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 800a2a6:	2302      	movs	r3, #2
 800a2a8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800a2ac:	e007      	b.n	800a2be <handle_enum_done+0x56>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800a2b4:	e003      	b.n	800a2be <handle_enum_done+0x56>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 800a2bc:	bf00      	nop
 800a2be:	79fb      	ldrb	r3, [r7, #7]
 800a2c0:	77bb      	strb	r3, [r7, #30]
 800a2c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a2c6:	777b      	strb	r3, [r7, #29]
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	773b      	strb	r3, [r7, #28]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800a2cc:	7fbb      	ldrb	r3, [r7, #30]
 800a2ce:	733b      	strb	r3, [r7, #12]
  event.event_id = DCD_EVENT_BUS_RESET;
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	737b      	strb	r3, [r7, #13]
  event.bus_reset.speed = speed;
 800a2d4:	7f7b      	ldrb	r3, [r7, #29]
 800a2d6:	743b      	strb	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 800a2d8:	7f3a      	ldrb	r2, [r7, #28]
 800a2da:	f107 030c 	add.w	r3, r7, #12
 800a2de:	4611      	mov	r1, r2
 800a2e0:	4618      	mov	r0, r3
 800a2e2:	f7fe f8df 	bl	80084a4 <dcd_event_handler>
}
 800a2e6:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 800a2e8:	bf00      	nop
 800a2ea:	3728      	adds	r7, #40	@ 0x28
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	bd80      	pop	{r7, pc}
 800a2f0:	0800d1f0 	.word	0x0800d1f0

0800a2f4 <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b08c      	sub	sp, #48	@ 0x30
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	71fb      	strb	r3, [r7, #7]
 800a2fe:	79fb      	ldrb	r3, [r7, #7]
 800a300:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a302:	7cfb      	ldrb	r3, [r7, #19]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d001      	beq.n	800a30c <handle_rxflvl_irq+0x18>
    rhport = 0;
 800a308:	2300      	movs	r3, #0
 800a30a:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a30c:	7cfb      	ldrb	r3, [r7, #19]
 800a30e:	4a49      	ldr	r2, [pc, #292]	@ (800a434 <handle_rxflvl_irq+0x140>)
 800a310:	011b      	lsls	r3, r3, #4
 800a312:	4413      	add	r3, r2
 800a314:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a316:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800a318:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a31a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a31e:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp = {.value = dwc2->grxstsp};
 800a320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a322:	6a1b      	ldr	r3, [r3, #32]
 800a324:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp.ep_ch_num;
 800a326:	7b3b      	ldrb	r3, [r7, #12]
 800a328:	f3c3 0303 	ubfx	r3, r3, #0, #4
 800a32c:	b2db      	uxtb	r3, r3
 800a32e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 800a332:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a336:	3358      	adds	r3, #88	@ 0x58
 800a338:	015b      	lsls	r3, r3, #5
 800a33a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a33c:	4413      	add	r3, r2
 800a33e:	623b      	str	r3, [r7, #32]

  switch (grxstsp.packet_status) {
 800a340:	7bbb      	ldrb	r3, [r7, #14]
 800a342:	f3c3 0343 	ubfx	r3, r3, #1, #4
 800a346:	b2db      	uxtb	r3, r3
 800a348:	3b01      	subs	r3, #1
 800a34a:	2b05      	cmp	r3, #5
 800a34c:	d86a      	bhi.n	800a424 <handle_rxflvl_irq+0x130>
 800a34e:	a201      	add	r2, pc, #4	@ (adr r2, 800a354 <handle_rxflvl_irq+0x60>)
 800a350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a354:	0800a425 	.word	0x0800a425
 800a358:	0800a393 	.word	0x0800a393
 800a35c:	0800a425 	.word	0x0800a425
 800a360:	0800a385 	.word	0x0800a385
 800a364:	0800a425 	.word	0x0800a425
 800a368:	0800a36d 	.word	0x0800a36d
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 800a36c:	4b32      	ldr	r3, [pc, #200]	@ (800a438 <handle_rxflvl_irq+0x144>)
 800a36e:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 800a370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a372:	681a      	ldr	r2, [r3, #0]
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	3304      	adds	r3, #4
 800a37c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a37e:	6812      	ldr	r2, [r2, #0]
 800a380:	601a      	str	r2, [r3, #0]
      break;
 800a382:	e052      	b.n	800a42a <handle_rxflvl_irq+0x136>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 800a384:	6a3b      	ldr	r3, [r7, #32]
 800a386:	691b      	ldr	r3, [r3, #16]
 800a388:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 800a38c:	6a3b      	ldr	r3, [r7, #32]
 800a38e:	611a      	str	r2, [r3, #16]
      break;
 800a390:	e04b      	b.n	800a42a <handle_rxflvl_irq+0x136>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp.byte_count;
 800a392:	89bb      	ldrh	r3, [r7, #12]
 800a394:	f3c3 130a 	ubfx	r3, r3, #4, #11
 800a398:	b29b      	uxth	r3, r3
 800a39a:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800a39c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a3a0:	015b      	lsls	r3, r3, #5
 800a3a2:	4a26      	ldr	r2, [pc, #152]	@ (800a43c <handle_rxflvl_irq+0x148>)
 800a3a4:	4413      	add	r3, r2
 800a3a6:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 800a3a8:	8b7b      	ldrh	r3, [r7, #26]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d03c      	beq.n	800a428 <handle_rxflvl_irq+0x134>
        // Read packet off RxFIFO
        if (xfer->ff) {
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	685b      	ldr	r3, [r3, #4]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d007      	beq.n	800a3c6 <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 800a3b6:	697b      	ldr	r3, [r7, #20]
 800a3b8:	685b      	ldr	r3, [r3, #4]
 800a3ba:	8b7a      	ldrh	r2, [r7, #26]
 800a3bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a3be:	4618      	mov	r0, r3
 800a3c0:	f7fc ff72 	bl	80072a8 <tu_fifo_write_n_const_addr_full_words>
 800a3c4:	e00c      	b.n	800a3e0 <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	8b7a      	ldrh	r2, [r7, #26]
 800a3cc:	4619      	mov	r1, r3
 800a3ce:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a3d0:	f000 fd70 	bl	800aeb4 <dfifo_read_packet>
          xfer->buffer += byte_count;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	8b7b      	ldrh	r3, [r7, #26]
 800a3da:	441a      	add	r2, r3
 800a3dc:	697b      	ldr	r3, [r7, #20]
 800a3de:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	895b      	ldrh	r3, [r3, #10]
 800a3e4:	8b7a      	ldrh	r2, [r7, #26]
 800a3e6:	429a      	cmp	r2, r3
 800a3e8:	d21e      	bcs.n	800a428 <handle_rxflvl_irq+0x134>
          const dwc2_ep_tsize_t tsiz = {.value = epout->tsiz};
 800a3ea:	6a3b      	ldr	r3, [r7, #32]
 800a3ec:	691b      	ldr	r3, [r3, #16]
 800a3ee:	60bb      	str	r3, [r7, #8]
          xfer->total_len -= tsiz.xfer_size;
 800a3f0:	697b      	ldr	r3, [r7, #20]
 800a3f2:	891a      	ldrh	r2, [r3, #8]
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	1ad3      	subs	r3, r2, r3
 800a3fe:	b29a      	uxth	r2, r3
 800a400:	697b      	ldr	r3, [r7, #20]
 800a402:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 800a404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d10d      	bne.n	800a428 <handle_rxflvl_irq+0x134>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 800a40c:	697b      	ldr	r3, [r7, #20]
 800a40e:	891a      	ldrh	r2, [r3, #8]
 800a410:	4b0b      	ldr	r3, [pc, #44]	@ (800a440 <handle_rxflvl_irq+0x14c>)
 800a412:	881b      	ldrh	r3, [r3, #0]
 800a414:	1ad3      	subs	r3, r2, r3
 800a416:	b29a      	uxth	r2, r3
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 800a41c:	4b08      	ldr	r3, [pc, #32]	@ (800a440 <handle_rxflvl_irq+0x14c>)
 800a41e:	2200      	movs	r2, #0
 800a420:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 800a422:	e001      	b.n	800a428 <handle_rxflvl_irq+0x134>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 800a424:	bf00      	nop
 800a426:	e000      	b.n	800a42a <handle_rxflvl_irq+0x136>
      break;
 800a428:	bf00      	nop
  }
}
 800a42a:	bf00      	nop
 800a42c:	3730      	adds	r7, #48	@ 0x30
 800a42e:	46bd      	mov	sp, r7
 800a430:	bd80      	pop	{r7, pc}
 800a432:	bf00      	nop
 800a434:	0800d1f0 	.word	0x0800d1f0
 800a438:	20000ea8 	.word	0x20000ea8
 800a43c:	20000e20 	.word	0x20000e20
 800a440:	20000ea0 	.word	0x20000ea0

0800a444 <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 800a444:	b580      	push	{r7, lr}
 800a446:	b08e      	sub	sp, #56	@ 0x38
 800a448:	af00      	add	r7, sp, #0
 800a44a:	4603      	mov	r3, r0
 800a44c:	603a      	str	r2, [r7, #0]
 800a44e:	71fb      	strb	r3, [r7, #7]
 800a450:	460b      	mov	r3, r1
 800a452:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 800a454:	783b      	ldrb	r3, [r7, #0]
 800a456:	f003 0308 	and.w	r3, r3, #8
 800a45a:	b2db      	uxtb	r3, r3
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d01c      	beq.n	800a49a <handle_epout_slave+0x56>
 800a460:	79fb      	ldrb	r3, [r7, #7]
 800a462:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800a466:	4b34      	ldr	r3, [pc, #208]	@ (800a538 <handle_epout_slave+0xf4>)
 800a468:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a46a:	2301      	movs	r3, #1
 800a46c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800a470:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a474:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 800a476:	2306      	movs	r3, #6
 800a478:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 800a47a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a47c:	f107 0318 	add.w	r3, r7, #24
 800a480:	6810      	ldr	r0, [r2, #0]
 800a482:	6851      	ldr	r1, [r2, #4]
 800a484:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 800a486:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800a48a:	f107 0314 	add.w	r3, r7, #20
 800a48e:	4611      	mov	r1, r2
 800a490:	4618      	mov	r0, r3
 800a492:	f7fe f807 	bl	80084a4 <dcd_event_handler>
}
 800a496:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 800a498:	e04a      	b.n	800a530 <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 800a49a:	783b      	ldrb	r3, [r7, #0]
 800a49c:	f003 0301 	and.w	r3, r3, #1
 800a4a0:	b2db      	uxtb	r3, r3
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d044      	beq.n	800a530 <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 800a4a6:	783b      	ldrb	r3, [r7, #0]
 800a4a8:	f003 0320 	and.w	r3, r3, #32
 800a4ac:	b2db      	uxtb	r3, r3
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d13e      	bne.n	800a530 <handle_epout_slave+0xec>
 800a4b2:	787b      	ldrb	r3, [r7, #1]
 800a4b4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a4b8:	b2db      	uxtb	r3, r3
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d138      	bne.n	800a530 <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 800a4be:	79bb      	ldrb	r3, [r7, #6]
 800a4c0:	015b      	lsls	r3, r3, #5
 800a4c2:	4a1e      	ldr	r2, [pc, #120]	@ (800a53c <handle_epout_slave+0xf8>)
 800a4c4:	4413      	add	r3, r2
 800a4c6:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 800a4c8:	79bb      	ldrb	r3, [r7, #6]
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d10a      	bne.n	800a4e4 <handle_epout_slave+0xa0>
 800a4ce:	4b1c      	ldr	r3, [pc, #112]	@ (800a540 <handle_epout_slave+0xfc>)
 800a4d0:	881b      	ldrh	r3, [r3, #0]
 800a4d2:	2b00      	cmp	r3, #0
 800a4d4:	d006      	beq.n	800a4e4 <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 800a4d6:	79b9      	ldrb	r1, [r7, #6]
 800a4d8:	79fb      	ldrb	r3, [r7, #7]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7ff f977 	bl	80097d0 <edpt_schedule_packets>
 800a4e2:	e025      	b.n	800a530 <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800a4e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4e6:	891b      	ldrh	r3, [r3, #8]
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	79fb      	ldrb	r3, [r7, #7]
 800a4ec:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a4f0:	79bb      	ldrb	r3, [r7, #6]
 800a4f2:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800a4f6:	627a      	str	r2, [r7, #36]	@ 0x24
 800a4f8:	2300      	movs	r3, #0
 800a4fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a4fe:	2301      	movs	r3, #1
 800a500:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800a504:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a508:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800a50a:	2307      	movs	r3, #7
 800a50c:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 800a50e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a512:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 800a514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a516:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 800a518:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a51c:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 800a51e:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800a522:	f107 0308 	add.w	r3, r7, #8
 800a526:	4611      	mov	r1, r2
 800a528:	4618      	mov	r0, r3
 800a52a:	f7fd ffbb 	bl	80084a4 <dcd_event_handler>
}
 800a52e:	bf00      	nop
      }
    }
  }
}
 800a530:	3738      	adds	r7, #56	@ 0x38
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	20000ea8 	.word	0x20000ea8
 800a53c:	20000e20 	.word	0x20000e20
 800a540:	20000ea0 	.word	0x20000ea0

0800a544 <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 800a544:	b580      	push	{r7, lr}
 800a546:	b092      	sub	sp, #72	@ 0x48
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	603a      	str	r2, [r7, #0]
 800a54e:	71fb      	strb	r3, [r7, #7]
 800a550:	460b      	mov	r3, r1
 800a552:	71bb      	strb	r3, [r7, #6]
 800a554:	79fb      	ldrb	r3, [r7, #7]
 800a556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a55a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d002      	beq.n	800a568 <handle_epin_slave+0x24>
    rhport = 0;
 800a562:	2300      	movs	r3, #0
 800a564:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a568:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a56c:	4a64      	ldr	r2, [pc, #400]	@ (800a700 <handle_epin_slave+0x1bc>)
 800a56e:	011b      	lsls	r3, r3, #4
 800a570:	4413      	add	r3, r2
 800a572:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a574:	643b      	str	r3, [r7, #64]	@ 0x40
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 800a576:	79bb      	ldrb	r3, [r7, #6]
 800a578:	3348      	adds	r3, #72	@ 0x48
 800a57a:	015b      	lsls	r3, r3, #5
 800a57c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a57e:	4413      	add	r3, r2
 800a580:	63fb      	str	r3, [r7, #60]	@ 0x3c
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 800a582:	79bb      	ldrb	r3, [r7, #6]
 800a584:	015b      	lsls	r3, r3, #5
 800a586:	3310      	adds	r3, #16
 800a588:	4a5e      	ldr	r2, [pc, #376]	@ (800a704 <handle_epin_slave+0x1c0>)
 800a58a:	4413      	add	r3, r2
 800a58c:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (diepint_bm.xfer_complete) {
 800a58e:	783b      	ldrb	r3, [r7, #0]
 800a590:	f003 0301 	and.w	r3, r3, #1
 800a594:	b2db      	uxtb	r3, r3
 800a596:	2b00      	cmp	r3, #0
 800a598:	d037      	beq.n	800a60a <handle_epin_slave+0xc6>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 800a59a:	79bb      	ldrb	r3, [r7, #6]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d10a      	bne.n	800a5b6 <handle_epin_slave+0x72>
 800a5a0:	4b59      	ldr	r3, [pc, #356]	@ (800a708 <handle_epin_slave+0x1c4>)
 800a5a2:	885b      	ldrh	r3, [r3, #2]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d006      	beq.n	800a5b6 <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 800a5a8:	79b9      	ldrb	r1, [r7, #6]
 800a5aa:	79fb      	ldrb	r3, [r7, #7]
 800a5ac:	2201      	movs	r2, #1
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7ff f90e 	bl	80097d0 <edpt_schedule_packets>
 800a5b4:	e029      	b.n	800a60a <handle_epin_slave+0xc6>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 800a5b6:	79bb      	ldrb	r3, [r7, #6]
 800a5b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a5bc:	b2d9      	uxtb	r1, r3
 800a5be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5c0:	891b      	ldrh	r3, [r3, #8]
 800a5c2:	461a      	mov	r2, r3
 800a5c4:	79fb      	ldrb	r3, [r7, #7]
 800a5c6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800a5d0:	627a      	str	r2, [r7, #36]	@ 0x24
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800a5d8:	2301      	movs	r3, #1
 800a5da:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  event.rhport = rhport;
 800a5de:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800a5e2:	743b      	strb	r3, [r7, #16]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 800a5e4:	2307      	movs	r3, #7
 800a5e6:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 800a5e8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800a5ec:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 800a5ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5f0:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 800a5f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a5f6:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800a5f8:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800a5fc:	f107 0310 	add.w	r3, r7, #16
 800a600:	4611      	mov	r1, r2
 800a602:	4618      	mov	r0, r3
 800a604:	f7fd ff4e 	bl	80084a4 <dcd_event_handler>
}
 800a608:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 800a60a:	783b      	ldrb	r3, [r7, #0]
 800a60c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a610:	b2db      	uxtb	r3, r3
 800a612:	2b00      	cmp	r3, #0
 800a614:	d070      	beq.n	800a6f8 <handle_epin_slave+0x1b4>
 800a616:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a618:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800a61c:	79ba      	ldrb	r2, [r7, #6]
 800a61e:	2101      	movs	r1, #1
 800a620:	fa01 f202 	lsl.w	r2, r1, r2
 800a624:	4013      	ands	r3, r2
 800a626:	2b00      	cmp	r3, #0
 800a628:	d066      	beq.n	800a6f8 <handle_epin_slave+0x1b4>
    dwc2_ep_tsize_t tsiz = {.value = epin->tsiz};
 800a62a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	60fb      	str	r3, [r7, #12]
    const uint16_t remain_packets = tsiz.packet_count;
 800a630:	89fb      	ldrh	r3, [r7, #14]
 800a632:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 800a636:	b29b      	uxth	r3, r3
 800a638:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 800a63a:	2300      	movs	r3, #0
 800a63c:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a640:	e03f      	b.n	800a6c2 <handle_epin_slave+0x17e>
      tsiz.value = epin->tsiz;
 800a642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	60fb      	str	r3, [r7, #12]
      const uint16_t remain_bytes = (uint16_t) tsiz.xfer_size;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a64e:	86bb      	strh	r3, [r7, #52]	@ 0x34
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 800a650:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a652:	895a      	ldrh	r2, [r3, #10]
 800a654:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800a656:	843b      	strh	r3, [r7, #32]
 800a658:	4613      	mov	r3, r2
 800a65a:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 800a65c:	8c3a      	ldrh	r2, [r7, #32]
 800a65e:	8bfb      	ldrh	r3, [r7, #30]
 800a660:	4293      	cmp	r3, r2
 800a662:	bf28      	it	cs
 800a664:	4613      	movcs	r3, r2
 800a666:	b29b      	uxth	r3, r3
 800a668:	867b      	strh	r3, [r7, #50]	@ 0x32

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 800a66a:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800a66c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a66e:	699b      	ldr	r3, [r3, #24]
 800a670:	0099      	lsls	r1, r3, #2
 800a672:	4b26      	ldr	r3, [pc, #152]	@ (800a70c <handle_epin_slave+0x1c8>)
 800a674:	400b      	ands	r3, r1
 800a676:	429a      	cmp	r2, r3
 800a678:	d829      	bhi.n	800a6ce <handle_epin_slave+0x18a>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 800a67a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00d      	beq.n	800a69e <handle_epin_slave+0x15a>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 800a682:	79bb      	ldrb	r3, [r7, #6]
 800a684:	3301      	adds	r3, #1
 800a686:	031b      	lsls	r3, r3, #12
 800a688:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a68a:	4413      	add	r3, r2
 800a68c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 800a68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a690:	685b      	ldr	r3, [r3, #4]
 800a692:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 800a694:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a696:	4618      	mov	r0, r3
 800a698:	f7fc fd9f 	bl	80071da <tu_fifo_read_n_const_addr_full_words>
 800a69c:	e00c      	b.n	800a6b8 <handle_epin_slave+0x174>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 800a69e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6a0:	681a      	ldr	r2, [r3, #0]
 800a6a2:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a6a4:	79b9      	ldrb	r1, [r7, #6]
 800a6a6:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 800a6a8:	f000 fc55 	bl	800af56 <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 800a6ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6ae:	681a      	ldr	r2, [r3, #0]
 800a6b0:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 800a6b2:	441a      	add	r2, r3
 800a6b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a6b6:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 800a6b8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 800a6bc:	3301      	adds	r3, #1
 800a6be:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 800a6c2:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 800a6c6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800a6c8:	429a      	cmp	r2, r3
 800a6ca:	d3ba      	bcc.n	800a642 <handle_epin_slave+0xfe>
 800a6cc:	e000      	b.n	800a6d0 <handle_epin_slave+0x18c>
        break;
 800a6ce:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    tsiz.value = epin->tsiz;
 800a6d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a6d2:	691b      	ldr	r3, [r3, #16]
 800a6d4:	60fb      	str	r3, [r7, #12]
    if (tsiz.xfer_size == 0) {
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a6dc:	2b00      	cmp	r3, #0
 800a6de:	d10b      	bne.n	800a6f8 <handle_epin_slave+0x1b4>
      dwc2->diepempmsk &= ~(1 << epnum);
 800a6e0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6e2:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 800a6e6:	79ba      	ldrb	r2, [r7, #6]
 800a6e8:	2101      	movs	r1, #1
 800a6ea:	fa01 f202 	lsl.w	r2, r1, r2
 800a6ee:	43d2      	mvns	r2, r2
 800a6f0:	401a      	ands	r2, r3
 800a6f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a6f4:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 800a6f8:	bf00      	nop
 800a6fa:	3748      	adds	r7, #72	@ 0x48
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	0800d1f0 	.word	0x0800d1f0
 800a704:	20000e20 	.word	0x20000e20
 800a708:	20000ea0 	.word	0x20000ea0
 800a70c:	0003fffc 	.word	0x0003fffc

0800a710 <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 800a710:	b580      	push	{r7, lr}
 800a712:	b08e      	sub	sp, #56	@ 0x38
 800a714:	af00      	add	r7, sp, #0
 800a716:	4603      	mov	r3, r0
 800a718:	460a      	mov	r2, r1
 800a71a:	71fb      	strb	r3, [r7, #7]
 800a71c:	4613      	mov	r3, r2
 800a71e:	71bb      	strb	r3, [r7, #6]
 800a720:	79fb      	ldrb	r3, [r7, #7]
 800a722:	76fb      	strb	r3, [r7, #27]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a724:	7efb      	ldrb	r3, [r7, #27]
 800a726:	2b00      	cmp	r3, #0
 800a728:	d001      	beq.n	800a72e <handle_ep_irq+0x1e>
    rhport = 0;
 800a72a:	2300      	movs	r3, #0
 800a72c:	76fb      	strb	r3, [r7, #27]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a72e:	7efb      	ldrb	r3, [r7, #27]
 800a730:	4a38      	ldr	r2, [pc, #224]	@ (800a814 <handle_ep_irq+0x104>)
 800a732:	011b      	lsls	r3, r3, #4
 800a734:	4413      	add	r3, r2
 800a736:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a738:	633b      	str	r3, [r7, #48]	@ 0x30
 800a73a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a73c:	61fb      	str	r3, [r7, #28]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a73e:	69fb      	ldr	r3, [r7, #28]
 800a740:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a742:	617b      	str	r3, [r7, #20]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 800a744:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 800a746:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800a74a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74c:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800a74e:	6a3b      	ldr	r3, [r7, #32]
 800a750:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a752:	613b      	str	r3, [r7, #16]
  return ghwcfg2.num_dev_ep + 1;
 800a754:	7c7b      	ldrb	r3, [r7, #17]
 800a756:	f3c3 0383 	ubfx	r3, r3, #2, #4
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	3301      	adds	r3, #1
 800a75e:	b2db      	uxtb	r3, r3
  const uint8_t ep_count = dwc2_ep_count(dwc2);
 800a760:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 800a764:	79bb      	ldrb	r3, [r7, #6]
 800a766:	2b01      	cmp	r3, #1
 800a768:	d101      	bne.n	800a76e <handle_ep_irq+0x5e>
 800a76a:	2300      	movs	r3, #0
 800a76c:	e000      	b.n	800a770 <handle_ep_irq+0x60>
 800a76e:	2310      	movs	r3, #16
 800a770:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 800a774:	79bb      	ldrb	r3, [r7, #6]
 800a776:	2b01      	cmp	r3, #1
 800a778:	bf14      	ite	ne
 800a77a:	2301      	movne	r3, #1
 800a77c:	2300      	moveq	r3, #0
 800a77e:	b2db      	uxtb	r3, r3
 800a780:	025b      	lsls	r3, r3, #9
 800a782:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a786:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a788:	4413      	add	r3, r2
 800a78a:	62bb      	str	r3, [r7, #40]	@ 0x28

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800a78c:	2300      	movs	r3, #0
 800a78e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a792:	e034      	b.n	800a7fe <handle_ep_irq+0xee>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 800a794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a796:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 800a79a:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800a79e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a7a2:	440b      	add	r3, r1
 800a7a4:	fa22 f303 	lsr.w	r3, r2, r3
 800a7a8:	f003 0301 	and.w	r3, r3, #1
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d021      	beq.n	800a7f4 <handle_ep_irq+0xe4>
      dwc2_dep_t* epout = &ep_base[epnum];
 800a7b0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a7b4:	015b      	lsls	r3, r3, #5
 800a7b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a7b8:	4413      	add	r3, r2
 800a7ba:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7be:	689b      	ldr	r3, [r3, #8]
 800a7c0:	60fb      	str	r3, [r7, #12]

      epout->intr = intr.value; // Clear interrupt
 800a7c2:	68fa      	ldr	r2, [r7, #12]
 800a7c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7c6:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 800a7c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d111      	bne.n	800a7f4 <handle_ep_irq+0xe4>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 800a7d0:	79bb      	ldrb	r3, [r7, #6]
 800a7d2:	2b01      	cmp	r3, #1
 800a7d4:	d107      	bne.n	800a7e6 <handle_ep_irq+0xd6>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 800a7d6:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800a7da:	79fb      	ldrb	r3, [r7, #7]
 800a7dc:	68fa      	ldr	r2, [r7, #12]
 800a7de:	4618      	mov	r0, r3
 800a7e0:	f7ff feb0 	bl	800a544 <handle_epin_slave>
 800a7e4:	e006      	b.n	800a7f4 <handle_ep_irq+0xe4>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 800a7e6:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 800a7ea:	79fb      	ldrb	r3, [r7, #7]
 800a7ec:	68fa      	ldr	r2, [r7, #12]
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f7ff fe28 	bl	800a444 <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 800a7f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800a7f8:	3301      	adds	r3, #1
 800a7fa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a7fe:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 800a802:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800a806:	429a      	cmp	r2, r3
 800a808:	d3c4      	bcc.n	800a794 <handle_ep_irq+0x84>
        }
        #endif
      }
    }
  }
}
 800a80a:	bf00      	nop
 800a80c:	bf00      	nop
 800a80e:	3738      	adds	r7, #56	@ 0x38
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	0800d1f0 	.word	0x0800d1f0

0800a818 <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 800a818:	b580      	push	{r7, lr}
 800a81a:	b098      	sub	sp, #96	@ 0x60
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	4603      	mov	r3, r0
 800a820:	71fb      	strb	r3, [r7, #7]
 800a822:	79fb      	ldrb	r3, [r7, #7]
 800a824:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800a828:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d002      	beq.n	800a836 <dcd_int_handler+0x1e>
    rhport = 0;
 800a830:	2300      	movs	r3, #0
 800a832:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800a836:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800a83a:	4a80      	ldr	r2, [pc, #512]	@ (800aa3c <dcd_int_handler+0x224>)
 800a83c:	011b      	lsls	r3, r3, #4
 800a83e:	4413      	add	r3, r2
 800a840:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800a842:	65fb      	str	r3, [r7, #92]	@ 0x5c
  const uint32_t gintmask = dwc2->gintmsk;
 800a844:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a846:	699b      	ldr	r3, [r3, #24]
 800a848:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 800a84a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a84c:	695b      	ldr	r3, [r3, #20]
 800a84e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800a850:	4013      	ands	r3, r2
 800a852:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 800a854:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a856:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00d      	beq.n	800a87a <dcd_int_handler+0x62>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 800a85e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a860:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a864:	615a      	str	r2, [r3, #20]

    usbd_spin_lock(true);
 800a866:	2001      	movs	r0, #1
 800a868:	f7fe f81a 	bl	80088a0 <usbd_spin_lock>
    handle_bus_reset(rhport);
 800a86c:	79fb      	ldrb	r3, [r7, #7]
 800a86e:	4618      	mov	r0, r3
 800a870:	f7ff fc0e 	bl	800a090 <handle_bus_reset>
    usbd_spin_unlock(true);
 800a874:	2001      	movs	r0, #1
 800a876:	f7fe f82d 	bl	80088d4 <usbd_spin_unlock>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 800a87a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a87c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800a880:	2b00      	cmp	r3, #0
 800a882:	d007      	beq.n	800a894 <dcd_int_handler+0x7c>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 800a884:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a886:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800a88a:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 800a88c:	79fb      	ldrb	r3, [r7, #7]
 800a88e:	4618      	mov	r0, r3
 800a890:	f7ff fcea 	bl	800a268 <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 800a894:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a896:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d01d      	beq.n	800a8da <dcd_int_handler+0xc2>
    dwc2->gintsts = GINTSTS_USBSUSP;
 800a89e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a8a4:	615a      	str	r2, [r3, #20]
 800a8a6:	79fb      	ldrb	r3, [r7, #7]
 800a8a8:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 800a8ac:	2304      	movs	r3, #4
 800a8ae:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 800a8b8:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 800a8bc:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 800a8c0:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800a8c4:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 800a8c8:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 800a8cc:	f107 0320 	add.w	r3, r7, #32
 800a8d0:	4611      	mov	r1, r2
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7fd fde6 	bl	80084a4 <dcd_event_handler>
}
 800a8d8:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 800a8da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	da1d      	bge.n	800a91c <dcd_int_handler+0x104>
    dwc2->gintsts = GINTSTS_WKUINT;
 800a8e0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a8e2:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a8e6:	615a      	str	r2, [r3, #20]
 800a8e8:	79fb      	ldrb	r3, [r7, #7]
 800a8ea:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 800a8ee:	2305      	movs	r3, #5
 800a8f0:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 800a8fa:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800a8fe:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 800a902:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800a906:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 800a90a:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800a90e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800a912:	4611      	mov	r1, r2
 800a914:	4618      	mov	r0, r3
 800a916:	f7fd fdc5 	bl	80084a4 <dcd_event_handler>
}
 800a91a:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 800a91c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a91e:	f003 0304 	and.w	r3, r3, #4
 800a922:	2b00      	cmp	r3, #0
 800a924:	d022      	beq.n	800a96c <dcd_int_handler+0x154>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 800a926:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a928:	685b      	ldr	r3, [r3, #4]
 800a92a:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 800a92c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a92e:	f003 0304 	and.w	r3, r3, #4
 800a932:	2b00      	cmp	r3, #0
 800a934:	d017      	beq.n	800a966 <dcd_int_handler+0x14e>
 800a936:	79fb      	ldrb	r3, [r7, #7]
 800a938:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 800a93c:	2302      	movs	r3, #2
 800a93e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800a942:	2301      	movs	r3, #1
 800a944:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 800a948:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 800a94c:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 800a94e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800a952:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 800a954:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 800a958:	f107 0314 	add.w	r3, r7, #20
 800a95c:	4611      	mov	r1, r2
 800a95e:	4618      	mov	r0, r3
 800a960:	f7fd fda0 	bl	80084a4 <dcd_event_handler>
}
 800a964:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 800a966:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a968:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800a96a:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 800a96c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a96e:	f003 0308 	and.w	r3, r3, #8
 800a972:	2b00      	cmp	r3, #0
 800a974:	d02e      	beq.n	800a9d4 <dcd_int_handler+0x1bc>
    dwc2->gintsts = GINTSTS_SOF;
 800a976:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a978:	2208      	movs	r2, #8
 800a97a:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 800a97c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a97e:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800a982:	0a1b      	lsrs	r3, r3, #8
 800a984:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800a988:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 800a98a:	4b2d      	ldr	r3, [pc, #180]	@ (800aa40 <dcd_int_handler+0x228>)
 800a98c:	79db      	ldrb	r3, [r3, #7]
 800a98e:	f083 0301 	eor.w	r3, r3, #1
 800a992:	b2db      	uxtb	r3, r3
 800a994:	2b00      	cmp	r3, #0
 800a996:	d005      	beq.n	800a9a4 <dcd_int_handler+0x18c>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 800a998:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a99a:	699b      	ldr	r3, [r3, #24]
 800a99c:	f023 0208 	bic.w	r2, r3, #8
 800a9a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9a2:	619a      	str	r2, [r3, #24]
 800a9a4:	79fb      	ldrb	r3, [r7, #7]
 800a9a6:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 800a9aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a9ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9ae:	2301      	movs	r3, #1
 800a9b0:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 800a9b4:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 800a9b8:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 800a9ba:	2303      	movs	r3, #3
 800a9bc:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 800a9be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9c0:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 800a9c2:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 800a9c6:	f107 0308 	add.w	r3, r7, #8
 800a9ca:	4611      	mov	r1, r2
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	f7fd fd69 	bl	80084a4 <dcd_event_handler>
}
 800a9d2:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 800a9d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a9d6:	f003 0310 	and.w	r3, r3, #16
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d015      	beq.n	800aa0a <dcd_int_handler+0x1f2>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 800a9de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9e0:	699b      	ldr	r3, [r3, #24]
 800a9e2:	f023 0210 	bic.w	r2, r3, #16
 800a9e6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9e8:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 800a9ea:	79fb      	ldrb	r3, [r7, #7]
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7ff fc81 	bl	800a2f4 <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 800a9f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800a9f4:	695b      	ldr	r3, [r3, #20]
 800a9f6:	f003 0310 	and.w	r3, r3, #16
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d1f5      	bne.n	800a9ea <dcd_int_handler+0x1d2>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 800a9fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa00:	699b      	ldr	r3, [r3, #24]
 800aa02:	f043 0210 	orr.w	r2, r3, #16
 800aa06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800aa08:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 800aa0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa0c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d004      	beq.n	800aa1e <dcd_int_handler+0x206>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 800aa14:	79fb      	ldrb	r3, [r7, #7]
 800aa16:	2100      	movs	r1, #0
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7ff fe79 	bl	800a710 <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 800aa1e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800aa20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800aa24:	2b00      	cmp	r3, #0
 800aa26:	d004      	beq.n	800aa32 <dcd_int_handler+0x21a>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 800aa28:	79fb      	ldrb	r3, [r7, #7]
 800aa2a:	2101      	movs	r1, #1
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	f7ff fe6f 	bl	800a710 <handle_ep_irq>
  }
}
 800aa32:	bf00      	nop
 800aa34:	3760      	adds	r7, #96	@ 0x60
 800aa36:	46bd      	mov	sp, r7
 800aa38:	bd80      	pop	{r7, pc}
 800aa3a:	bf00      	nop
 800aa3c:	0800d1f0 	.word	0x0800d1f0
 800aa40:	20000ea0 	.word	0x20000ea0

0800aa44 <dwc2_phy_init>:

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800aa50:	78fb      	ldrb	r3, [r7, #3]
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d106      	bne.n	800aa64 <dwc2_phy_init+0x20>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa5a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	639a      	str	r2, [r3, #56]	@ 0x38
      #else

      #endif
    }
  }
}
 800aa62:	e005      	b.n	800aa70 <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aa68:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800aa70:	bf00      	nop
 800aa72:	370c      	adds	r7, #12
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr

0800aa7c <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 800aa7c:	b480      	push	{r7}
 800aa7e:	b085      	sub	sp, #20
 800aa80:	af00      	add	r7, sp, #0
 800aa82:	6078      	str	r0, [r7, #4]
 800aa84:	460b      	mov	r3, r1
 800aa86:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800aa88:	78fb      	ldrb	r3, [r7, #3]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d152      	bne.n	800ab34 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 800aa8e:	4b2c      	ldr	r3, [pc, #176]	@ (800ab40 <dwc2_phy_update+0xc4>)
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4a2c      	ldr	r2, [pc, #176]	@ (800ab44 <dwc2_phy_update+0xc8>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d302      	bcc.n	800aa9e <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 800aa98:	2306      	movs	r3, #6
 800aa9a:	60fb      	str	r3, [r7, #12]
 800aa9c:	e041      	b.n	800ab22 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 800aa9e:	4b28      	ldr	r3, [pc, #160]	@ (800ab40 <dwc2_phy_update+0xc4>)
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	4a29      	ldr	r2, [pc, #164]	@ (800ab48 <dwc2_phy_update+0xcc>)
 800aaa4:	4293      	cmp	r3, r2
 800aaa6:	d902      	bls.n	800aaae <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 800aaa8:	2307      	movs	r3, #7
 800aaaa:	60fb      	str	r3, [r7, #12]
 800aaac:	e039      	b.n	800ab22 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 800aaae:	4b24      	ldr	r3, [pc, #144]	@ (800ab40 <dwc2_phy_update+0xc4>)
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	4a26      	ldr	r2, [pc, #152]	@ (800ab4c <dwc2_phy_update+0xd0>)
 800aab4:	4293      	cmp	r3, r2
 800aab6:	d302      	bcc.n	800aabe <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 800aab8:	2308      	movs	r3, #8
 800aaba:	60fb      	str	r3, [r7, #12]
 800aabc:	e031      	b.n	800ab22 <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 800aabe:	4b20      	ldr	r3, [pc, #128]	@ (800ab40 <dwc2_phy_update+0xc4>)
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	4a23      	ldr	r2, [pc, #140]	@ (800ab50 <dwc2_phy_update+0xd4>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d902      	bls.n	800aace <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 800aac8:	2309      	movs	r3, #9
 800aaca:	60fb      	str	r3, [r7, #12]
 800aacc:	e029      	b.n	800ab22 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 800aace:	4b1c      	ldr	r3, [pc, #112]	@ (800ab40 <dwc2_phy_update+0xc4>)
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	4a20      	ldr	r2, [pc, #128]	@ (800ab54 <dwc2_phy_update+0xd8>)
 800aad4:	4293      	cmp	r3, r2
 800aad6:	d902      	bls.n	800aade <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 800aad8:	230a      	movs	r3, #10
 800aada:	60fb      	str	r3, [r7, #12]
 800aadc:	e021      	b.n	800ab22 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 800aade:	4b18      	ldr	r3, [pc, #96]	@ (800ab40 <dwc2_phy_update+0xc4>)
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a1d      	ldr	r2, [pc, #116]	@ (800ab58 <dwc2_phy_update+0xdc>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d902      	bls.n	800aaee <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 800aae8:	230b      	movs	r3, #11
 800aaea:	60fb      	str	r3, [r7, #12]
 800aaec:	e019      	b.n	800ab22 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 800aaee:	4b14      	ldr	r3, [pc, #80]	@ (800ab40 <dwc2_phy_update+0xc4>)
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4a1a      	ldr	r2, [pc, #104]	@ (800ab5c <dwc2_phy_update+0xe0>)
 800aaf4:	4293      	cmp	r3, r2
 800aaf6:	d302      	bcc.n	800aafe <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 800aaf8:	230c      	movs	r3, #12
 800aafa:	60fb      	str	r3, [r7, #12]
 800aafc:	e011      	b.n	800ab22 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 800aafe:	4b10      	ldr	r3, [pc, #64]	@ (800ab40 <dwc2_phy_update+0xc4>)
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	4a17      	ldr	r2, [pc, #92]	@ (800ab60 <dwc2_phy_update+0xe4>)
 800ab04:	4293      	cmp	r3, r2
 800ab06:	d302      	bcc.n	800ab0e <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 800ab08:	230d      	movs	r3, #13
 800ab0a:	60fb      	str	r3, [r7, #12]
 800ab0c:	e009      	b.n	800ab22 <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 800ab0e:	4b0c      	ldr	r3, [pc, #48]	@ (800ab40 <dwc2_phy_update+0xc4>)
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	4a14      	ldr	r2, [pc, #80]	@ (800ab64 <dwc2_phy_update+0xe8>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d302      	bcc.n	800ab1e <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 800ab18:	230e      	movs	r3, #14
 800ab1a:	60fb      	str	r3, [r7, #12]
 800ab1c:	e001      	b.n	800ab22 <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 800ab1e:	230f      	movs	r3, #15
 800ab20:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	029b      	lsls	r3, r3, #10
 800ab2e:	431a      	orrs	r2, r3
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	60da      	str	r2, [r3, #12]
  }
}
 800ab34:	bf00      	nop
 800ab36:	3714      	adds	r7, #20
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr
 800ab40:	20000000 	.word	0x20000000
 800ab44:	01e84800 	.word	0x01e84800
 800ab48:	01a39ddf 	.word	0x01a39ddf
 800ab4c:	016e3600 	.word	0x016e3600
 800ab50:	014ca43f 	.word	0x014ca43f
 800ab54:	01312cff 	.word	0x01312cff
 800ab58:	011a499f 	.word	0x011a499f
 800ab5c:	01067380 	.word	0x01067380
 800ab60:	00f42400 	.word	0x00f42400
 800ab64:	00e4e1c0 	.word	0x00e4e1c0

0800ab68 <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 800ab68:	b480      	push	{r7}
 800ab6a:	b083      	sub	sp, #12
 800ab6c:	af00      	add	r7, sp, #0
 800ab6e:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	691b      	ldr	r3, [r3, #16]
 800ab74:	f043 0201 	orr.w	r2, r3, #1
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab80:	b29b      	uxth	r3, r3
 800ab82:	f244 2209 	movw	r2, #16905	@ 0x4209
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d807      	bhi.n	800ab9a <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 800ab8a:	bf00      	nop
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	f003 0301 	and.w	r3, r3, #1
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d1f9      	bne.n	800ab8c <reset_core+0x24>
 800ab98:	e010      	b.n	800abbc <reset_core+0x54>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 800ab9a:	bf00      	nop
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	691b      	ldr	r3, [r3, #16]
 800aba0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d0f9      	beq.n	800ab9c <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	691b      	ldr	r3, [r3, #16]
 800abac:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800abb0:	f023 0301 	bic.w	r3, r3, #1
 800abb4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 800abbc:	bf00      	nop
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	691b      	ldr	r3, [r3, #16]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	dafb      	bge.n	800abbe <reset_core+0x56>
}
 800abc6:	bf00      	nop
 800abc8:	bf00      	nop
 800abca:	370c      	adds	r7, #12
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 800abd4:	b580      	push	{r7, lr}
 800abd6:	b084      	sub	sp, #16
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	68db      	ldr	r3, [r3, #12]
 800abe0:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abe8:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	68fa      	ldr	r2, [r7, #12]
 800abee:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800abf0:	2100      	movs	r1, #0
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f7ff ff26 	bl	800aa44 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f7ff ffb5 	bl	800ab68 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800ac04:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 800ac0c:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	68fa      	ldr	r2, [r7, #12]
 800ac12:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 800ac14:	2100      	movs	r1, #0
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f7ff ff30 	bl	800aa7c <dwc2_phy_update>
}
 800ac1c:	bf00      	nop
 800ac1e:	3710      	adds	r7, #16
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}

0800ac24 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b086      	sub	sp, #24
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	617b      	str	r3, [r7, #20]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac36:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg4_t ghwcfg4 = {.value = dwc2->ghwcfg4};
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ac3c:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 800ac3e:	697b      	ldr	r3, [r7, #20]
 800ac40:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ac44:	617b      	str	r3, [r7, #20]

  if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 800ac46:	7c3b      	ldrb	r3, [r7, #16]
 800ac48:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	2b80      	cmp	r3, #128	@ 0x80
 800ac50:	d114      	bne.n	800ac7c <phy_hs_init+0x58>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 800ac52:	697b      	ldr	r3, [r7, #20]
 800ac54:	f043 0310 	orr.w	r3, r3, #16
 800ac58:	617b      	str	r3, [r7, #20]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 800ac5a:	697b      	ldr	r3, [r7, #20]
 800ac5c:	f023 0308 	bic.w	r3, r3, #8
 800ac60:	617b      	str	r3, [r7, #20]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 800ac62:	697b      	ldr	r3, [r7, #20]
 800ac64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800ac68:	617b      	str	r3, [r7, #20]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 800ac6a:	697b      	ldr	r3, [r7, #20]
 800ac6c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800ac70:	617b      	str	r3, [r7, #20]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 800ac72:	697b      	ldr	r3, [r7, #20]
 800ac74:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 800ac78:	617b      	str	r3, [r7, #20]
 800ac7a:	e012      	b.n	800aca2 <phy_hs_init+0x7e>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 800ac7c:	697b      	ldr	r3, [r7, #20]
 800ac7e:	f023 0310 	bic.w	r3, r3, #16
 800ac82:	617b      	str	r3, [r7, #20]

    // Set 16-bit interface if supported
    if (ghwcfg4.phy_data_width) {
 800ac84:	7b7b      	ldrb	r3, [r7, #13]
 800ac86:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ac8a:	b2db      	uxtb	r3, r3
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d004      	beq.n	800ac9a <phy_hs_init+0x76>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 800ac90:	697b      	ldr	r3, [r7, #20]
 800ac92:	f043 0308 	orr.w	r3, r3, #8
 800ac96:	617b      	str	r3, [r7, #20]
 800ac98:	e003      	b.n	800aca2 <phy_hs_init+0x7e>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 800ac9a:	697b      	ldr	r3, [r7, #20]
 800ac9c:	f023 0308 	bic.w	r3, r3, #8
 800aca0:	617b      	str	r3, [r7, #20]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	697a      	ldr	r2, [r7, #20]
 800aca6:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, ghwcfg2.hs_phy_type);
 800aca8:	7c3b      	ldrb	r3, [r7, #16]
 800acaa:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800acae:	b2db      	uxtb	r3, r3
 800acb0:	4619      	mov	r1, r3
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f7ff fec6 	bl	800aa44 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f7ff ff55 	bl	800ab68 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 800acbe:	697b      	ldr	r3, [r7, #20]
 800acc0:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 800acc4:	617b      	str	r3, [r7, #20]
  gusbcfg |= (ghwcfg4.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 800acc6:	7b7b      	ldrb	r3, [r7, #13]
 800acc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800accc:	b2db      	uxtb	r3, r3
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d002      	beq.n	800acd8 <phy_hs_init+0xb4>
 800acd2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800acd6:	e001      	b.n	800acdc <phy_hs_init+0xb8>
 800acd8:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 800acdc:	697a      	ldr	r2, [r7, #20]
 800acde:	4313      	orrs	r3, r2
 800ace0:	617b      	str	r3, [r7, #20]
  dwc2->gusbcfg = gusbcfg;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	697a      	ldr	r2, [r7, #20]
 800ace6:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, ghwcfg2.hs_phy_type);
 800ace8:	7c3b      	ldrb	r3, [r7, #16]
 800acea:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	4619      	mov	r1, r3
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f7ff fec2 	bl	800aa7c <dwc2_phy_update>
}
 800acf8:	bf00      	nop
 800acfa:	3718      	adds	r7, #24
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 800ad00:	b480      	push	{r7}
 800ad02:	b085      	sub	sp, #20
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad0c:	0c1b      	lsrs	r3, r3, #16
 800ad0e:	041b      	lsls	r3, r3, #16
 800ad10:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	4a0e      	ldr	r2, [pc, #56]	@ (800ad50 <check_dwc2+0x50>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d012      	beq.n	800ad40 <check_dwc2+0x40>
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	4a0d      	ldr	r2, [pc, #52]	@ (800ad54 <check_dwc2+0x54>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d00e      	beq.n	800ad40 <check_dwc2+0x40>
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	4a0c      	ldr	r2, [pc, #48]	@ (800ad58 <check_dwc2+0x58>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d00a      	beq.n	800ad40 <check_dwc2+0x40>
 800ad2a:	4b0c      	ldr	r3, [pc, #48]	@ (800ad5c <check_dwc2+0x5c>)
 800ad2c:	60bb      	str	r3, [r7, #8]
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f003 0301 	and.w	r3, r3, #1
 800ad36:	2b00      	cmp	r3, #0
 800ad38:	d000      	beq.n	800ad3c <check_dwc2+0x3c>
 800ad3a:	be00      	bkpt	0x0000
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	e000      	b.n	800ad42 <check_dwc2+0x42>
#endif

  return true;
 800ad40:	2301      	movs	r3, #1
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3714      	adds	r7, #20
 800ad46:	46bd      	mov	sp, r7
 800ad48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad4c:	4770      	bx	lr
 800ad4e:	bf00      	nop
 800ad50:	4f540000 	.word	0x4f540000
 800ad54:	55310000 	.word	0x55310000
 800ad58:	55320000 	.word	0x55320000
 800ad5c:	e000edf0 	.word	0xe000edf0

0800ad60 <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 800ad60:	b480      	push	{r7}
 800ad62:	b085      	sub	sp, #20
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	6078      	str	r0, [r7, #4]
 800ad68:	460b      	mov	r3, r1
 800ad6a:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;
#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 800ad6c:	78fb      	ldrb	r3, [r7, #3]
 800ad6e:	2b01      	cmp	r3, #1
 800ad70:	d101      	bne.n	800ad76 <dwc2_core_is_highspeed+0x16>
    return false;
 800ad72:	2300      	movs	r3, #0
 800ad74:	e00b      	b.n	800ad8e <dwc2_core_is_highspeed+0x2e>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad7a:	60fb      	str	r3, [r7, #12]
  return ghwcfg2.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 800ad7c:	7b3b      	ldrb	r3, [r7, #12]
 800ad7e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	bf14      	ite	ne
 800ad88:	2301      	movne	r3, #1
 800ad8a:	2300      	moveq	r3, #0
 800ad8c:	b2db      	uxtb	r3, r3
}
 800ad8e:	4618      	mov	r0, r3
 800ad90:	3714      	adds	r7, #20
 800ad92:	46bd      	mov	sp, r7
 800ad94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad98:	4770      	bx	lr
	...

0800ad9c <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 800ad9c:	b580      	push	{r7, lr}
 800ad9e:	b088      	sub	sp, #32
 800ada0:	af00      	add	r7, sp, #0
 800ada2:	4603      	mov	r3, r0
 800ada4:	71fb      	strb	r3, [r7, #7]
 800ada6:	460b      	mov	r3, r1
 800ada8:	71bb      	strb	r3, [r7, #6]
 800adaa:	4613      	mov	r3, r2
 800adac:	717b      	strb	r3, [r7, #5]
 800adae:	79fb      	ldrb	r3, [r7, #7]
 800adb0:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800adb2:	7dfb      	ldrb	r3, [r7, #23]
 800adb4:	2b00      	cmp	r3, #0
 800adb6:	d001      	beq.n	800adbc <dwc2_core_init+0x20>
    rhport = 0;
 800adb8:	2300      	movs	r3, #0
 800adba:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800adbc:	7dfb      	ldrb	r3, [r7, #23]
 800adbe:	4a3b      	ldr	r2, [pc, #236]	@ (800aeac <dwc2_core_init+0x110>)
 800adc0:	011b      	lsls	r3, r3, #4
 800adc2:	4413      	add	r3, r2
 800adc4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800adc6:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 800adc8:	69f8      	ldr	r0, [r7, #28]
 800adca:	f7ff ff99 	bl	800ad00 <check_dwc2>
 800adce:	4603      	mov	r3, r0
 800add0:	f083 0301 	eor.w	r3, r3, #1
 800add4:	b2db      	uxtb	r3, r3
 800add6:	2b00      	cmp	r3, #0
 800add8:	d00a      	beq.n	800adf0 <dwc2_core_init+0x54>
 800adda:	4b35      	ldr	r3, [pc, #212]	@ (800aeb0 <dwc2_core_init+0x114>)
 800addc:	61bb      	str	r3, [r7, #24]
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	f003 0301 	and.w	r3, r3, #1
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d000      	beq.n	800adec <dwc2_core_init+0x50>
 800adea:	be00      	bkpt	0x0000
 800adec:	2300      	movs	r3, #0
 800adee:	e058      	b.n	800aea2 <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 800adf0:	69fb      	ldr	r3, [r7, #28]
 800adf2:	689b      	ldr	r3, [r3, #8]
 800adf4:	f023 0201 	bic.w	r2, r3, #1
 800adf8:	69fb      	ldr	r3, [r7, #28]
 800adfa:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 800adfc:	79bb      	ldrb	r3, [r7, #6]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d003      	beq.n	800ae0a <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 800ae02:	69f8      	ldr	r0, [r7, #28]
 800ae04:	f7ff ff0e 	bl	800ac24 <phy_hs_init>
 800ae08:	e002      	b.n	800ae10 <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 800ae0a:	69f8      	ldr	r0, [r7, #28]
 800ae0c:	f7ff fee2 	bl	800abd4 <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 800ae10:	69fb      	ldr	r3, [r7, #28]
 800ae12:	68db      	ldr	r3, [r3, #12]
 800ae14:	f043 0207 	orr.w	r2, r3, #7
 800ae18:	69fb      	ldr	r3, [r7, #28]
 800ae1a:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 800ae1c:	69fb      	ldr	r3, [r7, #28]
 800ae1e:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800ae22:	f023 020f 	bic.w	r2, r3, #15
 800ae26:	69fb      	ldr	r3, [r7, #28]
 800ae28:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	60fb      	str	r3, [r7, #12]
 800ae30:	2310      	movs	r3, #16
 800ae32:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800ae34:	7afb      	ldrb	r3, [r7, #11]
 800ae36:	019b      	lsls	r3, r3, #6
 800ae38:	f043 0220 	orr.w	r2, r3, #32
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800ae40:	bf00      	nop
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	691b      	ldr	r3, [r3, #16]
 800ae46:	f003 0320 	and.w	r3, r3, #32
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d1f9      	bne.n	800ae42 <dwc2_core_init+0xa6>
}
 800ae4e:	bf00      	nop
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 800ae54:	693b      	ldr	r3, [r7, #16]
 800ae56:	2210      	movs	r2, #16
 800ae58:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 800ae5a:	bf00      	nop
 800ae5c:	693b      	ldr	r3, [r7, #16]
 800ae5e:	691b      	ldr	r3, [r3, #16]
 800ae60:	f003 0310 	and.w	r3, r3, #16
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d1f9      	bne.n	800ae5c <dwc2_core_init+0xc0>
}
 800ae68:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 800ae6a:	69fb      	ldr	r3, [r7, #28]
 800ae6c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae70:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 800ae72:	69fb      	ldr	r3, [r7, #28]
 800ae74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae78:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 800ae7a:	69fb      	ldr	r3, [r7, #28]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 800ae80:	797b      	ldrb	r3, [r7, #5]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d006      	beq.n	800ae94 <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 800ae86:	69fb      	ldr	r3, [r7, #28]
 800ae88:	689b      	ldr	r3, [r3, #8]
 800ae8a:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 800ae8e:	69fb      	ldr	r3, [r7, #28]
 800ae90:	609a      	str	r2, [r3, #8]
 800ae92:	e005      	b.n	800aea0 <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 800ae94:	69fb      	ldr	r3, [r7, #28]
 800ae96:	699b      	ldr	r3, [r3, #24]
 800ae98:	f043 0210 	orr.w	r2, r3, #16
 800ae9c:	69fb      	ldr	r3, [r7, #28]
 800ae9e:	619a      	str	r2, [r3, #24]
  }

  return true;
 800aea0:	2301      	movs	r3, #1
}
 800aea2:	4618      	mov	r0, r3
 800aea4:	3720      	adds	r7, #32
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}
 800aeaa:	bf00      	nop
 800aeac:	0800d200 	.word	0x0800d200
 800aeb0:	e000edf0 	.word	0xe000edf0

0800aeb4 <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 800aeb4:	b480      	push	{r7}
 800aeb6:	b08f      	sub	sp, #60	@ 0x3c
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	4613      	mov	r3, r2
 800aec0:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aec8:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 800aeca:	88fb      	ldrh	r3, [r7, #6]
 800aecc:	089b      	lsrs	r3, r3, #2
 800aece:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 800aed0:	e00b      	b.n	800aeea <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 800aed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	68ba      	ldr	r2, [r7, #8]
 800aed8:	627a      	str	r2, [r7, #36]	@ 0x24
 800aeda:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 800aedc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aede:	6a3a      	ldr	r2, [r7, #32]
 800aee0:	601a      	str	r2, [r3, #0]
}
 800aee2:	bf00      	nop
    dst += 4;
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	3304      	adds	r3, #4
 800aee8:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 800aeea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800aeec:	1e5a      	subs	r2, r3, #1
 800aeee:	86fa      	strh	r2, [r7, #54]	@ 0x36
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d1ee      	bne.n	800aed2 <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 800aef4:	88fb      	ldrh	r3, [r7, #6]
 800aef6:	b2db      	uxtb	r3, r3
 800aef8:	f003 0303 	and.w	r3, r3, #3
 800aefc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 800af00:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800af04:	2b00      	cmp	r3, #0
 800af06:	d020      	beq.n	800af4a <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 800af08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800af0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800af10:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 800af12:	69fb      	ldr	r3, [r7, #28]
 800af14:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 800af16:	68bb      	ldr	r3, [r7, #8]
 800af18:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 800af1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800af1e:	2b01      	cmp	r3, #1
 800af20:	d907      	bls.n	800af32 <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	3301      	adds	r3, #1
 800af26:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af28:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 800af2a:	69ba      	ldr	r2, [r7, #24]
 800af2c:	0a12      	lsrs	r2, r2, #8
 800af2e:	b2d2      	uxtb	r2, r2
 800af30:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 800af32:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800af36:	2b02      	cmp	r3, #2
 800af38:	d907      	bls.n	800af4a <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	3302      	adds	r3, #2
 800af3e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800af40:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 800af42:	697a      	ldr	r2, [r7, #20]
 800af44:	0c12      	lsrs	r2, r2, #16
 800af46:	b2d2      	uxtb	r2, r2
 800af48:	701a      	strb	r2, [r3, #0]
    }
  }
}
 800af4a:	bf00      	nop
 800af4c:	373c      	adds	r7, #60	@ 0x3c
 800af4e:	46bd      	mov	sp, r7
 800af50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af54:	4770      	bx	lr

0800af56 <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 800af56:	b480      	push	{r7}
 800af58:	b08b      	sub	sp, #44	@ 0x2c
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	60f8      	str	r0, [r7, #12]
 800af5e:	607a      	str	r2, [r7, #4]
 800af60:	461a      	mov	r2, r3
 800af62:	460b      	mov	r3, r1
 800af64:	72fb      	strb	r3, [r7, #11]
 800af66:	4613      	mov	r3, r2
 800af68:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 800af6a:	7afb      	ldrb	r3, [r7, #11]
 800af6c:	3301      	adds	r3, #1
 800af6e:	031b      	lsls	r3, r3, #12
 800af70:	68fa      	ldr	r2, [r7, #12]
 800af72:	4413      	add	r3, r2
 800af74:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 800af76:	893b      	ldrh	r3, [r7, #8]
 800af78:	089b      	lsrs	r3, r3, #2
 800af7a:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 800af7c:	e008      	b.n	800af90 <dfifo_write_packet+0x3a>
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 800af86:	69fb      	ldr	r3, [r7, #28]
 800af88:	601a      	str	r2, [r3, #0]
    src += 4;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	3304      	adds	r3, #4
 800af8e:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 800af90:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800af92:	1e5a      	subs	r2, r3, #1
 800af94:	84fa      	strh	r2, [r7, #38]	@ 0x26
 800af96:	2b00      	cmp	r3, #0
 800af98:	d1f1      	bne.n	800af7e <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 800af9a:	893b      	ldrh	r3, [r7, #8]
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	f003 0303 	and.w	r3, r3, #3
 800afa2:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 800afa4:	7efb      	ldrb	r3, [r7, #27]
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d019      	beq.n	800afde <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	781b      	ldrb	r3, [r3, #0]
 800afae:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 800afb0:	7efb      	ldrb	r3, [r7, #27]
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d906      	bls.n	800afc4 <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	3301      	adds	r3, #1
 800afba:	781b      	ldrb	r3, [r3, #0]
 800afbc:	021b      	lsls	r3, r3, #8
 800afbe:	6a3a      	ldr	r2, [r7, #32]
 800afc0:	4313      	orrs	r3, r2
 800afc2:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 800afc4:	7efb      	ldrb	r3, [r7, #27]
 800afc6:	2b02      	cmp	r3, #2
 800afc8:	d906      	bls.n	800afd8 <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	3302      	adds	r3, #2
 800afce:	781b      	ldrb	r3, [r3, #0]
 800afd0:	041b      	lsls	r3, r3, #16
 800afd2:	6a3a      	ldr	r2, [r7, #32]
 800afd4:	4313      	orrs	r3, r2
 800afd6:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 800afd8:	69fb      	ldr	r3, [r7, #28]
 800afda:	6a3a      	ldr	r2, [r7, #32]
 800afdc:	601a      	str	r2, [r3, #0]
  }
}
 800afde:	bf00      	nop
 800afe0:	372c      	adds	r7, #44	@ 0x2c
 800afe2:	46bd      	mov	sp, r7
 800afe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe8:	4770      	bx	lr
	...

0800afec <tusb_rhport_init>:
}

//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+
bool tusb_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 800afec:	b580      	push	{r7, lr}
 800afee:	b086      	sub	sp, #24
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	4603      	mov	r3, r0
 800aff4:	6039      	str	r1, [r7, #0]
 800aff6:	71fb      	strb	r3, [r7, #7]
  //  backward compatible called with tusb_init(void)
  #if defined(TUD_OPT_RHPORT) || defined(TUH_OPT_RHPORT)
  if (rh_init == NULL) {
 800aff8:	683b      	ldr	r3, [r7, #0]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d11f      	bne.n	800b03e <tusb_rhport_init+0x52>
    #if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
    // init device stack CFG_TUSB_RHPORTx_MODE must be defined
    const tusb_rhport_init_t dev_init = {
 800affe:	2301      	movs	r3, #1
 800b000:	723b      	strb	r3, [r7, #8]
 800b002:	2300      	movs	r3, #0
 800b004:	727b      	strb	r3, [r7, #9]
      .role = TUSB_ROLE_DEVICE,
      .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
    };
    TU_ASSERT ( tud_rhport_init(TUD_OPT_RHPORT, &dev_init) );
 800b006:	f107 0308 	add.w	r3, r7, #8
 800b00a:	4619      	mov	r1, r3
 800b00c:	2000      	movs	r0, #0
 800b00e:	f7fc fa63 	bl	80074d8 <tud_rhport_init>
 800b012:	4603      	mov	r3, r0
 800b014:	f083 0301 	eor.w	r3, r3, #1
 800b018:	b2db      	uxtb	r3, r3
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00a      	beq.n	800b034 <tusb_rhport_init+0x48>
 800b01e:	4b23      	ldr	r3, [pc, #140]	@ (800b0ac <tusb_rhport_init+0xc0>)
 800b020:	60fb      	str	r3, [r7, #12]
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	f003 0301 	and.w	r3, r3, #1
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d000      	beq.n	800b030 <tusb_rhport_init+0x44>
 800b02e:	be00      	bkpt	0x0000
 800b030:	2300      	movs	r3, #0
 800b032:	e036      	b.n	800b0a2 <tusb_rhport_init+0xb6>
    _tusb_rhport_role[TUD_OPT_RHPORT] = TUSB_ROLE_DEVICE;
 800b034:	4b1e      	ldr	r3, [pc, #120]	@ (800b0b0 <tusb_rhport_init+0xc4>)
 800b036:	2201      	movs	r2, #1
 800b038:	701a      	strb	r2, [r3, #0]
    };
    TU_ASSERT( tuh_rhport_init(TUH_OPT_RHPORT, &host_init) );
    _tusb_rhport_role[TUH_OPT_RHPORT] = TUSB_ROLE_HOST;
    #endif

    return true;
 800b03a:	2301      	movs	r3, #1
 800b03c:	e031      	b.n	800b0a2 <tusb_rhport_init+0xb6>
  }
  #endif

  // new API with explicit rhport and role
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 800b03e:	79fb      	ldrb	r3, [r7, #7]
 800b040:	2b01      	cmp	r3, #1
 800b042:	d803      	bhi.n	800b04c <tusb_rhport_init+0x60>
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	781b      	ldrb	r3, [r3, #0]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d10a      	bne.n	800b062 <tusb_rhport_init+0x76>
 800b04c:	4b17      	ldr	r3, [pc, #92]	@ (800b0ac <tusb_rhport_init+0xc0>)
 800b04e:	613b      	str	r3, [r7, #16]
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	681b      	ldr	r3, [r3, #0]
 800b054:	f003 0301 	and.w	r3, r3, #1
 800b058:	2b00      	cmp	r3, #0
 800b05a:	d000      	beq.n	800b05e <tusb_rhport_init+0x72>
 800b05c:	be00      	bkpt	0x0000
 800b05e:	2300      	movs	r3, #0
 800b060:	e01f      	b.n	800b0a2 <tusb_rhport_init+0xb6>
  _tusb_rhport_role[rhport] = rh_init->role;
 800b062:	79fb      	ldrb	r3, [r7, #7]
 800b064:	683a      	ldr	r2, [r7, #0]
 800b066:	7811      	ldrb	r1, [r2, #0]
 800b068:	4a11      	ldr	r2, [pc, #68]	@ (800b0b0 <tusb_rhport_init+0xc4>)
 800b06a:	54d1      	strb	r1, [r2, r3]

  #if CFG_TUD_ENABLED
  if (rh_init->role == TUSB_ROLE_DEVICE) {
 800b06c:	683b      	ldr	r3, [r7, #0]
 800b06e:	781b      	ldrb	r3, [r3, #0]
 800b070:	2b01      	cmp	r3, #1
 800b072:	d115      	bne.n	800b0a0 <tusb_rhport_init+0xb4>
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
 800b074:	79fb      	ldrb	r3, [r7, #7]
 800b076:	6839      	ldr	r1, [r7, #0]
 800b078:	4618      	mov	r0, r3
 800b07a:	f7fc fa2d 	bl	80074d8 <tud_rhport_init>
 800b07e:	4603      	mov	r3, r0
 800b080:	f083 0301 	eor.w	r3, r3, #1
 800b084:	b2db      	uxtb	r3, r3
 800b086:	2b00      	cmp	r3, #0
 800b088:	d00a      	beq.n	800b0a0 <tusb_rhport_init+0xb4>
 800b08a:	4b08      	ldr	r3, [pc, #32]	@ (800b0ac <tusb_rhport_init+0xc0>)
 800b08c:	617b      	str	r3, [r7, #20]
 800b08e:	697b      	ldr	r3, [r7, #20]
 800b090:	681b      	ldr	r3, [r3, #0]
 800b092:	f003 0301 	and.w	r3, r3, #1
 800b096:	2b00      	cmp	r3, #0
 800b098:	d000      	beq.n	800b09c <tusb_rhport_init+0xb0>
 800b09a:	be00      	bkpt	0x0000
 800b09c:	2300      	movs	r3, #0
 800b09e:	e000      	b.n	800b0a2 <tusb_rhport_init+0xb6>
  if (rh_init->role == TUSB_ROLE_HOST) {
    TU_ASSERT(tuh_rhport_init(rhport, rh_init));
  }
  #endif

  return true;
 800b0a0:	2301      	movs	r3, #1
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	3718      	adds	r7, #24
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	bd80      	pop	{r7, pc}
 800b0aa:	bf00      	nop
 800b0ac:	e000edf0 	.word	0xe000edf0
 800b0b0:	20000eb0 	.word	0x20000eb0

0800b0b4 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800b0b4:	b480      	push	{r7}
 800b0b6:	b085      	sub	sp, #20
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b0c6:	b2db      	uxtb	r3, r3
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d106      	bne.n	800b0da <tu_edpt_claim+0x26>
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	781b      	ldrb	r3, [r3, #0]
 800b0d0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b0d4:	b2db      	uxtb	r3, r3
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d001      	beq.n	800b0de <tu_edpt_claim+0x2a>
 800b0da:	2300      	movs	r3, #0
 800b0dc:	e01e      	b.n	800b11c <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	781b      	ldrb	r3, [r3, #0]
 800b0e2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d108      	bne.n	800b0fe <tu_edpt_claim+0x4a>
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	781b      	ldrb	r3, [r3, #0]
 800b0f0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d101      	bne.n	800b0fe <tu_edpt_claim+0x4a>
 800b0fa:	2301      	movs	r3, #1
 800b0fc:	e000      	b.n	800b100 <tu_edpt_claim+0x4c>
 800b0fe:	2300      	movs	r3, #0
 800b100:	73fb      	strb	r3, [r7, #15]
 800b102:	7bfb      	ldrb	r3, [r7, #15]
 800b104:	f003 0301 	and.w	r3, r3, #1
 800b108:	73fb      	strb	r3, [r7, #15]
  if (available) {
 800b10a:	7bfb      	ldrb	r3, [r7, #15]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d004      	beq.n	800b11a <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	7813      	ldrb	r3, [r2, #0]
 800b114:	f043 0304 	orr.w	r3, r3, #4
 800b118:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 800b11a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	3714      	adds	r7, #20
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr

0800b128 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 800b128:	b480      	push	{r7}
 800b12a:	b085      	sub	sp, #20
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800b13a:	b2db      	uxtb	r3, r3
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d108      	bne.n	800b152 <tu_edpt_release+0x2a>
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	781b      	ldrb	r3, [r3, #0]
 800b144:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b148:	b2db      	uxtb	r3, r3
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d101      	bne.n	800b152 <tu_edpt_release+0x2a>
 800b14e:	2301      	movs	r3, #1
 800b150:	e000      	b.n	800b154 <tu_edpt_release+0x2c>
 800b152:	2300      	movs	r3, #0
 800b154:	73fb      	strb	r3, [r7, #15]
 800b156:	7bfb      	ldrb	r3, [r7, #15]
 800b158:	f003 0301 	and.w	r3, r3, #1
 800b15c:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 800b15e:	7bfb      	ldrb	r3, [r7, #15]
 800b160:	2b00      	cmp	r3, #0
 800b162:	d004      	beq.n	800b16e <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	7813      	ldrb	r3, [r2, #0]
 800b168:	f023 0304 	bic.w	r3, r3, #4
 800b16c:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 800b16e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b170:	4618      	mov	r0, r3
 800b172:	3714      	adds	r7, #20
 800b174:	46bd      	mov	sp, r7
 800b176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b17a:	4770      	bx	lr

0800b17c <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 800b17c:	b480      	push	{r7}
 800b17e:	b08b      	sub	sp, #44	@ 0x2c
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
 800b184:	460b      	mov	r3, r1
 800b186:	70fb      	strb	r3, [r7, #3]
 800b188:	4613      	mov	r3, r2
 800b18a:	70bb      	strb	r3, [r7, #2]
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 800b190:	68bb      	ldr	r3, [r7, #8]
 800b192:	889b      	ldrh	r3, [r3, #4]
 800b194:	b29b      	uxth	r3, r3
 800b196:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800b19a:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 800b19c:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	78db      	ldrb	r3, [r3, #3]
 800b1a2:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	2b03      	cmp	r3, #3
 800b1aa:	d059      	beq.n	800b260 <tu_edpt_validate+0xe4>
 800b1ac:	2b03      	cmp	r3, #3
 800b1ae:	dc6e      	bgt.n	800b28e <tu_edpt_validate+0x112>
 800b1b0:	2b01      	cmp	r3, #1
 800b1b2:	d002      	beq.n	800b1ba <tu_edpt_validate+0x3e>
 800b1b4:	2b02      	cmp	r3, #2
 800b1b6:	d018      	beq.n	800b1ea <tu_edpt_validate+0x6e>
 800b1b8:	e069      	b.n	800b28e <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 800b1ba:	78fb      	ldrb	r3, [r7, #3]
 800b1bc:	2b02      	cmp	r3, #2
 800b1be:	d102      	bne.n	800b1c6 <tu_edpt_validate+0x4a>
 800b1c0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b1c4:	e001      	b.n	800b1ca <tu_edpt_validate+0x4e>
 800b1c6:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 800b1ca:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 800b1cc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b1ce:	8a7b      	ldrh	r3, [r7, #18]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d95e      	bls.n	800b292 <tu_edpt_validate+0x116>
 800b1d4:	4b35      	ldr	r3, [pc, #212]	@ (800b2ac <tu_edpt_validate+0x130>)
 800b1d6:	60fb      	str	r3, [r7, #12]
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	f003 0301 	and.w	r3, r3, #1
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d000      	beq.n	800b1e6 <tu_edpt_validate+0x6a>
 800b1e4:	be00      	bkpt	0x0000
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	e059      	b.n	800b29e <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 800b1ea:	78fb      	ldrb	r3, [r7, #3]
 800b1ec:	2b02      	cmp	r3, #2
 800b1ee:	d10e      	bne.n	800b20e <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 800b1f0:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b1f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1f6:	d04e      	beq.n	800b296 <tu_edpt_validate+0x11a>
 800b1f8:	4b2c      	ldr	r3, [pc, #176]	@ (800b2ac <tu_edpt_validate+0x130>)
 800b1fa:	617b      	str	r3, [r7, #20]
 800b1fc:	697b      	ldr	r3, [r7, #20]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f003 0301 	and.w	r3, r3, #1
 800b204:	2b00      	cmp	r3, #0
 800b206:	d000      	beq.n	800b20a <tu_edpt_validate+0x8e>
 800b208:	be00      	bkpt	0x0000
 800b20a:	2300      	movs	r3, #0
 800b20c:	e047      	b.n	800b29e <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 800b20e:	78bb      	ldrb	r3, [r7, #2]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d00e      	beq.n	800b232 <tu_edpt_validate+0xb6>
 800b214:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b216:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b21a:	d10a      	bne.n	800b232 <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 800b220:	69fb      	ldr	r3, [r7, #28]
 800b222:	2200      	movs	r2, #0
 800b224:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b228:	711a      	strb	r2, [r3, #4]
 800b22a:	2200      	movs	r2, #0
 800b22c:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 800b22e:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 800b230:	e031      	b.n	800b296 <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 800b232:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b234:	2b08      	cmp	r3, #8
 800b236:	d02e      	beq.n	800b296 <tu_edpt_validate+0x11a>
 800b238:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b23a:	2b10      	cmp	r3, #16
 800b23c:	d02b      	beq.n	800b296 <tu_edpt_validate+0x11a>
 800b23e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b240:	2b20      	cmp	r3, #32
 800b242:	d028      	beq.n	800b296 <tu_edpt_validate+0x11a>
 800b244:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800b246:	2b40      	cmp	r3, #64	@ 0x40
 800b248:	d025      	beq.n	800b296 <tu_edpt_validate+0x11a>
 800b24a:	4b18      	ldr	r3, [pc, #96]	@ (800b2ac <tu_edpt_validate+0x130>)
 800b24c:	61bb      	str	r3, [r7, #24]
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f003 0301 	and.w	r3, r3, #1
 800b256:	2b00      	cmp	r3, #0
 800b258:	d000      	beq.n	800b25c <tu_edpt_validate+0xe0>
 800b25a:	be00      	bkpt	0x0000
 800b25c:	2300      	movs	r3, #0
 800b25e:	e01e      	b.n	800b29e <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 800b260:	78fb      	ldrb	r3, [r7, #3]
 800b262:	2b02      	cmp	r3, #2
 800b264:	d102      	bne.n	800b26c <tu_edpt_validate+0xf0>
 800b266:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b26a:	e000      	b.n	800b26e <tu_edpt_validate+0xf2>
 800b26c:	2340      	movs	r3, #64	@ 0x40
 800b26e:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 800b270:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800b272:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b274:	429a      	cmp	r2, r3
 800b276:	d910      	bls.n	800b29a <tu_edpt_validate+0x11e>
 800b278:	4b0c      	ldr	r3, [pc, #48]	@ (800b2ac <tu_edpt_validate+0x130>)
 800b27a:	623b      	str	r3, [r7, #32]
 800b27c:	6a3b      	ldr	r3, [r7, #32]
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f003 0301 	and.w	r3, r3, #1
 800b284:	2b00      	cmp	r3, #0
 800b286:	d000      	beq.n	800b28a <tu_edpt_validate+0x10e>
 800b288:	be00      	bkpt	0x0000
 800b28a:	2300      	movs	r3, #0
 800b28c:	e007      	b.n	800b29e <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 800b28e:	2300      	movs	r3, #0
 800b290:	e005      	b.n	800b29e <tu_edpt_validate+0x122>
      break;
 800b292:	bf00      	nop
 800b294:	e002      	b.n	800b29c <tu_edpt_validate+0x120>
      break;
 800b296:	bf00      	nop
 800b298:	e000      	b.n	800b29c <tu_edpt_validate+0x120>
      break;
 800b29a:	bf00      	nop
  }

  return true;
 800b29c:	2301      	movs	r3, #1
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	372c      	adds	r7, #44	@ 0x2c
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	e000edf0 	.word	0xe000edf0

0800b2b0 <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 800b2b0:	b480      	push	{r7}
 800b2b2:	b08d      	sub	sp, #52	@ 0x34
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	60f8      	str	r0, [r7, #12]
 800b2b8:	60b9      	str	r1, [r7, #8]
 800b2ba:	4611      	mov	r1, r2
 800b2bc:	461a      	mov	r2, r3
 800b2be:	460b      	mov	r3, r1
 800b2c0:	80fb      	strh	r3, [r7, #6]
 800b2c2:	4613      	mov	r3, r2
 800b2c4:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 800b2ca:	88fb      	ldrh	r3, [r7, #6]
 800b2cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b2ce:	4413      	add	r3, r2
 800b2d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 800b2d2:	e027      	b.n	800b324 <tu_edpt_bind_driver+0x74>
 800b2d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2d6:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 800b2d8:	6a3b      	ldr	r3, [r7, #32]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 800b2de:	2b05      	cmp	r3, #5
 800b2e0:	d116      	bne.n	800b310 <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 800b2e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2e4:	789b      	ldrb	r3, [r3, #2]
 800b2e6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800b2ea:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b2ee:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800b2f0:	7fbb      	ldrb	r3, [r7, #30]
 800b2f2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2f6:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 800b2f8:	005b      	lsls	r3, r3, #1
 800b2fa:	68fa      	ldr	r2, [r7, #12]
 800b2fc:	4413      	add	r3, r2
 800b2fe:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800b302:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800b304:	7ffa      	ldrb	r2, [r7, #31]
 800b306:	09d2      	lsrs	r2, r2, #7
 800b308:	b2d2      	uxtb	r2, r2
 800b30a:	4611      	mov	r1, r2
 800b30c:	797a      	ldrb	r2, [r7, #5]
 800b30e:	545a      	strb	r2, [r3, r1]
 800b310:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b312:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 800b314:	69bb      	ldr	r3, [r7, #24]
 800b316:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 800b318:	697b      	ldr	r3, [r7, #20]
 800b31a:	781b      	ldrb	r3, [r3, #0]
 800b31c:	461a      	mov	r2, r3
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 800b322:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 800b324:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b328:	429a      	cmp	r2, r3
 800b32a:	d3d3      	bcc.n	800b2d4 <tu_edpt_bind_driver+0x24>
  }
}
 800b32c:	bf00      	nop
 800b32e:	bf00      	nop
 800b330:	3734      	adds	r7, #52	@ 0x34
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr

0800b33a <atoi>:
 800b33a:	220a      	movs	r2, #10
 800b33c:	2100      	movs	r1, #0
 800b33e:	f000 b955 	b.w	800b5ec <strtol>
	...

0800b344 <sniprintf>:
 800b344:	b40c      	push	{r2, r3}
 800b346:	b530      	push	{r4, r5, lr}
 800b348:	4b18      	ldr	r3, [pc, #96]	@ (800b3ac <sniprintf+0x68>)
 800b34a:	1e0c      	subs	r4, r1, #0
 800b34c:	681d      	ldr	r5, [r3, #0]
 800b34e:	b09d      	sub	sp, #116	@ 0x74
 800b350:	da08      	bge.n	800b364 <sniprintf+0x20>
 800b352:	238b      	movs	r3, #139	@ 0x8b
 800b354:	602b      	str	r3, [r5, #0]
 800b356:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b35a:	b01d      	add	sp, #116	@ 0x74
 800b35c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b360:	b002      	add	sp, #8
 800b362:	4770      	bx	lr
 800b364:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b368:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b36c:	f04f 0300 	mov.w	r3, #0
 800b370:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b372:	bf14      	ite	ne
 800b374:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800b378:	4623      	moveq	r3, r4
 800b37a:	9304      	str	r3, [sp, #16]
 800b37c:	9307      	str	r3, [sp, #28]
 800b37e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b382:	9002      	str	r0, [sp, #8]
 800b384:	9006      	str	r0, [sp, #24]
 800b386:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b38a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b38c:	ab21      	add	r3, sp, #132	@ 0x84
 800b38e:	a902      	add	r1, sp, #8
 800b390:	4628      	mov	r0, r5
 800b392:	9301      	str	r3, [sp, #4]
 800b394:	f000 fa6c 	bl	800b870 <_svfiprintf_r>
 800b398:	1c43      	adds	r3, r0, #1
 800b39a:	bfbc      	itt	lt
 800b39c:	238b      	movlt	r3, #139	@ 0x8b
 800b39e:	602b      	strlt	r3, [r5, #0]
 800b3a0:	2c00      	cmp	r4, #0
 800b3a2:	d0da      	beq.n	800b35a <sniprintf+0x16>
 800b3a4:	9b02      	ldr	r3, [sp, #8]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	701a      	strb	r2, [r3, #0]
 800b3aa:	e7d6      	b.n	800b35a <sniprintf+0x16>
 800b3ac:	20000048 	.word	0x20000048

0800b3b0 <std>:
 800b3b0:	2300      	movs	r3, #0
 800b3b2:	b510      	push	{r4, lr}
 800b3b4:	4604      	mov	r4, r0
 800b3b6:	e9c0 3300 	strd	r3, r3, [r0]
 800b3ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b3be:	6083      	str	r3, [r0, #8]
 800b3c0:	8181      	strh	r1, [r0, #12]
 800b3c2:	6643      	str	r3, [r0, #100]	@ 0x64
 800b3c4:	81c2      	strh	r2, [r0, #14]
 800b3c6:	6183      	str	r3, [r0, #24]
 800b3c8:	4619      	mov	r1, r3
 800b3ca:	2208      	movs	r2, #8
 800b3cc:	305c      	adds	r0, #92	@ 0x5c
 800b3ce:	f000 f935 	bl	800b63c <memset>
 800b3d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b408 <std+0x58>)
 800b3d4:	6263      	str	r3, [r4, #36]	@ 0x24
 800b3d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b40c <std+0x5c>)
 800b3d8:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b3da:	4b0d      	ldr	r3, [pc, #52]	@ (800b410 <std+0x60>)
 800b3dc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b3de:	4b0d      	ldr	r3, [pc, #52]	@ (800b414 <std+0x64>)
 800b3e0:	6323      	str	r3, [r4, #48]	@ 0x30
 800b3e2:	4b0d      	ldr	r3, [pc, #52]	@ (800b418 <std+0x68>)
 800b3e4:	6224      	str	r4, [r4, #32]
 800b3e6:	429c      	cmp	r4, r3
 800b3e8:	d006      	beq.n	800b3f8 <std+0x48>
 800b3ea:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b3ee:	4294      	cmp	r4, r2
 800b3f0:	d002      	beq.n	800b3f8 <std+0x48>
 800b3f2:	33d0      	adds	r3, #208	@ 0xd0
 800b3f4:	429c      	cmp	r4, r3
 800b3f6:	d105      	bne.n	800b404 <std+0x54>
 800b3f8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b3fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b400:	f000 b9aa 	b.w	800b758 <__retarget_lock_init_recursive>
 800b404:	bd10      	pop	{r4, pc}
 800b406:	bf00      	nop
 800b408:	0800c045 	.word	0x0800c045
 800b40c:	0800c067 	.word	0x0800c067
 800b410:	0800c09f 	.word	0x0800c09f
 800b414:	0800c0c3 	.word	0x0800c0c3
 800b418:	20000eb4 	.word	0x20000eb4

0800b41c <stdio_exit_handler>:
 800b41c:	4a02      	ldr	r2, [pc, #8]	@ (800b428 <stdio_exit_handler+0xc>)
 800b41e:	4903      	ldr	r1, [pc, #12]	@ (800b42c <stdio_exit_handler+0x10>)
 800b420:	4803      	ldr	r0, [pc, #12]	@ (800b430 <stdio_exit_handler+0x14>)
 800b422:	f000 b8ed 	b.w	800b600 <_fwalk_sglue>
 800b426:	bf00      	nop
 800b428:	2000003c 	.word	0x2000003c
 800b42c:	0800bfdd 	.word	0x0800bfdd
 800b430:	2000004c 	.word	0x2000004c

0800b434 <cleanup_stdio>:
 800b434:	6841      	ldr	r1, [r0, #4]
 800b436:	4b0c      	ldr	r3, [pc, #48]	@ (800b468 <cleanup_stdio+0x34>)
 800b438:	4299      	cmp	r1, r3
 800b43a:	b510      	push	{r4, lr}
 800b43c:	4604      	mov	r4, r0
 800b43e:	d001      	beq.n	800b444 <cleanup_stdio+0x10>
 800b440:	f000 fdcc 	bl	800bfdc <_fflush_r>
 800b444:	68a1      	ldr	r1, [r4, #8]
 800b446:	4b09      	ldr	r3, [pc, #36]	@ (800b46c <cleanup_stdio+0x38>)
 800b448:	4299      	cmp	r1, r3
 800b44a:	d002      	beq.n	800b452 <cleanup_stdio+0x1e>
 800b44c:	4620      	mov	r0, r4
 800b44e:	f000 fdc5 	bl	800bfdc <_fflush_r>
 800b452:	68e1      	ldr	r1, [r4, #12]
 800b454:	4b06      	ldr	r3, [pc, #24]	@ (800b470 <cleanup_stdio+0x3c>)
 800b456:	4299      	cmp	r1, r3
 800b458:	d004      	beq.n	800b464 <cleanup_stdio+0x30>
 800b45a:	4620      	mov	r0, r4
 800b45c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b460:	f000 bdbc 	b.w	800bfdc <_fflush_r>
 800b464:	bd10      	pop	{r4, pc}
 800b466:	bf00      	nop
 800b468:	20000eb4 	.word	0x20000eb4
 800b46c:	20000f1c 	.word	0x20000f1c
 800b470:	20000f84 	.word	0x20000f84

0800b474 <global_stdio_init.part.0>:
 800b474:	b510      	push	{r4, lr}
 800b476:	4b0b      	ldr	r3, [pc, #44]	@ (800b4a4 <global_stdio_init.part.0+0x30>)
 800b478:	4c0b      	ldr	r4, [pc, #44]	@ (800b4a8 <global_stdio_init.part.0+0x34>)
 800b47a:	4a0c      	ldr	r2, [pc, #48]	@ (800b4ac <global_stdio_init.part.0+0x38>)
 800b47c:	601a      	str	r2, [r3, #0]
 800b47e:	4620      	mov	r0, r4
 800b480:	2200      	movs	r2, #0
 800b482:	2104      	movs	r1, #4
 800b484:	f7ff ff94 	bl	800b3b0 <std>
 800b488:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b48c:	2201      	movs	r2, #1
 800b48e:	2109      	movs	r1, #9
 800b490:	f7ff ff8e 	bl	800b3b0 <std>
 800b494:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b498:	2202      	movs	r2, #2
 800b49a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b49e:	2112      	movs	r1, #18
 800b4a0:	f7ff bf86 	b.w	800b3b0 <std>
 800b4a4:	20000fec 	.word	0x20000fec
 800b4a8:	20000eb4 	.word	0x20000eb4
 800b4ac:	0800b41d 	.word	0x0800b41d

0800b4b0 <__sfp_lock_acquire>:
 800b4b0:	4801      	ldr	r0, [pc, #4]	@ (800b4b8 <__sfp_lock_acquire+0x8>)
 800b4b2:	f000 b952 	b.w	800b75a <__retarget_lock_acquire_recursive>
 800b4b6:	bf00      	nop
 800b4b8:	20000ff1 	.word	0x20000ff1

0800b4bc <__sfp_lock_release>:
 800b4bc:	4801      	ldr	r0, [pc, #4]	@ (800b4c4 <__sfp_lock_release+0x8>)
 800b4be:	f000 b94d 	b.w	800b75c <__retarget_lock_release_recursive>
 800b4c2:	bf00      	nop
 800b4c4:	20000ff1 	.word	0x20000ff1

0800b4c8 <__sinit>:
 800b4c8:	b510      	push	{r4, lr}
 800b4ca:	4604      	mov	r4, r0
 800b4cc:	f7ff fff0 	bl	800b4b0 <__sfp_lock_acquire>
 800b4d0:	6a23      	ldr	r3, [r4, #32]
 800b4d2:	b11b      	cbz	r3, 800b4dc <__sinit+0x14>
 800b4d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b4d8:	f7ff bff0 	b.w	800b4bc <__sfp_lock_release>
 800b4dc:	4b04      	ldr	r3, [pc, #16]	@ (800b4f0 <__sinit+0x28>)
 800b4de:	6223      	str	r3, [r4, #32]
 800b4e0:	4b04      	ldr	r3, [pc, #16]	@ (800b4f4 <__sinit+0x2c>)
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d1f5      	bne.n	800b4d4 <__sinit+0xc>
 800b4e8:	f7ff ffc4 	bl	800b474 <global_stdio_init.part.0>
 800b4ec:	e7f2      	b.n	800b4d4 <__sinit+0xc>
 800b4ee:	bf00      	nop
 800b4f0:	0800b435 	.word	0x0800b435
 800b4f4:	20000fec 	.word	0x20000fec

0800b4f8 <_strtol_l.isra.0>:
 800b4f8:	2b24      	cmp	r3, #36	@ 0x24
 800b4fa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b4fe:	4686      	mov	lr, r0
 800b500:	4690      	mov	r8, r2
 800b502:	d801      	bhi.n	800b508 <_strtol_l.isra.0+0x10>
 800b504:	2b01      	cmp	r3, #1
 800b506:	d106      	bne.n	800b516 <_strtol_l.isra.0+0x1e>
 800b508:	f000 f8fc 	bl	800b704 <__errno>
 800b50c:	2316      	movs	r3, #22
 800b50e:	6003      	str	r3, [r0, #0]
 800b510:	2000      	movs	r0, #0
 800b512:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b516:	4834      	ldr	r0, [pc, #208]	@ (800b5e8 <_strtol_l.isra.0+0xf0>)
 800b518:	460d      	mov	r5, r1
 800b51a:	462a      	mov	r2, r5
 800b51c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b520:	5d06      	ldrb	r6, [r0, r4]
 800b522:	f016 0608 	ands.w	r6, r6, #8
 800b526:	d1f8      	bne.n	800b51a <_strtol_l.isra.0+0x22>
 800b528:	2c2d      	cmp	r4, #45	@ 0x2d
 800b52a:	d110      	bne.n	800b54e <_strtol_l.isra.0+0x56>
 800b52c:	782c      	ldrb	r4, [r5, #0]
 800b52e:	2601      	movs	r6, #1
 800b530:	1c95      	adds	r5, r2, #2
 800b532:	f033 0210 	bics.w	r2, r3, #16
 800b536:	d115      	bne.n	800b564 <_strtol_l.isra.0+0x6c>
 800b538:	2c30      	cmp	r4, #48	@ 0x30
 800b53a:	d10d      	bne.n	800b558 <_strtol_l.isra.0+0x60>
 800b53c:	782a      	ldrb	r2, [r5, #0]
 800b53e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b542:	2a58      	cmp	r2, #88	@ 0x58
 800b544:	d108      	bne.n	800b558 <_strtol_l.isra.0+0x60>
 800b546:	786c      	ldrb	r4, [r5, #1]
 800b548:	3502      	adds	r5, #2
 800b54a:	2310      	movs	r3, #16
 800b54c:	e00a      	b.n	800b564 <_strtol_l.isra.0+0x6c>
 800b54e:	2c2b      	cmp	r4, #43	@ 0x2b
 800b550:	bf04      	itt	eq
 800b552:	782c      	ldrbeq	r4, [r5, #0]
 800b554:	1c95      	addeq	r5, r2, #2
 800b556:	e7ec      	b.n	800b532 <_strtol_l.isra.0+0x3a>
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d1f6      	bne.n	800b54a <_strtol_l.isra.0+0x52>
 800b55c:	2c30      	cmp	r4, #48	@ 0x30
 800b55e:	bf14      	ite	ne
 800b560:	230a      	movne	r3, #10
 800b562:	2308      	moveq	r3, #8
 800b564:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b568:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 800b56c:	2200      	movs	r2, #0
 800b56e:	fbbc f9f3 	udiv	r9, ip, r3
 800b572:	4610      	mov	r0, r2
 800b574:	fb03 ca19 	mls	sl, r3, r9, ip
 800b578:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b57c:	2f09      	cmp	r7, #9
 800b57e:	d80f      	bhi.n	800b5a0 <_strtol_l.isra.0+0xa8>
 800b580:	463c      	mov	r4, r7
 800b582:	42a3      	cmp	r3, r4
 800b584:	dd1b      	ble.n	800b5be <_strtol_l.isra.0+0xc6>
 800b586:	1c57      	adds	r7, r2, #1
 800b588:	d007      	beq.n	800b59a <_strtol_l.isra.0+0xa2>
 800b58a:	4581      	cmp	r9, r0
 800b58c:	d314      	bcc.n	800b5b8 <_strtol_l.isra.0+0xc0>
 800b58e:	d101      	bne.n	800b594 <_strtol_l.isra.0+0x9c>
 800b590:	45a2      	cmp	sl, r4
 800b592:	db11      	blt.n	800b5b8 <_strtol_l.isra.0+0xc0>
 800b594:	fb00 4003 	mla	r0, r0, r3, r4
 800b598:	2201      	movs	r2, #1
 800b59a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b59e:	e7eb      	b.n	800b578 <_strtol_l.isra.0+0x80>
 800b5a0:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b5a4:	2f19      	cmp	r7, #25
 800b5a6:	d801      	bhi.n	800b5ac <_strtol_l.isra.0+0xb4>
 800b5a8:	3c37      	subs	r4, #55	@ 0x37
 800b5aa:	e7ea      	b.n	800b582 <_strtol_l.isra.0+0x8a>
 800b5ac:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800b5b0:	2f19      	cmp	r7, #25
 800b5b2:	d804      	bhi.n	800b5be <_strtol_l.isra.0+0xc6>
 800b5b4:	3c57      	subs	r4, #87	@ 0x57
 800b5b6:	e7e4      	b.n	800b582 <_strtol_l.isra.0+0x8a>
 800b5b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b5bc:	e7ed      	b.n	800b59a <_strtol_l.isra.0+0xa2>
 800b5be:	1c53      	adds	r3, r2, #1
 800b5c0:	d108      	bne.n	800b5d4 <_strtol_l.isra.0+0xdc>
 800b5c2:	2322      	movs	r3, #34	@ 0x22
 800b5c4:	f8ce 3000 	str.w	r3, [lr]
 800b5c8:	4660      	mov	r0, ip
 800b5ca:	f1b8 0f00 	cmp.w	r8, #0
 800b5ce:	d0a0      	beq.n	800b512 <_strtol_l.isra.0+0x1a>
 800b5d0:	1e69      	subs	r1, r5, #1
 800b5d2:	e006      	b.n	800b5e2 <_strtol_l.isra.0+0xea>
 800b5d4:	b106      	cbz	r6, 800b5d8 <_strtol_l.isra.0+0xe0>
 800b5d6:	4240      	negs	r0, r0
 800b5d8:	f1b8 0f00 	cmp.w	r8, #0
 800b5dc:	d099      	beq.n	800b512 <_strtol_l.isra.0+0x1a>
 800b5de:	2a00      	cmp	r2, #0
 800b5e0:	d1f6      	bne.n	800b5d0 <_strtol_l.isra.0+0xd8>
 800b5e2:	f8c8 1000 	str.w	r1, [r8]
 800b5e6:	e794      	b.n	800b512 <_strtol_l.isra.0+0x1a>
 800b5e8:	0800d2f1 	.word	0x0800d2f1

0800b5ec <strtol>:
 800b5ec:	4613      	mov	r3, r2
 800b5ee:	460a      	mov	r2, r1
 800b5f0:	4601      	mov	r1, r0
 800b5f2:	4802      	ldr	r0, [pc, #8]	@ (800b5fc <strtol+0x10>)
 800b5f4:	6800      	ldr	r0, [r0, #0]
 800b5f6:	f7ff bf7f 	b.w	800b4f8 <_strtol_l.isra.0>
 800b5fa:	bf00      	nop
 800b5fc:	20000048 	.word	0x20000048

0800b600 <_fwalk_sglue>:
 800b600:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b604:	4607      	mov	r7, r0
 800b606:	4688      	mov	r8, r1
 800b608:	4614      	mov	r4, r2
 800b60a:	2600      	movs	r6, #0
 800b60c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b610:	f1b9 0901 	subs.w	r9, r9, #1
 800b614:	d505      	bpl.n	800b622 <_fwalk_sglue+0x22>
 800b616:	6824      	ldr	r4, [r4, #0]
 800b618:	2c00      	cmp	r4, #0
 800b61a:	d1f7      	bne.n	800b60c <_fwalk_sglue+0xc>
 800b61c:	4630      	mov	r0, r6
 800b61e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b622:	89ab      	ldrh	r3, [r5, #12]
 800b624:	2b01      	cmp	r3, #1
 800b626:	d907      	bls.n	800b638 <_fwalk_sglue+0x38>
 800b628:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b62c:	3301      	adds	r3, #1
 800b62e:	d003      	beq.n	800b638 <_fwalk_sglue+0x38>
 800b630:	4629      	mov	r1, r5
 800b632:	4638      	mov	r0, r7
 800b634:	47c0      	blx	r8
 800b636:	4306      	orrs	r6, r0
 800b638:	3568      	adds	r5, #104	@ 0x68
 800b63a:	e7e9      	b.n	800b610 <_fwalk_sglue+0x10>

0800b63c <memset>:
 800b63c:	4402      	add	r2, r0
 800b63e:	4603      	mov	r3, r0
 800b640:	4293      	cmp	r3, r2
 800b642:	d100      	bne.n	800b646 <memset+0xa>
 800b644:	4770      	bx	lr
 800b646:	f803 1b01 	strb.w	r1, [r3], #1
 800b64a:	e7f9      	b.n	800b640 <memset+0x4>

0800b64c <strtok>:
 800b64c:	4b16      	ldr	r3, [pc, #88]	@ (800b6a8 <strtok+0x5c>)
 800b64e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b652:	681f      	ldr	r7, [r3, #0]
 800b654:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b656:	4605      	mov	r5, r0
 800b658:	460e      	mov	r6, r1
 800b65a:	b9ec      	cbnz	r4, 800b698 <strtok+0x4c>
 800b65c:	2050      	movs	r0, #80	@ 0x50
 800b65e:	f000 fa03 	bl	800ba68 <malloc>
 800b662:	4602      	mov	r2, r0
 800b664:	6478      	str	r0, [r7, #68]	@ 0x44
 800b666:	b920      	cbnz	r0, 800b672 <strtok+0x26>
 800b668:	4b10      	ldr	r3, [pc, #64]	@ (800b6ac <strtok+0x60>)
 800b66a:	4811      	ldr	r0, [pc, #68]	@ (800b6b0 <strtok+0x64>)
 800b66c:	215b      	movs	r1, #91	@ 0x5b
 800b66e:	f000 f885 	bl	800b77c <__assert_func>
 800b672:	e9c0 4400 	strd	r4, r4, [r0]
 800b676:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b67a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b67e:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b682:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b686:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b68a:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b68e:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b692:	6184      	str	r4, [r0, #24]
 800b694:	7704      	strb	r4, [r0, #28]
 800b696:	6244      	str	r4, [r0, #36]	@ 0x24
 800b698:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b69a:	4631      	mov	r1, r6
 800b69c:	4628      	mov	r0, r5
 800b69e:	2301      	movs	r3, #1
 800b6a0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b6a4:	f000 b806 	b.w	800b6b4 <__strtok_r>
 800b6a8:	20000048 	.word	0x20000048
 800b6ac:	0800d210 	.word	0x0800d210
 800b6b0:	0800d227 	.word	0x0800d227

0800b6b4 <__strtok_r>:
 800b6b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b6b6:	4604      	mov	r4, r0
 800b6b8:	b908      	cbnz	r0, 800b6be <__strtok_r+0xa>
 800b6ba:	6814      	ldr	r4, [r2, #0]
 800b6bc:	b144      	cbz	r4, 800b6d0 <__strtok_r+0x1c>
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b6c4:	460f      	mov	r7, r1
 800b6c6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b6ca:	b91e      	cbnz	r6, 800b6d4 <__strtok_r+0x20>
 800b6cc:	b965      	cbnz	r5, 800b6e8 <__strtok_r+0x34>
 800b6ce:	6015      	str	r5, [r2, #0]
 800b6d0:	2000      	movs	r0, #0
 800b6d2:	e005      	b.n	800b6e0 <__strtok_r+0x2c>
 800b6d4:	42b5      	cmp	r5, r6
 800b6d6:	d1f6      	bne.n	800b6c6 <__strtok_r+0x12>
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d1f0      	bne.n	800b6be <__strtok_r+0xa>
 800b6dc:	6014      	str	r4, [r2, #0]
 800b6de:	7003      	strb	r3, [r0, #0]
 800b6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b6e2:	461c      	mov	r4, r3
 800b6e4:	e00c      	b.n	800b700 <__strtok_r+0x4c>
 800b6e6:	b91d      	cbnz	r5, 800b6f0 <__strtok_r+0x3c>
 800b6e8:	4627      	mov	r7, r4
 800b6ea:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b6ee:	460e      	mov	r6, r1
 800b6f0:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b6f4:	42ab      	cmp	r3, r5
 800b6f6:	d1f6      	bne.n	800b6e6 <__strtok_r+0x32>
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d0f2      	beq.n	800b6e2 <__strtok_r+0x2e>
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	703b      	strb	r3, [r7, #0]
 800b700:	6014      	str	r4, [r2, #0]
 800b702:	e7ed      	b.n	800b6e0 <__strtok_r+0x2c>

0800b704 <__errno>:
 800b704:	4b01      	ldr	r3, [pc, #4]	@ (800b70c <__errno+0x8>)
 800b706:	6818      	ldr	r0, [r3, #0]
 800b708:	4770      	bx	lr
 800b70a:	bf00      	nop
 800b70c:	20000048 	.word	0x20000048

0800b710 <__libc_init_array>:
 800b710:	b570      	push	{r4, r5, r6, lr}
 800b712:	4d0d      	ldr	r5, [pc, #52]	@ (800b748 <__libc_init_array+0x38>)
 800b714:	4c0d      	ldr	r4, [pc, #52]	@ (800b74c <__libc_init_array+0x3c>)
 800b716:	1b64      	subs	r4, r4, r5
 800b718:	10a4      	asrs	r4, r4, #2
 800b71a:	2600      	movs	r6, #0
 800b71c:	42a6      	cmp	r6, r4
 800b71e:	d109      	bne.n	800b734 <__libc_init_array+0x24>
 800b720:	4d0b      	ldr	r5, [pc, #44]	@ (800b750 <__libc_init_array+0x40>)
 800b722:	4c0c      	ldr	r4, [pc, #48]	@ (800b754 <__libc_init_array+0x44>)
 800b724:	f001 f87a 	bl	800c81c <_init>
 800b728:	1b64      	subs	r4, r4, r5
 800b72a:	10a4      	asrs	r4, r4, #2
 800b72c:	2600      	movs	r6, #0
 800b72e:	42a6      	cmp	r6, r4
 800b730:	d105      	bne.n	800b73e <__libc_init_array+0x2e>
 800b732:	bd70      	pop	{r4, r5, r6, pc}
 800b734:	f855 3b04 	ldr.w	r3, [r5], #4
 800b738:	4798      	blx	r3
 800b73a:	3601      	adds	r6, #1
 800b73c:	e7ee      	b.n	800b71c <__libc_init_array+0xc>
 800b73e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b742:	4798      	blx	r3
 800b744:	3601      	adds	r6, #1
 800b746:	e7f2      	b.n	800b72e <__libc_init_array+0x1e>
 800b748:	0800d3fc 	.word	0x0800d3fc
 800b74c:	0800d3fc 	.word	0x0800d3fc
 800b750:	0800d3fc 	.word	0x0800d3fc
 800b754:	0800d400 	.word	0x0800d400

0800b758 <__retarget_lock_init_recursive>:
 800b758:	4770      	bx	lr

0800b75a <__retarget_lock_acquire_recursive>:
 800b75a:	4770      	bx	lr

0800b75c <__retarget_lock_release_recursive>:
 800b75c:	4770      	bx	lr

0800b75e <memcpy>:
 800b75e:	440a      	add	r2, r1
 800b760:	4291      	cmp	r1, r2
 800b762:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b766:	d100      	bne.n	800b76a <memcpy+0xc>
 800b768:	4770      	bx	lr
 800b76a:	b510      	push	{r4, lr}
 800b76c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b770:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b774:	4291      	cmp	r1, r2
 800b776:	d1f9      	bne.n	800b76c <memcpy+0xe>
 800b778:	bd10      	pop	{r4, pc}
	...

0800b77c <__assert_func>:
 800b77c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b77e:	4614      	mov	r4, r2
 800b780:	461a      	mov	r2, r3
 800b782:	4b09      	ldr	r3, [pc, #36]	@ (800b7a8 <__assert_func+0x2c>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4605      	mov	r5, r0
 800b788:	68d8      	ldr	r0, [r3, #12]
 800b78a:	b14c      	cbz	r4, 800b7a0 <__assert_func+0x24>
 800b78c:	4b07      	ldr	r3, [pc, #28]	@ (800b7ac <__assert_func+0x30>)
 800b78e:	9100      	str	r1, [sp, #0]
 800b790:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b794:	4906      	ldr	r1, [pc, #24]	@ (800b7b0 <__assert_func+0x34>)
 800b796:	462b      	mov	r3, r5
 800b798:	f000 fc98 	bl	800c0cc <fiprintf>
 800b79c:	f000 fd46 	bl	800c22c <abort>
 800b7a0:	4b04      	ldr	r3, [pc, #16]	@ (800b7b4 <__assert_func+0x38>)
 800b7a2:	461c      	mov	r4, r3
 800b7a4:	e7f3      	b.n	800b78e <__assert_func+0x12>
 800b7a6:	bf00      	nop
 800b7a8:	20000048 	.word	0x20000048
 800b7ac:	0800d281 	.word	0x0800d281
 800b7b0:	0800d28e 	.word	0x0800d28e
 800b7b4:	0800d2bc 	.word	0x0800d2bc

0800b7b8 <__ssputs_r>:
 800b7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b7bc:	688e      	ldr	r6, [r1, #8]
 800b7be:	461f      	mov	r7, r3
 800b7c0:	42be      	cmp	r6, r7
 800b7c2:	680b      	ldr	r3, [r1, #0]
 800b7c4:	4682      	mov	sl, r0
 800b7c6:	460c      	mov	r4, r1
 800b7c8:	4690      	mov	r8, r2
 800b7ca:	d82d      	bhi.n	800b828 <__ssputs_r+0x70>
 800b7cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b7d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b7d4:	d026      	beq.n	800b824 <__ssputs_r+0x6c>
 800b7d6:	6965      	ldr	r5, [r4, #20]
 800b7d8:	6909      	ldr	r1, [r1, #16]
 800b7da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b7de:	eba3 0901 	sub.w	r9, r3, r1
 800b7e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b7e6:	1c7b      	adds	r3, r7, #1
 800b7e8:	444b      	add	r3, r9
 800b7ea:	106d      	asrs	r5, r5, #1
 800b7ec:	429d      	cmp	r5, r3
 800b7ee:	bf38      	it	cc
 800b7f0:	461d      	movcc	r5, r3
 800b7f2:	0553      	lsls	r3, r2, #21
 800b7f4:	d527      	bpl.n	800b846 <__ssputs_r+0x8e>
 800b7f6:	4629      	mov	r1, r5
 800b7f8:	f000 f960 	bl	800babc <_malloc_r>
 800b7fc:	4606      	mov	r6, r0
 800b7fe:	b360      	cbz	r0, 800b85a <__ssputs_r+0xa2>
 800b800:	6921      	ldr	r1, [r4, #16]
 800b802:	464a      	mov	r2, r9
 800b804:	f7ff ffab 	bl	800b75e <memcpy>
 800b808:	89a3      	ldrh	r3, [r4, #12]
 800b80a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b80e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b812:	81a3      	strh	r3, [r4, #12]
 800b814:	6126      	str	r6, [r4, #16]
 800b816:	6165      	str	r5, [r4, #20]
 800b818:	444e      	add	r6, r9
 800b81a:	eba5 0509 	sub.w	r5, r5, r9
 800b81e:	6026      	str	r6, [r4, #0]
 800b820:	60a5      	str	r5, [r4, #8]
 800b822:	463e      	mov	r6, r7
 800b824:	42be      	cmp	r6, r7
 800b826:	d900      	bls.n	800b82a <__ssputs_r+0x72>
 800b828:	463e      	mov	r6, r7
 800b82a:	6820      	ldr	r0, [r4, #0]
 800b82c:	4632      	mov	r2, r6
 800b82e:	4641      	mov	r1, r8
 800b830:	f000 fc8c 	bl	800c14c <memmove>
 800b834:	68a3      	ldr	r3, [r4, #8]
 800b836:	1b9b      	subs	r3, r3, r6
 800b838:	60a3      	str	r3, [r4, #8]
 800b83a:	6823      	ldr	r3, [r4, #0]
 800b83c:	4433      	add	r3, r6
 800b83e:	6023      	str	r3, [r4, #0]
 800b840:	2000      	movs	r0, #0
 800b842:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b846:	462a      	mov	r2, r5
 800b848:	f000 fc52 	bl	800c0f0 <_realloc_r>
 800b84c:	4606      	mov	r6, r0
 800b84e:	2800      	cmp	r0, #0
 800b850:	d1e0      	bne.n	800b814 <__ssputs_r+0x5c>
 800b852:	6921      	ldr	r1, [r4, #16]
 800b854:	4650      	mov	r0, sl
 800b856:	f000 fcf1 	bl	800c23c <_free_r>
 800b85a:	230c      	movs	r3, #12
 800b85c:	f8ca 3000 	str.w	r3, [sl]
 800b860:	89a3      	ldrh	r3, [r4, #12]
 800b862:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b866:	81a3      	strh	r3, [r4, #12]
 800b868:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b86c:	e7e9      	b.n	800b842 <__ssputs_r+0x8a>
	...

0800b870 <_svfiprintf_r>:
 800b870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b874:	4698      	mov	r8, r3
 800b876:	898b      	ldrh	r3, [r1, #12]
 800b878:	061b      	lsls	r3, r3, #24
 800b87a:	b09d      	sub	sp, #116	@ 0x74
 800b87c:	4607      	mov	r7, r0
 800b87e:	460d      	mov	r5, r1
 800b880:	4614      	mov	r4, r2
 800b882:	d510      	bpl.n	800b8a6 <_svfiprintf_r+0x36>
 800b884:	690b      	ldr	r3, [r1, #16]
 800b886:	b973      	cbnz	r3, 800b8a6 <_svfiprintf_r+0x36>
 800b888:	2140      	movs	r1, #64	@ 0x40
 800b88a:	f000 f917 	bl	800babc <_malloc_r>
 800b88e:	6028      	str	r0, [r5, #0]
 800b890:	6128      	str	r0, [r5, #16]
 800b892:	b930      	cbnz	r0, 800b8a2 <_svfiprintf_r+0x32>
 800b894:	230c      	movs	r3, #12
 800b896:	603b      	str	r3, [r7, #0]
 800b898:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b89c:	b01d      	add	sp, #116	@ 0x74
 800b89e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8a2:	2340      	movs	r3, #64	@ 0x40
 800b8a4:	616b      	str	r3, [r5, #20]
 800b8a6:	2300      	movs	r3, #0
 800b8a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b8aa:	2320      	movs	r3, #32
 800b8ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b8b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8b4:	2330      	movs	r3, #48	@ 0x30
 800b8b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ba54 <_svfiprintf_r+0x1e4>
 800b8ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b8be:	f04f 0901 	mov.w	r9, #1
 800b8c2:	4623      	mov	r3, r4
 800b8c4:	469a      	mov	sl, r3
 800b8c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8ca:	b10a      	cbz	r2, 800b8d0 <_svfiprintf_r+0x60>
 800b8cc:	2a25      	cmp	r2, #37	@ 0x25
 800b8ce:	d1f9      	bne.n	800b8c4 <_svfiprintf_r+0x54>
 800b8d0:	ebba 0b04 	subs.w	fp, sl, r4
 800b8d4:	d00b      	beq.n	800b8ee <_svfiprintf_r+0x7e>
 800b8d6:	465b      	mov	r3, fp
 800b8d8:	4622      	mov	r2, r4
 800b8da:	4629      	mov	r1, r5
 800b8dc:	4638      	mov	r0, r7
 800b8de:	f7ff ff6b 	bl	800b7b8 <__ssputs_r>
 800b8e2:	3001      	adds	r0, #1
 800b8e4:	f000 80a7 	beq.w	800ba36 <_svfiprintf_r+0x1c6>
 800b8e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b8ea:	445a      	add	r2, fp
 800b8ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800b8ee:	f89a 3000 	ldrb.w	r3, [sl]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	f000 809f 	beq.w	800ba36 <_svfiprintf_r+0x1c6>
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b8fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b902:	f10a 0a01 	add.w	sl, sl, #1
 800b906:	9304      	str	r3, [sp, #16]
 800b908:	9307      	str	r3, [sp, #28]
 800b90a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b90e:	931a      	str	r3, [sp, #104]	@ 0x68
 800b910:	4654      	mov	r4, sl
 800b912:	2205      	movs	r2, #5
 800b914:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b918:	484e      	ldr	r0, [pc, #312]	@ (800ba54 <_svfiprintf_r+0x1e4>)
 800b91a:	f7f4 fc79 	bl	8000210 <memchr>
 800b91e:	9a04      	ldr	r2, [sp, #16]
 800b920:	b9d8      	cbnz	r0, 800b95a <_svfiprintf_r+0xea>
 800b922:	06d0      	lsls	r0, r2, #27
 800b924:	bf44      	itt	mi
 800b926:	2320      	movmi	r3, #32
 800b928:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b92c:	0711      	lsls	r1, r2, #28
 800b92e:	bf44      	itt	mi
 800b930:	232b      	movmi	r3, #43	@ 0x2b
 800b932:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b936:	f89a 3000 	ldrb.w	r3, [sl]
 800b93a:	2b2a      	cmp	r3, #42	@ 0x2a
 800b93c:	d015      	beq.n	800b96a <_svfiprintf_r+0xfa>
 800b93e:	9a07      	ldr	r2, [sp, #28]
 800b940:	4654      	mov	r4, sl
 800b942:	2000      	movs	r0, #0
 800b944:	f04f 0c0a 	mov.w	ip, #10
 800b948:	4621      	mov	r1, r4
 800b94a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b94e:	3b30      	subs	r3, #48	@ 0x30
 800b950:	2b09      	cmp	r3, #9
 800b952:	d94b      	bls.n	800b9ec <_svfiprintf_r+0x17c>
 800b954:	b1b0      	cbz	r0, 800b984 <_svfiprintf_r+0x114>
 800b956:	9207      	str	r2, [sp, #28]
 800b958:	e014      	b.n	800b984 <_svfiprintf_r+0x114>
 800b95a:	eba0 0308 	sub.w	r3, r0, r8
 800b95e:	fa09 f303 	lsl.w	r3, r9, r3
 800b962:	4313      	orrs	r3, r2
 800b964:	9304      	str	r3, [sp, #16]
 800b966:	46a2      	mov	sl, r4
 800b968:	e7d2      	b.n	800b910 <_svfiprintf_r+0xa0>
 800b96a:	9b03      	ldr	r3, [sp, #12]
 800b96c:	1d19      	adds	r1, r3, #4
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	9103      	str	r1, [sp, #12]
 800b972:	2b00      	cmp	r3, #0
 800b974:	bfbb      	ittet	lt
 800b976:	425b      	neglt	r3, r3
 800b978:	f042 0202 	orrlt.w	r2, r2, #2
 800b97c:	9307      	strge	r3, [sp, #28]
 800b97e:	9307      	strlt	r3, [sp, #28]
 800b980:	bfb8      	it	lt
 800b982:	9204      	strlt	r2, [sp, #16]
 800b984:	7823      	ldrb	r3, [r4, #0]
 800b986:	2b2e      	cmp	r3, #46	@ 0x2e
 800b988:	d10a      	bne.n	800b9a0 <_svfiprintf_r+0x130>
 800b98a:	7863      	ldrb	r3, [r4, #1]
 800b98c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b98e:	d132      	bne.n	800b9f6 <_svfiprintf_r+0x186>
 800b990:	9b03      	ldr	r3, [sp, #12]
 800b992:	1d1a      	adds	r2, r3, #4
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	9203      	str	r2, [sp, #12]
 800b998:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b99c:	3402      	adds	r4, #2
 800b99e:	9305      	str	r3, [sp, #20]
 800b9a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ba64 <_svfiprintf_r+0x1f4>
 800b9a4:	7821      	ldrb	r1, [r4, #0]
 800b9a6:	2203      	movs	r2, #3
 800b9a8:	4650      	mov	r0, sl
 800b9aa:	f7f4 fc31 	bl	8000210 <memchr>
 800b9ae:	b138      	cbz	r0, 800b9c0 <_svfiprintf_r+0x150>
 800b9b0:	9b04      	ldr	r3, [sp, #16]
 800b9b2:	eba0 000a 	sub.w	r0, r0, sl
 800b9b6:	2240      	movs	r2, #64	@ 0x40
 800b9b8:	4082      	lsls	r2, r0
 800b9ba:	4313      	orrs	r3, r2
 800b9bc:	3401      	adds	r4, #1
 800b9be:	9304      	str	r3, [sp, #16]
 800b9c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9c4:	4824      	ldr	r0, [pc, #144]	@ (800ba58 <_svfiprintf_r+0x1e8>)
 800b9c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b9ca:	2206      	movs	r2, #6
 800b9cc:	f7f4 fc20 	bl	8000210 <memchr>
 800b9d0:	2800      	cmp	r0, #0
 800b9d2:	d036      	beq.n	800ba42 <_svfiprintf_r+0x1d2>
 800b9d4:	4b21      	ldr	r3, [pc, #132]	@ (800ba5c <_svfiprintf_r+0x1ec>)
 800b9d6:	bb1b      	cbnz	r3, 800ba20 <_svfiprintf_r+0x1b0>
 800b9d8:	9b03      	ldr	r3, [sp, #12]
 800b9da:	3307      	adds	r3, #7
 800b9dc:	f023 0307 	bic.w	r3, r3, #7
 800b9e0:	3308      	adds	r3, #8
 800b9e2:	9303      	str	r3, [sp, #12]
 800b9e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b9e6:	4433      	add	r3, r6
 800b9e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800b9ea:	e76a      	b.n	800b8c2 <_svfiprintf_r+0x52>
 800b9ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9f0:	460c      	mov	r4, r1
 800b9f2:	2001      	movs	r0, #1
 800b9f4:	e7a8      	b.n	800b948 <_svfiprintf_r+0xd8>
 800b9f6:	2300      	movs	r3, #0
 800b9f8:	3401      	adds	r4, #1
 800b9fa:	9305      	str	r3, [sp, #20]
 800b9fc:	4619      	mov	r1, r3
 800b9fe:	f04f 0c0a 	mov.w	ip, #10
 800ba02:	4620      	mov	r0, r4
 800ba04:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba08:	3a30      	subs	r2, #48	@ 0x30
 800ba0a:	2a09      	cmp	r2, #9
 800ba0c:	d903      	bls.n	800ba16 <_svfiprintf_r+0x1a6>
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d0c6      	beq.n	800b9a0 <_svfiprintf_r+0x130>
 800ba12:	9105      	str	r1, [sp, #20]
 800ba14:	e7c4      	b.n	800b9a0 <_svfiprintf_r+0x130>
 800ba16:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba1a:	4604      	mov	r4, r0
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	e7f0      	b.n	800ba02 <_svfiprintf_r+0x192>
 800ba20:	ab03      	add	r3, sp, #12
 800ba22:	9300      	str	r3, [sp, #0]
 800ba24:	462a      	mov	r2, r5
 800ba26:	4b0e      	ldr	r3, [pc, #56]	@ (800ba60 <_svfiprintf_r+0x1f0>)
 800ba28:	a904      	add	r1, sp, #16
 800ba2a:	4638      	mov	r0, r7
 800ba2c:	f3af 8000 	nop.w
 800ba30:	1c42      	adds	r2, r0, #1
 800ba32:	4606      	mov	r6, r0
 800ba34:	d1d6      	bne.n	800b9e4 <_svfiprintf_r+0x174>
 800ba36:	89ab      	ldrh	r3, [r5, #12]
 800ba38:	065b      	lsls	r3, r3, #25
 800ba3a:	f53f af2d 	bmi.w	800b898 <_svfiprintf_r+0x28>
 800ba3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ba40:	e72c      	b.n	800b89c <_svfiprintf_r+0x2c>
 800ba42:	ab03      	add	r3, sp, #12
 800ba44:	9300      	str	r3, [sp, #0]
 800ba46:	462a      	mov	r2, r5
 800ba48:	4b05      	ldr	r3, [pc, #20]	@ (800ba60 <_svfiprintf_r+0x1f0>)
 800ba4a:	a904      	add	r1, sp, #16
 800ba4c:	4638      	mov	r0, r7
 800ba4e:	f000 f923 	bl	800bc98 <_printf_i>
 800ba52:	e7ed      	b.n	800ba30 <_svfiprintf_r+0x1c0>
 800ba54:	0800d2bd 	.word	0x0800d2bd
 800ba58:	0800d2c7 	.word	0x0800d2c7
 800ba5c:	00000000 	.word	0x00000000
 800ba60:	0800b7b9 	.word	0x0800b7b9
 800ba64:	0800d2c3 	.word	0x0800d2c3

0800ba68 <malloc>:
 800ba68:	4b02      	ldr	r3, [pc, #8]	@ (800ba74 <malloc+0xc>)
 800ba6a:	4601      	mov	r1, r0
 800ba6c:	6818      	ldr	r0, [r3, #0]
 800ba6e:	f000 b825 	b.w	800babc <_malloc_r>
 800ba72:	bf00      	nop
 800ba74:	20000048 	.word	0x20000048

0800ba78 <sbrk_aligned>:
 800ba78:	b570      	push	{r4, r5, r6, lr}
 800ba7a:	4e0f      	ldr	r6, [pc, #60]	@ (800bab8 <sbrk_aligned+0x40>)
 800ba7c:	460c      	mov	r4, r1
 800ba7e:	6831      	ldr	r1, [r6, #0]
 800ba80:	4605      	mov	r5, r0
 800ba82:	b911      	cbnz	r1, 800ba8a <sbrk_aligned+0x12>
 800ba84:	f000 fba0 	bl	800c1c8 <_sbrk_r>
 800ba88:	6030      	str	r0, [r6, #0]
 800ba8a:	4621      	mov	r1, r4
 800ba8c:	4628      	mov	r0, r5
 800ba8e:	f000 fb9b 	bl	800c1c8 <_sbrk_r>
 800ba92:	1c43      	adds	r3, r0, #1
 800ba94:	d103      	bne.n	800ba9e <sbrk_aligned+0x26>
 800ba96:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ba9a:	4620      	mov	r0, r4
 800ba9c:	bd70      	pop	{r4, r5, r6, pc}
 800ba9e:	1cc4      	adds	r4, r0, #3
 800baa0:	f024 0403 	bic.w	r4, r4, #3
 800baa4:	42a0      	cmp	r0, r4
 800baa6:	d0f8      	beq.n	800ba9a <sbrk_aligned+0x22>
 800baa8:	1a21      	subs	r1, r4, r0
 800baaa:	4628      	mov	r0, r5
 800baac:	f000 fb8c 	bl	800c1c8 <_sbrk_r>
 800bab0:	3001      	adds	r0, #1
 800bab2:	d1f2      	bne.n	800ba9a <sbrk_aligned+0x22>
 800bab4:	e7ef      	b.n	800ba96 <sbrk_aligned+0x1e>
 800bab6:	bf00      	nop
 800bab8:	20000ff4 	.word	0x20000ff4

0800babc <_malloc_r>:
 800babc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bac0:	1ccd      	adds	r5, r1, #3
 800bac2:	f025 0503 	bic.w	r5, r5, #3
 800bac6:	3508      	adds	r5, #8
 800bac8:	2d0c      	cmp	r5, #12
 800baca:	bf38      	it	cc
 800bacc:	250c      	movcc	r5, #12
 800bace:	2d00      	cmp	r5, #0
 800bad0:	4606      	mov	r6, r0
 800bad2:	db01      	blt.n	800bad8 <_malloc_r+0x1c>
 800bad4:	42a9      	cmp	r1, r5
 800bad6:	d904      	bls.n	800bae2 <_malloc_r+0x26>
 800bad8:	230c      	movs	r3, #12
 800bada:	6033      	str	r3, [r6, #0]
 800badc:	2000      	movs	r0, #0
 800bade:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bae2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bbb8 <_malloc_r+0xfc>
 800bae6:	f000 faa1 	bl	800c02c <__malloc_lock>
 800baea:	f8d8 3000 	ldr.w	r3, [r8]
 800baee:	461c      	mov	r4, r3
 800baf0:	bb44      	cbnz	r4, 800bb44 <_malloc_r+0x88>
 800baf2:	4629      	mov	r1, r5
 800baf4:	4630      	mov	r0, r6
 800baf6:	f7ff ffbf 	bl	800ba78 <sbrk_aligned>
 800bafa:	1c43      	adds	r3, r0, #1
 800bafc:	4604      	mov	r4, r0
 800bafe:	d158      	bne.n	800bbb2 <_malloc_r+0xf6>
 800bb00:	f8d8 4000 	ldr.w	r4, [r8]
 800bb04:	4627      	mov	r7, r4
 800bb06:	2f00      	cmp	r7, #0
 800bb08:	d143      	bne.n	800bb92 <_malloc_r+0xd6>
 800bb0a:	2c00      	cmp	r4, #0
 800bb0c:	d04b      	beq.n	800bba6 <_malloc_r+0xea>
 800bb0e:	6823      	ldr	r3, [r4, #0]
 800bb10:	4639      	mov	r1, r7
 800bb12:	4630      	mov	r0, r6
 800bb14:	eb04 0903 	add.w	r9, r4, r3
 800bb18:	f000 fb56 	bl	800c1c8 <_sbrk_r>
 800bb1c:	4581      	cmp	r9, r0
 800bb1e:	d142      	bne.n	800bba6 <_malloc_r+0xea>
 800bb20:	6821      	ldr	r1, [r4, #0]
 800bb22:	1a6d      	subs	r5, r5, r1
 800bb24:	4629      	mov	r1, r5
 800bb26:	4630      	mov	r0, r6
 800bb28:	f7ff ffa6 	bl	800ba78 <sbrk_aligned>
 800bb2c:	3001      	adds	r0, #1
 800bb2e:	d03a      	beq.n	800bba6 <_malloc_r+0xea>
 800bb30:	6823      	ldr	r3, [r4, #0]
 800bb32:	442b      	add	r3, r5
 800bb34:	6023      	str	r3, [r4, #0]
 800bb36:	f8d8 3000 	ldr.w	r3, [r8]
 800bb3a:	685a      	ldr	r2, [r3, #4]
 800bb3c:	bb62      	cbnz	r2, 800bb98 <_malloc_r+0xdc>
 800bb3e:	f8c8 7000 	str.w	r7, [r8]
 800bb42:	e00f      	b.n	800bb64 <_malloc_r+0xa8>
 800bb44:	6822      	ldr	r2, [r4, #0]
 800bb46:	1b52      	subs	r2, r2, r5
 800bb48:	d420      	bmi.n	800bb8c <_malloc_r+0xd0>
 800bb4a:	2a0b      	cmp	r2, #11
 800bb4c:	d917      	bls.n	800bb7e <_malloc_r+0xc2>
 800bb4e:	1961      	adds	r1, r4, r5
 800bb50:	42a3      	cmp	r3, r4
 800bb52:	6025      	str	r5, [r4, #0]
 800bb54:	bf18      	it	ne
 800bb56:	6059      	strne	r1, [r3, #4]
 800bb58:	6863      	ldr	r3, [r4, #4]
 800bb5a:	bf08      	it	eq
 800bb5c:	f8c8 1000 	streq.w	r1, [r8]
 800bb60:	5162      	str	r2, [r4, r5]
 800bb62:	604b      	str	r3, [r1, #4]
 800bb64:	4630      	mov	r0, r6
 800bb66:	f000 fa67 	bl	800c038 <__malloc_unlock>
 800bb6a:	f104 000b 	add.w	r0, r4, #11
 800bb6e:	1d23      	adds	r3, r4, #4
 800bb70:	f020 0007 	bic.w	r0, r0, #7
 800bb74:	1ac2      	subs	r2, r0, r3
 800bb76:	bf1c      	itt	ne
 800bb78:	1a1b      	subne	r3, r3, r0
 800bb7a:	50a3      	strne	r3, [r4, r2]
 800bb7c:	e7af      	b.n	800bade <_malloc_r+0x22>
 800bb7e:	6862      	ldr	r2, [r4, #4]
 800bb80:	42a3      	cmp	r3, r4
 800bb82:	bf0c      	ite	eq
 800bb84:	f8c8 2000 	streq.w	r2, [r8]
 800bb88:	605a      	strne	r2, [r3, #4]
 800bb8a:	e7eb      	b.n	800bb64 <_malloc_r+0xa8>
 800bb8c:	4623      	mov	r3, r4
 800bb8e:	6864      	ldr	r4, [r4, #4]
 800bb90:	e7ae      	b.n	800baf0 <_malloc_r+0x34>
 800bb92:	463c      	mov	r4, r7
 800bb94:	687f      	ldr	r7, [r7, #4]
 800bb96:	e7b6      	b.n	800bb06 <_malloc_r+0x4a>
 800bb98:	461a      	mov	r2, r3
 800bb9a:	685b      	ldr	r3, [r3, #4]
 800bb9c:	42a3      	cmp	r3, r4
 800bb9e:	d1fb      	bne.n	800bb98 <_malloc_r+0xdc>
 800bba0:	2300      	movs	r3, #0
 800bba2:	6053      	str	r3, [r2, #4]
 800bba4:	e7de      	b.n	800bb64 <_malloc_r+0xa8>
 800bba6:	230c      	movs	r3, #12
 800bba8:	6033      	str	r3, [r6, #0]
 800bbaa:	4630      	mov	r0, r6
 800bbac:	f000 fa44 	bl	800c038 <__malloc_unlock>
 800bbb0:	e794      	b.n	800badc <_malloc_r+0x20>
 800bbb2:	6005      	str	r5, [r0, #0]
 800bbb4:	e7d6      	b.n	800bb64 <_malloc_r+0xa8>
 800bbb6:	bf00      	nop
 800bbb8:	20000ff8 	.word	0x20000ff8

0800bbbc <_printf_common>:
 800bbbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bbc0:	4616      	mov	r6, r2
 800bbc2:	4698      	mov	r8, r3
 800bbc4:	688a      	ldr	r2, [r1, #8]
 800bbc6:	690b      	ldr	r3, [r1, #16]
 800bbc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bbcc:	4293      	cmp	r3, r2
 800bbce:	bfb8      	it	lt
 800bbd0:	4613      	movlt	r3, r2
 800bbd2:	6033      	str	r3, [r6, #0]
 800bbd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bbd8:	4607      	mov	r7, r0
 800bbda:	460c      	mov	r4, r1
 800bbdc:	b10a      	cbz	r2, 800bbe2 <_printf_common+0x26>
 800bbde:	3301      	adds	r3, #1
 800bbe0:	6033      	str	r3, [r6, #0]
 800bbe2:	6823      	ldr	r3, [r4, #0]
 800bbe4:	0699      	lsls	r1, r3, #26
 800bbe6:	bf42      	ittt	mi
 800bbe8:	6833      	ldrmi	r3, [r6, #0]
 800bbea:	3302      	addmi	r3, #2
 800bbec:	6033      	strmi	r3, [r6, #0]
 800bbee:	6825      	ldr	r5, [r4, #0]
 800bbf0:	f015 0506 	ands.w	r5, r5, #6
 800bbf4:	d106      	bne.n	800bc04 <_printf_common+0x48>
 800bbf6:	f104 0a19 	add.w	sl, r4, #25
 800bbfa:	68e3      	ldr	r3, [r4, #12]
 800bbfc:	6832      	ldr	r2, [r6, #0]
 800bbfe:	1a9b      	subs	r3, r3, r2
 800bc00:	42ab      	cmp	r3, r5
 800bc02:	dc26      	bgt.n	800bc52 <_printf_common+0x96>
 800bc04:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bc08:	6822      	ldr	r2, [r4, #0]
 800bc0a:	3b00      	subs	r3, #0
 800bc0c:	bf18      	it	ne
 800bc0e:	2301      	movne	r3, #1
 800bc10:	0692      	lsls	r2, r2, #26
 800bc12:	d42b      	bmi.n	800bc6c <_printf_common+0xb0>
 800bc14:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bc18:	4641      	mov	r1, r8
 800bc1a:	4638      	mov	r0, r7
 800bc1c:	47c8      	blx	r9
 800bc1e:	3001      	adds	r0, #1
 800bc20:	d01e      	beq.n	800bc60 <_printf_common+0xa4>
 800bc22:	6823      	ldr	r3, [r4, #0]
 800bc24:	6922      	ldr	r2, [r4, #16]
 800bc26:	f003 0306 	and.w	r3, r3, #6
 800bc2a:	2b04      	cmp	r3, #4
 800bc2c:	bf02      	ittt	eq
 800bc2e:	68e5      	ldreq	r5, [r4, #12]
 800bc30:	6833      	ldreq	r3, [r6, #0]
 800bc32:	1aed      	subeq	r5, r5, r3
 800bc34:	68a3      	ldr	r3, [r4, #8]
 800bc36:	bf0c      	ite	eq
 800bc38:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bc3c:	2500      	movne	r5, #0
 800bc3e:	4293      	cmp	r3, r2
 800bc40:	bfc4      	itt	gt
 800bc42:	1a9b      	subgt	r3, r3, r2
 800bc44:	18ed      	addgt	r5, r5, r3
 800bc46:	2600      	movs	r6, #0
 800bc48:	341a      	adds	r4, #26
 800bc4a:	42b5      	cmp	r5, r6
 800bc4c:	d11a      	bne.n	800bc84 <_printf_common+0xc8>
 800bc4e:	2000      	movs	r0, #0
 800bc50:	e008      	b.n	800bc64 <_printf_common+0xa8>
 800bc52:	2301      	movs	r3, #1
 800bc54:	4652      	mov	r2, sl
 800bc56:	4641      	mov	r1, r8
 800bc58:	4638      	mov	r0, r7
 800bc5a:	47c8      	blx	r9
 800bc5c:	3001      	adds	r0, #1
 800bc5e:	d103      	bne.n	800bc68 <_printf_common+0xac>
 800bc60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bc64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc68:	3501      	adds	r5, #1
 800bc6a:	e7c6      	b.n	800bbfa <_printf_common+0x3e>
 800bc6c:	18e1      	adds	r1, r4, r3
 800bc6e:	1c5a      	adds	r2, r3, #1
 800bc70:	2030      	movs	r0, #48	@ 0x30
 800bc72:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800bc76:	4422      	add	r2, r4
 800bc78:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bc7c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bc80:	3302      	adds	r3, #2
 800bc82:	e7c7      	b.n	800bc14 <_printf_common+0x58>
 800bc84:	2301      	movs	r3, #1
 800bc86:	4622      	mov	r2, r4
 800bc88:	4641      	mov	r1, r8
 800bc8a:	4638      	mov	r0, r7
 800bc8c:	47c8      	blx	r9
 800bc8e:	3001      	adds	r0, #1
 800bc90:	d0e6      	beq.n	800bc60 <_printf_common+0xa4>
 800bc92:	3601      	adds	r6, #1
 800bc94:	e7d9      	b.n	800bc4a <_printf_common+0x8e>
	...

0800bc98 <_printf_i>:
 800bc98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc9c:	7e0f      	ldrb	r7, [r1, #24]
 800bc9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bca0:	2f78      	cmp	r7, #120	@ 0x78
 800bca2:	4691      	mov	r9, r2
 800bca4:	4680      	mov	r8, r0
 800bca6:	460c      	mov	r4, r1
 800bca8:	469a      	mov	sl, r3
 800bcaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800bcae:	d807      	bhi.n	800bcc0 <_printf_i+0x28>
 800bcb0:	2f62      	cmp	r7, #98	@ 0x62
 800bcb2:	d80a      	bhi.n	800bcca <_printf_i+0x32>
 800bcb4:	2f00      	cmp	r7, #0
 800bcb6:	f000 80d1 	beq.w	800be5c <_printf_i+0x1c4>
 800bcba:	2f58      	cmp	r7, #88	@ 0x58
 800bcbc:	f000 80b8 	beq.w	800be30 <_printf_i+0x198>
 800bcc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bcc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bcc8:	e03a      	b.n	800bd40 <_printf_i+0xa8>
 800bcca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bcce:	2b15      	cmp	r3, #21
 800bcd0:	d8f6      	bhi.n	800bcc0 <_printf_i+0x28>
 800bcd2:	a101      	add	r1, pc, #4	@ (adr r1, 800bcd8 <_printf_i+0x40>)
 800bcd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bcd8:	0800bd31 	.word	0x0800bd31
 800bcdc:	0800bd45 	.word	0x0800bd45
 800bce0:	0800bcc1 	.word	0x0800bcc1
 800bce4:	0800bcc1 	.word	0x0800bcc1
 800bce8:	0800bcc1 	.word	0x0800bcc1
 800bcec:	0800bcc1 	.word	0x0800bcc1
 800bcf0:	0800bd45 	.word	0x0800bd45
 800bcf4:	0800bcc1 	.word	0x0800bcc1
 800bcf8:	0800bcc1 	.word	0x0800bcc1
 800bcfc:	0800bcc1 	.word	0x0800bcc1
 800bd00:	0800bcc1 	.word	0x0800bcc1
 800bd04:	0800be43 	.word	0x0800be43
 800bd08:	0800bd6f 	.word	0x0800bd6f
 800bd0c:	0800bdfd 	.word	0x0800bdfd
 800bd10:	0800bcc1 	.word	0x0800bcc1
 800bd14:	0800bcc1 	.word	0x0800bcc1
 800bd18:	0800be65 	.word	0x0800be65
 800bd1c:	0800bcc1 	.word	0x0800bcc1
 800bd20:	0800bd6f 	.word	0x0800bd6f
 800bd24:	0800bcc1 	.word	0x0800bcc1
 800bd28:	0800bcc1 	.word	0x0800bcc1
 800bd2c:	0800be05 	.word	0x0800be05
 800bd30:	6833      	ldr	r3, [r6, #0]
 800bd32:	1d1a      	adds	r2, r3, #4
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	6032      	str	r2, [r6, #0]
 800bd38:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bd3c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bd40:	2301      	movs	r3, #1
 800bd42:	e09c      	b.n	800be7e <_printf_i+0x1e6>
 800bd44:	6833      	ldr	r3, [r6, #0]
 800bd46:	6820      	ldr	r0, [r4, #0]
 800bd48:	1d19      	adds	r1, r3, #4
 800bd4a:	6031      	str	r1, [r6, #0]
 800bd4c:	0606      	lsls	r6, r0, #24
 800bd4e:	d501      	bpl.n	800bd54 <_printf_i+0xbc>
 800bd50:	681d      	ldr	r5, [r3, #0]
 800bd52:	e003      	b.n	800bd5c <_printf_i+0xc4>
 800bd54:	0645      	lsls	r5, r0, #25
 800bd56:	d5fb      	bpl.n	800bd50 <_printf_i+0xb8>
 800bd58:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bd5c:	2d00      	cmp	r5, #0
 800bd5e:	da03      	bge.n	800bd68 <_printf_i+0xd0>
 800bd60:	232d      	movs	r3, #45	@ 0x2d
 800bd62:	426d      	negs	r5, r5
 800bd64:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bd68:	4858      	ldr	r0, [pc, #352]	@ (800becc <_printf_i+0x234>)
 800bd6a:	230a      	movs	r3, #10
 800bd6c:	e011      	b.n	800bd92 <_printf_i+0xfa>
 800bd6e:	6821      	ldr	r1, [r4, #0]
 800bd70:	6833      	ldr	r3, [r6, #0]
 800bd72:	0608      	lsls	r0, r1, #24
 800bd74:	f853 5b04 	ldr.w	r5, [r3], #4
 800bd78:	d402      	bmi.n	800bd80 <_printf_i+0xe8>
 800bd7a:	0649      	lsls	r1, r1, #25
 800bd7c:	bf48      	it	mi
 800bd7e:	b2ad      	uxthmi	r5, r5
 800bd80:	2f6f      	cmp	r7, #111	@ 0x6f
 800bd82:	4852      	ldr	r0, [pc, #328]	@ (800becc <_printf_i+0x234>)
 800bd84:	6033      	str	r3, [r6, #0]
 800bd86:	bf14      	ite	ne
 800bd88:	230a      	movne	r3, #10
 800bd8a:	2308      	moveq	r3, #8
 800bd8c:	2100      	movs	r1, #0
 800bd8e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bd92:	6866      	ldr	r6, [r4, #4]
 800bd94:	60a6      	str	r6, [r4, #8]
 800bd96:	2e00      	cmp	r6, #0
 800bd98:	db05      	blt.n	800bda6 <_printf_i+0x10e>
 800bd9a:	6821      	ldr	r1, [r4, #0]
 800bd9c:	432e      	orrs	r6, r5
 800bd9e:	f021 0104 	bic.w	r1, r1, #4
 800bda2:	6021      	str	r1, [r4, #0]
 800bda4:	d04b      	beq.n	800be3e <_printf_i+0x1a6>
 800bda6:	4616      	mov	r6, r2
 800bda8:	fbb5 f1f3 	udiv	r1, r5, r3
 800bdac:	fb03 5711 	mls	r7, r3, r1, r5
 800bdb0:	5dc7      	ldrb	r7, [r0, r7]
 800bdb2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bdb6:	462f      	mov	r7, r5
 800bdb8:	42bb      	cmp	r3, r7
 800bdba:	460d      	mov	r5, r1
 800bdbc:	d9f4      	bls.n	800bda8 <_printf_i+0x110>
 800bdbe:	2b08      	cmp	r3, #8
 800bdc0:	d10b      	bne.n	800bdda <_printf_i+0x142>
 800bdc2:	6823      	ldr	r3, [r4, #0]
 800bdc4:	07df      	lsls	r7, r3, #31
 800bdc6:	d508      	bpl.n	800bdda <_printf_i+0x142>
 800bdc8:	6923      	ldr	r3, [r4, #16]
 800bdca:	6861      	ldr	r1, [r4, #4]
 800bdcc:	4299      	cmp	r1, r3
 800bdce:	bfde      	ittt	le
 800bdd0:	2330      	movle	r3, #48	@ 0x30
 800bdd2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bdd6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800bdda:	1b92      	subs	r2, r2, r6
 800bddc:	6122      	str	r2, [r4, #16]
 800bdde:	f8cd a000 	str.w	sl, [sp]
 800bde2:	464b      	mov	r3, r9
 800bde4:	aa03      	add	r2, sp, #12
 800bde6:	4621      	mov	r1, r4
 800bde8:	4640      	mov	r0, r8
 800bdea:	f7ff fee7 	bl	800bbbc <_printf_common>
 800bdee:	3001      	adds	r0, #1
 800bdf0:	d14a      	bne.n	800be88 <_printf_i+0x1f0>
 800bdf2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bdf6:	b004      	add	sp, #16
 800bdf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bdfc:	6823      	ldr	r3, [r4, #0]
 800bdfe:	f043 0320 	orr.w	r3, r3, #32
 800be02:	6023      	str	r3, [r4, #0]
 800be04:	4832      	ldr	r0, [pc, #200]	@ (800bed0 <_printf_i+0x238>)
 800be06:	2778      	movs	r7, #120	@ 0x78
 800be08:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800be0c:	6823      	ldr	r3, [r4, #0]
 800be0e:	6831      	ldr	r1, [r6, #0]
 800be10:	061f      	lsls	r7, r3, #24
 800be12:	f851 5b04 	ldr.w	r5, [r1], #4
 800be16:	d402      	bmi.n	800be1e <_printf_i+0x186>
 800be18:	065f      	lsls	r7, r3, #25
 800be1a:	bf48      	it	mi
 800be1c:	b2ad      	uxthmi	r5, r5
 800be1e:	6031      	str	r1, [r6, #0]
 800be20:	07d9      	lsls	r1, r3, #31
 800be22:	bf44      	itt	mi
 800be24:	f043 0320 	orrmi.w	r3, r3, #32
 800be28:	6023      	strmi	r3, [r4, #0]
 800be2a:	b11d      	cbz	r5, 800be34 <_printf_i+0x19c>
 800be2c:	2310      	movs	r3, #16
 800be2e:	e7ad      	b.n	800bd8c <_printf_i+0xf4>
 800be30:	4826      	ldr	r0, [pc, #152]	@ (800becc <_printf_i+0x234>)
 800be32:	e7e9      	b.n	800be08 <_printf_i+0x170>
 800be34:	6823      	ldr	r3, [r4, #0]
 800be36:	f023 0320 	bic.w	r3, r3, #32
 800be3a:	6023      	str	r3, [r4, #0]
 800be3c:	e7f6      	b.n	800be2c <_printf_i+0x194>
 800be3e:	4616      	mov	r6, r2
 800be40:	e7bd      	b.n	800bdbe <_printf_i+0x126>
 800be42:	6833      	ldr	r3, [r6, #0]
 800be44:	6825      	ldr	r5, [r4, #0]
 800be46:	6961      	ldr	r1, [r4, #20]
 800be48:	1d18      	adds	r0, r3, #4
 800be4a:	6030      	str	r0, [r6, #0]
 800be4c:	062e      	lsls	r6, r5, #24
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	d501      	bpl.n	800be56 <_printf_i+0x1be>
 800be52:	6019      	str	r1, [r3, #0]
 800be54:	e002      	b.n	800be5c <_printf_i+0x1c4>
 800be56:	0668      	lsls	r0, r5, #25
 800be58:	d5fb      	bpl.n	800be52 <_printf_i+0x1ba>
 800be5a:	8019      	strh	r1, [r3, #0]
 800be5c:	2300      	movs	r3, #0
 800be5e:	6123      	str	r3, [r4, #16]
 800be60:	4616      	mov	r6, r2
 800be62:	e7bc      	b.n	800bdde <_printf_i+0x146>
 800be64:	6833      	ldr	r3, [r6, #0]
 800be66:	1d1a      	adds	r2, r3, #4
 800be68:	6032      	str	r2, [r6, #0]
 800be6a:	681e      	ldr	r6, [r3, #0]
 800be6c:	6862      	ldr	r2, [r4, #4]
 800be6e:	2100      	movs	r1, #0
 800be70:	4630      	mov	r0, r6
 800be72:	f7f4 f9cd 	bl	8000210 <memchr>
 800be76:	b108      	cbz	r0, 800be7c <_printf_i+0x1e4>
 800be78:	1b80      	subs	r0, r0, r6
 800be7a:	6060      	str	r0, [r4, #4]
 800be7c:	6863      	ldr	r3, [r4, #4]
 800be7e:	6123      	str	r3, [r4, #16]
 800be80:	2300      	movs	r3, #0
 800be82:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be86:	e7aa      	b.n	800bdde <_printf_i+0x146>
 800be88:	6923      	ldr	r3, [r4, #16]
 800be8a:	4632      	mov	r2, r6
 800be8c:	4649      	mov	r1, r9
 800be8e:	4640      	mov	r0, r8
 800be90:	47d0      	blx	sl
 800be92:	3001      	adds	r0, #1
 800be94:	d0ad      	beq.n	800bdf2 <_printf_i+0x15a>
 800be96:	6823      	ldr	r3, [r4, #0]
 800be98:	079b      	lsls	r3, r3, #30
 800be9a:	d413      	bmi.n	800bec4 <_printf_i+0x22c>
 800be9c:	68e0      	ldr	r0, [r4, #12]
 800be9e:	9b03      	ldr	r3, [sp, #12]
 800bea0:	4298      	cmp	r0, r3
 800bea2:	bfb8      	it	lt
 800bea4:	4618      	movlt	r0, r3
 800bea6:	e7a6      	b.n	800bdf6 <_printf_i+0x15e>
 800bea8:	2301      	movs	r3, #1
 800beaa:	4632      	mov	r2, r6
 800beac:	4649      	mov	r1, r9
 800beae:	4640      	mov	r0, r8
 800beb0:	47d0      	blx	sl
 800beb2:	3001      	adds	r0, #1
 800beb4:	d09d      	beq.n	800bdf2 <_printf_i+0x15a>
 800beb6:	3501      	adds	r5, #1
 800beb8:	68e3      	ldr	r3, [r4, #12]
 800beba:	9903      	ldr	r1, [sp, #12]
 800bebc:	1a5b      	subs	r3, r3, r1
 800bebe:	42ab      	cmp	r3, r5
 800bec0:	dcf2      	bgt.n	800bea8 <_printf_i+0x210>
 800bec2:	e7eb      	b.n	800be9c <_printf_i+0x204>
 800bec4:	2500      	movs	r5, #0
 800bec6:	f104 0619 	add.w	r6, r4, #25
 800beca:	e7f5      	b.n	800beb8 <_printf_i+0x220>
 800becc:	0800d2ce 	.word	0x0800d2ce
 800bed0:	0800d2df 	.word	0x0800d2df

0800bed4 <__sflush_r>:
 800bed4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bed8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bedc:	0716      	lsls	r6, r2, #28
 800bede:	4605      	mov	r5, r0
 800bee0:	460c      	mov	r4, r1
 800bee2:	d454      	bmi.n	800bf8e <__sflush_r+0xba>
 800bee4:	684b      	ldr	r3, [r1, #4]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	dc02      	bgt.n	800bef0 <__sflush_r+0x1c>
 800beea:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800beec:	2b00      	cmp	r3, #0
 800beee:	dd48      	ble.n	800bf82 <__sflush_r+0xae>
 800bef0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bef2:	2e00      	cmp	r6, #0
 800bef4:	d045      	beq.n	800bf82 <__sflush_r+0xae>
 800bef6:	2300      	movs	r3, #0
 800bef8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800befc:	682f      	ldr	r7, [r5, #0]
 800befe:	6a21      	ldr	r1, [r4, #32]
 800bf00:	602b      	str	r3, [r5, #0]
 800bf02:	d030      	beq.n	800bf66 <__sflush_r+0x92>
 800bf04:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bf06:	89a3      	ldrh	r3, [r4, #12]
 800bf08:	0759      	lsls	r1, r3, #29
 800bf0a:	d505      	bpl.n	800bf18 <__sflush_r+0x44>
 800bf0c:	6863      	ldr	r3, [r4, #4]
 800bf0e:	1ad2      	subs	r2, r2, r3
 800bf10:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bf12:	b10b      	cbz	r3, 800bf18 <__sflush_r+0x44>
 800bf14:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bf16:	1ad2      	subs	r2, r2, r3
 800bf18:	2300      	movs	r3, #0
 800bf1a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf1c:	6a21      	ldr	r1, [r4, #32]
 800bf1e:	4628      	mov	r0, r5
 800bf20:	47b0      	blx	r6
 800bf22:	1c43      	adds	r3, r0, #1
 800bf24:	89a3      	ldrh	r3, [r4, #12]
 800bf26:	d106      	bne.n	800bf36 <__sflush_r+0x62>
 800bf28:	6829      	ldr	r1, [r5, #0]
 800bf2a:	291d      	cmp	r1, #29
 800bf2c:	d82b      	bhi.n	800bf86 <__sflush_r+0xb2>
 800bf2e:	4a2a      	ldr	r2, [pc, #168]	@ (800bfd8 <__sflush_r+0x104>)
 800bf30:	40ca      	lsrs	r2, r1
 800bf32:	07d6      	lsls	r6, r2, #31
 800bf34:	d527      	bpl.n	800bf86 <__sflush_r+0xb2>
 800bf36:	2200      	movs	r2, #0
 800bf38:	6062      	str	r2, [r4, #4]
 800bf3a:	04d9      	lsls	r1, r3, #19
 800bf3c:	6922      	ldr	r2, [r4, #16]
 800bf3e:	6022      	str	r2, [r4, #0]
 800bf40:	d504      	bpl.n	800bf4c <__sflush_r+0x78>
 800bf42:	1c42      	adds	r2, r0, #1
 800bf44:	d101      	bne.n	800bf4a <__sflush_r+0x76>
 800bf46:	682b      	ldr	r3, [r5, #0]
 800bf48:	b903      	cbnz	r3, 800bf4c <__sflush_r+0x78>
 800bf4a:	6560      	str	r0, [r4, #84]	@ 0x54
 800bf4c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bf4e:	602f      	str	r7, [r5, #0]
 800bf50:	b1b9      	cbz	r1, 800bf82 <__sflush_r+0xae>
 800bf52:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf56:	4299      	cmp	r1, r3
 800bf58:	d002      	beq.n	800bf60 <__sflush_r+0x8c>
 800bf5a:	4628      	mov	r0, r5
 800bf5c:	f000 f96e 	bl	800c23c <_free_r>
 800bf60:	2300      	movs	r3, #0
 800bf62:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf64:	e00d      	b.n	800bf82 <__sflush_r+0xae>
 800bf66:	2301      	movs	r3, #1
 800bf68:	4628      	mov	r0, r5
 800bf6a:	47b0      	blx	r6
 800bf6c:	4602      	mov	r2, r0
 800bf6e:	1c50      	adds	r0, r2, #1
 800bf70:	d1c9      	bne.n	800bf06 <__sflush_r+0x32>
 800bf72:	682b      	ldr	r3, [r5, #0]
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d0c6      	beq.n	800bf06 <__sflush_r+0x32>
 800bf78:	2b1d      	cmp	r3, #29
 800bf7a:	d001      	beq.n	800bf80 <__sflush_r+0xac>
 800bf7c:	2b16      	cmp	r3, #22
 800bf7e:	d11e      	bne.n	800bfbe <__sflush_r+0xea>
 800bf80:	602f      	str	r7, [r5, #0]
 800bf82:	2000      	movs	r0, #0
 800bf84:	e022      	b.n	800bfcc <__sflush_r+0xf8>
 800bf86:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bf8a:	b21b      	sxth	r3, r3
 800bf8c:	e01b      	b.n	800bfc6 <__sflush_r+0xf2>
 800bf8e:	690f      	ldr	r7, [r1, #16]
 800bf90:	2f00      	cmp	r7, #0
 800bf92:	d0f6      	beq.n	800bf82 <__sflush_r+0xae>
 800bf94:	0793      	lsls	r3, r2, #30
 800bf96:	680e      	ldr	r6, [r1, #0]
 800bf98:	bf08      	it	eq
 800bf9a:	694b      	ldreq	r3, [r1, #20]
 800bf9c:	600f      	str	r7, [r1, #0]
 800bf9e:	bf18      	it	ne
 800bfa0:	2300      	movne	r3, #0
 800bfa2:	eba6 0807 	sub.w	r8, r6, r7
 800bfa6:	608b      	str	r3, [r1, #8]
 800bfa8:	f1b8 0f00 	cmp.w	r8, #0
 800bfac:	dde9      	ble.n	800bf82 <__sflush_r+0xae>
 800bfae:	6a21      	ldr	r1, [r4, #32]
 800bfb0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bfb2:	4643      	mov	r3, r8
 800bfb4:	463a      	mov	r2, r7
 800bfb6:	4628      	mov	r0, r5
 800bfb8:	47b0      	blx	r6
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	dc08      	bgt.n	800bfd0 <__sflush_r+0xfc>
 800bfbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bfc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bfc6:	81a3      	strh	r3, [r4, #12]
 800bfc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bfcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bfd0:	4407      	add	r7, r0
 800bfd2:	eba8 0800 	sub.w	r8, r8, r0
 800bfd6:	e7e7      	b.n	800bfa8 <__sflush_r+0xd4>
 800bfd8:	20400001 	.word	0x20400001

0800bfdc <_fflush_r>:
 800bfdc:	b538      	push	{r3, r4, r5, lr}
 800bfde:	690b      	ldr	r3, [r1, #16]
 800bfe0:	4605      	mov	r5, r0
 800bfe2:	460c      	mov	r4, r1
 800bfe4:	b913      	cbnz	r3, 800bfec <_fflush_r+0x10>
 800bfe6:	2500      	movs	r5, #0
 800bfe8:	4628      	mov	r0, r5
 800bfea:	bd38      	pop	{r3, r4, r5, pc}
 800bfec:	b118      	cbz	r0, 800bff6 <_fflush_r+0x1a>
 800bfee:	6a03      	ldr	r3, [r0, #32]
 800bff0:	b90b      	cbnz	r3, 800bff6 <_fflush_r+0x1a>
 800bff2:	f7ff fa69 	bl	800b4c8 <__sinit>
 800bff6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d0f3      	beq.n	800bfe6 <_fflush_r+0xa>
 800bffe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c000:	07d0      	lsls	r0, r2, #31
 800c002:	d404      	bmi.n	800c00e <_fflush_r+0x32>
 800c004:	0599      	lsls	r1, r3, #22
 800c006:	d402      	bmi.n	800c00e <_fflush_r+0x32>
 800c008:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c00a:	f7ff fba6 	bl	800b75a <__retarget_lock_acquire_recursive>
 800c00e:	4628      	mov	r0, r5
 800c010:	4621      	mov	r1, r4
 800c012:	f7ff ff5f 	bl	800bed4 <__sflush_r>
 800c016:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c018:	07da      	lsls	r2, r3, #31
 800c01a:	4605      	mov	r5, r0
 800c01c:	d4e4      	bmi.n	800bfe8 <_fflush_r+0xc>
 800c01e:	89a3      	ldrh	r3, [r4, #12]
 800c020:	059b      	lsls	r3, r3, #22
 800c022:	d4e1      	bmi.n	800bfe8 <_fflush_r+0xc>
 800c024:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c026:	f7ff fb99 	bl	800b75c <__retarget_lock_release_recursive>
 800c02a:	e7dd      	b.n	800bfe8 <_fflush_r+0xc>

0800c02c <__malloc_lock>:
 800c02c:	4801      	ldr	r0, [pc, #4]	@ (800c034 <__malloc_lock+0x8>)
 800c02e:	f7ff bb94 	b.w	800b75a <__retarget_lock_acquire_recursive>
 800c032:	bf00      	nop
 800c034:	20000ff0 	.word	0x20000ff0

0800c038 <__malloc_unlock>:
 800c038:	4801      	ldr	r0, [pc, #4]	@ (800c040 <__malloc_unlock+0x8>)
 800c03a:	f7ff bb8f 	b.w	800b75c <__retarget_lock_release_recursive>
 800c03e:	bf00      	nop
 800c040:	20000ff0 	.word	0x20000ff0

0800c044 <__sread>:
 800c044:	b510      	push	{r4, lr}
 800c046:	460c      	mov	r4, r1
 800c048:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c04c:	f000 f8aa 	bl	800c1a4 <_read_r>
 800c050:	2800      	cmp	r0, #0
 800c052:	bfab      	itete	ge
 800c054:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c056:	89a3      	ldrhlt	r3, [r4, #12]
 800c058:	181b      	addge	r3, r3, r0
 800c05a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c05e:	bfac      	ite	ge
 800c060:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c062:	81a3      	strhlt	r3, [r4, #12]
 800c064:	bd10      	pop	{r4, pc}

0800c066 <__swrite>:
 800c066:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c06a:	461f      	mov	r7, r3
 800c06c:	898b      	ldrh	r3, [r1, #12]
 800c06e:	05db      	lsls	r3, r3, #23
 800c070:	4605      	mov	r5, r0
 800c072:	460c      	mov	r4, r1
 800c074:	4616      	mov	r6, r2
 800c076:	d505      	bpl.n	800c084 <__swrite+0x1e>
 800c078:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c07c:	2302      	movs	r3, #2
 800c07e:	2200      	movs	r2, #0
 800c080:	f000 f87e 	bl	800c180 <_lseek_r>
 800c084:	89a3      	ldrh	r3, [r4, #12]
 800c086:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c08a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c08e:	81a3      	strh	r3, [r4, #12]
 800c090:	4632      	mov	r2, r6
 800c092:	463b      	mov	r3, r7
 800c094:	4628      	mov	r0, r5
 800c096:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c09a:	f000 b8a5 	b.w	800c1e8 <_write_r>

0800c09e <__sseek>:
 800c09e:	b510      	push	{r4, lr}
 800c0a0:	460c      	mov	r4, r1
 800c0a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0a6:	f000 f86b 	bl	800c180 <_lseek_r>
 800c0aa:	1c43      	adds	r3, r0, #1
 800c0ac:	89a3      	ldrh	r3, [r4, #12]
 800c0ae:	bf15      	itete	ne
 800c0b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c0b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c0b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c0ba:	81a3      	strheq	r3, [r4, #12]
 800c0bc:	bf18      	it	ne
 800c0be:	81a3      	strhne	r3, [r4, #12]
 800c0c0:	bd10      	pop	{r4, pc}

0800c0c2 <__sclose>:
 800c0c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0c6:	f000 b8a1 	b.w	800c20c <_close_r>
	...

0800c0cc <fiprintf>:
 800c0cc:	b40e      	push	{r1, r2, r3}
 800c0ce:	b503      	push	{r0, r1, lr}
 800c0d0:	4601      	mov	r1, r0
 800c0d2:	ab03      	add	r3, sp, #12
 800c0d4:	4805      	ldr	r0, [pc, #20]	@ (800c0ec <fiprintf+0x20>)
 800c0d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800c0da:	6800      	ldr	r0, [r0, #0]
 800c0dc:	9301      	str	r3, [sp, #4]
 800c0de:	f000 f921 	bl	800c324 <_vfiprintf_r>
 800c0e2:	b002      	add	sp, #8
 800c0e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c0e8:	b003      	add	sp, #12
 800c0ea:	4770      	bx	lr
 800c0ec:	20000048 	.word	0x20000048

0800c0f0 <_realloc_r>:
 800c0f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f4:	4607      	mov	r7, r0
 800c0f6:	4614      	mov	r4, r2
 800c0f8:	460d      	mov	r5, r1
 800c0fa:	b921      	cbnz	r1, 800c106 <_realloc_r+0x16>
 800c0fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c100:	4611      	mov	r1, r2
 800c102:	f7ff bcdb 	b.w	800babc <_malloc_r>
 800c106:	b92a      	cbnz	r2, 800c114 <_realloc_r+0x24>
 800c108:	f000 f898 	bl	800c23c <_free_r>
 800c10c:	4625      	mov	r5, r4
 800c10e:	4628      	mov	r0, r5
 800c110:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c114:	f000 fa1e 	bl	800c554 <_malloc_usable_size_r>
 800c118:	4284      	cmp	r4, r0
 800c11a:	4606      	mov	r6, r0
 800c11c:	d802      	bhi.n	800c124 <_realloc_r+0x34>
 800c11e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c122:	d8f4      	bhi.n	800c10e <_realloc_r+0x1e>
 800c124:	4621      	mov	r1, r4
 800c126:	4638      	mov	r0, r7
 800c128:	f7ff fcc8 	bl	800babc <_malloc_r>
 800c12c:	4680      	mov	r8, r0
 800c12e:	b908      	cbnz	r0, 800c134 <_realloc_r+0x44>
 800c130:	4645      	mov	r5, r8
 800c132:	e7ec      	b.n	800c10e <_realloc_r+0x1e>
 800c134:	42b4      	cmp	r4, r6
 800c136:	4622      	mov	r2, r4
 800c138:	4629      	mov	r1, r5
 800c13a:	bf28      	it	cs
 800c13c:	4632      	movcs	r2, r6
 800c13e:	f7ff fb0e 	bl	800b75e <memcpy>
 800c142:	4629      	mov	r1, r5
 800c144:	4638      	mov	r0, r7
 800c146:	f000 f879 	bl	800c23c <_free_r>
 800c14a:	e7f1      	b.n	800c130 <_realloc_r+0x40>

0800c14c <memmove>:
 800c14c:	4288      	cmp	r0, r1
 800c14e:	b510      	push	{r4, lr}
 800c150:	eb01 0402 	add.w	r4, r1, r2
 800c154:	d902      	bls.n	800c15c <memmove+0x10>
 800c156:	4284      	cmp	r4, r0
 800c158:	4623      	mov	r3, r4
 800c15a:	d807      	bhi.n	800c16c <memmove+0x20>
 800c15c:	1e43      	subs	r3, r0, #1
 800c15e:	42a1      	cmp	r1, r4
 800c160:	d008      	beq.n	800c174 <memmove+0x28>
 800c162:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c166:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c16a:	e7f8      	b.n	800c15e <memmove+0x12>
 800c16c:	4402      	add	r2, r0
 800c16e:	4601      	mov	r1, r0
 800c170:	428a      	cmp	r2, r1
 800c172:	d100      	bne.n	800c176 <memmove+0x2a>
 800c174:	bd10      	pop	{r4, pc}
 800c176:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c17a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c17e:	e7f7      	b.n	800c170 <memmove+0x24>

0800c180 <_lseek_r>:
 800c180:	b538      	push	{r3, r4, r5, lr}
 800c182:	4d07      	ldr	r5, [pc, #28]	@ (800c1a0 <_lseek_r+0x20>)
 800c184:	4604      	mov	r4, r0
 800c186:	4608      	mov	r0, r1
 800c188:	4611      	mov	r1, r2
 800c18a:	2200      	movs	r2, #0
 800c18c:	602a      	str	r2, [r5, #0]
 800c18e:	461a      	mov	r2, r3
 800c190:	f7f6 fcfe 	bl	8002b90 <_lseek>
 800c194:	1c43      	adds	r3, r0, #1
 800c196:	d102      	bne.n	800c19e <_lseek_r+0x1e>
 800c198:	682b      	ldr	r3, [r5, #0]
 800c19a:	b103      	cbz	r3, 800c19e <_lseek_r+0x1e>
 800c19c:	6023      	str	r3, [r4, #0]
 800c19e:	bd38      	pop	{r3, r4, r5, pc}
 800c1a0:	20000ffc 	.word	0x20000ffc

0800c1a4 <_read_r>:
 800c1a4:	b538      	push	{r3, r4, r5, lr}
 800c1a6:	4d07      	ldr	r5, [pc, #28]	@ (800c1c4 <_read_r+0x20>)
 800c1a8:	4604      	mov	r4, r0
 800c1aa:	4608      	mov	r0, r1
 800c1ac:	4611      	mov	r1, r2
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	602a      	str	r2, [r5, #0]
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	f7f6 fc8c 	bl	8002ad0 <_read>
 800c1b8:	1c43      	adds	r3, r0, #1
 800c1ba:	d102      	bne.n	800c1c2 <_read_r+0x1e>
 800c1bc:	682b      	ldr	r3, [r5, #0]
 800c1be:	b103      	cbz	r3, 800c1c2 <_read_r+0x1e>
 800c1c0:	6023      	str	r3, [r4, #0]
 800c1c2:	bd38      	pop	{r3, r4, r5, pc}
 800c1c4:	20000ffc 	.word	0x20000ffc

0800c1c8 <_sbrk_r>:
 800c1c8:	b538      	push	{r3, r4, r5, lr}
 800c1ca:	4d06      	ldr	r5, [pc, #24]	@ (800c1e4 <_sbrk_r+0x1c>)
 800c1cc:	2300      	movs	r3, #0
 800c1ce:	4604      	mov	r4, r0
 800c1d0:	4608      	mov	r0, r1
 800c1d2:	602b      	str	r3, [r5, #0]
 800c1d4:	f7f6 fcea 	bl	8002bac <_sbrk>
 800c1d8:	1c43      	adds	r3, r0, #1
 800c1da:	d102      	bne.n	800c1e2 <_sbrk_r+0x1a>
 800c1dc:	682b      	ldr	r3, [r5, #0]
 800c1de:	b103      	cbz	r3, 800c1e2 <_sbrk_r+0x1a>
 800c1e0:	6023      	str	r3, [r4, #0]
 800c1e2:	bd38      	pop	{r3, r4, r5, pc}
 800c1e4:	20000ffc 	.word	0x20000ffc

0800c1e8 <_write_r>:
 800c1e8:	b538      	push	{r3, r4, r5, lr}
 800c1ea:	4d07      	ldr	r5, [pc, #28]	@ (800c208 <_write_r+0x20>)
 800c1ec:	4604      	mov	r4, r0
 800c1ee:	4608      	mov	r0, r1
 800c1f0:	4611      	mov	r1, r2
 800c1f2:	2200      	movs	r2, #0
 800c1f4:	602a      	str	r2, [r5, #0]
 800c1f6:	461a      	mov	r2, r3
 800c1f8:	f7f6 fc87 	bl	8002b0a <_write>
 800c1fc:	1c43      	adds	r3, r0, #1
 800c1fe:	d102      	bne.n	800c206 <_write_r+0x1e>
 800c200:	682b      	ldr	r3, [r5, #0]
 800c202:	b103      	cbz	r3, 800c206 <_write_r+0x1e>
 800c204:	6023      	str	r3, [r4, #0]
 800c206:	bd38      	pop	{r3, r4, r5, pc}
 800c208:	20000ffc 	.word	0x20000ffc

0800c20c <_close_r>:
 800c20c:	b538      	push	{r3, r4, r5, lr}
 800c20e:	4d06      	ldr	r5, [pc, #24]	@ (800c228 <_close_r+0x1c>)
 800c210:	2300      	movs	r3, #0
 800c212:	4604      	mov	r4, r0
 800c214:	4608      	mov	r0, r1
 800c216:	602b      	str	r3, [r5, #0]
 800c218:	f7f6 fc93 	bl	8002b42 <_close>
 800c21c:	1c43      	adds	r3, r0, #1
 800c21e:	d102      	bne.n	800c226 <_close_r+0x1a>
 800c220:	682b      	ldr	r3, [r5, #0]
 800c222:	b103      	cbz	r3, 800c226 <_close_r+0x1a>
 800c224:	6023      	str	r3, [r4, #0]
 800c226:	bd38      	pop	{r3, r4, r5, pc}
 800c228:	20000ffc 	.word	0x20000ffc

0800c22c <abort>:
 800c22c:	b508      	push	{r3, lr}
 800c22e:	2006      	movs	r0, #6
 800c230:	f000 fab6 	bl	800c7a0 <raise>
 800c234:	2001      	movs	r0, #1
 800c236:	f7f6 fc40 	bl	8002aba <_exit>
	...

0800c23c <_free_r>:
 800c23c:	b538      	push	{r3, r4, r5, lr}
 800c23e:	4605      	mov	r5, r0
 800c240:	2900      	cmp	r1, #0
 800c242:	d041      	beq.n	800c2c8 <_free_r+0x8c>
 800c244:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c248:	1f0c      	subs	r4, r1, #4
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	bfb8      	it	lt
 800c24e:	18e4      	addlt	r4, r4, r3
 800c250:	f7ff feec 	bl	800c02c <__malloc_lock>
 800c254:	4a1d      	ldr	r2, [pc, #116]	@ (800c2cc <_free_r+0x90>)
 800c256:	6813      	ldr	r3, [r2, #0]
 800c258:	b933      	cbnz	r3, 800c268 <_free_r+0x2c>
 800c25a:	6063      	str	r3, [r4, #4]
 800c25c:	6014      	str	r4, [r2, #0]
 800c25e:	4628      	mov	r0, r5
 800c260:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c264:	f7ff bee8 	b.w	800c038 <__malloc_unlock>
 800c268:	42a3      	cmp	r3, r4
 800c26a:	d908      	bls.n	800c27e <_free_r+0x42>
 800c26c:	6820      	ldr	r0, [r4, #0]
 800c26e:	1821      	adds	r1, r4, r0
 800c270:	428b      	cmp	r3, r1
 800c272:	bf01      	itttt	eq
 800c274:	6819      	ldreq	r1, [r3, #0]
 800c276:	685b      	ldreq	r3, [r3, #4]
 800c278:	1809      	addeq	r1, r1, r0
 800c27a:	6021      	streq	r1, [r4, #0]
 800c27c:	e7ed      	b.n	800c25a <_free_r+0x1e>
 800c27e:	461a      	mov	r2, r3
 800c280:	685b      	ldr	r3, [r3, #4]
 800c282:	b10b      	cbz	r3, 800c288 <_free_r+0x4c>
 800c284:	42a3      	cmp	r3, r4
 800c286:	d9fa      	bls.n	800c27e <_free_r+0x42>
 800c288:	6811      	ldr	r1, [r2, #0]
 800c28a:	1850      	adds	r0, r2, r1
 800c28c:	42a0      	cmp	r0, r4
 800c28e:	d10b      	bne.n	800c2a8 <_free_r+0x6c>
 800c290:	6820      	ldr	r0, [r4, #0]
 800c292:	4401      	add	r1, r0
 800c294:	1850      	adds	r0, r2, r1
 800c296:	4283      	cmp	r3, r0
 800c298:	6011      	str	r1, [r2, #0]
 800c29a:	d1e0      	bne.n	800c25e <_free_r+0x22>
 800c29c:	6818      	ldr	r0, [r3, #0]
 800c29e:	685b      	ldr	r3, [r3, #4]
 800c2a0:	6053      	str	r3, [r2, #4]
 800c2a2:	4408      	add	r0, r1
 800c2a4:	6010      	str	r0, [r2, #0]
 800c2a6:	e7da      	b.n	800c25e <_free_r+0x22>
 800c2a8:	d902      	bls.n	800c2b0 <_free_r+0x74>
 800c2aa:	230c      	movs	r3, #12
 800c2ac:	602b      	str	r3, [r5, #0]
 800c2ae:	e7d6      	b.n	800c25e <_free_r+0x22>
 800c2b0:	6820      	ldr	r0, [r4, #0]
 800c2b2:	1821      	adds	r1, r4, r0
 800c2b4:	428b      	cmp	r3, r1
 800c2b6:	bf04      	itt	eq
 800c2b8:	6819      	ldreq	r1, [r3, #0]
 800c2ba:	685b      	ldreq	r3, [r3, #4]
 800c2bc:	6063      	str	r3, [r4, #4]
 800c2be:	bf04      	itt	eq
 800c2c0:	1809      	addeq	r1, r1, r0
 800c2c2:	6021      	streq	r1, [r4, #0]
 800c2c4:	6054      	str	r4, [r2, #4]
 800c2c6:	e7ca      	b.n	800c25e <_free_r+0x22>
 800c2c8:	bd38      	pop	{r3, r4, r5, pc}
 800c2ca:	bf00      	nop
 800c2cc:	20000ff8 	.word	0x20000ff8

0800c2d0 <__sfputc_r>:
 800c2d0:	6893      	ldr	r3, [r2, #8]
 800c2d2:	3b01      	subs	r3, #1
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	b410      	push	{r4}
 800c2d8:	6093      	str	r3, [r2, #8]
 800c2da:	da08      	bge.n	800c2ee <__sfputc_r+0x1e>
 800c2dc:	6994      	ldr	r4, [r2, #24]
 800c2de:	42a3      	cmp	r3, r4
 800c2e0:	db01      	blt.n	800c2e6 <__sfputc_r+0x16>
 800c2e2:	290a      	cmp	r1, #10
 800c2e4:	d103      	bne.n	800c2ee <__sfputc_r+0x1e>
 800c2e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2ea:	f000 b93b 	b.w	800c564 <__swbuf_r>
 800c2ee:	6813      	ldr	r3, [r2, #0]
 800c2f0:	1c58      	adds	r0, r3, #1
 800c2f2:	6010      	str	r0, [r2, #0]
 800c2f4:	7019      	strb	r1, [r3, #0]
 800c2f6:	4608      	mov	r0, r1
 800c2f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c2fc:	4770      	bx	lr

0800c2fe <__sfputs_r>:
 800c2fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c300:	4606      	mov	r6, r0
 800c302:	460f      	mov	r7, r1
 800c304:	4614      	mov	r4, r2
 800c306:	18d5      	adds	r5, r2, r3
 800c308:	42ac      	cmp	r4, r5
 800c30a:	d101      	bne.n	800c310 <__sfputs_r+0x12>
 800c30c:	2000      	movs	r0, #0
 800c30e:	e007      	b.n	800c320 <__sfputs_r+0x22>
 800c310:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c314:	463a      	mov	r2, r7
 800c316:	4630      	mov	r0, r6
 800c318:	f7ff ffda 	bl	800c2d0 <__sfputc_r>
 800c31c:	1c43      	adds	r3, r0, #1
 800c31e:	d1f3      	bne.n	800c308 <__sfputs_r+0xa>
 800c320:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c324 <_vfiprintf_r>:
 800c324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c328:	460d      	mov	r5, r1
 800c32a:	b09d      	sub	sp, #116	@ 0x74
 800c32c:	4614      	mov	r4, r2
 800c32e:	4698      	mov	r8, r3
 800c330:	4606      	mov	r6, r0
 800c332:	b118      	cbz	r0, 800c33c <_vfiprintf_r+0x18>
 800c334:	6a03      	ldr	r3, [r0, #32]
 800c336:	b90b      	cbnz	r3, 800c33c <_vfiprintf_r+0x18>
 800c338:	f7ff f8c6 	bl	800b4c8 <__sinit>
 800c33c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c33e:	07d9      	lsls	r1, r3, #31
 800c340:	d405      	bmi.n	800c34e <_vfiprintf_r+0x2a>
 800c342:	89ab      	ldrh	r3, [r5, #12]
 800c344:	059a      	lsls	r2, r3, #22
 800c346:	d402      	bmi.n	800c34e <_vfiprintf_r+0x2a>
 800c348:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c34a:	f7ff fa06 	bl	800b75a <__retarget_lock_acquire_recursive>
 800c34e:	89ab      	ldrh	r3, [r5, #12]
 800c350:	071b      	lsls	r3, r3, #28
 800c352:	d501      	bpl.n	800c358 <_vfiprintf_r+0x34>
 800c354:	692b      	ldr	r3, [r5, #16]
 800c356:	b99b      	cbnz	r3, 800c380 <_vfiprintf_r+0x5c>
 800c358:	4629      	mov	r1, r5
 800c35a:	4630      	mov	r0, r6
 800c35c:	f000 f940 	bl	800c5e0 <__swsetup_r>
 800c360:	b170      	cbz	r0, 800c380 <_vfiprintf_r+0x5c>
 800c362:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c364:	07dc      	lsls	r4, r3, #31
 800c366:	d504      	bpl.n	800c372 <_vfiprintf_r+0x4e>
 800c368:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c36c:	b01d      	add	sp, #116	@ 0x74
 800c36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c372:	89ab      	ldrh	r3, [r5, #12]
 800c374:	0598      	lsls	r0, r3, #22
 800c376:	d4f7      	bmi.n	800c368 <_vfiprintf_r+0x44>
 800c378:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c37a:	f7ff f9ef 	bl	800b75c <__retarget_lock_release_recursive>
 800c37e:	e7f3      	b.n	800c368 <_vfiprintf_r+0x44>
 800c380:	2300      	movs	r3, #0
 800c382:	9309      	str	r3, [sp, #36]	@ 0x24
 800c384:	2320      	movs	r3, #32
 800c386:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800c38a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c38e:	2330      	movs	r3, #48	@ 0x30
 800c390:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800c540 <_vfiprintf_r+0x21c>
 800c394:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800c398:	f04f 0901 	mov.w	r9, #1
 800c39c:	4623      	mov	r3, r4
 800c39e:	469a      	mov	sl, r3
 800c3a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3a4:	b10a      	cbz	r2, 800c3aa <_vfiprintf_r+0x86>
 800c3a6:	2a25      	cmp	r2, #37	@ 0x25
 800c3a8:	d1f9      	bne.n	800c39e <_vfiprintf_r+0x7a>
 800c3aa:	ebba 0b04 	subs.w	fp, sl, r4
 800c3ae:	d00b      	beq.n	800c3c8 <_vfiprintf_r+0xa4>
 800c3b0:	465b      	mov	r3, fp
 800c3b2:	4622      	mov	r2, r4
 800c3b4:	4629      	mov	r1, r5
 800c3b6:	4630      	mov	r0, r6
 800c3b8:	f7ff ffa1 	bl	800c2fe <__sfputs_r>
 800c3bc:	3001      	adds	r0, #1
 800c3be:	f000 80a7 	beq.w	800c510 <_vfiprintf_r+0x1ec>
 800c3c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c3c4:	445a      	add	r2, fp
 800c3c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800c3c8:	f89a 3000 	ldrb.w	r3, [sl]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	f000 809f 	beq.w	800c510 <_vfiprintf_r+0x1ec>
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c3d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c3dc:	f10a 0a01 	add.w	sl, sl, #1
 800c3e0:	9304      	str	r3, [sp, #16]
 800c3e2:	9307      	str	r3, [sp, #28]
 800c3e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800c3e8:	931a      	str	r3, [sp, #104]	@ 0x68
 800c3ea:	4654      	mov	r4, sl
 800c3ec:	2205      	movs	r2, #5
 800c3ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3f2:	4853      	ldr	r0, [pc, #332]	@ (800c540 <_vfiprintf_r+0x21c>)
 800c3f4:	f7f3 ff0c 	bl	8000210 <memchr>
 800c3f8:	9a04      	ldr	r2, [sp, #16]
 800c3fa:	b9d8      	cbnz	r0, 800c434 <_vfiprintf_r+0x110>
 800c3fc:	06d1      	lsls	r1, r2, #27
 800c3fe:	bf44      	itt	mi
 800c400:	2320      	movmi	r3, #32
 800c402:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c406:	0713      	lsls	r3, r2, #28
 800c408:	bf44      	itt	mi
 800c40a:	232b      	movmi	r3, #43	@ 0x2b
 800c40c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800c410:	f89a 3000 	ldrb.w	r3, [sl]
 800c414:	2b2a      	cmp	r3, #42	@ 0x2a
 800c416:	d015      	beq.n	800c444 <_vfiprintf_r+0x120>
 800c418:	9a07      	ldr	r2, [sp, #28]
 800c41a:	4654      	mov	r4, sl
 800c41c:	2000      	movs	r0, #0
 800c41e:	f04f 0c0a 	mov.w	ip, #10
 800c422:	4621      	mov	r1, r4
 800c424:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c428:	3b30      	subs	r3, #48	@ 0x30
 800c42a:	2b09      	cmp	r3, #9
 800c42c:	d94b      	bls.n	800c4c6 <_vfiprintf_r+0x1a2>
 800c42e:	b1b0      	cbz	r0, 800c45e <_vfiprintf_r+0x13a>
 800c430:	9207      	str	r2, [sp, #28]
 800c432:	e014      	b.n	800c45e <_vfiprintf_r+0x13a>
 800c434:	eba0 0308 	sub.w	r3, r0, r8
 800c438:	fa09 f303 	lsl.w	r3, r9, r3
 800c43c:	4313      	orrs	r3, r2
 800c43e:	9304      	str	r3, [sp, #16]
 800c440:	46a2      	mov	sl, r4
 800c442:	e7d2      	b.n	800c3ea <_vfiprintf_r+0xc6>
 800c444:	9b03      	ldr	r3, [sp, #12]
 800c446:	1d19      	adds	r1, r3, #4
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	9103      	str	r1, [sp, #12]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	bfbb      	ittet	lt
 800c450:	425b      	neglt	r3, r3
 800c452:	f042 0202 	orrlt.w	r2, r2, #2
 800c456:	9307      	strge	r3, [sp, #28]
 800c458:	9307      	strlt	r3, [sp, #28]
 800c45a:	bfb8      	it	lt
 800c45c:	9204      	strlt	r2, [sp, #16]
 800c45e:	7823      	ldrb	r3, [r4, #0]
 800c460:	2b2e      	cmp	r3, #46	@ 0x2e
 800c462:	d10a      	bne.n	800c47a <_vfiprintf_r+0x156>
 800c464:	7863      	ldrb	r3, [r4, #1]
 800c466:	2b2a      	cmp	r3, #42	@ 0x2a
 800c468:	d132      	bne.n	800c4d0 <_vfiprintf_r+0x1ac>
 800c46a:	9b03      	ldr	r3, [sp, #12]
 800c46c:	1d1a      	adds	r2, r3, #4
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	9203      	str	r2, [sp, #12]
 800c472:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800c476:	3402      	adds	r4, #2
 800c478:	9305      	str	r3, [sp, #20]
 800c47a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800c550 <_vfiprintf_r+0x22c>
 800c47e:	7821      	ldrb	r1, [r4, #0]
 800c480:	2203      	movs	r2, #3
 800c482:	4650      	mov	r0, sl
 800c484:	f7f3 fec4 	bl	8000210 <memchr>
 800c488:	b138      	cbz	r0, 800c49a <_vfiprintf_r+0x176>
 800c48a:	9b04      	ldr	r3, [sp, #16]
 800c48c:	eba0 000a 	sub.w	r0, r0, sl
 800c490:	2240      	movs	r2, #64	@ 0x40
 800c492:	4082      	lsls	r2, r0
 800c494:	4313      	orrs	r3, r2
 800c496:	3401      	adds	r4, #1
 800c498:	9304      	str	r3, [sp, #16]
 800c49a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c49e:	4829      	ldr	r0, [pc, #164]	@ (800c544 <_vfiprintf_r+0x220>)
 800c4a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800c4a4:	2206      	movs	r2, #6
 800c4a6:	f7f3 feb3 	bl	8000210 <memchr>
 800c4aa:	2800      	cmp	r0, #0
 800c4ac:	d03f      	beq.n	800c52e <_vfiprintf_r+0x20a>
 800c4ae:	4b26      	ldr	r3, [pc, #152]	@ (800c548 <_vfiprintf_r+0x224>)
 800c4b0:	bb1b      	cbnz	r3, 800c4fa <_vfiprintf_r+0x1d6>
 800c4b2:	9b03      	ldr	r3, [sp, #12]
 800c4b4:	3307      	adds	r3, #7
 800c4b6:	f023 0307 	bic.w	r3, r3, #7
 800c4ba:	3308      	adds	r3, #8
 800c4bc:	9303      	str	r3, [sp, #12]
 800c4be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4c0:	443b      	add	r3, r7
 800c4c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c4c4:	e76a      	b.n	800c39c <_vfiprintf_r+0x78>
 800c4c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800c4ca:	460c      	mov	r4, r1
 800c4cc:	2001      	movs	r0, #1
 800c4ce:	e7a8      	b.n	800c422 <_vfiprintf_r+0xfe>
 800c4d0:	2300      	movs	r3, #0
 800c4d2:	3401      	adds	r4, #1
 800c4d4:	9305      	str	r3, [sp, #20]
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	f04f 0c0a 	mov.w	ip, #10
 800c4dc:	4620      	mov	r0, r4
 800c4de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c4e2:	3a30      	subs	r2, #48	@ 0x30
 800c4e4:	2a09      	cmp	r2, #9
 800c4e6:	d903      	bls.n	800c4f0 <_vfiprintf_r+0x1cc>
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d0c6      	beq.n	800c47a <_vfiprintf_r+0x156>
 800c4ec:	9105      	str	r1, [sp, #20]
 800c4ee:	e7c4      	b.n	800c47a <_vfiprintf_r+0x156>
 800c4f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800c4f4:	4604      	mov	r4, r0
 800c4f6:	2301      	movs	r3, #1
 800c4f8:	e7f0      	b.n	800c4dc <_vfiprintf_r+0x1b8>
 800c4fa:	ab03      	add	r3, sp, #12
 800c4fc:	9300      	str	r3, [sp, #0]
 800c4fe:	462a      	mov	r2, r5
 800c500:	4b12      	ldr	r3, [pc, #72]	@ (800c54c <_vfiprintf_r+0x228>)
 800c502:	a904      	add	r1, sp, #16
 800c504:	4630      	mov	r0, r6
 800c506:	f3af 8000 	nop.w
 800c50a:	4607      	mov	r7, r0
 800c50c:	1c78      	adds	r0, r7, #1
 800c50e:	d1d6      	bne.n	800c4be <_vfiprintf_r+0x19a>
 800c510:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800c512:	07d9      	lsls	r1, r3, #31
 800c514:	d405      	bmi.n	800c522 <_vfiprintf_r+0x1fe>
 800c516:	89ab      	ldrh	r3, [r5, #12]
 800c518:	059a      	lsls	r2, r3, #22
 800c51a:	d402      	bmi.n	800c522 <_vfiprintf_r+0x1fe>
 800c51c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800c51e:	f7ff f91d 	bl	800b75c <__retarget_lock_release_recursive>
 800c522:	89ab      	ldrh	r3, [r5, #12]
 800c524:	065b      	lsls	r3, r3, #25
 800c526:	f53f af1f 	bmi.w	800c368 <_vfiprintf_r+0x44>
 800c52a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c52c:	e71e      	b.n	800c36c <_vfiprintf_r+0x48>
 800c52e:	ab03      	add	r3, sp, #12
 800c530:	9300      	str	r3, [sp, #0]
 800c532:	462a      	mov	r2, r5
 800c534:	4b05      	ldr	r3, [pc, #20]	@ (800c54c <_vfiprintf_r+0x228>)
 800c536:	a904      	add	r1, sp, #16
 800c538:	4630      	mov	r0, r6
 800c53a:	f7ff fbad 	bl	800bc98 <_printf_i>
 800c53e:	e7e4      	b.n	800c50a <_vfiprintf_r+0x1e6>
 800c540:	0800d2bd 	.word	0x0800d2bd
 800c544:	0800d2c7 	.word	0x0800d2c7
 800c548:	00000000 	.word	0x00000000
 800c54c:	0800c2ff 	.word	0x0800c2ff
 800c550:	0800d2c3 	.word	0x0800d2c3

0800c554 <_malloc_usable_size_r>:
 800c554:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c558:	1f18      	subs	r0, r3, #4
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	bfbc      	itt	lt
 800c55e:	580b      	ldrlt	r3, [r1, r0]
 800c560:	18c0      	addlt	r0, r0, r3
 800c562:	4770      	bx	lr

0800c564 <__swbuf_r>:
 800c564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c566:	460e      	mov	r6, r1
 800c568:	4614      	mov	r4, r2
 800c56a:	4605      	mov	r5, r0
 800c56c:	b118      	cbz	r0, 800c576 <__swbuf_r+0x12>
 800c56e:	6a03      	ldr	r3, [r0, #32]
 800c570:	b90b      	cbnz	r3, 800c576 <__swbuf_r+0x12>
 800c572:	f7fe ffa9 	bl	800b4c8 <__sinit>
 800c576:	69a3      	ldr	r3, [r4, #24]
 800c578:	60a3      	str	r3, [r4, #8]
 800c57a:	89a3      	ldrh	r3, [r4, #12]
 800c57c:	071a      	lsls	r2, r3, #28
 800c57e:	d501      	bpl.n	800c584 <__swbuf_r+0x20>
 800c580:	6923      	ldr	r3, [r4, #16]
 800c582:	b943      	cbnz	r3, 800c596 <__swbuf_r+0x32>
 800c584:	4621      	mov	r1, r4
 800c586:	4628      	mov	r0, r5
 800c588:	f000 f82a 	bl	800c5e0 <__swsetup_r>
 800c58c:	b118      	cbz	r0, 800c596 <__swbuf_r+0x32>
 800c58e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800c592:	4638      	mov	r0, r7
 800c594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c596:	6823      	ldr	r3, [r4, #0]
 800c598:	6922      	ldr	r2, [r4, #16]
 800c59a:	1a98      	subs	r0, r3, r2
 800c59c:	6963      	ldr	r3, [r4, #20]
 800c59e:	b2f6      	uxtb	r6, r6
 800c5a0:	4283      	cmp	r3, r0
 800c5a2:	4637      	mov	r7, r6
 800c5a4:	dc05      	bgt.n	800c5b2 <__swbuf_r+0x4e>
 800c5a6:	4621      	mov	r1, r4
 800c5a8:	4628      	mov	r0, r5
 800c5aa:	f7ff fd17 	bl	800bfdc <_fflush_r>
 800c5ae:	2800      	cmp	r0, #0
 800c5b0:	d1ed      	bne.n	800c58e <__swbuf_r+0x2a>
 800c5b2:	68a3      	ldr	r3, [r4, #8]
 800c5b4:	3b01      	subs	r3, #1
 800c5b6:	60a3      	str	r3, [r4, #8]
 800c5b8:	6823      	ldr	r3, [r4, #0]
 800c5ba:	1c5a      	adds	r2, r3, #1
 800c5bc:	6022      	str	r2, [r4, #0]
 800c5be:	701e      	strb	r6, [r3, #0]
 800c5c0:	6962      	ldr	r2, [r4, #20]
 800c5c2:	1c43      	adds	r3, r0, #1
 800c5c4:	429a      	cmp	r2, r3
 800c5c6:	d004      	beq.n	800c5d2 <__swbuf_r+0x6e>
 800c5c8:	89a3      	ldrh	r3, [r4, #12]
 800c5ca:	07db      	lsls	r3, r3, #31
 800c5cc:	d5e1      	bpl.n	800c592 <__swbuf_r+0x2e>
 800c5ce:	2e0a      	cmp	r6, #10
 800c5d0:	d1df      	bne.n	800c592 <__swbuf_r+0x2e>
 800c5d2:	4621      	mov	r1, r4
 800c5d4:	4628      	mov	r0, r5
 800c5d6:	f7ff fd01 	bl	800bfdc <_fflush_r>
 800c5da:	2800      	cmp	r0, #0
 800c5dc:	d0d9      	beq.n	800c592 <__swbuf_r+0x2e>
 800c5de:	e7d6      	b.n	800c58e <__swbuf_r+0x2a>

0800c5e0 <__swsetup_r>:
 800c5e0:	b538      	push	{r3, r4, r5, lr}
 800c5e2:	4b29      	ldr	r3, [pc, #164]	@ (800c688 <__swsetup_r+0xa8>)
 800c5e4:	4605      	mov	r5, r0
 800c5e6:	6818      	ldr	r0, [r3, #0]
 800c5e8:	460c      	mov	r4, r1
 800c5ea:	b118      	cbz	r0, 800c5f4 <__swsetup_r+0x14>
 800c5ec:	6a03      	ldr	r3, [r0, #32]
 800c5ee:	b90b      	cbnz	r3, 800c5f4 <__swsetup_r+0x14>
 800c5f0:	f7fe ff6a 	bl	800b4c8 <__sinit>
 800c5f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5f8:	0719      	lsls	r1, r3, #28
 800c5fa:	d422      	bmi.n	800c642 <__swsetup_r+0x62>
 800c5fc:	06da      	lsls	r2, r3, #27
 800c5fe:	d407      	bmi.n	800c610 <__swsetup_r+0x30>
 800c600:	2209      	movs	r2, #9
 800c602:	602a      	str	r2, [r5, #0]
 800c604:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c608:	81a3      	strh	r3, [r4, #12]
 800c60a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c60e:	e033      	b.n	800c678 <__swsetup_r+0x98>
 800c610:	0758      	lsls	r0, r3, #29
 800c612:	d512      	bpl.n	800c63a <__swsetup_r+0x5a>
 800c614:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c616:	b141      	cbz	r1, 800c62a <__swsetup_r+0x4a>
 800c618:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c61c:	4299      	cmp	r1, r3
 800c61e:	d002      	beq.n	800c626 <__swsetup_r+0x46>
 800c620:	4628      	mov	r0, r5
 800c622:	f7ff fe0b 	bl	800c23c <_free_r>
 800c626:	2300      	movs	r3, #0
 800c628:	6363      	str	r3, [r4, #52]	@ 0x34
 800c62a:	89a3      	ldrh	r3, [r4, #12]
 800c62c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c630:	81a3      	strh	r3, [r4, #12]
 800c632:	2300      	movs	r3, #0
 800c634:	6063      	str	r3, [r4, #4]
 800c636:	6923      	ldr	r3, [r4, #16]
 800c638:	6023      	str	r3, [r4, #0]
 800c63a:	89a3      	ldrh	r3, [r4, #12]
 800c63c:	f043 0308 	orr.w	r3, r3, #8
 800c640:	81a3      	strh	r3, [r4, #12]
 800c642:	6923      	ldr	r3, [r4, #16]
 800c644:	b94b      	cbnz	r3, 800c65a <__swsetup_r+0x7a>
 800c646:	89a3      	ldrh	r3, [r4, #12]
 800c648:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c64c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c650:	d003      	beq.n	800c65a <__swsetup_r+0x7a>
 800c652:	4621      	mov	r1, r4
 800c654:	4628      	mov	r0, r5
 800c656:	f000 f83f 	bl	800c6d8 <__smakebuf_r>
 800c65a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c65e:	f013 0201 	ands.w	r2, r3, #1
 800c662:	d00a      	beq.n	800c67a <__swsetup_r+0x9a>
 800c664:	2200      	movs	r2, #0
 800c666:	60a2      	str	r2, [r4, #8]
 800c668:	6962      	ldr	r2, [r4, #20]
 800c66a:	4252      	negs	r2, r2
 800c66c:	61a2      	str	r2, [r4, #24]
 800c66e:	6922      	ldr	r2, [r4, #16]
 800c670:	b942      	cbnz	r2, 800c684 <__swsetup_r+0xa4>
 800c672:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c676:	d1c5      	bne.n	800c604 <__swsetup_r+0x24>
 800c678:	bd38      	pop	{r3, r4, r5, pc}
 800c67a:	0799      	lsls	r1, r3, #30
 800c67c:	bf58      	it	pl
 800c67e:	6962      	ldrpl	r2, [r4, #20]
 800c680:	60a2      	str	r2, [r4, #8]
 800c682:	e7f4      	b.n	800c66e <__swsetup_r+0x8e>
 800c684:	2000      	movs	r0, #0
 800c686:	e7f7      	b.n	800c678 <__swsetup_r+0x98>
 800c688:	20000048 	.word	0x20000048

0800c68c <__swhatbuf_r>:
 800c68c:	b570      	push	{r4, r5, r6, lr}
 800c68e:	460c      	mov	r4, r1
 800c690:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c694:	2900      	cmp	r1, #0
 800c696:	b096      	sub	sp, #88	@ 0x58
 800c698:	4615      	mov	r5, r2
 800c69a:	461e      	mov	r6, r3
 800c69c:	da0d      	bge.n	800c6ba <__swhatbuf_r+0x2e>
 800c69e:	89a3      	ldrh	r3, [r4, #12]
 800c6a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800c6a4:	f04f 0100 	mov.w	r1, #0
 800c6a8:	bf14      	ite	ne
 800c6aa:	2340      	movne	r3, #64	@ 0x40
 800c6ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800c6b0:	2000      	movs	r0, #0
 800c6b2:	6031      	str	r1, [r6, #0]
 800c6b4:	602b      	str	r3, [r5, #0]
 800c6b6:	b016      	add	sp, #88	@ 0x58
 800c6b8:	bd70      	pop	{r4, r5, r6, pc}
 800c6ba:	466a      	mov	r2, sp
 800c6bc:	f000 f89c 	bl	800c7f8 <_fstat_r>
 800c6c0:	2800      	cmp	r0, #0
 800c6c2:	dbec      	blt.n	800c69e <__swhatbuf_r+0x12>
 800c6c4:	9901      	ldr	r1, [sp, #4]
 800c6c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800c6ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800c6ce:	4259      	negs	r1, r3
 800c6d0:	4159      	adcs	r1, r3
 800c6d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6d6:	e7eb      	b.n	800c6b0 <__swhatbuf_r+0x24>

0800c6d8 <__smakebuf_r>:
 800c6d8:	898b      	ldrh	r3, [r1, #12]
 800c6da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6dc:	079d      	lsls	r5, r3, #30
 800c6de:	4606      	mov	r6, r0
 800c6e0:	460c      	mov	r4, r1
 800c6e2:	d507      	bpl.n	800c6f4 <__smakebuf_r+0x1c>
 800c6e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800c6e8:	6023      	str	r3, [r4, #0]
 800c6ea:	6123      	str	r3, [r4, #16]
 800c6ec:	2301      	movs	r3, #1
 800c6ee:	6163      	str	r3, [r4, #20]
 800c6f0:	b003      	add	sp, #12
 800c6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6f4:	ab01      	add	r3, sp, #4
 800c6f6:	466a      	mov	r2, sp
 800c6f8:	f7ff ffc8 	bl	800c68c <__swhatbuf_r>
 800c6fc:	9f00      	ldr	r7, [sp, #0]
 800c6fe:	4605      	mov	r5, r0
 800c700:	4639      	mov	r1, r7
 800c702:	4630      	mov	r0, r6
 800c704:	f7ff f9da 	bl	800babc <_malloc_r>
 800c708:	b948      	cbnz	r0, 800c71e <__smakebuf_r+0x46>
 800c70a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c70e:	059a      	lsls	r2, r3, #22
 800c710:	d4ee      	bmi.n	800c6f0 <__smakebuf_r+0x18>
 800c712:	f023 0303 	bic.w	r3, r3, #3
 800c716:	f043 0302 	orr.w	r3, r3, #2
 800c71a:	81a3      	strh	r3, [r4, #12]
 800c71c:	e7e2      	b.n	800c6e4 <__smakebuf_r+0xc>
 800c71e:	89a3      	ldrh	r3, [r4, #12]
 800c720:	6020      	str	r0, [r4, #0]
 800c722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c726:	81a3      	strh	r3, [r4, #12]
 800c728:	9b01      	ldr	r3, [sp, #4]
 800c72a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800c72e:	b15b      	cbz	r3, 800c748 <__smakebuf_r+0x70>
 800c730:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c734:	4630      	mov	r0, r6
 800c736:	f000 f83b 	bl	800c7b0 <_isatty_r>
 800c73a:	b128      	cbz	r0, 800c748 <__smakebuf_r+0x70>
 800c73c:	89a3      	ldrh	r3, [r4, #12]
 800c73e:	f023 0303 	bic.w	r3, r3, #3
 800c742:	f043 0301 	orr.w	r3, r3, #1
 800c746:	81a3      	strh	r3, [r4, #12]
 800c748:	89a3      	ldrh	r3, [r4, #12]
 800c74a:	431d      	orrs	r5, r3
 800c74c:	81a5      	strh	r5, [r4, #12]
 800c74e:	e7cf      	b.n	800c6f0 <__smakebuf_r+0x18>

0800c750 <_raise_r>:
 800c750:	291f      	cmp	r1, #31
 800c752:	b538      	push	{r3, r4, r5, lr}
 800c754:	4605      	mov	r5, r0
 800c756:	460c      	mov	r4, r1
 800c758:	d904      	bls.n	800c764 <_raise_r+0x14>
 800c75a:	2316      	movs	r3, #22
 800c75c:	6003      	str	r3, [r0, #0]
 800c75e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c762:	bd38      	pop	{r3, r4, r5, pc}
 800c764:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800c766:	b112      	cbz	r2, 800c76e <_raise_r+0x1e>
 800c768:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c76c:	b94b      	cbnz	r3, 800c782 <_raise_r+0x32>
 800c76e:	4628      	mov	r0, r5
 800c770:	f000 f840 	bl	800c7f4 <_getpid_r>
 800c774:	4622      	mov	r2, r4
 800c776:	4601      	mov	r1, r0
 800c778:	4628      	mov	r0, r5
 800c77a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c77e:	f000 b827 	b.w	800c7d0 <_kill_r>
 800c782:	2b01      	cmp	r3, #1
 800c784:	d00a      	beq.n	800c79c <_raise_r+0x4c>
 800c786:	1c59      	adds	r1, r3, #1
 800c788:	d103      	bne.n	800c792 <_raise_r+0x42>
 800c78a:	2316      	movs	r3, #22
 800c78c:	6003      	str	r3, [r0, #0]
 800c78e:	2001      	movs	r0, #1
 800c790:	e7e7      	b.n	800c762 <_raise_r+0x12>
 800c792:	2100      	movs	r1, #0
 800c794:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800c798:	4620      	mov	r0, r4
 800c79a:	4798      	blx	r3
 800c79c:	2000      	movs	r0, #0
 800c79e:	e7e0      	b.n	800c762 <_raise_r+0x12>

0800c7a0 <raise>:
 800c7a0:	4b02      	ldr	r3, [pc, #8]	@ (800c7ac <raise+0xc>)
 800c7a2:	4601      	mov	r1, r0
 800c7a4:	6818      	ldr	r0, [r3, #0]
 800c7a6:	f7ff bfd3 	b.w	800c750 <_raise_r>
 800c7aa:	bf00      	nop
 800c7ac:	20000048 	.word	0x20000048

0800c7b0 <_isatty_r>:
 800c7b0:	b538      	push	{r3, r4, r5, lr}
 800c7b2:	4d06      	ldr	r5, [pc, #24]	@ (800c7cc <_isatty_r+0x1c>)
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	4604      	mov	r4, r0
 800c7b8:	4608      	mov	r0, r1
 800c7ba:	602b      	str	r3, [r5, #0]
 800c7bc:	f7f6 f9dd 	bl	8002b7a <_isatty>
 800c7c0:	1c43      	adds	r3, r0, #1
 800c7c2:	d102      	bne.n	800c7ca <_isatty_r+0x1a>
 800c7c4:	682b      	ldr	r3, [r5, #0]
 800c7c6:	b103      	cbz	r3, 800c7ca <_isatty_r+0x1a>
 800c7c8:	6023      	str	r3, [r4, #0]
 800c7ca:	bd38      	pop	{r3, r4, r5, pc}
 800c7cc:	20000ffc 	.word	0x20000ffc

0800c7d0 <_kill_r>:
 800c7d0:	b538      	push	{r3, r4, r5, lr}
 800c7d2:	4d07      	ldr	r5, [pc, #28]	@ (800c7f0 <_kill_r+0x20>)
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	4604      	mov	r4, r0
 800c7d8:	4608      	mov	r0, r1
 800c7da:	4611      	mov	r1, r2
 800c7dc:	602b      	str	r3, [r5, #0]
 800c7de:	f7f6 f95c 	bl	8002a9a <_kill>
 800c7e2:	1c43      	adds	r3, r0, #1
 800c7e4:	d102      	bne.n	800c7ec <_kill_r+0x1c>
 800c7e6:	682b      	ldr	r3, [r5, #0]
 800c7e8:	b103      	cbz	r3, 800c7ec <_kill_r+0x1c>
 800c7ea:	6023      	str	r3, [r4, #0]
 800c7ec:	bd38      	pop	{r3, r4, r5, pc}
 800c7ee:	bf00      	nop
 800c7f0:	20000ffc 	.word	0x20000ffc

0800c7f4 <_getpid_r>:
 800c7f4:	f7f6 b949 	b.w	8002a8a <_getpid>

0800c7f8 <_fstat_r>:
 800c7f8:	b538      	push	{r3, r4, r5, lr}
 800c7fa:	4d07      	ldr	r5, [pc, #28]	@ (800c818 <_fstat_r+0x20>)
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	4604      	mov	r4, r0
 800c800:	4608      	mov	r0, r1
 800c802:	4611      	mov	r1, r2
 800c804:	602b      	str	r3, [r5, #0]
 800c806:	f7f6 f9a8 	bl	8002b5a <_fstat>
 800c80a:	1c43      	adds	r3, r0, #1
 800c80c:	d102      	bne.n	800c814 <_fstat_r+0x1c>
 800c80e:	682b      	ldr	r3, [r5, #0]
 800c810:	b103      	cbz	r3, 800c814 <_fstat_r+0x1c>
 800c812:	6023      	str	r3, [r4, #0]
 800c814:	bd38      	pop	{r3, r4, r5, pc}
 800c816:	bf00      	nop
 800c818:	20000ffc 	.word	0x20000ffc

0800c81c <_init>:
 800c81c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c81e:	bf00      	nop
 800c820:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c822:	bc08      	pop	{r3}
 800c824:	469e      	mov	lr, r3
 800c826:	4770      	bx	lr

0800c828 <_fini>:
 800c828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c82a:	bf00      	nop
 800c82c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c82e:	bc08      	pop	{r3}
 800c830:	469e      	mov	lr, r3
 800c832:	4770      	bx	lr
