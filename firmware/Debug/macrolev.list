
macrolev.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .user_data    00000000  08040000  08040000  0000c0d4  2**0
                  CONTENTS
  1 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0000a418  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000240  0800a5b8  0800a5b8  0000b5b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800a7f8  0800a7f8  0000c0d4  2**0
                  CONTENTS
  5 .ARM          00000008  0800a7f8  0800a7f8  0000b7f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800a800  0800a800  0000c0d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800a800  0800a800  0000b800  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800a804  0800a804  0000b804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000000d4  20000000  0800a808  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000d14  200000d4  0800a8dc  0000c0d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000de8  0800a8dc  0000cde8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c0d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001aeac  00000000  00000000  0000c104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000470d  00000000  00000000  00026fb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001338  00000000  00000000  0002b6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e96f  00000000  00000000  0002c9f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a1b2  00000000  00000000  0004b367  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000b681b  00000000  00000000  00065519  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011bd34  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 00000f4d  00000000  00000000  0011bd77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005530  00000000  00000000  0011ccc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  001221f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200000d4 	.word	0x200000d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800a5a0 	.word	0x0800a5a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200000d8 	.word	0x200000d8
 80001dc:	0800a5a0 	.word	0x0800a5a0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <hid_init>:
static uint8_t keycodes[6] = {0};
// static uint8_t is_screaming = 0;
static uint8_t consumer_report = 0;


void hid_init() {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
	 tusb_rhport_init_t dev_init = {
 80005c2:	4b06      	ldr	r3, [pc, #24]	@ (80005dc <hid_init+0x20>)
 80005c4:	881b      	ldrh	r3, [r3, #0]
 80005c6:	80bb      	strh	r3, [r7, #4]
	     .role = TUSB_ROLE_DEVICE,
	     .speed = TUSB_SPEED_AUTO
	  };
	  tusb_init(0, &dev_init); // initialize device stack on roothub port 0
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	4619      	mov	r1, r3
 80005cc:	2000      	movs	r0, #0
 80005ce:	f009 f98b 	bl	80098e8 <tusb_rhport_init>
}
 80005d2:	bf00      	nop
 80005d4:	3708      	adds	r7, #8
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	0800a5b8 	.word	0x0800a5b8

080005e0 <hid_task>:

void hid_task() {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0

  if ((should_send_consumer_report || should_send_keyboard_report) && tud_hid_ready()) {
 80005e6:	4b21      	ldr	r3, [pc, #132]	@ (800066c <hid_task+0x8c>)
 80005e8:	781b      	ldrb	r3, [r3, #0]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d103      	bne.n	80005f6 <hid_task+0x16>
 80005ee:	4b20      	ldr	r3, [pc, #128]	@ (8000670 <hid_task+0x90>)
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d035      	beq.n	8000662 <hid_task+0x82>

//--------------------------------------------------------------------+
// Application API (Single Port)
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_ready(void) {
  return tud_hid_n_ready(0);
 80005f6:	2000      	movs	r0, #0
 80005f8:	f004 f886 	bl	8004708 <tud_hid_n_ready>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d02f      	beq.n	8000662 <hid_task+0x82>
    if (tud_suspended()) {
 8000602:	f005 fb9d 	bl	8005d40 <tud_suspended>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d002      	beq.n	8000612 <hid_task+0x32>
      tud_remote_wakeup();
 800060c:	f005 fbac 	bl	8005d68 <tud_remote_wakeup>
        should_send_keyboard_report = 0;
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
      }
    }
  }
}
 8000610:	e027      	b.n	8000662 <hid_task+0x82>
      if (should_send_consumer_report) {
 8000612:	4b16      	ldr	r3, [pc, #88]	@ (800066c <hid_task+0x8c>)
 8000614:	781b      	ldrb	r3, [r3, #0]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d00f      	beq.n	800063a <hid_task+0x5a>
        should_send_consumer_report = 0;
 800061a:	4b14      	ldr	r3, [pc, #80]	@ (800066c <hid_task+0x8c>)
 800061c:	2200      	movs	r2, #0
 800061e:	701a      	strb	r2, [r3, #0]
 8000620:	2302      	movs	r3, #2
 8000622:	73fb      	strb	r3, [r7, #15]
 8000624:	4b13      	ldr	r3, [pc, #76]	@ (8000674 <hid_task+0x94>)
 8000626:	60bb      	str	r3, [r7, #8]
 8000628:	2302      	movs	r3, #2
 800062a:	80fb      	strh	r3, [r7, #6]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tud_hid_get_protocol(void) {
  return tud_hid_n_get_protocol(0);
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_report(uint8_t report_id, void const* report, uint16_t len) {
  return tud_hid_n_report(0, report_id, report, len);
 800062c:	88fb      	ldrh	r3, [r7, #6]
 800062e:	7bf9      	ldrb	r1, [r7, #15]
 8000630:	68ba      	ldr	r2, [r7, #8]
 8000632:	2000      	movs	r0, #0
 8000634:	f004 f8aa 	bl	800478c <tud_hid_n_report>
 8000638:	e013      	b.n	8000662 <hid_task+0x82>
      } else if (should_send_keyboard_report) {
 800063a:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <hid_task+0x90>)
 800063c:	781b      	ldrb	r3, [r3, #0]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d00f      	beq.n	8000662 <hid_task+0x82>
        should_send_keyboard_report = 0;
 8000642:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <hid_task+0x90>)
 8000644:	2200      	movs	r2, #0
 8000646:	701a      	strb	r2, [r3, #0]
        tud_hid_keyboard_report(REPORT_ID_KEYBOARD, modifiers, keycodes);
 8000648:	4b0b      	ldr	r3, [pc, #44]	@ (8000678 <hid_task+0x98>)
 800064a:	781b      	ldrb	r3, [r3, #0]
 800064c:	2201      	movs	r2, #1
 800064e:	717a      	strb	r2, [r7, #5]
 8000650:	713b      	strb	r3, [r7, #4]
 8000652:	4b0a      	ldr	r3, [pc, #40]	@ (800067c <hid_task+0x9c>)
 8000654:	603b      	str	r3, [r7, #0]
}

TU_ATTR_ALWAYS_INLINE static inline bool tud_hid_keyboard_report(uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
  return tud_hid_n_keyboard_report(0, report_id, modifier, keycode);
 8000656:	793a      	ldrb	r2, [r7, #4]
 8000658:	7979      	ldrb	r1, [r7, #5]
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	2000      	movs	r0, #0
 800065e:	f004 f91b 	bl	8004898 <tud_hid_n_keyboard_report>
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	200000f0 	.word	0x200000f0
 8000670:	200000f1 	.word	0x200000f1
 8000674:	200000fa 	.word	0x200000fa
 8000678:	200000f2 	.word	0x200000f2
 800067c:	200000f4 	.word	0x200000f4

08000680 <hid_press_key>:

void hid_press_key(struct key *key, uint8_t layer) {
 8000680:	b480      	push	{r7}
 8000682:	b085      	sub	sp, #20
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	460b      	mov	r3, r1
 800068a:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 800068c:	78fa      	ldrb	r2, [r7, #3]
 800068e:	6879      	ldr	r1, [r7, #4]
 8000690:	4613      	mov	r3, r2
 8000692:	005b      	lsls	r3, r3, #1
 8000694:	4413      	add	r3, r2
 8000696:	440b      	add	r3, r1
 8000698:	3305      	adds	r3, #5
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b03      	cmp	r3, #3
 800069e:	d038      	beq.n	8000712 <hid_press_key+0x92>
 80006a0:	2b03      	cmp	r3, #3
 80006a2:	dc45      	bgt.n	8000730 <hid_press_key+0xb0>
 80006a4:	2b01      	cmp	r3, #1
 80006a6:	d014      	beq.n	80006d2 <hid_press_key+0x52>
 80006a8:	2b02      	cmp	r3, #2
 80006aa:	d141      	bne.n	8000730 <hid_press_key+0xb0>
  case KEY_TYPE_MODIFIER:
    modifiers |= key->layers[layer].value;
 80006ac:	78fa      	ldrb	r2, [r7, #3]
 80006ae:	6879      	ldr	r1, [r7, #4]
 80006b0:	4613      	mov	r3, r2
 80006b2:	005b      	lsls	r3, r3, #1
 80006b4:	4413      	add	r3, r2
 80006b6:	440b      	add	r3, r1
 80006b8:	88db      	ldrh	r3, [r3, #6]
 80006ba:	b29b      	uxth	r3, r3
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4b20      	ldr	r3, [pc, #128]	@ (8000740 <hid_press_key+0xc0>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	4313      	orrs	r3, r2
 80006c4:	b2da      	uxtb	r2, r3
 80006c6:	4b1e      	ldr	r3, [pc, #120]	@ (8000740 <hid_press_key+0xc0>)
 80006c8:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80006ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000744 <hid_press_key+0xc4>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	701a      	strb	r2, [r3, #0]
    break;
 80006d0:	e02f      	b.n	8000732 <hid_press_key+0xb2>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 80006d2:	2300      	movs	r3, #0
 80006d4:	73fb      	strb	r3, [r7, #15]
 80006d6:	e018      	b.n	800070a <hid_press_key+0x8a>
      if (keycodes[i] == 0) {
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	4a1b      	ldr	r2, [pc, #108]	@ (8000748 <hid_press_key+0xc8>)
 80006dc:	5cd3      	ldrb	r3, [r2, r3]
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d110      	bne.n	8000704 <hid_press_key+0x84>
        keycodes[i] = key->layers[layer].value;
 80006e2:	78fa      	ldrb	r2, [r7, #3]
 80006e4:	6879      	ldr	r1, [r7, #4]
 80006e6:	4613      	mov	r3, r2
 80006e8:	005b      	lsls	r3, r3, #1
 80006ea:	4413      	add	r3, r2
 80006ec:	440b      	add	r3, r1
 80006ee:	88db      	ldrh	r3, [r3, #6]
 80006f0:	b29a      	uxth	r2, r3
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	b2d1      	uxtb	r1, r2
 80006f6:	4a14      	ldr	r2, [pc, #80]	@ (8000748 <hid_press_key+0xc8>)
 80006f8:	54d1      	strb	r1, [r2, r3]
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // } else if (i == 0 && key->state.velocity > keyboard_user_config.screaming_velocity_trigger) {
        //   is_screaming = 1;
        //   modifiers |= get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 80006fa:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <hid_press_key+0xc4>)
 80006fc:	2201      	movs	r2, #1
 80006fe:	701a      	strb	r2, [r3, #0]
        break;
 8000700:	bf00      	nop
      }
    }
    break;
 8000702:	e016      	b.n	8000732 <hid_press_key+0xb2>
    for (uint8_t i = 0; i < 6; i++) {
 8000704:	7bfb      	ldrb	r3, [r7, #15]
 8000706:	3301      	adds	r3, #1
 8000708:	73fb      	strb	r3, [r7, #15]
 800070a:	7bfb      	ldrb	r3, [r7, #15]
 800070c:	2b05      	cmp	r3, #5
 800070e:	d9e3      	bls.n	80006d8 <hid_press_key+0x58>
    break;
 8000710:	e00f      	b.n	8000732 <hid_press_key+0xb2>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = key->layers[layer].value;
 8000712:	78fa      	ldrb	r2, [r7, #3]
 8000714:	6879      	ldr	r1, [r7, #4]
 8000716:	4613      	mov	r3, r2
 8000718:	005b      	lsls	r3, r3, #1
 800071a:	4413      	add	r3, r2
 800071c:	440b      	add	r3, r1
 800071e:	88db      	ldrh	r3, [r3, #6]
 8000720:	b29b      	uxth	r3, r3
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b09      	ldr	r3, [pc, #36]	@ (800074c <hid_press_key+0xcc>)
 8000726:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 8000728:	4b09      	ldr	r3, [pc, #36]	@ (8000750 <hid_press_key+0xd0>)
 800072a:	2201      	movs	r2, #1
 800072c:	701a      	strb	r2, [r3, #0]
    break;
 800072e:	e000      	b.n	8000732 <hid_press_key+0xb2>

  default:
    break;
 8000730:	bf00      	nop
  }
}
 8000732:	bf00      	nop
 8000734:	3714      	adds	r7, #20
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	200000f2 	.word	0x200000f2
 8000744:	200000f1 	.word	0x200000f1
 8000748:	200000f4 	.word	0x200000f4
 800074c:	200000fa 	.word	0x200000fa
 8000750:	200000f0 	.word	0x200000f0

08000754 <hid_release_key>:

void hid_release_key(struct key *key, uint8_t layer) {
 8000754:	b480      	push	{r7}
 8000756:	b085      	sub	sp, #20
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
 800075c:	460b      	mov	r3, r1
 800075e:	70fb      	strb	r3, [r7, #3]
  switch (key->layers[layer].type) {
 8000760:	78fa      	ldrb	r2, [r7, #3]
 8000762:	6879      	ldr	r1, [r7, #4]
 8000764:	4613      	mov	r3, r2
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	4413      	add	r3, r2
 800076a:	440b      	add	r3, r1
 800076c:	3305      	adds	r3, #5
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b03      	cmp	r3, #3
 8000772:	d03d      	beq.n	80007f0 <hid_release_key+0x9c>
 8000774:	2b03      	cmp	r3, #3
 8000776:	dc42      	bgt.n	80007fe <hid_release_key+0xaa>
 8000778:	2b01      	cmp	r3, #1
 800077a:	d018      	beq.n	80007ae <hid_release_key+0x5a>
 800077c:	2b02      	cmp	r3, #2
 800077e:	d13e      	bne.n	80007fe <hid_release_key+0xaa>
  case KEY_TYPE_MODIFIER:
    modifiers &= ~key->layers[layer].value;
 8000780:	78fa      	ldrb	r2, [r7, #3]
 8000782:	6879      	ldr	r1, [r7, #4]
 8000784:	4613      	mov	r3, r2
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	4413      	add	r3, r2
 800078a:	440b      	add	r3, r1
 800078c:	88db      	ldrh	r3, [r3, #6]
 800078e:	b29b      	uxth	r3, r3
 8000790:	b25b      	sxtb	r3, r3
 8000792:	43db      	mvns	r3, r3
 8000794:	b25a      	sxtb	r2, r3
 8000796:	4b1d      	ldr	r3, [pc, #116]	@ (800080c <hid_release_key+0xb8>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	b25b      	sxtb	r3, r3
 800079c:	4013      	ands	r3, r2
 800079e:	b25b      	sxtb	r3, r3
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b1a      	ldr	r3, [pc, #104]	@ (800080c <hid_release_key+0xb8>)
 80007a4:	701a      	strb	r2, [r3, #0]
    should_send_keyboard_report = 1;
 80007a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000810 <hid_release_key+0xbc>)
 80007a8:	2201      	movs	r2, #1
 80007aa:	701a      	strb	r2, [r3, #0]
    break;
 80007ac:	e028      	b.n	8000800 <hid_release_key+0xac>

  case KEY_TYPE_NORMAL:
    for (uint8_t i = 0; i < 6; i++) {
 80007ae:	2300      	movs	r3, #0
 80007b0:	73fb      	strb	r3, [r7, #15]
 80007b2:	e019      	b.n	80007e8 <hid_release_key+0x94>
      if (keycodes[i] == key->layers[layer].value) {
 80007b4:	7bfb      	ldrb	r3, [r7, #15]
 80007b6:	4a17      	ldr	r2, [pc, #92]	@ (8000814 <hid_release_key+0xc0>)
 80007b8:	5cd3      	ldrb	r3, [r2, r3]
 80007ba:	4618      	mov	r0, r3
 80007bc:	78fa      	ldrb	r2, [r7, #3]
 80007be:	6879      	ldr	r1, [r7, #4]
 80007c0:	4613      	mov	r3, r2
 80007c2:	005b      	lsls	r3, r3, #1
 80007c4:	4413      	add	r3, r2
 80007c6:	440b      	add	r3, r1
 80007c8:	88db      	ldrh	r3, [r3, #6]
 80007ca:	b29b      	uxth	r3, r3
 80007cc:	4298      	cmp	r0, r3
 80007ce:	d108      	bne.n	80007e2 <hid_release_key+0x8e>
        keycodes[i] = 0;
 80007d0:	7bfb      	ldrb	r3, [r7, #15]
 80007d2:	4a10      	ldr	r2, [pc, #64]	@ (8000814 <hid_release_key+0xc0>)
 80007d4:	2100      	movs	r1, #0
 80007d6:	54d1      	strb	r1, [r2, r3]
        // if (is_screaming) {
        //   is_screaming = 0;
        //   modifiers &= ~get_bitmask_for_modifier(HID_KEY_SHIFT_LEFT);
        // }
        should_send_keyboard_report = 1;
 80007d8:	4b0d      	ldr	r3, [pc, #52]	@ (8000810 <hid_release_key+0xbc>)
 80007da:	2201      	movs	r2, #1
 80007dc:	701a      	strb	r2, [r3, #0]
        break;
 80007de:	bf00      	nop
      }
    }
    break;
 80007e0:	e00e      	b.n	8000800 <hid_release_key+0xac>
    for (uint8_t i = 0; i < 6; i++) {
 80007e2:	7bfb      	ldrb	r3, [r7, #15]
 80007e4:	3301      	adds	r3, #1
 80007e6:	73fb      	strb	r3, [r7, #15]
 80007e8:	7bfb      	ldrb	r3, [r7, #15]
 80007ea:	2b05      	cmp	r3, #5
 80007ec:	d9e2      	bls.n	80007b4 <hid_release_key+0x60>
    break;
 80007ee:	e007      	b.n	8000800 <hid_release_key+0xac>

  case KEY_TYPE_CONSUMER_CONTROL:
    consumer_report = 0;
 80007f0:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <hid_release_key+0xc4>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
    should_send_consumer_report = 1;
 80007f6:	4b09      	ldr	r3, [pc, #36]	@ (800081c <hid_release_key+0xc8>)
 80007f8:	2201      	movs	r2, #1
 80007fa:	701a      	strb	r2, [r3, #0]
    break;
 80007fc:	e000      	b.n	8000800 <hid_release_key+0xac>

  default:
    break;
 80007fe:	bf00      	nop
  }
}
 8000800:	bf00      	nop
 8000802:	3714      	adds	r7, #20
 8000804:	46bd      	mov	sp, r7
 8000806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080a:	4770      	bx	lr
 800080c:	200000f2 	.word	0x200000f2
 8000810:	200000f1 	.word	0x200000f1
 8000814:	200000f4 	.word	0x200000f4
 8000818:	200000fa 	.word	0x200000fa
 800081c:	200000f0 	.word	0x200000f0

08000820 <tud_hid_set_protocol_cb>:


// Invoked when received SET_PROTOCOL request
// protocol is either HID_PROTOCOL_BOOT (0) or HID_PROTOCOL_REPORT (1)
void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	4603      	mov	r3, r0
 8000828:	460a      	mov	r2, r1
 800082a:	71fb      	strb	r3, [r7, #7]
 800082c:	4613      	mov	r3, r2
 800082e:	71bb      	strb	r3, [r7, #6]
  (void)instance;
  (void)protocol;

  // nothing to do since we use the same compatible boot report for both Boot and Report mode.
  // TOOD set a indicator for user
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <tud_hid_report_complete_cb>:
//    }
//  }
//}

void tud_hid_report_complete_cb(uint8_t instance, uint8_t const* report, uint16_t len)
{
 800083c:	b480      	push	{r7}
 800083e:	b085      	sub	sp, #20
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	6039      	str	r1, [r7, #0]
 8000846:	71fb      	strb	r3, [r7, #7]
 8000848:	4613      	mov	r3, r2
 800084a:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) len;

  uint8_t report_id = report[0];
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	73fb      	strb	r3, [r7, #15]

  switch (report_id)
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	2b01      	cmp	r3, #1
 8000856:	d002      	beq.n	800085e <tud_hid_report_complete_cb+0x22>
 8000858:	2b02      	cmp	r3, #2
 800085a:	d002      	beq.n	8000862 <tud_hid_report_complete_cb+0x26>
    case REPORT_ID_CONSUMER_CONTROL:
      // Consumer control report sent successfully
      break;

    default:
      break;
 800085c:	e002      	b.n	8000864 <tud_hid_report_complete_cb+0x28>
      break;
 800085e:	bf00      	nop
 8000860:	e000      	b.n	8000864 <tud_hid_report_complete_cb+0x28>
      break;
 8000862:	bf00      	nop
  }
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr

08000870 <tud_cdc_line_state_cb>:

// CDC

// Invoked when cdc when line state changed e.g connected/disconnected
void tud_cdc_line_state_cb(uint8_t itf, bool dtr, bool rts)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
 800087a:	460b      	mov	r3, r1
 800087c:	71bb      	strb	r3, [r7, #6]
 800087e:	4613      	mov	r3, r2
 8000880:	717b      	strb	r3, [r7, #5]
  (void)itf;

  // connected
  if (dtr && rts)
 8000882:	79bb      	ldrb	r3, [r7, #6]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d00f      	beq.n	80008a8 <tud_cdc_line_state_cb+0x38>
 8000888:	797b      	ldrb	r3, [r7, #5]
 800088a:	2b00      	cmp	r3, #0
 800088c:	d00c      	beq.n	80008a8 <tud_cdc_line_state_cb+0x38>
 800088e:	4b08      	ldr	r3, [pc, #32]	@ (80008b0 <tud_cdc_line_state_cb+0x40>)
 8000890:	617b      	str	r3, [r7, #20]
 8000892:	2300      	movs	r3, #0
 8000894:	74fb      	strb	r3, [r7, #19]
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	60fb      	str	r3, [r7, #12]
  return tud_cdc_n_write(itf, &ch, 1);
}

// Write a null-terminated string
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_n_write_str(uint8_t itf, char const* str) {
  return tud_cdc_n_write(itf, str, strlen(str));
 800089a:	2221      	movs	r2, #33	@ 0x21
 800089c:	7cfb      	ldrb	r3, [r7, #19]
 800089e:	68f9      	ldr	r1, [r7, #12]
 80008a0:	4618      	mov	r0, r3
 80008a2:	f003 fadd 	bl	8003e60 <tud_cdc_n_write>
TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write(void const* buffer, uint32_t bufsize) {
  return tud_cdc_n_write(0, buffer, bufsize);
}

TU_ATTR_ALWAYS_INLINE static inline uint32_t tud_cdc_write_str(char const* str) {
  return tud_cdc_n_write_str(0, str);
 80008a6:	bf00      	nop
  {
    // print initial message when connected
    tud_cdc_write_str("\r\nTinyUSB WebUSB device example\r\n");
  }
}
 80008a8:	bf00      	nop
 80008aa:	3718      	adds	r7, #24
 80008ac:	46bd      	mov	sp, r7
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	0800a5bc 	.word	0x0800a5bc

080008b4 <tud_cdc_rx_cb>:

// Invoked when CDC interface received data from host
void tud_cdc_rx_cb(uint8_t itf)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
  (void)itf;
}
 80008be:	bf00      	nop
 80008c0:	370c      	adds	r7, #12
 80008c2:	46bd      	mov	sp, r7
 80008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c8:	4770      	bx	lr
	...

080008cc <get_bitmask_for_modifier>:

uint32_t keyboard_last_cycle_duration = 0;

static uint8_t key_triggered = 0;

uint8_t get_bitmask_for_modifier(uint8_t keycode) {
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	4603      	mov	r3, r0
 80008d4:	71fb      	strb	r3, [r7, #7]
  switch (keycode) {
 80008d6:	79fb      	ldrb	r3, [r7, #7]
 80008d8:	3be0      	subs	r3, #224	@ 0xe0
 80008da:	2b07      	cmp	r3, #7
 80008dc:	d822      	bhi.n	8000924 <get_bitmask_for_modifier+0x58>
 80008de:	a201      	add	r2, pc, #4	@ (adr r2, 80008e4 <get_bitmask_for_modifier+0x18>)
 80008e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e4:	08000905 	.word	0x08000905
 80008e8:	08000909 	.word	0x08000909
 80008ec:	0800090d 	.word	0x0800090d
 80008f0:	08000911 	.word	0x08000911
 80008f4:	08000915 	.word	0x08000915
 80008f8:	08000919 	.word	0x08000919
 80008fc:	0800091d 	.word	0x0800091d
 8000900:	08000921 	.word	0x08000921
  case HID_KEY_CONTROL_LEFT:
    return 0b00000001;
 8000904:	2301      	movs	r3, #1
 8000906:	e00e      	b.n	8000926 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_LEFT:
    return 0b00000010;
 8000908:	2302      	movs	r3, #2
 800090a:	e00c      	b.n	8000926 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_LEFT:
    return 0b00000100;
 800090c:	2304      	movs	r3, #4
 800090e:	e00a      	b.n	8000926 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_LEFT:
    return 0b00001000;
 8000910:	2308      	movs	r3, #8
 8000912:	e008      	b.n	8000926 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_CONTROL_RIGHT:
    return 0b00010000;
 8000914:	2310      	movs	r3, #16
 8000916:	e006      	b.n	8000926 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_SHIFT_RIGHT:
    return 0b00100000;
 8000918:	2320      	movs	r3, #32
 800091a:	e004      	b.n	8000926 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_ALT_RIGHT:
    return 0b01000000;
 800091c:	2340      	movs	r3, #64	@ 0x40
 800091e:	e002      	b.n	8000926 <get_bitmask_for_modifier+0x5a>
  case HID_KEY_GUI_RIGHT:
    return 0b10000000;
 8000920:	2380      	movs	r3, #128	@ 0x80
 8000922:	e000      	b.n	8000926 <get_bitmask_for_modifier+0x5a>
  default:
    return 0b00000000;
 8000924:	2300      	movs	r3, #0
  }
}
 8000926:	4618      	mov	r0, r3
 8000928:	370c      	adds	r7, #12
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <get_usage_consumer_control>:

uint16_t get_usage_consumer_control(uint16_t value) {
 8000934:	b480      	push	{r7}
 8000936:	b083      	sub	sp, #12
 8000938:	af00      	add	r7, sp, #0
 800093a:	4603      	mov	r3, r0
 800093c:	80fb      	strh	r3, [r7, #6]
  if (value > 0xFF) {
 800093e:	88fb      	ldrh	r3, [r7, #6]
 8000940:	2bff      	cmp	r3, #255	@ 0xff
 8000942:	d904      	bls.n	800094e <get_usage_consumer_control+0x1a>
    return value & 0b0111111111111111;
 8000944:	88fb      	ldrh	r3, [r7, #6]
 8000946:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800094a:	b29b      	uxth	r3, r3
 800094c:	e000      	b.n	8000950 <get_usage_consumer_control+0x1c>
  } else {
    return 0;
 800094e:	2300      	movs	r3, #0
  }
}
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <init_key>:

void init_key(uint8_t adc_channel, uint8_t amux_channel, uint8_t row, uint8_t column) {
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b087      	sub	sp, #28
 8000960:	af00      	add	r7, sp, #0
 8000962:	4604      	mov	r4, r0
 8000964:	4608      	mov	r0, r1
 8000966:	4611      	mov	r1, r2
 8000968:	461a      	mov	r2, r3
 800096a:	4623      	mov	r3, r4
 800096c:	71fb      	strb	r3, [r7, #7]
 800096e:	4603      	mov	r3, r0
 8000970:	71bb      	strb	r3, [r7, #6]
 8000972:	460b      	mov	r3, r1
 8000974:	717b      	strb	r3, [r7, #5]
 8000976:	4613      	mov	r3, r2
 8000978:	713b      	strb	r3, [r7, #4]
  struct key *key = &keyboard_keys[adc_channel][amux_channel];
 800097a:	79f9      	ldrb	r1, [r7, #7]
 800097c:	79ba      	ldrb	r2, [r7, #6]
 800097e:	4613      	mov	r3, r2
 8000980:	009b      	lsls	r3, r3, #2
 8000982:	4413      	add	r3, r2
 8000984:	00db      	lsls	r3, r3, #3
 8000986:	1a9b      	subs	r3, r3, r2
 8000988:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800098c:	fb01 f202 	mul.w	r2, r1, r2
 8000990:	4413      	add	r3, r2
 8000992:	4a61      	ldr	r2, [pc, #388]	@ (8000b18 <init_key+0x1bc>)
 8000994:	4413      	add	r3, r2
 8000996:	613b      	str	r3, [r7, #16]

  key->is_enabled = 1;
 8000998:	693b      	ldr	r3, [r7, #16]
 800099a:	2201      	movs	r2, #1
 800099c:	701a      	strb	r2, [r3, #0]
  key->is_idle = 0;
 800099e:	693b      	ldr	r3, [r7, #16]
 80009a0:	2200      	movs	r2, #0
 80009a2:	711a      	strb	r2, [r3, #4]
  key->row = row;
 80009a4:	693b      	ldr	r3, [r7, #16]
 80009a6:	797a      	ldrb	r2, [r7, #5]
 80009a8:	705a      	strb	r2, [r3, #1]
  key->column = column;
 80009aa:	693b      	ldr	r3, [r7, #16]
 80009ac:	793a      	ldrb	r2, [r7, #4]
 80009ae:	709a      	strb	r2, [r3, #2]

  key->calibration.cycles_count = 0;
 80009b0:	693b      	ldr	r3, [r7, #16]
 80009b2:	2200      	movs	r2, #0
 80009b4:	72da      	strb	r2, [r3, #11]
 80009b6:	2200      	movs	r2, #0
 80009b8:	731a      	strb	r2, [r3, #12]
  key->calibration.idle_value = IDLE_VALUE_APPROX;
 80009ba:	693b      	ldr	r3, [r7, #16]
 80009bc:	2200      	movs	r2, #0
 80009be:	f042 0208 	orr.w	r2, r2, #8
 80009c2:	735a      	strb	r2, [r3, #13]
 80009c4:	2200      	movs	r2, #0
 80009c6:	f042 0207 	orr.w	r2, r2, #7
 80009ca:	739a      	strb	r2, [r3, #14]
  key->calibration.max_distance = MAX_DISTANCE_APPROX;
 80009cc:	693b      	ldr	r3, [r7, #16]
 80009ce:	2200      	movs	r2, #0
 80009d0:	f062 020b 	orn	r2, r2, #11
 80009d4:	73da      	strb	r2, [r3, #15]
 80009d6:	2200      	movs	r2, #0
 80009d8:	f042 0201 	orr.w	r2, r2, #1
 80009dc:	741a      	strb	r2, [r3, #16]

  key->actuation.status = STATUS_RESET;
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	2203      	movs	r2, #3
 80009e2:	779a      	strb	r2, [r3, #30]
  key->actuation.trigger_offset = keyboard_user_config.trigger_offset;
 80009e4:	4b4d      	ldr	r3, [pc, #308]	@ (8000b1c <init_key+0x1c0>)
 80009e6:	785a      	ldrb	r2, [r3, #1]
 80009e8:	693b      	ldr	r3, [r7, #16]
 80009ea:	f883 2020 	strb.w	r2, [r3, #32]
  key->actuation.reset_offset = keyboard_user_config.trigger_offset - keyboard_user_config.reset_threshold;
 80009ee:	4b4b      	ldr	r3, [pc, #300]	@ (8000b1c <init_key+0x1c0>)
 80009f0:	785a      	ldrb	r2, [r3, #1]
 80009f2:	4b4a      	ldr	r3, [pc, #296]	@ (8000b1c <init_key+0x1c0>)
 80009f4:	789b      	ldrb	r3, [r3, #2]
 80009f6:	1ad3      	subs	r3, r2, r3
 80009f8:	b2da      	uxtb	r2, r3
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	77da      	strb	r2, [r3, #31]
  key->actuation.rapid_trigger_offset = keyboard_user_config.rapid_trigger_offset;
 80009fe:	4b47      	ldr	r3, [pc, #284]	@ (8000b1c <init_key+0x1c0>)
 8000a00:	78da      	ldrb	r2, [r3, #3]
 8000a02:	693b      	ldr	r3, [r7, #16]
 8000a04:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  key->actuation.is_continuous_rapid_trigger_enabled = 0;
 8000a08:	693b      	ldr	r3, [r7, #16]
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8000a10:	2300      	movs	r3, #0
 8000a12:	75fb      	strb	r3, [r7, #23]
 8000a14:	e078      	b.n	8000b08 <init_key+0x1ac>
    if (keyboard_user_config.keymaps[i][row][column] != ____) {
 8000a16:	7df9      	ldrb	r1, [r7, #23]
 8000a18:	797a      	ldrb	r2, [r7, #5]
 8000a1a:	793b      	ldrb	r3, [r7, #4]
 8000a1c:	483f      	ldr	r0, [pc, #252]	@ (8000b1c <init_key+0x1c0>)
 8000a1e:	0089      	lsls	r1, r1, #2
 8000a20:	440a      	add	r2, r1
 8000a22:	0092      	lsls	r2, r2, #2
 8000a24:	4413      	add	r3, r2
 8000a26:	3304      	adds	r3, #4
 8000a28:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d068      	beq.n	8000b02 <init_key+0x1a6>
      uint16_t usage_consumer_control = get_usage_consumer_control(keyboard_user_config.keymaps[i][row][column]);
 8000a30:	7df9      	ldrb	r1, [r7, #23]
 8000a32:	797a      	ldrb	r2, [r7, #5]
 8000a34:	793b      	ldrb	r3, [r7, #4]
 8000a36:	4839      	ldr	r0, [pc, #228]	@ (8000b1c <init_key+0x1c0>)
 8000a38:	0089      	lsls	r1, r1, #2
 8000a3a:	440a      	add	r2, r1
 8000a3c:	0092      	lsls	r2, r2, #2
 8000a3e:	4413      	add	r3, r2
 8000a40:	3304      	adds	r3, #4
 8000a42:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ff74 	bl	8000934 <get_usage_consumer_control>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	81fb      	strh	r3, [r7, #14]
      if (usage_consumer_control) {
 8000a50:	89fb      	ldrh	r3, [r7, #14]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d011      	beq.n	8000a7a <init_key+0x11e>
        key->layers[i].type = KEY_TYPE_CONSUMER_CONTROL;
 8000a56:	7dfa      	ldrb	r2, [r7, #23]
 8000a58:	6939      	ldr	r1, [r7, #16]
 8000a5a:	4613      	mov	r3, r2
 8000a5c:	005b      	lsls	r3, r3, #1
 8000a5e:	4413      	add	r3, r2
 8000a60:	440b      	add	r3, r1
 8000a62:	3305      	adds	r3, #5
 8000a64:	2203      	movs	r2, #3
 8000a66:	701a      	strb	r2, [r3, #0]
        key->layers[i].value = usage_consumer_control;
 8000a68:	7dfa      	ldrb	r2, [r7, #23]
 8000a6a:	6939      	ldr	r1, [r7, #16]
 8000a6c:	4613      	mov	r3, r2
 8000a6e:	005b      	lsls	r3, r3, #1
 8000a70:	4413      	add	r3, r2
 8000a72:	440b      	add	r3, r1
 8000a74:	89fa      	ldrh	r2, [r7, #14]
 8000a76:	80da      	strh	r2, [r3, #6]
 8000a78:	e043      	b.n	8000b02 <init_key+0x1a6>
      } else {
        uint8_t bitmask = get_bitmask_for_modifier(keyboard_user_config.keymaps[i][row][column]);
 8000a7a:	7df9      	ldrb	r1, [r7, #23]
 8000a7c:	797a      	ldrb	r2, [r7, #5]
 8000a7e:	793b      	ldrb	r3, [r7, #4]
 8000a80:	4826      	ldr	r0, [pc, #152]	@ (8000b1c <init_key+0x1c0>)
 8000a82:	0089      	lsls	r1, r1, #2
 8000a84:	440a      	add	r2, r1
 8000a86:	0092      	lsls	r2, r2, #2
 8000a88:	4413      	add	r3, r2
 8000a8a:	3304      	adds	r3, #4
 8000a8c:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
 8000a90:	b2db      	uxtb	r3, r3
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff ff1a 	bl	80008cc <get_bitmask_for_modifier>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	737b      	strb	r3, [r7, #13]
        if (bitmask) {
 8000a9c:	7b7b      	ldrb	r3, [r7, #13]
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d013      	beq.n	8000aca <init_key+0x16e>
          key->layers[i].type = KEY_TYPE_MODIFIER;
 8000aa2:	7dfa      	ldrb	r2, [r7, #23]
 8000aa4:	6939      	ldr	r1, [r7, #16]
 8000aa6:	4613      	mov	r3, r2
 8000aa8:	005b      	lsls	r3, r3, #1
 8000aaa:	4413      	add	r3, r2
 8000aac:	440b      	add	r3, r1
 8000aae:	3305      	adds	r3, #5
 8000ab0:	2202      	movs	r2, #2
 8000ab2:	701a      	strb	r2, [r3, #0]
          key->layers[i].value = bitmask;
 8000ab4:	7dfa      	ldrb	r2, [r7, #23]
 8000ab6:	7b7b      	ldrb	r3, [r7, #13]
 8000ab8:	b298      	uxth	r0, r3
 8000aba:	6939      	ldr	r1, [r7, #16]
 8000abc:	4613      	mov	r3, r2
 8000abe:	005b      	lsls	r3, r3, #1
 8000ac0:	4413      	add	r3, r2
 8000ac2:	440b      	add	r3, r1
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	80da      	strh	r2, [r3, #6]
 8000ac8:	e01b      	b.n	8000b02 <init_key+0x1a6>
        } else {
          key->layers[i].type = KEY_TYPE_NORMAL;
 8000aca:	7dfa      	ldrb	r2, [r7, #23]
 8000acc:	6939      	ldr	r1, [r7, #16]
 8000ace:	4613      	mov	r3, r2
 8000ad0:	005b      	lsls	r3, r3, #1
 8000ad2:	4413      	add	r3, r2
 8000ad4:	440b      	add	r3, r1
 8000ad6:	3305      	adds	r3, #5
 8000ad8:	2201      	movs	r2, #1
 8000ada:	701a      	strb	r2, [r3, #0]
          key->layers[i].value = keyboard_user_config.keymaps[i][row][column];
 8000adc:	7df8      	ldrb	r0, [r7, #23]
 8000ade:	7979      	ldrb	r1, [r7, #5]
 8000ae0:	793b      	ldrb	r3, [r7, #4]
 8000ae2:	7dfa      	ldrb	r2, [r7, #23]
 8000ae4:	4c0d      	ldr	r4, [pc, #52]	@ (8000b1c <init_key+0x1c0>)
 8000ae6:	0080      	lsls	r0, r0, #2
 8000ae8:	4401      	add	r1, r0
 8000aea:	0089      	lsls	r1, r1, #2
 8000aec:	440b      	add	r3, r1
 8000aee:	3304      	adds	r3, #4
 8000af0:	f834 0013 	ldrh.w	r0, [r4, r3, lsl #1]
 8000af4:	6939      	ldr	r1, [r7, #16]
 8000af6:	4613      	mov	r3, r2
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	4413      	add	r3, r2
 8000afc:	440b      	add	r3, r1
 8000afe:	4602      	mov	r2, r0
 8000b00:	80da      	strh	r2, [r3, #6]
  for (uint8_t i = 0; i < LAYERS_COUNT; i++) {
 8000b02:	7dfb      	ldrb	r3, [r7, #23]
 8000b04:	3301      	adds	r3, #1
 8000b06:	75fb      	strb	r3, [r7, #23]
 8000b08:	7dfb      	ldrb	r3, [r7, #23]
 8000b0a:	2b01      	cmp	r3, #1
 8000b0c:	d983      	bls.n	8000a16 <init_key+0xba>
        }
      }
    }
  }
}
 8000b0e:	bf00      	nop
 8000b10:	bf00      	nop
 8000b12:	371c      	adds	r7, #28
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd90      	pop	{r4, r7, pc}
 8000b18:	200000fc 	.word	0x200000fc
 8000b1c:	20000000 	.word	0x20000000

08000b20 <update_key_state>:

uint8_t update_key_state(struct key *key) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
  struct state state;

  // Get a reading
  state.value = keyboard_user_config.reverse_magnet_pole ? 4095 - keyboard_read_adc() : keyboard_read_adc();
 8000b28:	4ba5      	ldr	r3, [pc, #660]	@ (8000dc0 <update_key_state+0x2a0>)
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d007      	beq.n	8000b40 <update_key_state+0x20>
 8000b30:	f000 fd76 	bl	8001620 <keyboard_read_adc>
 8000b34:	4603      	mov	r3, r0
 8000b36:	f5c3 637f 	rsb	r3, r3, #4080	@ 0xff0
 8000b3a:	330f      	adds	r3, #15
 8000b3c:	b29b      	uxth	r3, r3
 8000b3e:	e002      	b.n	8000b46 <update_key_state+0x26>
 8000b40:	f000 fd6e 	bl	8001620 <keyboard_read_adc>
 8000b44:	4603      	mov	r3, r0
 8000b46:	813b      	strh	r3, [r7, #8]

  if (key->calibration.cycles_count < CALIBRATION_CYCLES) {
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8000b4e:	b29b      	uxth	r3, r3
 8000b50:	2b13      	cmp	r3, #19
 8000b52:	d82f      	bhi.n	8000bb4 <update_key_state+0x94>
    // Calibrate idle value
    float delta = 0.6;
 8000b54:	4b9b      	ldr	r3, [pc, #620]	@ (8000dc4 <update_key_state+0x2a4>)
 8000b56:	617b      	str	r3, [r7, #20]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8000b58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000b5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000b64:	893b      	ldrh	r3, [r7, #8]
 8000b66:	ee07 3a90 	vmov	s15, r3
 8000b6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b6e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	ee07 3a90 	vmov	s15, r3
 8000b7e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000b82:	edd7 7a05 	vldr	s15, [r7, #20]
 8000b86:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000b92:	ee17 3a90 	vmov	r3, s15
 8000b96:	b29a      	uxth	r2, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	f8a3 200d 	strh.w	r2, [r3, #13]
    key->calibration.cycles_count++;
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	f8b3 300b 	ldrh.w	r3, [r3, #11]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	b29a      	uxth	r2, r3
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	f8a3 200b 	strh.w	r2, [r3, #11]

    return 0;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	e101      	b.n	8000db8 <update_key_state+0x298>
  }

  // Calibrate idle value
  if (state.value > key->calibration.idle_value) {
 8000bb4:	893a      	ldrh	r2, [r7, #8]
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	429a      	cmp	r2, r3
 8000bc0:	d929      	bls.n	8000c16 <update_key_state+0xf6>
    // opti possible sur float
    float delta = 0.8;
 8000bc2:	4b81      	ldr	r3, [pc, #516]	@ (8000dc8 <update_key_state+0x2a8>)
 8000bc4:	61fb      	str	r3, [r7, #28]
    key->calibration.idle_value = (1 - delta) * state.value + delta * key->calibration.idle_value;
 8000bc6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000bca:	edd7 7a07 	vldr	s15, [r7, #28]
 8000bce:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000bd2:	893b      	ldrh	r3, [r7, #8]
 8000bd4:	ee07 3a90 	vmov	s15, r3
 8000bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000be6:	b29b      	uxth	r3, r3
 8000be8:	ee07 3a90 	vmov	s15, r3
 8000bec:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8000bf0:	edd7 7a07 	vldr	s15, [r7, #28]
 8000bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bfc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c00:	ee17 3a90 	vmov	r3, s15
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	f8a3 200d 	strh.w	r2, [r3, #13]
    state.value = key->calibration.idle_value;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000c12:	b29b      	uxth	r3, r3
 8000c14:	813b      	strh	r3, [r7, #8]
  }

  // Do nothing if key is idle
  if (key->state.distance == 0 && state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	f8b3 3013 	ldrh.w	r3, [r3, #19]
 8000c1c:	b29b      	uxth	r3, r3
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d117      	bne.n	8000c52 <update_key_state+0x132>
 8000c22:	893b      	ldrh	r3, [r7, #8]
 8000c24:	461a      	mov	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000c2c:	b29b      	uxth	r3, r3
 8000c2e:	3b0a      	subs	r3, #10
 8000c30:	429a      	cmp	r2, r3
 8000c32:	db0e      	blt.n	8000c52 <update_key_state+0x132>
    if (key->idle_counter >= IDLE_CYCLES_UNTIL_SLEEP) {
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	78db      	ldrb	r3, [r3, #3]
 8000c38:	2b0e      	cmp	r3, #14
 8000c3a:	d904      	bls.n	8000c46 <update_key_state+0x126>
      key->is_idle = 1;
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2201      	movs	r2, #1
 8000c40:	711a      	strb	r2, [r3, #4]
      return 0;
 8000c42:	2300      	movs	r3, #0
 8000c44:	e0b8      	b.n	8000db8 <update_key_state+0x298>
    }
    key->idle_counter++;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	78db      	ldrb	r3, [r3, #3]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	b2da      	uxtb	r2, r3
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	70da      	strb	r2, [r3, #3]
  }

  // Get distance from top
  if (state.value >= key->calibration.idle_value - IDLE_VALUE_OFFSET) {
 8000c52:	893b      	ldrh	r3, [r7, #8]
 8000c54:	461a      	mov	r2, r3
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000c5c:	b29b      	uxth	r3, r3
 8000c5e:	3b0a      	subs	r3, #10
 8000c60:	429a      	cmp	r2, r3
 8000c62:	db05      	blt.n	8000c70 <update_key_state+0x150>
    state.distance = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	817b      	strh	r3, [r7, #10]
    key->actuation.direction_changed_point = 0;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	775a      	strb	r2, [r3, #29]
 8000c6e:	e00f      	b.n	8000c90 <update_key_state+0x170>
  } else {
    state.distance = key->calibration.idle_value - IDLE_VALUE_OFFSET - state.value;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	893b      	ldrh	r3, [r7, #8]
 8000c7a:	1ad3      	subs	r3, r2, r3
 8000c7c:	b29b      	uxth	r3, r3
 8000c7e:	3b0a      	subs	r3, #10
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	817b      	strh	r3, [r7, #10]
    key->is_idle = 0;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	711a      	strb	r2, [r3, #4]
    key->idle_counter = 0;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	70da      	strb	r2, [r3, #3]
  }

  // Calibrate max distance value
  if (state.distance > key->calibration.max_distance) {
 8000c90:	897a      	ldrh	r2, [r7, #10]
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	429a      	cmp	r2, r3
 8000c9c:	d903      	bls.n	8000ca6 <update_key_state+0x186>
    key->calibration.max_distance = state.distance;
 8000c9e:	897a      	ldrh	r2, [r7, #10]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f8a3 200f 	strh.w	r2, [r3, #15]
  }

  // Limit max distance
  if (state.distance >= key->calibration.max_distance - MAX_DISTANCE_OFFSET) {
 8000ca6:	897b      	ldrh	r3, [r7, #10]
 8000ca8:	461a      	mov	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8000cb0:	b29b      	uxth	r3, r3
 8000cb2:	3b3c      	subs	r3, #60	@ 0x3c
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	db04      	blt.n	8000cc2 <update_key_state+0x1a2>
    state.distance = key->calibration.max_distance;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	f8b3 300f 	ldrh.w	r3, [r3, #15]
 8000cbe:	b29b      	uxth	r3, r3
 8000cc0:	817b      	strh	r3, [r7, #10]
  }

  // Map distance in percentages
  state.distance_8bits = (state.distance * 0xff) / key->calibration.max_distance;
 8000cc2:	897b      	ldrh	r3, [r7, #10]
 8000cc4:	461a      	mov	r2, r3
 8000cc6:	4613      	mov	r3, r2
 8000cc8:	021b      	lsls	r3, r3, #8
 8000cca:	1a9b      	subs	r3, r3, r2
 8000ccc:	687a      	ldr	r2, [r7, #4]
 8000cce:	f8b2 200f 	ldrh.w	r2, [r2, #15]
 8000cd2:	b292      	uxth	r2, r2
 8000cd4:	fb93 f3f2 	sdiv	r3, r3, r2
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	733b      	strb	r3, [r7, #12]

  float delta = 0.8;
 8000cdc:	4b3a      	ldr	r3, [pc, #232]	@ (8000dc8 <update_key_state+0x2a8>)
 8000cde:	61bb      	str	r3, [r7, #24]
  state.filtered_distance = (1 - delta) * state.distance_8bits + delta * key->state.filtered_distance;
 8000ce0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000ce4:	edd7 7a06 	vldr	s15, [r7, #24]
 8000ce8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000cec:	7b3b      	ldrb	r3, [r7, #12]
 8000cee:	ee07 3a90 	vmov	s15, r3
 8000cf2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cf6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f8d3 3016 	ldr.w	r3, [r3, #22]
 8000d00:	edd7 7a06 	vldr	s15, [r7, #24]
 8000d04:	ee06 3a90 	vmov	s13, r3
 8000d08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000d0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d10:	ee17 3a90 	vmov	r3, s15
 8000d14:	f8c7 300d 	str.w	r3, [r7, #13]
  state.filtered_distance_8bits = state.filtered_distance;
 8000d18:	f8d7 300d 	ldr.w	r3, [r7, #13]
 8000d1c:	ee07 3a90 	vmov	s15, r3
 8000d20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d24:	edc7 7a00 	vstr	s15, [r7]
 8000d28:	783b      	ldrb	r3, [r7, #0]
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	74bb      	strb	r3, [r7, #18]

  // Update velocity
  state.velocity = state.filtered_distance_8bits - key->state.filtered_distance_8bits;
 8000d2e:	7cba      	ldrb	r2, [r7, #18]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	7edb      	ldrb	r3, [r3, #27]
 8000d34:	1ad3      	subs	r3, r2, r3
 8000d36:	b2db      	uxtb	r3, r3
 8000d38:	b25b      	sxtb	r3, r3
 8000d3a:	747b      	strb	r3, [r7, #17]

  // Update direction
  if (key->state.velocity > 0 && state.velocity > 0 && key->actuation.direction != GOING_DOWN) {
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	dd13      	ble.n	8000d6e <update_key_state+0x24e>
 8000d46:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	dd0f      	ble.n	8000d6e <update_key_state+0x24e>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	7f1b      	ldrb	r3, [r3, #28]
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d00b      	beq.n	8000d6e <update_key_state+0x24e>
    key->actuation.direction = GOING_DOWN;
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2201      	movs	r2, #1
 8000d5a:	771a      	strb	r2, [r3, #28]
    if (key->actuation.direction_changed_point != 0) {
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7f5b      	ldrb	r3, [r3, #29]
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d01c      	beq.n	8000d9e <update_key_state+0x27e>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	7eda      	ldrb	r2, [r3, #27]
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	775a      	strb	r2, [r3, #29]
    if (key->actuation.direction_changed_point != 0) {
 8000d6c:	e017      	b.n	8000d9e <update_key_state+0x27e>
    }
  } else if (key->state.velocity < 0 && state.velocity < 0 && key->actuation.direction != GOING_UP) {
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	f993 301a 	ldrsb.w	r3, [r3, #26]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	da12      	bge.n	8000d9e <update_key_state+0x27e>
 8000d78:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	da0e      	bge.n	8000d9e <update_key_state+0x27e>
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	7f1b      	ldrb	r3, [r3, #28]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d00a      	beq.n	8000d9e <update_key_state+0x27e>
    key->actuation.direction = GOING_UP;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	771a      	strb	r2, [r3, #28]
    if (key->actuation.direction_changed_point != 255) {
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	7f5b      	ldrb	r3, [r3, #29]
 8000d92:	2bff      	cmp	r3, #255	@ 0xff
 8000d94:	d003      	beq.n	8000d9e <update_key_state+0x27e>
      key->actuation.direction_changed_point = key->state.filtered_distance_8bits;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	7eda      	ldrb	r2, [r3, #27]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	775a      	strb	r2, [r3, #29]
    }
  }

  key->state = state;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	f103 0211 	add.w	r2, r3, #17
 8000da4:	f107 0308 	add.w	r3, r7, #8
 8000da8:	cb03      	ldmia	r3!, {r0, r1}
 8000daa:	6010      	str	r0, [r2, #0]
 8000dac:	6051      	str	r1, [r2, #4]
 8000dae:	8819      	ldrh	r1, [r3, #0]
 8000db0:	789b      	ldrb	r3, [r3, #2]
 8000db2:	8111      	strh	r1, [r2, #8]
 8000db4:	7293      	strb	r3, [r2, #10]
  return 1;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	3720      	adds	r7, #32
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	3f19999a 	.word	0x3f19999a
 8000dc8:	3f4ccccd 	.word	0x3f4ccccd

08000dcc <update_key_actuation>:

void update_key_actuation(struct key *key) {
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b086      	sub	sp, #24
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
   *
   */

  // if rapid trigger enable, move trigger and reset offsets according to the distance taht began the trigger

  uint32_t now = keyboard_get_time();
 8000dd4:	f000 fc3a 	bl	800164c <keyboard_get_time>
 8000dd8:	6178      	str	r0, [r7, #20]
  uint8_t is_after_trigger_offset = key->state.distance_8bits > key->actuation.trigger_offset;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	7d5a      	ldrb	r2, [r3, #21]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	bf8c      	ite	hi
 8000de8:	2301      	movhi	r3, #1
 8000dea:	2300      	movls	r3, #0
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	74fb      	strb	r3, [r7, #19]
  uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	7d5a      	ldrb	r2, [r3, #21]
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	7fdb      	ldrb	r3, [r3, #31]
 8000df8:	429a      	cmp	r2, r3
 8000dfa:	bf34      	ite	cc
 8000dfc:	2301      	movcc	r3, #1
 8000dfe:	2300      	movcs	r3, #0
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	74bb      	strb	r3, [r7, #18]
  uint8_t has_rapid_trigger = key->actuation.rapid_trigger_offset != 0;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	bf14      	ite	ne
 8000e0e:	2301      	movne	r3, #1
 8000e10:	2300      	moveq	r3, #0
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	747b      	strb	r3, [r7, #17]
  uint8_t is_after_rapid_trigger_offset = key->state.distance_8bits > key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset + keyboard_user_config.reset_threshold;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	7d5b      	ldrb	r3, [r3, #21]
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	7f5b      	ldrb	r3, [r3, #29]
 8000e20:	461a      	mov	r2, r3
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	4a54      	ldr	r2, [pc, #336]	@ (8000f7c <update_key_actuation+0x1b0>)
 8000e2c:	7892      	ldrb	r2, [r2, #2]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4299      	cmp	r1, r3
 8000e32:	bfcc      	ite	gt
 8000e34:	2301      	movgt	r3, #1
 8000e36:	2300      	movle	r3, #0
 8000e38:	b2db      	uxtb	r3, r3
 8000e3a:	743b      	strb	r3, [r7, #16]
  uint8_t is_before_rapid_reset_offset = key->state.distance_8bits < key->actuation.direction_changed_point - key->actuation.rapid_trigger_offset;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	7d5b      	ldrb	r3, [r3, #21]
 8000e40:	461a      	mov	r2, r3
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	7f5b      	ldrb	r3, [r3, #29]
 8000e46:	4619      	mov	r1, r3
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e4e:	1acb      	subs	r3, r1, r3
 8000e50:	429a      	cmp	r2, r3
 8000e52:	bfb4      	ite	lt
 8000e54:	2301      	movlt	r3, #1
 8000e56:	2300      	movge	r3, #0
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	73fb      	strb	r3, [r7, #15]

  switch (key->actuation.status) {
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	7f9b      	ldrb	r3, [r3, #30]
 8000e60:	3b01      	subs	r3, #1
 8000e62:	2b03      	cmp	r3, #3
 8000e64:	d87f      	bhi.n	8000f66 <update_key_actuation+0x19a>
 8000e66:	a201      	add	r2, pc, #4	@ (adr r2, 8000e6c <update_key_actuation+0xa0>)
 8000e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e6c:	08000f1d 	.word	0x08000f1d
 8000e70:	08000f2d 	.word	0x08000f2d
 8000e74:	08000e7d 	.word	0x08000e7d
 8000e78:	08000eb5 	.word	0x08000eb5

  case STATUS_RESET:
    // if reset, can be triggered or tap
    if (is_after_trigger_offset) {
 8000e7c:	7cfb      	ldrb	r3, [r7, #19]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d073      	beq.n	8000f6a <update_key_actuation+0x19e>
      if (key->layers[_TAP_LAYER].value) {
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d003      	beq.n	8000e96 <update_key_actuation+0xca>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	779a      	strb	r2, [r3, #30]
 8000e94:	e009      	b.n	8000eaa <update_key_actuation+0xde>
        // key_triggered = 1;
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	2202      	movs	r2, #2
 8000e9a:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 8000e9c:	4b38      	ldr	r3, [pc, #224]	@ (8000f80 <update_key_actuation+0x1b4>)
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, _BASE_LAYER);
 8000ea2:	2100      	movs	r1, #0
 8000ea4:	6878      	ldr	r0, [r7, #4]
 8000ea6:	f7ff fbeb 	bl	8000680 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	697a      	ldr	r2, [r7, #20]
 8000eae:	f8c3 2023 	str.w	r2, [r3, #35]	@ 0x23
    }
    break;
 8000eb2:	e05a      	b.n	8000f6a <update_key_actuation+0x19e>

  case STATUS_RAPID_TRIGGER_RESET:
    if (!has_rapid_trigger) {
 8000eb4:	7c7b      	ldrb	r3, [r7, #17]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d103      	bne.n	8000ec2 <update_key_actuation+0xf6>
      key->actuation.status = STATUS_RESET;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2203      	movs	r2, #3
 8000ebe:	779a      	strb	r2, [r3, #30]
      break;
 8000ec0:	e058      	b.n	8000f74 <update_key_actuation+0x1a8>
    }
    // if reset, can be triggered or tap
    if (is_after_trigger_offset && key->actuation.direction == GOING_DOWN && is_after_rapid_trigger_offset) {
 8000ec2:	7cfb      	ldrb	r3, [r7, #19]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d022      	beq.n	8000f0e <update_key_actuation+0x142>
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	7f1b      	ldrb	r3, [r3, #28]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d11e      	bne.n	8000f0e <update_key_actuation+0x142>
 8000ed0:	7c3b      	ldrb	r3, [r7, #16]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d01b      	beq.n	8000f0e <update_key_actuation+0x142>
      if (key->layers[_TAP_LAYER].value) {
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	f8b3 3009 	ldrh.w	r3, [r3, #9]
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d006      	beq.n	8000ef0 <update_key_actuation+0x124>
        key->actuation.status = STATUS_MIGHT_BE_TAP;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 8000ee8:	4b25      	ldr	r3, [pc, #148]	@ (8000f80 <update_key_actuation+0x1b4>)
 8000eea:	2201      	movs	r2, #1
 8000eec:	701a      	strb	r2, [r3, #0]
 8000eee:	e009      	b.n	8000f04 <update_key_actuation+0x138>
      } else {
        key->actuation.status = STATUS_TRIGGERED;
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2202      	movs	r2, #2
 8000ef4:	779a      	strb	r2, [r3, #30]
        key_triggered = 1;
 8000ef6:	4b22      	ldr	r3, [pc, #136]	@ (8000f80 <update_key_actuation+0x1b4>)
 8000ef8:	2201      	movs	r2, #1
 8000efa:	701a      	strb	r2, [r3, #0]
        hid_press_key(key, _BASE_LAYER);
 8000efc:	2100      	movs	r1, #0
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff fbbe 	bl	8000680 <hid_press_key>
      }
      key->actuation.triggered_at = now;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	697a      	ldr	r2, [r7, #20]
 8000f08:	f8c3 2023 	str.w	r2, [r3, #35]	@ 0x23
    } else if (is_before_reset_offset) {
      key->actuation.status = STATUS_RESET;
    }
    break;
 8000f0c:	e02f      	b.n	8000f6e <update_key_actuation+0x1a2>
    } else if (is_before_reset_offset) {
 8000f0e:	7cbb      	ldrb	r3, [r7, #18]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d02c      	beq.n	8000f6e <update_key_actuation+0x1a2>
      key->actuation.status = STATUS_RESET;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2203      	movs	r2, #3
 8000f18:	779a      	strb	r2, [r3, #30]
    break;
 8000f1a:	e028      	b.n	8000f6e <update_key_actuation+0x1a2>

  case STATUS_TAP:
    // if tap, can be reset
    key->actuation.status = STATUS_RESET;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2203      	movs	r2, #3
 8000f20:	779a      	strb	r2, [r3, #30]
    hid_release_key(key, _TAP_LAYER);
 8000f22:	2101      	movs	r1, #1
 8000f24:	6878      	ldr	r0, [r7, #4]
 8000f26:	f7ff fc15 	bl	8000754 <hid_release_key>
    break;
 8000f2a:	e023      	b.n	8000f74 <update_key_actuation+0x1a8>

  case STATUS_TRIGGERED:
    // if triggered, can be reset
    if (is_before_reset_offset) {
 8000f2c:	7cbb      	ldrb	r3, [r7, #18]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d007      	beq.n	8000f42 <update_key_actuation+0x176>
      key->actuation.status = STATUS_RESET;
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	2203      	movs	r2, #3
 8000f36:	779a      	strb	r2, [r3, #30]
      hid_release_key(key, _BASE_LAYER);
 8000f38:	2100      	movs	r1, #0
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f7ff fc0a 	bl	8000754 <hid_release_key>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
      hid_release_key(key, _BASE_LAYER);
    }
    break;
 8000f40:	e017      	b.n	8000f72 <update_key_actuation+0x1a6>
    } else if (has_rapid_trigger && key->actuation.direction == GOING_UP && is_before_rapid_reset_offset) {
 8000f42:	7c7b      	ldrb	r3, [r7, #17]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d014      	beq.n	8000f72 <update_key_actuation+0x1a6>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	7f1b      	ldrb	r3, [r3, #28]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d110      	bne.n	8000f72 <update_key_actuation+0x1a6>
 8000f50:	7bfb      	ldrb	r3, [r7, #15]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d00d      	beq.n	8000f72 <update_key_actuation+0x1a6>
      key->actuation.status = STATUS_RAPID_TRIGGER_RESET;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	2204      	movs	r2, #4
 8000f5a:	779a      	strb	r2, [r3, #30]
      hid_release_key(key, _BASE_LAYER);
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f7ff fbf8 	bl	8000754 <hid_release_key>
    break;
 8000f64:	e005      	b.n	8000f72 <update_key_actuation+0x1a6>

  default:
    break;
 8000f66:	bf00      	nop
 8000f68:	e004      	b.n	8000f74 <update_key_actuation+0x1a8>
    break;
 8000f6a:	bf00      	nop
 8000f6c:	e002      	b.n	8000f74 <update_key_actuation+0x1a8>
    break;
 8000f6e:	bf00      	nop
 8000f70:	e000      	b.n	8000f74 <update_key_actuation+0x1a8>
    break;
 8000f72:	bf00      	nop
  }
}
 8000f74:	bf00      	nop
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}
 8000f7c:	20000000 	.word	0x20000000
 8000f80:	20000370 	.word	0x20000370

08000f84 <update_key>:

void update_key(struct key *key) {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  if (!update_key_state(key)) {
 8000f8c:	6878      	ldr	r0, [r7, #4]
 8000f8e:	f7ff fdc7 	bl	8000b20 <update_key_state>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d003      	beq.n	8000fa0 <update_key+0x1c>
    return;
  }

  update_key_actuation(key);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff17 	bl	8000dcc <update_key_actuation>
 8000f9e:	e000      	b.n	8000fa2 <update_key+0x1e>
    return;
 8000fa0:	bf00      	nop
}
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <keyboard_init_keys>:

void keyboard_init_keys() {
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0

  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8000fae:	2300      	movs	r3, #0
 8000fb0:	71fb      	strb	r3, [r7, #7]
 8000fb2:	e027      	b.n	8001004 <keyboard_init_keys+0x5c>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	71bb      	strb	r3, [r7, #6]
 8000fb8:	e01e      	b.n	8000ff8 <keyboard_init_keys+0x50>
      if (channels_by_row_col[row][col][0] != XXXX) {
 8000fba:	79fa      	ldrb	r2, [r7, #7]
 8000fbc:	79bb      	ldrb	r3, [r7, #6]
 8000fbe:	4915      	ldr	r1, [pc, #84]	@ (8001014 <keyboard_init_keys+0x6c>)
 8000fc0:	0092      	lsls	r2, r2, #2
 8000fc2:	4413      	add	r3, r2
 8000fc4:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 8000fc8:	2bff      	cmp	r3, #255	@ 0xff
 8000fca:	d012      	beq.n	8000ff2 <keyboard_init_keys+0x4a>
        init_key(channels_by_row_col[row][col][0], channels_by_row_col[row][col][1], row, col);
 8000fcc:	79fa      	ldrb	r2, [r7, #7]
 8000fce:	79bb      	ldrb	r3, [r7, #6]
 8000fd0:	4910      	ldr	r1, [pc, #64]	@ (8001014 <keyboard_init_keys+0x6c>)
 8000fd2:	0092      	lsls	r2, r2, #2
 8000fd4:	4413      	add	r3, r2
 8000fd6:	f811 0013 	ldrb.w	r0, [r1, r3, lsl #1]
 8000fda:	79fa      	ldrb	r2, [r7, #7]
 8000fdc:	79bb      	ldrb	r3, [r7, #6]
 8000fde:	490d      	ldr	r1, [pc, #52]	@ (8001014 <keyboard_init_keys+0x6c>)
 8000fe0:	0092      	lsls	r2, r2, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	440b      	add	r3, r1
 8000fe8:	7859      	ldrb	r1, [r3, #1]
 8000fea:	79bb      	ldrb	r3, [r7, #6]
 8000fec:	79fa      	ldrb	r2, [r7, #7]
 8000fee:	f7ff fcb5 	bl	800095c <init_key>
    for (uint8_t col = 0; col < MATRIX_COLS; col++) {
 8000ff2:	79bb      	ldrb	r3, [r7, #6]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	71bb      	strb	r3, [r7, #6]
 8000ff8:	79bb      	ldrb	r3, [r7, #6]
 8000ffa:	2b03      	cmp	r3, #3
 8000ffc:	d9dd      	bls.n	8000fba <keyboard_init_keys+0x12>
  for (uint8_t row = 0; row < MATRIX_ROWS; row++) {
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	3301      	adds	r3, #1
 8001002:	71fb      	strb	r3, [r7, #7]
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	2b03      	cmp	r3, #3
 8001008:	d9d4      	bls.n	8000fb4 <keyboard_init_keys+0xc>
      }
    }
  }
}
 800100a:	bf00      	nop
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	0800a644 	.word	0x0800a644

08001018 <keyboard_task>:

void keyboard_task() {
 8001018:	b580      	push	{r7, lr}
 800101a:	b084      	sub	sp, #16
 800101c:	af00      	add	r7, sp, #0
  uint32_t started_at = keyboard_get_time();
 800101e:	f000 fb15 	bl	800164c <keyboard_get_time>
 8001022:	60b8      	str	r0, [r7, #8]
  key_triggered = 0;
 8001024:	4b64      	ldr	r3, [pc, #400]	@ (80011b8 <keyboard_task+0x1a0>)
 8001026:	2200      	movs	r2, #0
 8001028:	701a      	strb	r2, [r3, #0]

  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800102a:	2300      	movs	r3, #0
 800102c:	73fb      	strb	r3, [r7, #15]
 800102e:	e039      	b.n	80010a4 <keyboard_task+0x8c>
    keyboard_select_amux(amux_channel);
 8001030:	7bfb      	ldrb	r3, [r7, #15]
 8001032:	4618      	mov	r0, r3
 8001034:	f000 fab0 	bl	8001598 <keyboard_select_amux>

    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8001038:	2300      	movs	r3, #0
 800103a:	73bb      	strb	r3, [r7, #14]
 800103c:	e02c      	b.n	8001098 <keyboard_task+0x80>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0) {
 800103e:	7bb9      	ldrb	r1, [r7, #14]
 8001040:	7bfa      	ldrb	r2, [r7, #15]
 8001042:	485e      	ldr	r0, [pc, #376]	@ (80011bc <keyboard_task+0x1a4>)
 8001044:	4613      	mov	r3, r2
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	4413      	add	r3, r2
 800104a:	00db      	lsls	r3, r3, #3
 800104c:	1a9b      	subs	r3, r3, r2
 800104e:	f44f 721c 	mov.w	r2, #624	@ 0x270
 8001052:	fb01 f202 	mul.w	r2, r1, r2
 8001056:	4413      	add	r3, r2
 8001058:	4403      	add	r3, r0
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d017      	beq.n	8001090 <keyboard_task+0x78>
        continue;
      }
      keyboard_select_adc(adc_channel);
 8001060:	7bbb      	ldrb	r3, [r7, #14]
 8001062:	4618      	mov	r0, r3
 8001064:	f000 fac0 	bl	80015e8 <keyboard_select_adc>

      update_key(&keyboard_keys[adc_channel][amux_channel]);
 8001068:	7bb9      	ldrb	r1, [r7, #14]
 800106a:	7bfa      	ldrb	r2, [r7, #15]
 800106c:	4613      	mov	r3, r2
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	4413      	add	r3, r2
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	1a9b      	subs	r3, r3, r2
 8001076:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800107a:	fb01 f202 	mul.w	r2, r1, r2
 800107e:	4413      	add	r3, r2
 8001080:	4a4e      	ldr	r2, [pc, #312]	@ (80011bc <keyboard_task+0x1a4>)
 8001082:	4413      	add	r3, r2
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff7d 	bl	8000f84 <update_key>

      keyboard_close_adc();
 800108a:	f000 fad5 	bl	8001638 <keyboard_close_adc>
 800108e:	e000      	b.n	8001092 <keyboard_task+0x7a>
        continue;
 8001090:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8001092:	7bbb      	ldrb	r3, [r7, #14]
 8001094:	3301      	adds	r3, #1
 8001096:	73bb      	strb	r3, [r7, #14]
 8001098:	7bbb      	ldrb	r3, [r7, #14]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d0cf      	beq.n	800103e <keyboard_task+0x26>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	3301      	adds	r3, #1
 80010a2:	73fb      	strb	r3, [r7, #15]
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	2b0f      	cmp	r3, #15
 80010a8:	d9c2      	bls.n	8001030 <keyboard_task+0x18>
    }
  }

  // If a key might be tap and a non tap key has been triggered, then the might be tap key is a normal trigger
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 80010aa:	2300      	movs	r3, #0
 80010ac:	737b      	strb	r3, [r7, #13]
 80010ae:	e074      	b.n	800119a <keyboard_task+0x182>
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 80010b0:	2300      	movs	r3, #0
 80010b2:	733b      	strb	r3, [r7, #12]
 80010b4:	e06b      	b.n	800118e <keyboard_task+0x176>
      if (keyboard_keys[adc_channel][amux_channel].is_enabled == 0 || keyboard_keys[adc_channel][amux_channel].actuation.status != STATUS_MIGHT_BE_TAP) {
 80010b6:	7b39      	ldrb	r1, [r7, #12]
 80010b8:	7b7a      	ldrb	r2, [r7, #13]
 80010ba:	4840      	ldr	r0, [pc, #256]	@ (80011bc <keyboard_task+0x1a4>)
 80010bc:	4613      	mov	r3, r2
 80010be:	009b      	lsls	r3, r3, #2
 80010c0:	4413      	add	r3, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	1a9b      	subs	r3, r3, r2
 80010c6:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80010ca:	fb01 f202 	mul.w	r2, r1, r2
 80010ce:	4413      	add	r3, r2
 80010d0:	4403      	add	r3, r0
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d056      	beq.n	8001186 <keyboard_task+0x16e>
 80010d8:	7b39      	ldrb	r1, [r7, #12]
 80010da:	7b7a      	ldrb	r2, [r7, #13]
 80010dc:	4837      	ldr	r0, [pc, #220]	@ (80011bc <keyboard_task+0x1a4>)
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	00db      	lsls	r3, r3, #3
 80010e6:	1a9b      	subs	r3, r3, r2
 80010e8:	f44f 721c 	mov.w	r2, #624	@ 0x270
 80010ec:	fb01 f202 	mul.w	r2, r1, r2
 80010f0:	4413      	add	r3, r2
 80010f2:	4403      	add	r3, r0
 80010f4:	331e      	adds	r3, #30
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d144      	bne.n	8001186 <keyboard_task+0x16e>
        continue;
      }

      struct key *key = &keyboard_keys[adc_channel][amux_channel];
 80010fc:	7b39      	ldrb	r1, [r7, #12]
 80010fe:	7b7a      	ldrb	r2, [r7, #13]
 8001100:	4613      	mov	r3, r2
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	4413      	add	r3, r2
 8001106:	00db      	lsls	r3, r3, #3
 8001108:	1a9b      	subs	r3, r3, r2
 800110a:	f44f 721c 	mov.w	r2, #624	@ 0x270
 800110e:	fb01 f202 	mul.w	r2, r1, r2
 8001112:	4413      	add	r3, r2
 8001114:	4a29      	ldr	r2, [pc, #164]	@ (80011bc <keyboard_task+0x1a4>)
 8001116:	4413      	add	r3, r2
 8001118:	607b      	str	r3, [r7, #4]
      uint8_t is_before_reset_offset = key->state.distance_8bits < key->actuation.reset_offset;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	7d5a      	ldrb	r2, [r3, #21]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	7fdb      	ldrb	r3, [r3, #31]
 8001122:	429a      	cmp	r2, r3
 8001124:	bf34      	ite	cc
 8001126:	2301      	movcc	r3, #1
 8001128:	2300      	movcs	r3, #0
 800112a:	b2db      	uxtb	r3, r3
 800112c:	70fb      	strb	r3, [r7, #3]
      uint8_t is_before_timeout = keyboard_get_time() - key->actuation.triggered_at <= keyboard_user_config.tap_timeout;
 800112e:	f000 fa8d 	bl	800164c <keyboard_get_time>
 8001132:	4602      	mov	r2, r0
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	f8d3 3023 	ldr.w	r3, [r3, #35]	@ 0x23
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	4a20      	ldr	r2, [pc, #128]	@ (80011c0 <keyboard_task+0x1a8>)
 800113e:	88d2      	ldrh	r2, [r2, #6]
 8001140:	4293      	cmp	r3, r2
 8001142:	bf94      	ite	ls
 8001144:	2301      	movls	r3, #1
 8001146:	2300      	movhi	r3, #0
 8001148:	b2db      	uxtb	r3, r3
 800114a:	70bb      	strb	r3, [r7, #2]

      // if might be tap, can be tap or triggered
      if (is_before_reset_offset && is_before_timeout) {
 800114c:	78fb      	ldrb	r3, [r7, #3]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d00a      	beq.n	8001168 <keyboard_task+0x150>
 8001152:	78bb      	ldrb	r3, [r7, #2]
 8001154:	2b00      	cmp	r3, #0
 8001156:	d007      	beq.n	8001168 <keyboard_task+0x150>
        key->actuation.status = STATUS_TAP;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2201      	movs	r2, #1
 800115c:	779a      	strb	r2, [r3, #30]
        hid_press_key(key, _TAP_LAYER);
 800115e:	2101      	movs	r1, #1
 8001160:	6878      	ldr	r0, [r7, #4]
 8001162:	f7ff fa8d 	bl	8000680 <hid_press_key>
 8001166:	e00f      	b.n	8001188 <keyboard_task+0x170>
      } else if (!is_before_timeout || key_triggered) {
 8001168:	78bb      	ldrb	r3, [r7, #2]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d003      	beq.n	8001176 <keyboard_task+0x15e>
 800116e:	4b12      	ldr	r3, [pc, #72]	@ (80011b8 <keyboard_task+0x1a0>)
 8001170:	781b      	ldrb	r3, [r3, #0]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d008      	beq.n	8001188 <keyboard_task+0x170>
        key->actuation.status = STATUS_TRIGGERED;
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2202      	movs	r2, #2
 800117a:	779a      	strb	r2, [r3, #30]
        hid_press_key(key, _BASE_LAYER);
 800117c:	2100      	movs	r1, #0
 800117e:	6878      	ldr	r0, [r7, #4]
 8001180:	f7ff fa7e 	bl	8000680 <hid_press_key>
 8001184:	e000      	b.n	8001188 <keyboard_task+0x170>
        continue;
 8001186:	bf00      	nop
    for (uint8_t adc_channel = 0; adc_channel < ADC_CHANNEL_COUNT; adc_channel++) {
 8001188:	7b3b      	ldrb	r3, [r7, #12]
 800118a:	3301      	adds	r3, #1
 800118c:	733b      	strb	r3, [r7, #12]
 800118e:	7b3b      	ldrb	r3, [r7, #12]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d090      	beq.n	80010b6 <keyboard_task+0x9e>
  for (uint8_t amux_channel = 0; amux_channel < AMUX_CHANNEL_COUNT; amux_channel++) {
 8001194:	7b7b      	ldrb	r3, [r7, #13]
 8001196:	3301      	adds	r3, #1
 8001198:	737b      	strb	r3, [r7, #13]
 800119a:	7b7b      	ldrb	r3, [r7, #13]
 800119c:	2b0f      	cmp	r3, #15
 800119e:	d987      	bls.n	80010b0 <keyboard_task+0x98>
      }
    }
  }

  keyboard_last_cycle_duration = keyboard_get_time() - started_at;
 80011a0:	f000 fa54 	bl	800164c <keyboard_get_time>
 80011a4:	4602      	mov	r2, r0
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	1ad3      	subs	r3, r2, r3
 80011aa:	4a06      	ldr	r2, [pc, #24]	@ (80011c4 <keyboard_task+0x1ac>)
 80011ac:	6013      	str	r3, [r2, #0]
}
 80011ae:	bf00      	nop
 80011b0:	3710      	adds	r7, #16
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	bf00      	nop
 80011b8:	20000370 	.word	0x20000370
 80011bc:	200000fc 	.word	0x200000fc
 80011c0:	20000000 	.word	0x20000000
 80011c4:	2000036c 	.word	0x2000036c

080011c8 <cdc_task>:
/* USER CODE BEGIN 0 */

static uint32_t last_output_time = 0;
static uint32_t second_counter = 0;

static void cdc_task(void) {
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b08c      	sub	sp, #48	@ 0x30
 80011cc:	af00      	add	r7, sp, #0
void tud_task_ext(uint32_t timeout_ms, bool in_isr);

// Task function should be called in main/rtos loop
TU_ATTR_ALWAYS_INLINE static inline
void tud_task (void) {
  tud_task_ext(UINT32_MAX, false);
 80011ce:	2100      	movs	r1, #0
 80011d0:	f04f 30ff 	mov.w	r0, #4294967295
 80011d4:	f004 ff3a 	bl	800604c <tud_task_ext>
}
 80011d8:	bf00      	nop
    tud_task();

    // Get current time in milliseconds (implementation depends on your system)
    uint32_t current_time = board_millis(); // or your system's millisecond function
 80011da:	f000 fb4d 	bl	8001878 <board_millis>
 80011de:	4603      	mov	r3, r0
 80011e0:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Check if one second has passed
    if (current_time - last_output_time >= 1000) {
 80011e2:	4b22      	ldr	r3, [pc, #136]	@ (800126c <cdc_task+0xa4>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011ee:	d338      	bcc.n	8001262 <cdc_task+0x9a>
        char output_string[32];
        snprintf(output_string, sizeof(output_string), "Hello %lu\r\n", second_counter);
 80011f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001270 <cdc_task+0xa8>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4638      	mov	r0, r7
 80011f6:	4a1f      	ldr	r2, [pc, #124]	@ (8001274 <cdc_task+0xac>)
 80011f8:	2120      	movs	r1, #32
 80011fa:	f008 fd1d 	bl	8009c38 <sniprintf>

        // Output to all connected CDC interfaces
        uint8_t itf;
        for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 80011fe:	2300      	movs	r3, #0
 8001200:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001204:	e021      	b.n	800124a <cdc_task+0x82>
            if (tud_cdc_n_connected(itf)) {
 8001206:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800120a:	4618      	mov	r0, r3
 800120c:	f002 fdea 	bl	8003de4 <tud_cdc_n_connected>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d014      	beq.n	8001240 <cdc_task+0x78>
 8001216:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800121a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800121e:	463b      	mov	r3, r7
 8001220:	623b      	str	r3, [r7, #32]
  return tud_cdc_n_write(itf, str, strlen(str));
 8001222:	6a38      	ldr	r0, [r7, #32]
 8001224:	f7fe ffdc 	bl	80001e0 <strlen>
 8001228:	4602      	mov	r2, r0
 800122a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800122e:	6a39      	ldr	r1, [r7, #32]
 8001230:	4618      	mov	r0, r3
 8001232:	f002 fe15 	bl	8003e60 <tud_cdc_n_write>
                tud_cdc_n_write_str(itf, output_string);
                tud_cdc_n_write_flush(itf);
 8001236:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800123a:	4618      	mov	r0, r3
 800123c:	f002 fe44 	bl	8003ec8 <tud_cdc_n_write_flush>
        for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8001240:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001244:	3301      	adds	r3, #1
 8001246:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800124a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800124e:	2b00      	cmp	r3, #0
 8001250:	d0d9      	beq.n	8001206 <cdc_task+0x3e>
            }
        }
        second_counter++;
 8001252:	4b07      	ldr	r3, [pc, #28]	@ (8001270 <cdc_task+0xa8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	3301      	adds	r3, #1
 8001258:	4a05      	ldr	r2, [pc, #20]	@ (8001270 <cdc_task+0xa8>)
 800125a:	6013      	str	r3, [r2, #0]
        last_output_time = current_time;
 800125c:	4a03      	ldr	r2, [pc, #12]	@ (800126c <cdc_task+0xa4>)
 800125e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001260:	6013      	str	r3, [r2, #0]
    }

}
 8001262:	bf00      	nop
 8001264:	3730      	adds	r7, #48	@ 0x30
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000904 	.word	0x20000904
 8001270:	20000908 	.word	0x20000908
 8001274:	0800a5e0 	.word	0x0800a5e0

08001278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800127c:	f000 fc72 	bl	8001b64 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001280:	f000 f822 	bl	80012c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001284:	f000 f936 	bl	80014f4 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001288:	f000 f886 	bl	8001398 <MX_ADC1_Init>
  MX_USB_OTG_FS_PCD_Init();
 800128c:	f000 f904 	bl	8001498 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8001290:	f000 f8d4 	bl	800143c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  ADC_channel_Config.Rank = 1;
 8001294:	4b0b      	ldr	r3, [pc, #44]	@ (80012c4 <main+0x4c>)
 8001296:	2201      	movs	r2, #1
 8001298:	605a      	str	r2, [r3, #4]
  ADC_channel_Config.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800129a:	4b0a      	ldr	r3, [pc, #40]	@ (80012c4 <main+0x4c>)
 800129c:	2200      	movs	r2, #0
 800129e:	609a      	str	r2, [r3, #8]
  keyboard_init_keys();
 80012a0:	f7ff fe82 	bl	8000fa8 <keyboard_init_keys>

  hid_init();
 80012a4:	f7ff f98a 	bl	80005bc <hid_init>
  tud_task_ext(UINT32_MAX, false);
 80012a8:	2100      	movs	r1, #0
 80012aa:	f04f 30ff 	mov.w	r0, #4294967295
 80012ae:	f004 fecd 	bl	800604c <tud_task_ext>
}
 80012b2:	bf00      	nop
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
    // MARK: Main loop
	tud_task();
    keyboard_task();
 80012b4:	f7ff feb0 	bl	8001018 <keyboard_task>
    hid_task();
 80012b8:	f7ff f992 	bl	80005e0 <hid_task>
    cdc_task();
 80012bc:	f7ff ff84 	bl	80011c8 <cdc_task>
	tud_task();
 80012c0:	bf00      	nop
 80012c2:	e7f1      	b.n	80012a8 <main+0x30>
 80012c4:	200008f4 	.word	0x200008f4

080012c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b094      	sub	sp, #80	@ 0x50
 80012cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ce:	f107 0320 	add.w	r3, r7, #32
 80012d2:	2230      	movs	r2, #48	@ 0x30
 80012d4:	2100      	movs	r1, #0
 80012d6:	4618      	mov	r0, r3
 80012d8:	f008 fce4 	bl	8009ca4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012dc:	f107 030c 	add.w	r3, r7, #12
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012ec:	2300      	movs	r3, #0
 80012ee:	60bb      	str	r3, [r7, #8]
 80012f0:	4b27      	ldr	r3, [pc, #156]	@ (8001390 <SystemClock_Config+0xc8>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f4:	4a26      	ldr	r2, [pc, #152]	@ (8001390 <SystemClock_Config+0xc8>)
 80012f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80012fc:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <SystemClock_Config+0xc8>)
 80012fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001300:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001308:	2300      	movs	r3, #0
 800130a:	607b      	str	r3, [r7, #4]
 800130c:	4b21      	ldr	r3, [pc, #132]	@ (8001394 <SystemClock_Config+0xcc>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	4a20      	ldr	r2, [pc, #128]	@ (8001394 <SystemClock_Config+0xcc>)
 8001312:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001316:	6013      	str	r3, [r2, #0]
 8001318:	4b1e      	ldr	r3, [pc, #120]	@ (8001394 <SystemClock_Config+0xcc>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001324:	2301      	movs	r3, #1
 8001326:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001328:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800132c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132e:	2302      	movs	r3, #2
 8001330:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001332:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001336:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 13;
 8001338:	230d      	movs	r3, #13
 800133a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800133c:	23a8      	movs	r3, #168	@ 0xa8
 800133e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001340:	2304      	movs	r3, #4
 8001342:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001344:	2307      	movs	r3, #7
 8001346:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001348:	f107 0320 	add.w	r3, r7, #32
 800134c:	4618      	mov	r0, r3
 800134e:	f001 fd95 	bl	8002e7c <HAL_RCC_OscConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001358:	f000 f97f 	bl	800165a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800135c:	230f      	movs	r3, #15
 800135e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001360:	2302      	movs	r3, #2
 8001362:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001368:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800136c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800136e:	2300      	movs	r3, #0
 8001370:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001372:	f107 030c 	add.w	r3, r7, #12
 8001376:	2102      	movs	r1, #2
 8001378:	4618      	mov	r0, r3
 800137a:	f001 fff7 	bl	800336c <HAL_RCC_ClockConfig>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001384:	f000 f969 	bl	800165a <Error_Handler>
  }
}
 8001388:	bf00      	nop
 800138a:	3750      	adds	r7, #80	@ 0x50
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40023800 	.word	0x40023800
 8001394:	40007000 	.word	0x40007000

08001398 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800139e:	463b      	mov	r3, r7
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013aa:	4b21      	ldr	r3, [pc, #132]	@ (8001430 <MX_ADC1_Init+0x98>)
 80013ac:	4a21      	ldr	r2, [pc, #132]	@ (8001434 <MX_ADC1_Init+0x9c>)
 80013ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001430 <MX_ADC1_Init+0x98>)
 80013b2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001430 <MX_ADC1_Init+0x98>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013be:	4b1c      	ldr	r3, [pc, #112]	@ (8001430 <MX_ADC1_Init+0x98>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001430 <MX_ADC1_Init+0x98>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013ca:	4b19      	ldr	r3, [pc, #100]	@ (8001430 <MX_ADC1_Init+0x98>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013d2:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <MX_ADC1_Init+0x98>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d8:	4b15      	ldr	r3, [pc, #84]	@ (8001430 <MX_ADC1_Init+0x98>)
 80013da:	4a17      	ldr	r2, [pc, #92]	@ (8001438 <MX_ADC1_Init+0xa0>)
 80013dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013de:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <MX_ADC1_Init+0x98>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <MX_ADC1_Init+0x98>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <MX_ADC1_Init+0x98>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013f2:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <MX_ADC1_Init+0x98>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013f8:	480d      	ldr	r0, [pc, #52]	@ (8001430 <MX_ADC1_Init+0x98>)
 80013fa:	f000 fc49 	bl	8001c90 <HAL_ADC_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001404:	f000 f929 	bl	800165a <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001408:	2309      	movs	r3, #9
 800140a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800140c:	2301      	movs	r3, #1
 800140e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001410:	2300      	movs	r3, #0
 8001412:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	4805      	ldr	r0, [pc, #20]	@ (8001430 <MX_ADC1_Init+0x98>)
 800141a:	f000 fdfd 	bl	8002018 <HAL_ADC_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001424:	f000 f919 	bl	800165a <Error_Handler>

  // memcpy(&ADC_channel_Config, &sConfig, sizeof(ADC_ChannelConfTypeDef));

  /* USER CODE END ADC1_Init 2 */

}
 8001428:	bf00      	nop
 800142a:	3710      	adds	r7, #16
 800142c:	46bd      	mov	sp, r7
 800142e:	bd80      	pop	{r7, pc}
 8001430:	20000374 	.word	0x20000374
 8001434:	40012000 	.word	0x40012000
 8001438:	0f000001 	.word	0x0f000001

0800143c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001440:	4b12      	ldr	r3, [pc, #72]	@ (800148c <MX_I2C1_Init+0x50>)
 8001442:	4a13      	ldr	r2, [pc, #76]	@ (8001490 <MX_I2C1_Init+0x54>)
 8001444:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001446:	4b11      	ldr	r3, [pc, #68]	@ (800148c <MX_I2C1_Init+0x50>)
 8001448:	4a12      	ldr	r2, [pc, #72]	@ (8001494 <MX_I2C1_Init+0x58>)
 800144a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800144c:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <MX_I2C1_Init+0x50>)
 800144e:	2200      	movs	r2, #0
 8001450:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001452:	4b0e      	ldr	r3, [pc, #56]	@ (800148c <MX_I2C1_Init+0x50>)
 8001454:	2200      	movs	r2, #0
 8001456:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001458:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <MX_I2C1_Init+0x50>)
 800145a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800145e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001460:	4b0a      	ldr	r3, [pc, #40]	@ (800148c <MX_I2C1_Init+0x50>)
 8001462:	2200      	movs	r2, #0
 8001464:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001466:	4b09      	ldr	r3, [pc, #36]	@ (800148c <MX_I2C1_Init+0x50>)
 8001468:	2200      	movs	r2, #0
 800146a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800146c:	4b07      	ldr	r3, [pc, #28]	@ (800148c <MX_I2C1_Init+0x50>)
 800146e:	2200      	movs	r2, #0
 8001470:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001472:	4b06      	ldr	r3, [pc, #24]	@ (800148c <MX_I2C1_Init+0x50>)
 8001474:	2200      	movs	r2, #0
 8001476:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001478:	4804      	ldr	r0, [pc, #16]	@ (800148c <MX_I2C1_Init+0x50>)
 800147a:	f001 faab 	bl	80029d4 <HAL_I2C_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d001      	beq.n	8001488 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001484:	f000 f8e9 	bl	800165a <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001488:	bf00      	nop
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200003bc 	.word	0x200003bc
 8001490:	40005400 	.word	0x40005400
 8001494:	000186a0 	.word	0x000186a0

08001498 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800149c:	4b14      	ldr	r3, [pc, #80]	@ (80014f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800149e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80014a2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80014a4:	4b12      	ldr	r3, [pc, #72]	@ (80014f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014a6:	2204      	movs	r2, #4
 80014a8:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80014aa:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ac:	2202      	movs	r2, #2
 80014ae:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80014b0:	4b0f      	ldr	r3, [pc, #60]	@ (80014f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80014b6:	4b0e      	ldr	r3, [pc, #56]	@ (80014f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014b8:	2202      	movs	r2, #2
 80014ba:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80014bc:	4b0c      	ldr	r3, [pc, #48]	@ (80014f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014be:	2200      	movs	r2, #0
 80014c0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80014c2:	4b0b      	ldr	r3, [pc, #44]	@ (80014f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80014c8:	4b09      	ldr	r3, [pc, #36]	@ (80014f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80014ce:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80014d4:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80014da:	4805      	ldr	r0, [pc, #20]	@ (80014f0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80014dc:	f001 fbbe 	bl	8002c5c <HAL_PCD_Init>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80014e6:	f000 f8b8 	bl	800165a <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80014ea:	bf00      	nop
 80014ec:	bd80      	pop	{r7, pc}
 80014ee:	bf00      	nop
 80014f0:	20000410 	.word	0x20000410

080014f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b088      	sub	sp, #32
 80014f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fa:	f107 030c 	add.w	r3, r7, #12
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]
 8001506:	60da      	str	r2, [r3, #12]
 8001508:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800150a:	2300      	movs	r3, #0
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	4b20      	ldr	r3, [pc, #128]	@ (8001590 <MX_GPIO_Init+0x9c>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001512:	4a1f      	ldr	r2, [pc, #124]	@ (8001590 <MX_GPIO_Init+0x9c>)
 8001514:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001518:	6313      	str	r3, [r2, #48]	@ 0x30
 800151a:	4b1d      	ldr	r3, [pc, #116]	@ (8001590 <MX_GPIO_Init+0x9c>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
 800152a:	4b19      	ldr	r3, [pc, #100]	@ (8001590 <MX_GPIO_Init+0x9c>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152e:	4a18      	ldr	r2, [pc, #96]	@ (8001590 <MX_GPIO_Init+0x9c>)
 8001530:	f043 0302 	orr.w	r3, r3, #2
 8001534:	6313      	str	r3, [r2, #48]	@ 0x30
 8001536:	4b16      	ldr	r3, [pc, #88]	@ (8001590 <MX_GPIO_Init+0x9c>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	607b      	str	r3, [r7, #4]
 8001540:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	603b      	str	r3, [r7, #0]
 8001546:	4b12      	ldr	r3, [pc, #72]	@ (8001590 <MX_GPIO_Init+0x9c>)
 8001548:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800154a:	4a11      	ldr	r2, [pc, #68]	@ (8001590 <MX_GPIO_Init+0x9c>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	6313      	str	r3, [r2, #48]	@ 0x30
 8001552:	4b0f      	ldr	r3, [pc, #60]	@ (8001590 <MX_GPIO_Init+0x9c>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	f003 0301 	and.w	r3, r3, #1
 800155a:	603b      	str	r3, [r7, #0]
 800155c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800155e:	2200      	movs	r2, #0
 8001560:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001564:	480b      	ldr	r0, [pc, #44]	@ (8001594 <MX_GPIO_Init+0xa0>)
 8001566:	f001 fa1b 	bl	80029a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800156a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800156e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001570:	2301      	movs	r3, #1
 8001572:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001574:	2300      	movs	r3, #0
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001578:	2300      	movs	r3, #0
 800157a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157c:	f107 030c 	add.w	r3, r7, #12
 8001580:	4619      	mov	r1, r3
 8001582:	4804      	ldr	r0, [pc, #16]	@ (8001594 <MX_GPIO_Init+0xa0>)
 8001584:	f001 f888 	bl	8002698 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001588:	bf00      	nop
 800158a:	3720      	adds	r7, #32
 800158c:	46bd      	mov	sp, r7
 800158e:	bd80      	pop	{r7, pc}
 8001590:	40023800 	.word	0x40023800
 8001594:	40020400 	.word	0x40020400

08001598 <keyboard_select_amux>:
  }
  HAL_FLASH_Lock();
  return 1;
}

void keyboard_select_amux(uint8_t amux_channel) {
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	4603      	mov	r3, r0
 80015a0:	71fb      	strb	r3, [r7, #7]
  // TODO: set GPIOs at the same time using bitmap on register
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 80015a2:	2300      	movs	r3, #0
 80015a4:	73fb      	strb	r3, [r7, #15]
 80015a6:	e013      	b.n	80015d0 <keyboard_select_amux+0x38>
    HAL_GPIO_WritePin(GPIOB, amux_select_pins[i], (amux_channel >> i) & 1);
 80015a8:	7bfb      	ldrb	r3, [r7, #15]
 80015aa:	4a0d      	ldr	r2, [pc, #52]	@ (80015e0 <keyboard_select_amux+0x48>)
 80015ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b0:	b299      	uxth	r1, r3
 80015b2:	79fa      	ldrb	r2, [r7, #7]
 80015b4:	7bfb      	ldrb	r3, [r7, #15]
 80015b6:	fa42 f303 	asr.w	r3, r2, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	f003 0301 	and.w	r3, r3, #1
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	461a      	mov	r2, r3
 80015c4:	4807      	ldr	r0, [pc, #28]	@ (80015e4 <keyboard_select_amux+0x4c>)
 80015c6:	f001 f9eb 	bl	80029a0 <HAL_GPIO_WritePin>
  for (uint8_t i = 0; i < AMUX_SELECT_PINS_COUNT; i++) {
 80015ca:	7bfb      	ldrb	r3, [r7, #15]
 80015cc:	3301      	adds	r3, #1
 80015ce:	73fb      	strb	r3, [r7, #15]
 80015d0:	7bfb      	ldrb	r3, [r7, #15]
 80015d2:	2b03      	cmp	r3, #3
 80015d4:	d9e8      	bls.n	80015a8 <keyboard_select_amux+0x10>
  }
}
 80015d6:	bf00      	nop
 80015d8:	bf00      	nop
 80015da:	3710      	adds	r7, #16
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	0800a664 	.word	0x0800a664
 80015e4:	40020400 	.word	0x40020400

080015e8 <keyboard_select_adc>:

void keyboard_select_adc(uint8_t adc_channel) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
  ADC_channel_Config.Channel = adc_channels[adc_channel];
 80015f2:	2209      	movs	r2, #9
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <keyboard_select_adc+0x30>)
 80015f6:	601a      	str	r2, [r3, #0]
  HAL_ADC_ConfigChannel(&hadc1, &ADC_channel_Config);
 80015f8:	4907      	ldr	r1, [pc, #28]	@ (8001618 <keyboard_select_adc+0x30>)
 80015fa:	4808      	ldr	r0, [pc, #32]	@ (800161c <keyboard_select_adc+0x34>)
 80015fc:	f000 fd0c 	bl	8002018 <HAL_ADC_ConfigChannel>
  HAL_ADC_Start(&hadc1);
 8001600:	4806      	ldr	r0, [pc, #24]	@ (800161c <keyboard_select_adc+0x34>)
 8001602:	f000 fb89 	bl	8001d18 <HAL_ADC_Start>
  HAL_ADC_PollForConversion(&hadc1, 1);
 8001606:	2101      	movs	r1, #1
 8001608:	4804      	ldr	r0, [pc, #16]	@ (800161c <keyboard_select_adc+0x34>)
 800160a:	f000 fc6c 	bl	8001ee6 <HAL_ADC_PollForConversion>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200008f4 	.word	0x200008f4
 800161c:	20000374 	.word	0x20000374

08001620 <keyboard_read_adc>:

uint16_t keyboard_read_adc() {
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  return HAL_ADC_GetValue(&hadc1);
 8001624:	4803      	ldr	r0, [pc, #12]	@ (8001634 <keyboard_read_adc+0x14>)
 8001626:	f000 fce9 	bl	8001ffc <HAL_ADC_GetValue>
 800162a:	4603      	mov	r3, r0
 800162c:	b29b      	uxth	r3, r3
}
 800162e:	4618      	mov	r0, r3
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	20000374 	.word	0x20000374

08001638 <keyboard_close_adc>:

void keyboard_close_adc() {
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  HAL_ADC_Stop(&hadc1);
 800163c:	4802      	ldr	r0, [pc, #8]	@ (8001648 <keyboard_close_adc+0x10>)
 800163e:	f000 fc1f 	bl	8001e80 <HAL_ADC_Stop>
}
 8001642:	bf00      	nop
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000374 	.word	0x20000374

0800164c <keyboard_get_time>:

uint32_t keyboard_get_time() {
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8001650:	f000 faee 	bl	8001c30 <HAL_GetTick>
 8001654:	4603      	mov	r3, r0
}
 8001656:	4618      	mov	r0, r3
 8001658:	bd80      	pop	{r7, pc}

0800165a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800165a:	b480      	push	{r7}
 800165c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800165e:	b672      	cpsid	i
}
 8001660:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001662:	bf00      	nop
 8001664:	e7fd      	b.n	8001662 <Error_Handler+0x8>
	...

08001668 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166e:	2300      	movs	r3, #0
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	4b10      	ldr	r3, [pc, #64]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	4a0f      	ldr	r2, [pc, #60]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001678:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800167c:	6453      	str	r3, [r2, #68]	@ 0x44
 800167e:	4b0d      	ldr	r3, [pc, #52]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001686:	607b      	str	r3, [r7, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800168a:	2300      	movs	r3, #0
 800168c:	603b      	str	r3, [r7, #0]
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001692:	4a08      	ldr	r2, [pc, #32]	@ (80016b4 <HAL_MspInit+0x4c>)
 8001694:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001698:	6413      	str	r3, [r2, #64]	@ 0x40
 800169a:	4b06      	ldr	r3, [pc, #24]	@ (80016b4 <HAL_MspInit+0x4c>)
 800169c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800169e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a2:	603b      	str	r3, [r7, #0]
 80016a4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a6:	bf00      	nop
 80016a8:	370c      	adds	r7, #12
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800

080016b8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	@ 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a17      	ldr	r2, [pc, #92]	@ (8001734 <HAL_ADC_MspInit+0x7c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d127      	bne.n	800172a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b16      	ldr	r3, [pc, #88]	@ (8001738 <HAL_ADC_MspInit+0x80>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e2:	4a15      	ldr	r2, [pc, #84]	@ (8001738 <HAL_ADC_MspInit+0x80>)
 80016e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ea:	4b13      	ldr	r3, [pc, #76]	@ (8001738 <HAL_ADC_MspInit+0x80>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	60fb      	str	r3, [r7, #12]
 80016fa:	4b0f      	ldr	r3, [pc, #60]	@ (8001738 <HAL_ADC_MspInit+0x80>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	4a0e      	ldr	r2, [pc, #56]	@ (8001738 <HAL_ADC_MspInit+0x80>)
 8001700:	f043 0302 	orr.w	r3, r3, #2
 8001704:	6313      	str	r3, [r2, #48]	@ 0x30
 8001706:	4b0c      	ldr	r3, [pc, #48]	@ (8001738 <HAL_ADC_MspInit+0x80>)
 8001708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800170a:	f003 0302 	and.w	r3, r3, #2
 800170e:	60fb      	str	r3, [r7, #12]
 8001710:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001712:	2302      	movs	r3, #2
 8001714:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001716:	2303      	movs	r3, #3
 8001718:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800171a:	2300      	movs	r3, #0
 800171c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800171e:	f107 0314 	add.w	r3, r7, #20
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	@ (800173c <HAL_ADC_MspInit+0x84>)
 8001726:	f000 ffb7 	bl	8002698 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800172a:	bf00      	nop
 800172c:	3728      	adds	r7, #40	@ 0x28
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	40012000 	.word	0x40012000
 8001738:	40023800 	.word	0x40023800
 800173c:	40020400 	.word	0x40020400

08001740 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b08a      	sub	sp, #40	@ 0x28
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001748:	f107 0314 	add.w	r3, r7, #20
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a19      	ldr	r2, [pc, #100]	@ (80017c4 <HAL_I2C_MspInit+0x84>)
 800175e:	4293      	cmp	r3, r2
 8001760:	d12b      	bne.n	80017ba <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	4b18      	ldr	r3, [pc, #96]	@ (80017c8 <HAL_I2C_MspInit+0x88>)
 8001768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800176a:	4a17      	ldr	r2, [pc, #92]	@ (80017c8 <HAL_I2C_MspInit+0x88>)
 800176c:	f043 0302 	orr.w	r3, r3, #2
 8001770:	6313      	str	r3, [r2, #48]	@ 0x30
 8001772:	4b15      	ldr	r3, [pc, #84]	@ (80017c8 <HAL_I2C_MspInit+0x88>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800177e:	23c0      	movs	r3, #192	@ 0xc0
 8001780:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001782:	2312      	movs	r3, #18
 8001784:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001786:	2301      	movs	r3, #1
 8001788:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800178a:	2303      	movs	r3, #3
 800178c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800178e:	2304      	movs	r3, #4
 8001790:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001792:	f107 0314 	add.w	r3, r7, #20
 8001796:	4619      	mov	r1, r3
 8001798:	480c      	ldr	r0, [pc, #48]	@ (80017cc <HAL_I2C_MspInit+0x8c>)
 800179a:	f000 ff7d 	bl	8002698 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	4b09      	ldr	r3, [pc, #36]	@ (80017c8 <HAL_I2C_MspInit+0x88>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	4a08      	ldr	r2, [pc, #32]	@ (80017c8 <HAL_I2C_MspInit+0x88>)
 80017a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80017ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_I2C_MspInit+0x88>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017b6:	60fb      	str	r3, [r7, #12]
 80017b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017ba:	bf00      	nop
 80017bc:	3728      	adds	r7, #40	@ 0x28
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	40005400 	.word	0x40005400
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40020400 	.word	0x40020400

080017d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b08a      	sub	sp, #40	@ 0x28
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017d8:	f107 0314 	add.w	r3, r7, #20
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
 80017e0:	605a      	str	r2, [r3, #4]
 80017e2:	609a      	str	r2, [r3, #8]
 80017e4:	60da      	str	r2, [r3, #12]
 80017e6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017f0:	d13a      	bne.n	8001868 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001870 <HAL_PCD_MspInit+0xa0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017fa:	4a1d      	ldr	r2, [pc, #116]	@ (8001870 <HAL_PCD_MspInit+0xa0>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6313      	str	r3, [r2, #48]	@ 0x30
 8001802:	4b1b      	ldr	r3, [pc, #108]	@ (8001870 <HAL_PCD_MspInit+0xa0>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800180e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181c:	2303      	movs	r3, #3
 800181e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001820:	230a      	movs	r3, #10
 8001822:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	4619      	mov	r1, r3
 800182a:	4812      	ldr	r0, [pc, #72]	@ (8001874 <HAL_PCD_MspInit+0xa4>)
 800182c:	f000 ff34 	bl	8002698 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001830:	4b0f      	ldr	r3, [pc, #60]	@ (8001870 <HAL_PCD_MspInit+0xa0>)
 8001832:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001834:	4a0e      	ldr	r2, [pc, #56]	@ (8001870 <HAL_PCD_MspInit+0xa0>)
 8001836:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800183a:	6353      	str	r3, [r2, #52]	@ 0x34
 800183c:	2300      	movs	r3, #0
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	4b0b      	ldr	r3, [pc, #44]	@ (8001870 <HAL_PCD_MspInit+0xa0>)
 8001842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001844:	4a0a      	ldr	r2, [pc, #40]	@ (8001870 <HAL_PCD_MspInit+0xa0>)
 8001846:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800184a:	6453      	str	r3, [r2, #68]	@ 0x44
 800184c:	4b08      	ldr	r3, [pc, #32]	@ (8001870 <HAL_PCD_MspInit+0xa0>)
 800184e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001850:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_FS interrupt Init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8001858:	2200      	movs	r2, #0
 800185a:	2100      	movs	r1, #0
 800185c:	2043      	movs	r0, #67	@ 0x43
 800185e:	f000 fee4 	bl	800262a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8001862:	2043      	movs	r0, #67	@ 0x43
 8001864:	f000 fefd 	bl	8002662 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001868:	bf00      	nop
 800186a:	3728      	adds	r7, #40	@ 0x28
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	40023800 	.word	0x40023800
 8001874:	40020000 	.word	0x40020000

08001878 <board_millis>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t board_millis(void) {
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return system_ticks;
 800187c:	4b03      	ldr	r3, [pc, #12]	@ (800188c <board_millis+0x14>)
 800187e:	681b      	ldr	r3, [r3, #0]
}
 8001880:	4618      	mov	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	2000090c 	.word	0x2000090c

08001890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1) {
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <NMI_Handler+0x4>

08001898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	__asm("BKPT #0\n");
 800189c:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800189e:	bf00      	nop
 80018a0:	e7fd      	b.n	800189e <HardFault_Handler+0x6>

080018a2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a6:	bf00      	nop
 80018a8:	e7fd      	b.n	80018a6 <MemManage_Handler+0x4>

080018aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018aa:	b480      	push	{r7}
 80018ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018ae:	bf00      	nop
 80018b0:	e7fd      	b.n	80018ae <BusFault_Handler+0x4>

080018b2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018b2:	b480      	push	{r7}
 80018b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018b6:	bf00      	nop
 80018b8:	e7fd      	b.n	80018b6 <UsageFault_Handler+0x4>

080018ba <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ba:	b480      	push	{r7}
 80018bc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018be:	bf00      	nop
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr

080018d6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018d6:	b480      	push	{r7}
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018e8:	f000 f98e 	bl	8001c08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  system_ticks++;
 80018ec:	4b03      	ldr	r3, [pc, #12]	@ (80018fc <SysTick_Handler+0x18>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	3301      	adds	r3, #1
 80018f2:	4a02      	ldr	r2, [pc, #8]	@ (80018fc <SysTick_Handler+0x18>)
 80018f4:	6013      	str	r3, [r2, #0]
  /* USER CODE END SysTick_IRQn 1 */
}
 80018f6:	bf00      	nop
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	2000090c 	.word	0x2000090c

08001900 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */
	tud_int_handler(0);
 8001904:	2000      	movs	r0, #0
 8001906:	f007 fc05 	bl	8009114 <dcd_int_handler>
	return;
 800190a:	bf00      	nop
  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800190c:	bd80      	pop	{r7, pc}
	...

08001910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001918:	4a14      	ldr	r2, [pc, #80]	@ (800196c <_sbrk+0x5c>)
 800191a:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <_sbrk+0x60>)
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001924:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800192c:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <_sbrk+0x64>)
 800192e:	4a12      	ldr	r2, [pc, #72]	@ (8001978 <_sbrk+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001932:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	429a      	cmp	r2, r3
 800193e:	d207      	bcs.n	8001950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001940:	f008 f9b8 	bl	8009cb4 <__errno>
 8001944:	4603      	mov	r3, r0
 8001946:	220c      	movs	r2, #12
 8001948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295
 800194e:	e009      	b.n	8001964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001950:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001956:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	4a05      	ldr	r2, [pc, #20]	@ (8001974 <_sbrk+0x64>)
 8001960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20020000 	.word	0x20020000
 8001970:	00000400 	.word	0x00000400
 8001974:	20000910 	.word	0x20000910
 8001978:	20000de8 	.word	0x20000de8

0800197c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001980:	4b06      	ldr	r3, [pc, #24]	@ (800199c <SystemInit+0x20>)
 8001982:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001986:	4a05      	ldr	r2, [pc, #20]	@ (800199c <SystemInit+0x20>)
 8001988:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800198c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001990:	bf00      	nop
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	e000ed00 	.word	0xe000ed00

080019a0 <tud_descriptor_device_cb>:
};

// Invoked when received GET DEVICE DESCRIPTOR
// Application return pointer to descriptor
uint8_t const * tud_descriptor_device_cb(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return (uint8_t const *) &desc_device;
 80019a4:	4b02      	ldr	r3, [pc, #8]	@ (80019b0 <tud_descriptor_device_cb+0x10>)
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	0800a68c 	.word	0x0800a68c

080019b4 <tud_hid_descriptor_report_cb>:

// Invoked when received GET HID REPORT DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_hid_descriptor_report_cb(uint8_t instance)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	71fb      	strb	r3, [r7, #7]
  (void) instance;
  return desc_hid_report;
 80019be:	4b03      	ldr	r3, [pc, #12]	@ (80019cc <tud_hid_descriptor_report_cb+0x18>)
}
 80019c0:	4618      	mov	r0, r3
 80019c2:	370c      	adds	r7, #12
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	0800a6a0 	.word	0x0800a6a0

080019d0 <tud_descriptor_configuration_cb>:

// Invoked when received GET CONFIGURATION DESCRIPTOR
// Application return pointer to descriptor
// Descriptor contents must exist long enough for transfer to complete
uint8_t const * tud_descriptor_configuration_cb(uint8_t index)
{
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	4603      	mov	r3, r0
 80019d8:	71fb      	strb	r3, [r7, #7]
  (void) index; // for multiple configurations
  return desc_configuration;
 80019da:	4b03      	ldr	r3, [pc, #12]	@ (80019e8 <tud_descriptor_configuration_cb+0x18>)
}
 80019dc:	4618      	mov	r0, r3
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	0800a6fc 	.word	0x0800a6fc

080019ec <tud_descriptor_string_cb>:
static uint16_t _desc_str[32];

// Invoked when received GET STRING DESCRIPTOR request
// Application return pointer to descriptor, whose contents must exist long enough for transfer to complete
uint16_t const* tud_descriptor_string_cb(uint8_t index, uint16_t langid)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	460a      	mov	r2, r1
 80019f6:	71fb      	strb	r3, [r7, #7]
 80019f8:	4613      	mov	r3, r2
 80019fa:	80bb      	strh	r3, [r7, #4]
  (void) langid;

  uint8_t chr_count;

  if ( index == 0)
 80019fc:	79fb      	ldrb	r3, [r7, #7]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d108      	bne.n	8001a14 <tud_descriptor_string_cb+0x28>
  {
    memcpy(&_desc_str[1], string_desc_arr[0], 2);
 8001a02:	4b21      	ldr	r3, [pc, #132]	@ (8001a88 <tud_descriptor_string_cb+0x9c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	b29a      	uxth	r2, r3
 8001a0a:	4b20      	ldr	r3, [pc, #128]	@ (8001a8c <tud_descriptor_string_cb+0xa0>)
 8001a0c:	805a      	strh	r2, [r3, #2]
    chr_count = 1;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	73fb      	strb	r3, [r7, #15]
 8001a12:	e027      	b.n	8001a64 <tud_descriptor_string_cb+0x78>
  }else
  {
    // Note: the 0xEE index string is a Microsoft OS 1.0 Descriptors.
    // https://docs.microsoft.com/en-us/windows-hardware/drivers/usbcon/microsoft-defined-usb-descriptors

    if ( !(index < sizeof(string_desc_arr)/sizeof(string_desc_arr[0])) ) return NULL;
 8001a14:	79fb      	ldrb	r3, [r7, #7]
 8001a16:	2b05      	cmp	r3, #5
 8001a18:	d901      	bls.n	8001a1e <tud_descriptor_string_cb+0x32>
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	e02f      	b.n	8001a7e <tud_descriptor_string_cb+0x92>

    const char* str = string_desc_arr[index];
 8001a1e:	79fb      	ldrb	r3, [r7, #7]
 8001a20:	4a19      	ldr	r2, [pc, #100]	@ (8001a88 <tud_descriptor_string_cb+0x9c>)
 8001a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a26:	60bb      	str	r3, [r7, #8]

    // Cap at max char
    chr_count = strlen(str);
 8001a28:	68b8      	ldr	r0, [r7, #8]
 8001a2a:	f7fe fbd9 	bl	80001e0 <strlen>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	73fb      	strb	r3, [r7, #15]
    if ( chr_count > 31 ) chr_count = 31;
 8001a32:	7bfb      	ldrb	r3, [r7, #15]
 8001a34:	2b1f      	cmp	r3, #31
 8001a36:	d901      	bls.n	8001a3c <tud_descriptor_string_cb+0x50>
 8001a38:	231f      	movs	r3, #31
 8001a3a:	73fb      	strb	r3, [r7, #15]

    // Convert ASCII string into UTF-16
    for(uint8_t i=0; i<chr_count; i++)
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	73bb      	strb	r3, [r7, #14]
 8001a40:	e00c      	b.n	8001a5c <tud_descriptor_string_cb+0x70>
    {
      _desc_str[1+i] = str[i];
 8001a42:	7bbb      	ldrb	r3, [r7, #14]
 8001a44:	68ba      	ldr	r2, [r7, #8]
 8001a46:	4413      	add	r3, r2
 8001a48:	781a      	ldrb	r2, [r3, #0]
 8001a4a:	7bbb      	ldrb	r3, [r7, #14]
 8001a4c:	3301      	adds	r3, #1
 8001a4e:	4611      	mov	r1, r2
 8001a50:	4a0e      	ldr	r2, [pc, #56]	@ (8001a8c <tud_descriptor_string_cb+0xa0>)
 8001a52:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for(uint8_t i=0; i<chr_count; i++)
 8001a56:	7bbb      	ldrb	r3, [r7, #14]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	73bb      	strb	r3, [r7, #14]
 8001a5c:	7bba      	ldrb	r2, [r7, #14]
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d3ee      	bcc.n	8001a42 <tud_descriptor_string_cb+0x56>
    }
  }

  // first byte is length (including header), second byte is string type
  _desc_str[0] = (TUSB_DESC_STRING << 8 ) | (2*chr_count + 2);
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	3301      	adds	r3, #1
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8001a74:	b21b      	sxth	r3, r3
 8001a76:	b29a      	uxth	r2, r3
 8001a78:	4b04      	ldr	r3, [pc, #16]	@ (8001a8c <tud_descriptor_string_cb+0xa0>)
 8001a7a:	801a      	strh	r2, [r3, #0]

  return _desc_str;
 8001a7c:	4b03      	ldr	r3, [pc, #12]	@ (8001a8c <tud_descriptor_string_cb+0xa0>)
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	3710      	adds	r7, #16
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000004c 	.word	0x2000004c
 8001a8c:	20000914 	.word	0x20000914

08001a90 <tud_cdc_line_coding_cb>:
  }
}

// Invoked when line coding is change via SET_LINE_CODING
void tud_cdc_line_coding_cb(uint8_t itf, cdc_line_coding_t const* p_line_coding)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b083      	sub	sp, #12
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	4603      	mov	r3, r0
 8001a98:	6039      	str	r1, [r7, #0]
 8001a9a:	71fb      	strb	r3, [r7, #7]
  (void) itf;
  (void) p_line_coding;
  // Handle line coding change if needed
  // The baud rate is already set to 115200 by default
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr

08001aa8 <tud_hid_get_report_cb>:

// Invoked when received GET_REPORT control request
// Application must fill buffer report's content and return its length.
// Return zero will cause the stack to STALL request
uint16_t tud_hid_get_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t* buffer, uint16_t reqlen)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	71fb      	strb	r3, [r7, #7]
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	71bb      	strb	r3, [r7, #6]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	717b      	strb	r3, [r7, #5]
  (void) instance;
  (void) report_type;
  (void) buffer;
  (void) reqlen;

  switch (report_id)
 8001abc:	79bb      	ldrb	r3, [r7, #6]
 8001abe:	2b01      	cmp	r3, #1
 8001ac0:	d002      	beq.n	8001ac8 <tud_hid_get_report_cb+0x20>
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d002      	beq.n	8001acc <tud_hid_get_report_cb+0x24>
    case REPORT_ID_CONSUMER_CONTROL:
      // TODO: Fill consumer control report if needed
      break;

    default:
      break;
 8001ac6:	e002      	b.n	8001ace <tud_hid_get_report_cb+0x26>
      break;
 8001ac8:	bf00      	nop
 8001aca:	e000      	b.n	8001ace <tud_hid_get_report_cb+0x26>
      break;
 8001acc:	bf00      	nop
  }

  return 0;
 8001ace:	2300      	movs	r3, #0
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr

08001adc <tud_hid_set_report_cb>:

// Invoked when received SET_REPORT control request or
// received data on OUT endpoint ( Report ID = 0, Type = 0 )
void tud_hid_set_report_cb(uint8_t instance, uint8_t report_id, hid_report_type_t report_type, uint8_t const* buffer, uint16_t bufsize)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	603b      	str	r3, [r7, #0]
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	71fb      	strb	r3, [r7, #7]
 8001ae8:	460b      	mov	r3, r1
 8001aea:	71bb      	strb	r3, [r7, #6]
 8001aec:	4613      	mov	r3, r2
 8001aee:	717b      	strb	r3, [r7, #5]
  (void) instance;
  (void) report_type;
  (void) buffer;
  (void) bufsize;

  switch (report_id)
 8001af0:	79bb      	ldrb	r3, [r7, #6]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d002      	beq.n	8001afc <tud_hid_set_report_cb+0x20>
 8001af6:	2b02      	cmp	r3, #2
 8001af8:	d002      	beq.n	8001b00 <tud_hid_set_report_cb+0x24>
    case REPORT_ID_CONSUMER_CONTROL:
      // Handle consumer control feedback if needed
      break;

    default:
      break;
 8001afa:	e002      	b.n	8001b02 <tud_hid_set_report_cb+0x26>
      break;
 8001afc:	bf00      	nop
 8001afe:	e000      	b.n	8001b02 <tud_hid_set_report_cb+0x26>
      break;
 8001b00:	bf00      	nop
  }
}
 8001b02:	bf00      	nop
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b10:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b48 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b14:	f7ff ff32 	bl	800197c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b18:	480c      	ldr	r0, [pc, #48]	@ (8001b4c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b1a:	490d      	ldr	r1, [pc, #52]	@ (8001b50 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b1c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b54 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b20:	e002      	b.n	8001b28 <LoopCopyDataInit>

08001b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b26:	3304      	adds	r3, #4

08001b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b2c:	d3f9      	bcc.n	8001b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8001b58 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b30:	4c0a      	ldr	r4, [pc, #40]	@ (8001b5c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b34:	e001      	b.n	8001b3a <LoopFillZerobss>

08001b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b38:	3204      	adds	r2, #4

08001b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b3c:	d3fb      	bcc.n	8001b36 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b3e:	f008 f8bf 	bl	8009cc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b42:	f7ff fb99 	bl	8001278 <main>
  bx  lr    
 8001b46:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b48:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b50:	200000d4 	.word	0x200000d4
  ldr r2, =_sidata
 8001b54:	0800a808 	.word	0x0800a808
  ldr r2, =_sbss
 8001b58:	200000d4 	.word	0x200000d4
  ldr r4, =_ebss
 8001b5c:	20000de8 	.word	0x20000de8

08001b60 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b60:	e7fe      	b.n	8001b60 <ADC_IRQHandler>
	...

08001b64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b68:	4b0e      	ldr	r3, [pc, #56]	@ (8001ba4 <HAL_Init+0x40>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba4 <HAL_Init+0x40>)
 8001b6e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ba4 <HAL_Init+0x40>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba4 <HAL_Init+0x40>)
 8001b7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b80:	4b08      	ldr	r3, [pc, #32]	@ (8001ba4 <HAL_Init+0x40>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a07      	ldr	r2, [pc, #28]	@ (8001ba4 <HAL_Init+0x40>)
 8001b86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b8c:	2003      	movs	r0, #3
 8001b8e:	f000 fd41 	bl	8002614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b92:	200f      	movs	r0, #15
 8001b94:	f000 f808 	bl	8001ba8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b98:	f7ff fd66 	bl	8001668 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40023c00 	.word	0x40023c00

08001ba8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb0:	4b12      	ldr	r3, [pc, #72]	@ (8001bfc <HAL_InitTick+0x54>)
 8001bb2:	681a      	ldr	r2, [r3, #0]
 8001bb4:	4b12      	ldr	r3, [pc, #72]	@ (8001c00 <HAL_InitTick+0x58>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bbe:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fd59 	bl	800267e <HAL_SYSTICK_Config>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00e      	b.n	8001bf4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b0f      	cmp	r3, #15
 8001bda:	d80a      	bhi.n	8001bf2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bdc:	2200      	movs	r2, #0
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	f04f 30ff 	mov.w	r0, #4294967295
 8001be4:	f000 fd21 	bl	800262a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001be8:	4a06      	ldr	r2, [pc, #24]	@ (8001c04 <HAL_InitTick+0x5c>)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	e000      	b.n	8001bf4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bf2:	2301      	movs	r3, #1
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3708      	adds	r7, #8
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd80      	pop	{r7, pc}
 8001bfc:	20000048 	.word	0x20000048
 8001c00:	20000068 	.word	0x20000068
 8001c04:	20000064 	.word	0x20000064

08001c08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c0c:	4b06      	ldr	r3, [pc, #24]	@ (8001c28 <HAL_IncTick+0x20>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	461a      	mov	r2, r3
 8001c12:	4b06      	ldr	r3, [pc, #24]	@ (8001c2c <HAL_IncTick+0x24>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4413      	add	r3, r2
 8001c18:	4a04      	ldr	r2, [pc, #16]	@ (8001c2c <HAL_IncTick+0x24>)
 8001c1a:	6013      	str	r3, [r2, #0]
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	20000068 	.word	0x20000068
 8001c2c:	20000954 	.word	0x20000954

08001c30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c30:	b480      	push	{r7}
 8001c32:	af00      	add	r7, sp, #0
  return uwTick;
 8001c34:	4b03      	ldr	r3, [pc, #12]	@ (8001c44 <HAL_GetTick+0x14>)
 8001c36:	681b      	ldr	r3, [r3, #0]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000954 	.word	0x20000954

08001c48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b084      	sub	sp, #16
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c50:	f7ff ffee 	bl	8001c30 <HAL_GetTick>
 8001c54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c60:	d005      	beq.n	8001c6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c62:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <HAL_Delay+0x44>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	461a      	mov	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c6e:	bf00      	nop
 8001c70:	f7ff ffde 	bl	8001c30 <HAL_GetTick>
 8001c74:	4602      	mov	r2, r0
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	1ad3      	subs	r3, r2, r3
 8001c7a:	68fa      	ldr	r2, [r7, #12]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d8f7      	bhi.n	8001c70 <HAL_Delay+0x28>
  {
  }
}
 8001c80:	bf00      	nop
 8001c82:	bf00      	nop
 8001c84:	3710      	adds	r7, #16
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	20000068 	.word	0x20000068

08001c90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e033      	b.n	8001d0e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d109      	bne.n	8001cc2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7ff fd02 	bl	80016b8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d118      	bne.n	8001d00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cd2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001cd6:	f023 0302 	bic.w	r3, r3, #2
 8001cda:	f043 0202 	orr.w	r2, r3, #2
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ce2:	6878      	ldr	r0, [r7, #4]
 8001ce4:	f000 faca 	bl	800227c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf2:	f023 0303 	bic.w	r3, r3, #3
 8001cf6:	f043 0201 	orr.w	r2, r3, #1
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cfe:	e001      	b.n	8001d04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2200      	movs	r2, #0
 8001d08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
	...

08001d18 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d20:	2300      	movs	r3, #0
 8001d22:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d2a:	2b01      	cmp	r3, #1
 8001d2c:	d101      	bne.n	8001d32 <HAL_ADC_Start+0x1a>
 8001d2e:	2302      	movs	r3, #2
 8001d30:	e097      	b.n	8001e62 <HAL_ADC_Start+0x14a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2201      	movs	r2, #1
 8001d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 0301 	and.w	r3, r3, #1
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d018      	beq.n	8001d7a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	689a      	ldr	r2, [r3, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f042 0201 	orr.w	r2, r2, #1
 8001d56:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d58:	4b45      	ldr	r3, [pc, #276]	@ (8001e70 <HAL_ADC_Start+0x158>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	4a45      	ldr	r2, [pc, #276]	@ (8001e74 <HAL_ADC_Start+0x15c>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	0c9a      	lsrs	r2, r3, #18
 8001d64:	4613      	mov	r3, r2
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	4413      	add	r3, r2
 8001d6a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001d6c:	e002      	b.n	8001d74 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d6e:	68bb      	ldr	r3, [r7, #8]
 8001d70:	3b01      	subs	r3, #1
 8001d72:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d1f9      	bne.n	8001d6e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f003 0301 	and.w	r3, r3, #1
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d15f      	bne.n	8001e48 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d8c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001d90:	f023 0301 	bic.w	r3, r3, #1
 8001d94:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d007      	beq.n	8001dba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dae:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001db2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dc2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001dc6:	d106      	bne.n	8001dd6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dcc:	f023 0206 	bic.w	r2, r3, #6
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	645a      	str	r2, [r3, #68]	@ 0x44
 8001dd4:	e002      	b.n	8001ddc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2200      	movs	r2, #0
 8001dda:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001de4:	4b24      	ldr	r3, [pc, #144]	@ (8001e78 <HAL_ADC_Start+0x160>)
 8001de6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001df0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f003 031f 	and.w	r3, r3, #31
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d10f      	bne.n	8001e1e <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d129      	bne.n	8001e60 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689a      	ldr	r2, [r3, #8]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	e020      	b.n	8001e60 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4a16      	ldr	r2, [pc, #88]	@ (8001e7c <HAL_ADC_Start+0x164>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d11b      	bne.n	8001e60 <HAL_ADC_Start+0x148>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d114      	bne.n	8001e60 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e44:	609a      	str	r2, [r3, #8]
 8001e46:	e00b      	b.n	8001e60 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4c:	f043 0210 	orr.w	r2, r3, #16
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e58:	f043 0201 	orr.w	r2, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3714      	adds	r7, #20
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	20000048 	.word	0x20000048
 8001e74:	431bde83 	.word	0x431bde83
 8001e78:	40012300 	.word	0x40012300
 8001e7c:	40012000 	.word	0x40012000

08001e80 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d101      	bne.n	8001e96 <HAL_ADC_Stop+0x16>
 8001e92:	2302      	movs	r3, #2
 8001e94:	e021      	b.n	8001eda <HAL_ADC_Stop+0x5a>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2201      	movs	r2, #1
 8001e9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	689a      	ldr	r2, [r3, #8]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0201 	bic.w	r2, r2, #1
 8001eac:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d109      	bne.n	8001ed0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001ec4:	f023 0301 	bic.w	r3, r3, #1
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b084      	sub	sp, #16
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001efe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f02:	d113      	bne.n	8001f2c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001f0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001f12:	d10b      	bne.n	8001f2c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f18:	f043 0220 	orr.w	r2, r3, #32
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e063      	b.n	8001ff4 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001f2c:	f7ff fe80 	bl	8001c30 <HAL_GetTick>
 8001f30:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f32:	e021      	b.n	8001f78 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f3a:	d01d      	beq.n	8001f78 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d007      	beq.n	8001f52 <HAL_ADC_PollForConversion+0x6c>
 8001f42:	f7ff fe75 	bl	8001c30 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	683a      	ldr	r2, [r7, #0]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d212      	bcs.n	8001f78 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d00b      	beq.n	8001f78 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f64:	f043 0204 	orr.w	r2, r3, #4
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001f74:	2303      	movs	r3, #3
 8001f76:	e03d      	b.n	8001ff4 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f003 0302 	and.w	r3, r3, #2
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d1d6      	bne.n	8001f34 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f06f 0212 	mvn.w	r2, #18
 8001f8e:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f94:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d123      	bne.n	8001ff2 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d11f      	bne.n	8001ff2 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fb8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d006      	beq.n	8001fce <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d111      	bne.n	8001ff2 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d105      	bne.n	8001ff2 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	f043 0201 	orr.w	r2, r3, #1
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3710      	adds	r7, #16
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800200a:	4618      	mov	r0, r3
 800200c:	370c      	adds	r7, #12
 800200e:	46bd      	mov	sp, r7
 8002010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002014:	4770      	bx	lr
	...

08002018 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
 8002020:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002022:	2300      	movs	r3, #0
 8002024:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800202c:	2b01      	cmp	r3, #1
 800202e:	d101      	bne.n	8002034 <HAL_ADC_ConfigChannel+0x1c>
 8002030:	2302      	movs	r3, #2
 8002032:	e113      	b.n	800225c <HAL_ADC_ConfigChannel+0x244>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b09      	cmp	r3, #9
 8002042:	d925      	bls.n	8002090 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68d9      	ldr	r1, [r3, #12]
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	b29b      	uxth	r3, r3
 8002050:	461a      	mov	r2, r3
 8002052:	4613      	mov	r3, r2
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	4413      	add	r3, r2
 8002058:	3b1e      	subs	r3, #30
 800205a:	2207      	movs	r2, #7
 800205c:	fa02 f303 	lsl.w	r3, r2, r3
 8002060:	43da      	mvns	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	400a      	ands	r2, r1
 8002068:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	68d9      	ldr	r1, [r3, #12]
 8002070:	683b      	ldr	r3, [r7, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	b29b      	uxth	r3, r3
 800207a:	4618      	mov	r0, r3
 800207c:	4603      	mov	r3, r0
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	4403      	add	r3, r0
 8002082:	3b1e      	subs	r3, #30
 8002084:	409a      	lsls	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	430a      	orrs	r2, r1
 800208c:	60da      	str	r2, [r3, #12]
 800208e:	e022      	b.n	80020d6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6919      	ldr	r1, [r3, #16]
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	b29b      	uxth	r3, r3
 800209c:	461a      	mov	r2, r3
 800209e:	4613      	mov	r3, r2
 80020a0:	005b      	lsls	r3, r3, #1
 80020a2:	4413      	add	r3, r2
 80020a4:	2207      	movs	r2, #7
 80020a6:	fa02 f303 	lsl.w	r3, r2, r3
 80020aa:	43da      	mvns	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	400a      	ands	r2, r1
 80020b2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6919      	ldr	r1, [r3, #16]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	689a      	ldr	r2, [r3, #8]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	4618      	mov	r0, r3
 80020c6:	4603      	mov	r3, r0
 80020c8:	005b      	lsls	r3, r3, #1
 80020ca:	4403      	add	r3, r0
 80020cc:	409a      	lsls	r2, r3
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	430a      	orrs	r2, r1
 80020d4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	685b      	ldr	r3, [r3, #4]
 80020da:	2b06      	cmp	r3, #6
 80020dc:	d824      	bhi.n	8002128 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	4613      	mov	r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	4413      	add	r3, r2
 80020ee:	3b05      	subs	r3, #5
 80020f0:	221f      	movs	r2, #31
 80020f2:	fa02 f303 	lsl.w	r3, r2, r3
 80020f6:	43da      	mvns	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	400a      	ands	r2, r1
 80020fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	b29b      	uxth	r3, r3
 800210c:	4618      	mov	r0, r3
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	4413      	add	r3, r2
 8002118:	3b05      	subs	r3, #5
 800211a:	fa00 f203 	lsl.w	r2, r0, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	635a      	str	r2, [r3, #52]	@ 0x34
 8002126:	e04c      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	2b0c      	cmp	r3, #12
 800212e:	d824      	bhi.n	800217a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	4613      	mov	r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	4413      	add	r3, r2
 8002140:	3b23      	subs	r3, #35	@ 0x23
 8002142:	221f      	movs	r2, #31
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	43da      	mvns	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	400a      	ands	r2, r1
 8002150:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	b29b      	uxth	r3, r3
 800215e:	4618      	mov	r0, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685a      	ldr	r2, [r3, #4]
 8002164:	4613      	mov	r3, r2
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	3b23      	subs	r3, #35	@ 0x23
 800216c:	fa00 f203 	lsl.w	r2, r0, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	430a      	orrs	r2, r1
 8002176:	631a      	str	r2, [r3, #48]	@ 0x30
 8002178:	e023      	b.n	80021c2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	009b      	lsls	r3, r3, #2
 8002188:	4413      	add	r3, r2
 800218a:	3b41      	subs	r3, #65	@ 0x41
 800218c:	221f      	movs	r2, #31
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43da      	mvns	r2, r3
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	400a      	ands	r2, r1
 800219a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	4618      	mov	r0, r3
 80021aa:	683b      	ldr	r3, [r7, #0]
 80021ac:	685a      	ldr	r2, [r3, #4]
 80021ae:	4613      	mov	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	4413      	add	r3, r2
 80021b4:	3b41      	subs	r3, #65	@ 0x41
 80021b6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021c2:	4b29      	ldr	r3, [pc, #164]	@ (8002268 <HAL_ADC_ConfigChannel+0x250>)
 80021c4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a28      	ldr	r2, [pc, #160]	@ (800226c <HAL_ADC_ConfigChannel+0x254>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d10f      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x1d8>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	2b12      	cmp	r3, #18
 80021d6:	d10b      	bne.n	80021f0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	685b      	ldr	r3, [r3, #4]
 80021dc:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a1d      	ldr	r2, [pc, #116]	@ (800226c <HAL_ADC_ConfigChannel+0x254>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d12b      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x23a>
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4a1c      	ldr	r2, [pc, #112]	@ (8002270 <HAL_ADC_ConfigChannel+0x258>)
 8002200:	4293      	cmp	r3, r2
 8002202:	d003      	beq.n	800220c <HAL_ADC_ConfigChannel+0x1f4>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2b11      	cmp	r3, #17
 800220a:	d122      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	685b      	ldr	r3, [r3, #4]
 800221c:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a11      	ldr	r2, [pc, #68]	@ (8002270 <HAL_ADC_ConfigChannel+0x258>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d111      	bne.n	8002252 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800222e:	4b11      	ldr	r3, [pc, #68]	@ (8002274 <HAL_ADC_ConfigChannel+0x25c>)
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4a11      	ldr	r2, [pc, #68]	@ (8002278 <HAL_ADC_ConfigChannel+0x260>)
 8002234:	fba2 2303 	umull	r2, r3, r2, r3
 8002238:	0c9a      	lsrs	r2, r3, #18
 800223a:	4613      	mov	r3, r2
 800223c:	009b      	lsls	r3, r3, #2
 800223e:	4413      	add	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002244:	e002      	b.n	800224c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	3b01      	subs	r3, #1
 800224a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f9      	bne.n	8002246 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3714      	adds	r7, #20
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	40012300 	.word	0x40012300
 800226c:	40012000 	.word	0x40012000
 8002270:	10000012 	.word	0x10000012
 8002274:	20000048 	.word	0x20000048
 8002278:	431bde83 	.word	0x431bde83

0800227c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800227c:	b480      	push	{r7}
 800227e:	b085      	sub	sp, #20
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002284:	4b79      	ldr	r3, [pc, #484]	@ (800246c <ADC_Init+0x1f0>)
 8002286:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	685a      	ldr	r2, [r3, #4]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	431a      	orrs	r2, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80022b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	6859      	ldr	r1, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	021a      	lsls	r2, r3, #8
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	685a      	ldr	r2, [r3, #4]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80022d4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	6859      	ldr	r1, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	430a      	orrs	r2, r1
 80022e6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	689a      	ldr	r2, [r3, #8]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80022f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	6899      	ldr	r1, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68da      	ldr	r2, [r3, #12]
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800230e:	4a58      	ldr	r2, [pc, #352]	@ (8002470 <ADC_Init+0x1f4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d022      	beq.n	800235a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	689a      	ldr	r2, [r3, #8]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002322:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	6899      	ldr	r1, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	430a      	orrs	r2, r1
 8002334:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689a      	ldr	r2, [r3, #8]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002344:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	6899      	ldr	r1, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	e00f      	b.n	800237a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002368:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002378:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 0202 	bic.w	r2, r2, #2
 8002388:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	6899      	ldr	r1, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	7e1b      	ldrb	r3, [r3, #24]
 8002394:	005a      	lsls	r2, r3, #1
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	430a      	orrs	r2, r1
 800239c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d01b      	beq.n	80023e0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023b6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80023c6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6859      	ldr	r1, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d2:	3b01      	subs	r3, #1
 80023d4:	035a      	lsls	r2, r3, #13
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	430a      	orrs	r2, r1
 80023dc:	605a      	str	r2, [r3, #4]
 80023de:	e007      	b.n	80023f0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	685a      	ldr	r2, [r3, #4]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80023ee:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80023fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	69db      	ldr	r3, [r3, #28]
 800240a:	3b01      	subs	r3, #1
 800240c:	051a      	lsls	r2, r3, #20
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	430a      	orrs	r2, r1
 8002414:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002424:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	6899      	ldr	r1, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002432:	025a      	lsls	r2, r3, #9
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	430a      	orrs	r2, r1
 800243a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	689a      	ldr	r2, [r3, #8]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800244a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	6899      	ldr	r1, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	695b      	ldr	r3, [r3, #20]
 8002456:	029a      	lsls	r2, r3, #10
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	430a      	orrs	r2, r1
 800245e:	609a      	str	r2, [r3, #8]
}
 8002460:	bf00      	nop
 8002462:	3714      	adds	r7, #20
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr
 800246c:	40012300 	.word	0x40012300
 8002470:	0f000001 	.word	0x0f000001

08002474 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002484:	4b0c      	ldr	r3, [pc, #48]	@ (80024b8 <__NVIC_SetPriorityGrouping+0x44>)
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800248a:	68ba      	ldr	r2, [r7, #8]
 800248c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002490:	4013      	ands	r3, r2
 8002492:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800249c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80024a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024a6:	4a04      	ldr	r2, [pc, #16]	@ (80024b8 <__NVIC_SetPriorityGrouping+0x44>)
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	60d3      	str	r3, [r2, #12]
}
 80024ac:	bf00      	nop
 80024ae:	3714      	adds	r7, #20
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr
 80024b8:	e000ed00 	.word	0xe000ed00

080024bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024c0:	4b04      	ldr	r3, [pc, #16]	@ (80024d4 <__NVIC_GetPriorityGrouping+0x18>)
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	0a1b      	lsrs	r3, r3, #8
 80024c6:	f003 0307 	and.w	r3, r3, #7
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr
 80024d4:	e000ed00 	.word	0xe000ed00

080024d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	4603      	mov	r3, r0
 80024e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	db0b      	blt.n	8002502 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024ea:	79fb      	ldrb	r3, [r7, #7]
 80024ec:	f003 021f 	and.w	r2, r3, #31
 80024f0:	4907      	ldr	r1, [pc, #28]	@ (8002510 <__NVIC_EnableIRQ+0x38>)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	095b      	lsrs	r3, r3, #5
 80024f8:	2001      	movs	r0, #1
 80024fa:	fa00 f202 	lsl.w	r2, r0, r2
 80024fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250c:	4770      	bx	lr
 800250e:	bf00      	nop
 8002510:	e000e100 	.word	0xe000e100

08002514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002514:	b480      	push	{r7}
 8002516:	b083      	sub	sp, #12
 8002518:	af00      	add	r7, sp, #0
 800251a:	4603      	mov	r3, r0
 800251c:	6039      	str	r1, [r7, #0]
 800251e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002524:	2b00      	cmp	r3, #0
 8002526:	db0a      	blt.n	800253e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	b2da      	uxtb	r2, r3
 800252c:	490c      	ldr	r1, [pc, #48]	@ (8002560 <__NVIC_SetPriority+0x4c>)
 800252e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002532:	0112      	lsls	r2, r2, #4
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	440b      	add	r3, r1
 8002538:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800253c:	e00a      	b.n	8002554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	b2da      	uxtb	r2, r3
 8002542:	4908      	ldr	r1, [pc, #32]	@ (8002564 <__NVIC_SetPriority+0x50>)
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	f003 030f 	and.w	r3, r3, #15
 800254a:	3b04      	subs	r3, #4
 800254c:	0112      	lsls	r2, r2, #4
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	440b      	add	r3, r1
 8002552:	761a      	strb	r2, [r3, #24]
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	e000e100 	.word	0xe000e100
 8002564:	e000ed00 	.word	0xe000ed00

08002568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002568:	b480      	push	{r7}
 800256a:	b089      	sub	sp, #36	@ 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	f1c3 0307 	rsb	r3, r3, #7
 8002582:	2b04      	cmp	r3, #4
 8002584:	bf28      	it	cs
 8002586:	2304      	movcs	r3, #4
 8002588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3304      	adds	r3, #4
 800258e:	2b06      	cmp	r3, #6
 8002590:	d902      	bls.n	8002598 <NVIC_EncodePriority+0x30>
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	3b03      	subs	r3, #3
 8002596:	e000      	b.n	800259a <NVIC_EncodePriority+0x32>
 8002598:	2300      	movs	r3, #0
 800259a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800259c:	f04f 32ff 	mov.w	r2, #4294967295
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	fa02 f303 	lsl.w	r3, r2, r3
 80025a6:	43da      	mvns	r2, r3
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	401a      	ands	r2, r3
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025b0:	f04f 31ff 	mov.w	r1, #4294967295
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ba:	43d9      	mvns	r1, r3
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025c0:	4313      	orrs	r3, r2
         );
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3724      	adds	r7, #36	@ 0x24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	3b01      	subs	r3, #1
 80025dc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025e0:	d301      	bcc.n	80025e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025e2:	2301      	movs	r3, #1
 80025e4:	e00f      	b.n	8002606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025e6:	4a0a      	ldr	r2, [pc, #40]	@ (8002610 <SysTick_Config+0x40>)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025ee:	210f      	movs	r1, #15
 80025f0:	f04f 30ff 	mov.w	r0, #4294967295
 80025f4:	f7ff ff8e 	bl	8002514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f8:	4b05      	ldr	r3, [pc, #20]	@ (8002610 <SysTick_Config+0x40>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025fe:	4b04      	ldr	r3, [pc, #16]	@ (8002610 <SysTick_Config+0x40>)
 8002600:	2207      	movs	r2, #7
 8002602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop
 8002610:	e000e010 	.word	0xe000e010

08002614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f7ff ff29 	bl	8002474 <__NVIC_SetPriorityGrouping>
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}

0800262a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800262a:	b580      	push	{r7, lr}
 800262c:	b086      	sub	sp, #24
 800262e:	af00      	add	r7, sp, #0
 8002630:	4603      	mov	r3, r0
 8002632:	60b9      	str	r1, [r7, #8]
 8002634:	607a      	str	r2, [r7, #4]
 8002636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002638:	2300      	movs	r3, #0
 800263a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800263c:	f7ff ff3e 	bl	80024bc <__NVIC_GetPriorityGrouping>
 8002640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002642:	687a      	ldr	r2, [r7, #4]
 8002644:	68b9      	ldr	r1, [r7, #8]
 8002646:	6978      	ldr	r0, [r7, #20]
 8002648:	f7ff ff8e 	bl	8002568 <NVIC_EncodePriority>
 800264c:	4602      	mov	r2, r0
 800264e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002652:	4611      	mov	r1, r2
 8002654:	4618      	mov	r0, r3
 8002656:	f7ff ff5d 	bl	8002514 <__NVIC_SetPriority>
}
 800265a:	bf00      	nop
 800265c:	3718      	adds	r7, #24
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}

08002662 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002662:	b580      	push	{r7, lr}
 8002664:	b082      	sub	sp, #8
 8002666:	af00      	add	r7, sp, #0
 8002668:	4603      	mov	r3, r0
 800266a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800266c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff ff31 	bl	80024d8 <__NVIC_EnableIRQ>
}
 8002676:	bf00      	nop
 8002678:	3708      	adds	r7, #8
 800267a:	46bd      	mov	sp, r7
 800267c:	bd80      	pop	{r7, pc}

0800267e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800267e:	b580      	push	{r7, lr}
 8002680:	b082      	sub	sp, #8
 8002682:	af00      	add	r7, sp, #0
 8002684:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7ff ffa2 	bl	80025d0 <SysTick_Config>
 800268c:	4603      	mov	r3, r0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
	...

08002698 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002698:	b480      	push	{r7}
 800269a:	b089      	sub	sp, #36	@ 0x24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80026a2:	2300      	movs	r3, #0
 80026a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	e159      	b.n	8002968 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80026b4:	2201      	movs	r2, #1
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	fa02 f303 	lsl.w	r3, r2, r3
 80026bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	4013      	ands	r3, r2
 80026c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026c8:	693a      	ldr	r2, [r7, #16]
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	429a      	cmp	r2, r3
 80026ce:	f040 8148 	bne.w	8002962 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	685b      	ldr	r3, [r3, #4]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b01      	cmp	r3, #1
 80026dc:	d005      	beq.n	80026ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026e6:	2b02      	cmp	r3, #2
 80026e8:	d130      	bne.n	800274c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026f0:	69fb      	ldr	r3, [r7, #28]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	2203      	movs	r2, #3
 80026f6:	fa02 f303 	lsl.w	r3, r2, r3
 80026fa:	43db      	mvns	r3, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4013      	ands	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	fa02 f303 	lsl.w	r3, r2, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4313      	orrs	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002720:	2201      	movs	r2, #1
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	fa02 f303 	lsl.w	r3, r2, r3
 8002728:	43db      	mvns	r3, r3
 800272a:	69ba      	ldr	r2, [r7, #24]
 800272c:	4013      	ands	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	091b      	lsrs	r3, r3, #4
 8002736:	f003 0201 	and.w	r2, r3, #1
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	2b03      	cmp	r3, #3
 8002756:	d017      	beq.n	8002788 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	68db      	ldr	r3, [r3, #12]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	005b      	lsls	r3, r3, #1
 8002762:	2203      	movs	r2, #3
 8002764:	fa02 f303 	lsl.w	r3, r2, r3
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	69fb      	ldr	r3, [r7, #28]
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	fa02 f303 	lsl.w	r3, r2, r3
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	4313      	orrs	r3, r2
 8002780:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	2b02      	cmp	r3, #2
 8002792:	d123      	bne.n	80027dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002794:	69fb      	ldr	r3, [r7, #28]
 8002796:	08da      	lsrs	r2, r3, #3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3208      	adds	r2, #8
 800279c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80027a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	f003 0307 	and.w	r3, r3, #7
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	220f      	movs	r2, #15
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	691a      	ldr	r2, [r3, #16]
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	f003 0307 	and.w	r3, r3, #7
 80027c2:	009b      	lsls	r3, r3, #2
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027ce:	69fb      	ldr	r3, [r7, #28]
 80027d0:	08da      	lsrs	r2, r3, #3
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	3208      	adds	r2, #8
 80027d6:	69b9      	ldr	r1, [r7, #24]
 80027d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	2203      	movs	r2, #3
 80027e8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ec:	43db      	mvns	r3, r3
 80027ee:	69ba      	ldr	r2, [r7, #24]
 80027f0:	4013      	ands	r3, r2
 80027f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f003 0203 	and.w	r2, r3, #3
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	69ba      	ldr	r2, [r7, #24]
 8002806:	4313      	orrs	r3, r2
 8002808:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80a2 	beq.w	8002962 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	60fb      	str	r3, [r7, #12]
 8002822:	4b57      	ldr	r3, [pc, #348]	@ (8002980 <HAL_GPIO_Init+0x2e8>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002826:	4a56      	ldr	r2, [pc, #344]	@ (8002980 <HAL_GPIO_Init+0x2e8>)
 8002828:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800282c:	6453      	str	r3, [r2, #68]	@ 0x44
 800282e:	4b54      	ldr	r3, [pc, #336]	@ (8002980 <HAL_GPIO_Init+0x2e8>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002836:	60fb      	str	r3, [r7, #12]
 8002838:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800283a:	4a52      	ldr	r2, [pc, #328]	@ (8002984 <HAL_GPIO_Init+0x2ec>)
 800283c:	69fb      	ldr	r3, [r7, #28]
 800283e:	089b      	lsrs	r3, r3, #2
 8002840:	3302      	adds	r3, #2
 8002842:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002846:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002848:	69fb      	ldr	r3, [r7, #28]
 800284a:	f003 0303 	and.w	r3, r3, #3
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	220f      	movs	r2, #15
 8002852:	fa02 f303 	lsl.w	r3, r2, r3
 8002856:	43db      	mvns	r3, r3
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	4013      	ands	r3, r2
 800285c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	4a49      	ldr	r2, [pc, #292]	@ (8002988 <HAL_GPIO_Init+0x2f0>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d019      	beq.n	800289a <HAL_GPIO_Init+0x202>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a48      	ldr	r2, [pc, #288]	@ (800298c <HAL_GPIO_Init+0x2f4>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d013      	beq.n	8002896 <HAL_GPIO_Init+0x1fe>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	4a47      	ldr	r2, [pc, #284]	@ (8002990 <HAL_GPIO_Init+0x2f8>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00d      	beq.n	8002892 <HAL_GPIO_Init+0x1fa>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a46      	ldr	r2, [pc, #280]	@ (8002994 <HAL_GPIO_Init+0x2fc>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d007      	beq.n	800288e <HAL_GPIO_Init+0x1f6>
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4a45      	ldr	r2, [pc, #276]	@ (8002998 <HAL_GPIO_Init+0x300>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d101      	bne.n	800288a <HAL_GPIO_Init+0x1f2>
 8002886:	2304      	movs	r3, #4
 8002888:	e008      	b.n	800289c <HAL_GPIO_Init+0x204>
 800288a:	2307      	movs	r3, #7
 800288c:	e006      	b.n	800289c <HAL_GPIO_Init+0x204>
 800288e:	2303      	movs	r3, #3
 8002890:	e004      	b.n	800289c <HAL_GPIO_Init+0x204>
 8002892:	2302      	movs	r3, #2
 8002894:	e002      	b.n	800289c <HAL_GPIO_Init+0x204>
 8002896:	2301      	movs	r3, #1
 8002898:	e000      	b.n	800289c <HAL_GPIO_Init+0x204>
 800289a:	2300      	movs	r3, #0
 800289c:	69fa      	ldr	r2, [r7, #28]
 800289e:	f002 0203 	and.w	r2, r2, #3
 80028a2:	0092      	lsls	r2, r2, #2
 80028a4:	4093      	lsls	r3, r2
 80028a6:	69ba      	ldr	r2, [r7, #24]
 80028a8:	4313      	orrs	r3, r2
 80028aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028ac:	4935      	ldr	r1, [pc, #212]	@ (8002984 <HAL_GPIO_Init+0x2ec>)
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	089b      	lsrs	r3, r3, #2
 80028b2:	3302      	adds	r3, #2
 80028b4:	69ba      	ldr	r2, [r7, #24]
 80028b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028ba:	4b38      	ldr	r3, [pc, #224]	@ (800299c <HAL_GPIO_Init+0x304>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4313      	orrs	r3, r2
 80028dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028de:	4a2f      	ldr	r2, [pc, #188]	@ (800299c <HAL_GPIO_Init+0x304>)
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028e4:	4b2d      	ldr	r3, [pc, #180]	@ (800299c <HAL_GPIO_Init+0x304>)
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	43db      	mvns	r3, r3
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	4013      	ands	r3, r2
 80028f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	685b      	ldr	r3, [r3, #4]
 80028f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d003      	beq.n	8002908 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002908:	4a24      	ldr	r2, [pc, #144]	@ (800299c <HAL_GPIO_Init+0x304>)
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800290e:	4b23      	ldr	r3, [pc, #140]	@ (800299c <HAL_GPIO_Init+0x304>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	43db      	mvns	r3, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4013      	ands	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800292a:	69ba      	ldr	r2, [r7, #24]
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4313      	orrs	r3, r2
 8002930:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002932:	4a1a      	ldr	r2, [pc, #104]	@ (800299c <HAL_GPIO_Init+0x304>)
 8002934:	69bb      	ldr	r3, [r7, #24]
 8002936:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002938:	4b18      	ldr	r3, [pc, #96]	@ (800299c <HAL_GPIO_Init+0x304>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800293e:	693b      	ldr	r3, [r7, #16]
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d003      	beq.n	800295c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4313      	orrs	r3, r2
 800295a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800295c:	4a0f      	ldr	r2, [pc, #60]	@ (800299c <HAL_GPIO_Init+0x304>)
 800295e:	69bb      	ldr	r3, [r7, #24]
 8002960:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	3301      	adds	r3, #1
 8002966:	61fb      	str	r3, [r7, #28]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	2b0f      	cmp	r3, #15
 800296c:	f67f aea2 	bls.w	80026b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3724      	adds	r7, #36	@ 0x24
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40023800 	.word	0x40023800
 8002984:	40013800 	.word	0x40013800
 8002988:	40020000 	.word	0x40020000
 800298c:	40020400 	.word	0x40020400
 8002990:	40020800 	.word	0x40020800
 8002994:	40020c00 	.word	0x40020c00
 8002998:	40021000 	.word	0x40021000
 800299c:	40013c00 	.word	0x40013c00

080029a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	460b      	mov	r3, r1
 80029aa:	807b      	strh	r3, [r7, #2]
 80029ac:	4613      	mov	r3, r2
 80029ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029b0:	787b      	ldrb	r3, [r7, #1]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029b6:	887a      	ldrh	r2, [r7, #2]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029bc:	e003      	b.n	80029c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029be:	887b      	ldrh	r3, [r7, #2]
 80029c0:	041a      	lsls	r2, r3, #16
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	619a      	str	r2, [r3, #24]
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
	...

080029d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029e2:	2301      	movs	r3, #1
 80029e4:	e12b      	b.n	8002c3e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d106      	bne.n	8002a00 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2200      	movs	r2, #0
 80029f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7fe fea0 	bl	8001740 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2224      	movs	r2, #36	@ 0x24
 8002a04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0201 	bic.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a26:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	681a      	ldr	r2, [r3, #0]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002a36:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a38:	f000 fe50 	bl	80036dc <HAL_RCC_GetPCLK1Freq>
 8002a3c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	685b      	ldr	r3, [r3, #4]
 8002a42:	4a81      	ldr	r2, [pc, #516]	@ (8002c48 <HAL_I2C_Init+0x274>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d807      	bhi.n	8002a58 <HAL_I2C_Init+0x84>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	4a80      	ldr	r2, [pc, #512]	@ (8002c4c <HAL_I2C_Init+0x278>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	bf94      	ite	ls
 8002a50:	2301      	movls	r3, #1
 8002a52:	2300      	movhi	r3, #0
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	e006      	b.n	8002a66 <HAL_I2C_Init+0x92>
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	4a7d      	ldr	r2, [pc, #500]	@ (8002c50 <HAL_I2C_Init+0x27c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	bf94      	ite	ls
 8002a60:	2301      	movls	r3, #1
 8002a62:	2300      	movhi	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e0e7      	b.n	8002c3e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4a78      	ldr	r2, [pc, #480]	@ (8002c54 <HAL_I2C_Init+0x280>)
 8002a72:	fba2 2303 	umull	r2, r3, r2, r3
 8002a76:	0c9b      	lsrs	r3, r3, #18
 8002a78:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	685b      	ldr	r3, [r3, #4]
 8002a9c:	4a6a      	ldr	r2, [pc, #424]	@ (8002c48 <HAL_I2C_Init+0x274>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d802      	bhi.n	8002aa8 <HAL_I2C_Init+0xd4>
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	e009      	b.n	8002abc <HAL_I2C_Init+0xe8>
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002aae:	fb02 f303 	mul.w	r3, r2, r3
 8002ab2:	4a69      	ldr	r2, [pc, #420]	@ (8002c58 <HAL_I2C_Init+0x284>)
 8002ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ab8:	099b      	lsrs	r3, r3, #6
 8002aba:	3301      	adds	r3, #1
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6812      	ldr	r2, [r2, #0]
 8002ac0:	430b      	orrs	r3, r1
 8002ac2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	69db      	ldr	r3, [r3, #28]
 8002aca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002ace:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	495c      	ldr	r1, [pc, #368]	@ (8002c48 <HAL_I2C_Init+0x274>)
 8002ad8:	428b      	cmp	r3, r1
 8002ada:	d819      	bhi.n	8002b10 <HAL_I2C_Init+0x13c>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1e59      	subs	r1, r3, #1
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	005b      	lsls	r3, r3, #1
 8002ae6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002aea:	1c59      	adds	r1, r3, #1
 8002aec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002af0:	400b      	ands	r3, r1
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d00a      	beq.n	8002b0c <HAL_I2C_Init+0x138>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	1e59      	subs	r1, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	005b      	lsls	r3, r3, #1
 8002b00:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b04:	3301      	adds	r3, #1
 8002b06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b0a:	e051      	b.n	8002bb0 <HAL_I2C_Init+0x1dc>
 8002b0c:	2304      	movs	r3, #4
 8002b0e:	e04f      	b.n	8002bb0 <HAL_I2C_Init+0x1dc>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d111      	bne.n	8002b3c <HAL_I2C_Init+0x168>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	1e58      	subs	r0, r3, #1
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6859      	ldr	r1, [r3, #4]
 8002b20:	460b      	mov	r3, r1
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	440b      	add	r3, r1
 8002b26:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	e012      	b.n	8002b62 <HAL_I2C_Init+0x18e>
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1e58      	subs	r0, r3, #1
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6859      	ldr	r1, [r3, #4]
 8002b44:	460b      	mov	r3, r1
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	0099      	lsls	r1, r3, #2
 8002b4c:	440b      	add	r3, r1
 8002b4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b52:	3301      	adds	r3, #1
 8002b54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	bf0c      	ite	eq
 8002b5c:	2301      	moveq	r3, #1
 8002b5e:	2300      	movne	r3, #0
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <HAL_I2C_Init+0x196>
 8002b66:	2301      	movs	r3, #1
 8002b68:	e022      	b.n	8002bb0 <HAL_I2C_Init+0x1dc>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d10e      	bne.n	8002b90 <HAL_I2C_Init+0x1bc>
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	1e58      	subs	r0, r3, #1
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6859      	ldr	r1, [r3, #4]
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	440b      	add	r3, r1
 8002b80:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b84:	3301      	adds	r3, #1
 8002b86:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b8a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002b8e:	e00f      	b.n	8002bb0 <HAL_I2C_Init+0x1dc>
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	1e58      	subs	r0, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6859      	ldr	r1, [r3, #4]
 8002b98:	460b      	mov	r3, r1
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	0099      	lsls	r1, r3, #2
 8002ba0:	440b      	add	r3, r1
 8002ba2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002bac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	6809      	ldr	r1, [r1, #0]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69da      	ldr	r2, [r3, #28]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002bde:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6911      	ldr	r1, [r2, #16]
 8002be6:	687a      	ldr	r2, [r7, #4]
 8002be8:	68d2      	ldr	r2, [r2, #12]
 8002bea:	4311      	orrs	r1, r2
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	6812      	ldr	r2, [r2, #0]
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	695a      	ldr	r2, [r3, #20]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	699b      	ldr	r3, [r3, #24]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	430a      	orrs	r2, r1
 8002c0e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f042 0201 	orr.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2220      	movs	r2, #32
 8002c2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	000186a0 	.word	0x000186a0
 8002c4c:	001e847f 	.word	0x001e847f
 8002c50:	003d08ff 	.word	0x003d08ff
 8002c54:	431bde83 	.word	0x431bde83
 8002c58:	10624dd3 	.word	0x10624dd3

08002c5c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b086      	sub	sp, #24
 8002c60:	af02      	add	r7, sp, #8
 8002c62:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e101      	b.n	8002e72 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8002c7a:	b2db      	uxtb	r3, r3
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d106      	bne.n	8002c8e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f7fe fda1 	bl	80017d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2203      	movs	r2, #3
 8002c92:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c9c:	d102      	bne.n	8002ca4 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f000 fd8f 	bl	80037cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	7c1a      	ldrb	r2, [r3, #16]
 8002cb6:	f88d 2000 	strb.w	r2, [sp]
 8002cba:	3304      	adds	r3, #4
 8002cbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cbe:	f000 fd21 	bl	8003704 <USB_CoreInit>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d005      	beq.n	8002cd4 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2202      	movs	r2, #2
 8002ccc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002cd0:	2301      	movs	r3, #1
 8002cd2:	e0ce      	b.n	8002e72 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2100      	movs	r1, #0
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fd87 	bl	80037ee <USB_SetCurrentMode>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d005      	beq.n	8002cf2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2202      	movs	r2, #2
 8002cea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e0bf      	b.n	8002e72 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	73fb      	strb	r3, [r7, #15]
 8002cf6:	e04a      	b.n	8002d8e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cf8:	7bfa      	ldrb	r2, [r7, #15]
 8002cfa:	6879      	ldr	r1, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	00db      	lsls	r3, r3, #3
 8002d00:	4413      	add	r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	440b      	add	r3, r1
 8002d06:	3315      	adds	r3, #21
 8002d08:	2201      	movs	r2, #1
 8002d0a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d0c:	7bfa      	ldrb	r2, [r7, #15]
 8002d0e:	6879      	ldr	r1, [r7, #4]
 8002d10:	4613      	mov	r3, r2
 8002d12:	00db      	lsls	r3, r3, #3
 8002d14:	4413      	add	r3, r2
 8002d16:	009b      	lsls	r3, r3, #2
 8002d18:	440b      	add	r3, r1
 8002d1a:	3314      	adds	r3, #20
 8002d1c:	7bfa      	ldrb	r2, [r7, #15]
 8002d1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d20:	7bfa      	ldrb	r2, [r7, #15]
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	b298      	uxth	r0, r3
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	00db      	lsls	r3, r3, #3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	332e      	adds	r3, #46	@ 0x2e
 8002d34:	4602      	mov	r2, r0
 8002d36:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	6879      	ldr	r1, [r7, #4]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	4413      	add	r3, r2
 8002d42:	009b      	lsls	r3, r3, #2
 8002d44:	440b      	add	r3, r1
 8002d46:	3318      	adds	r3, #24
 8002d48:	2200      	movs	r2, #0
 8002d4a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d4c:	7bfa      	ldrb	r2, [r7, #15]
 8002d4e:	6879      	ldr	r1, [r7, #4]
 8002d50:	4613      	mov	r3, r2
 8002d52:	00db      	lsls	r3, r3, #3
 8002d54:	4413      	add	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	440b      	add	r3, r1
 8002d5a:	331c      	adds	r3, #28
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d60:	7bfa      	ldrb	r2, [r7, #15]
 8002d62:	6879      	ldr	r1, [r7, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	00db      	lsls	r3, r3, #3
 8002d68:	4413      	add	r3, r2
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	440b      	add	r3, r1
 8002d6e:	3320      	adds	r3, #32
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d74:	7bfa      	ldrb	r2, [r7, #15]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	00db      	lsls	r3, r3, #3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	3324      	adds	r3, #36	@ 0x24
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	791b      	ldrb	r3, [r3, #4]
 8002d92:	7bfa      	ldrb	r2, [r7, #15]
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d3af      	bcc.n	8002cf8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d98:	2300      	movs	r3, #0
 8002d9a:	73fb      	strb	r3, [r7, #15]
 8002d9c:	e044      	b.n	8002e28 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d9e:	7bfa      	ldrb	r2, [r7, #15]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4413      	add	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8002db0:	2200      	movs	r2, #0
 8002db2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002db4:	7bfa      	ldrb	r2, [r7, #15]
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	4613      	mov	r3, r2
 8002dba:	00db      	lsls	r3, r3, #3
 8002dbc:	4413      	add	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	440b      	add	r3, r1
 8002dc2:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8002dc6:	7bfa      	ldrb	r2, [r7, #15]
 8002dc8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002dca:	7bfa      	ldrb	r2, [r7, #15]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	00db      	lsls	r3, r3, #3
 8002dd2:	4413      	add	r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002de0:	7bfa      	ldrb	r2, [r7, #15]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4413      	add	r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002df6:	7bfa      	ldrb	r2, [r7, #15]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4413      	add	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e0c:	7bfa      	ldrb	r2, [r7, #15]
 8002e0e:	6879      	ldr	r1, [r7, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	00db      	lsls	r3, r3, #3
 8002e14:	4413      	add	r3, r2
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	440b      	add	r3, r1
 8002e1a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e22:	7bfb      	ldrb	r3, [r7, #15]
 8002e24:	3301      	adds	r3, #1
 8002e26:	73fb      	strb	r3, [r7, #15]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	791b      	ldrb	r3, [r3, #4]
 8002e2c:	7bfa      	ldrb	r2, [r7, #15]
 8002e2e:	429a      	cmp	r2, r3
 8002e30:	d3b5      	bcc.n	8002d9e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	7c1a      	ldrb	r2, [r3, #16]
 8002e3a:	f88d 2000 	strb.w	r2, [sp]
 8002e3e:	3304      	adds	r3, #4
 8002e40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e42:	f000 fd21 	bl	8003888 <USB_DevInit>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2202      	movs	r2, #2
 8002e50:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e00c      	b.n	8002e72 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	f000 fee9 	bl	8003c42 <USB_DevDisconnect>

  return HAL_OK;
 8002e70:	2300      	movs	r3, #0
}
 8002e72:	4618      	mov	r0, r3
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}
	...

08002e7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d101      	bne.n	8002e8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	e267      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0301 	and.w	r3, r3, #1
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d075      	beq.n	8002f86 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e9a:	4b88      	ldr	r3, [pc, #544]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b04      	cmp	r3, #4
 8002ea4:	d00c      	beq.n	8002ec0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002ea6:	4b85      	ldr	r3, [pc, #532]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d112      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002eb2:	4b82      	ldr	r3, [pc, #520]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eba:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002ebe:	d10b      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ec0:	4b7e      	ldr	r3, [pc, #504]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d05b      	beq.n	8002f84 <HAL_RCC_OscConfig+0x108>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d157      	bne.n	8002f84 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e242      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee0:	d106      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x74>
 8002ee2:	4b76      	ldr	r3, [pc, #472]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a75      	ldr	r2, [pc, #468]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002ee8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eec:	6013      	str	r3, [r2, #0]
 8002eee:	e01d      	b.n	8002f2c <HAL_RCC_OscConfig+0xb0>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ef8:	d10c      	bne.n	8002f14 <HAL_RCC_OscConfig+0x98>
 8002efa:	4b70      	ldr	r3, [pc, #448]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a6f      	ldr	r2, [pc, #444]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	4b6d      	ldr	r3, [pc, #436]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a6c      	ldr	r2, [pc, #432]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f10:	6013      	str	r3, [r2, #0]
 8002f12:	e00b      	b.n	8002f2c <HAL_RCC_OscConfig+0xb0>
 8002f14:	4b69      	ldr	r3, [pc, #420]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a68      	ldr	r2, [pc, #416]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f1e:	6013      	str	r3, [r2, #0]
 8002f20:	4b66      	ldr	r3, [pc, #408]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4a65      	ldr	r2, [pc, #404]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d013      	beq.n	8002f5c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f34:	f7fe fe7c 	bl	8001c30 <HAL_GetTick>
 8002f38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f3a:	e008      	b.n	8002f4e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f3c:	f7fe fe78 	bl	8001c30 <HAL_GetTick>
 8002f40:	4602      	mov	r2, r0
 8002f42:	693b      	ldr	r3, [r7, #16]
 8002f44:	1ad3      	subs	r3, r2, r3
 8002f46:	2b64      	cmp	r3, #100	@ 0x64
 8002f48:	d901      	bls.n	8002f4e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e207      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f4e:	4b5b      	ldr	r3, [pc, #364]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0f0      	beq.n	8002f3c <HAL_RCC_OscConfig+0xc0>
 8002f5a:	e014      	b.n	8002f86 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fe68 	bl	8001c30 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f64:	f7fe fe64 	bl	8001c30 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b64      	cmp	r3, #100	@ 0x64
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e1f3      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f76:	4b51      	ldr	r3, [pc, #324]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d1f0      	bne.n	8002f64 <HAL_RCC_OscConfig+0xe8>
 8002f82:	e000      	b.n	8002f86 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d063      	beq.n	800305a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f92:	4b4a      	ldr	r3, [pc, #296]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002f94:	689b      	ldr	r3, [r3, #8]
 8002f96:	f003 030c 	and.w	r3, r3, #12
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00b      	beq.n	8002fb6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f9e:	4b47      	ldr	r3, [pc, #284]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d11c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002faa:	4b44      	ldr	r3, [pc, #272]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d116      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fb6:	4b41      	ldr	r3, [pc, #260]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f003 0302 	and.w	r3, r3, #2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <HAL_RCC_OscConfig+0x152>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b01      	cmp	r3, #1
 8002fc8:	d001      	beq.n	8002fce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e1c7      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fce:	4b3b      	ldr	r3, [pc, #236]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	4937      	ldr	r1, [pc, #220]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fe2:	e03a      	b.n	800305a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d020      	beq.n	800302e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fec:	4b34      	ldr	r3, [pc, #208]	@ (80030c0 <HAL_RCC_OscConfig+0x244>)
 8002fee:	2201      	movs	r2, #1
 8002ff0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ff2:	f7fe fe1d 	bl	8001c30 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ffa:	f7fe fe19 	bl	8001c30 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e1a8      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800300c:	4b2b      	ldr	r3, [pc, #172]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0302 	and.w	r3, r3, #2
 8003014:	2b00      	cmp	r3, #0
 8003016:	d0f0      	beq.n	8002ffa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003018:	4b28      	ldr	r3, [pc, #160]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	00db      	lsls	r3, r3, #3
 8003026:	4925      	ldr	r1, [pc, #148]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8003028:	4313      	orrs	r3, r2
 800302a:	600b      	str	r3, [r1, #0]
 800302c:	e015      	b.n	800305a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800302e:	4b24      	ldr	r3, [pc, #144]	@ (80030c0 <HAL_RCC_OscConfig+0x244>)
 8003030:	2200      	movs	r2, #0
 8003032:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003034:	f7fe fdfc 	bl	8001c30 <HAL_GetTick>
 8003038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800303a:	e008      	b.n	800304e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800303c:	f7fe fdf8 	bl	8001c30 <HAL_GetTick>
 8003040:	4602      	mov	r2, r0
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	1ad3      	subs	r3, r2, r3
 8003046:	2b02      	cmp	r3, #2
 8003048:	d901      	bls.n	800304e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800304a:	2303      	movs	r3, #3
 800304c:	e187      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800304e:	4b1b      	ldr	r3, [pc, #108]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0302 	and.w	r3, r3, #2
 8003056:	2b00      	cmp	r3, #0
 8003058:	d1f0      	bne.n	800303c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 0308 	and.w	r3, r3, #8
 8003062:	2b00      	cmp	r3, #0
 8003064:	d036      	beq.n	80030d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d016      	beq.n	800309c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800306e:	4b15      	ldr	r3, [pc, #84]	@ (80030c4 <HAL_RCC_OscConfig+0x248>)
 8003070:	2201      	movs	r2, #1
 8003072:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003074:	f7fe fddc 	bl	8001c30 <HAL_GetTick>
 8003078:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800307a:	e008      	b.n	800308e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800307c:	f7fe fdd8 	bl	8001c30 <HAL_GetTick>
 8003080:	4602      	mov	r2, r0
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	1ad3      	subs	r3, r2, r3
 8003086:	2b02      	cmp	r3, #2
 8003088:	d901      	bls.n	800308e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800308a:	2303      	movs	r3, #3
 800308c:	e167      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800308e:	4b0b      	ldr	r3, [pc, #44]	@ (80030bc <HAL_RCC_OscConfig+0x240>)
 8003090:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d0f0      	beq.n	800307c <HAL_RCC_OscConfig+0x200>
 800309a:	e01b      	b.n	80030d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800309c:	4b09      	ldr	r3, [pc, #36]	@ (80030c4 <HAL_RCC_OscConfig+0x248>)
 800309e:	2200      	movs	r2, #0
 80030a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030a2:	f7fe fdc5 	bl	8001c30 <HAL_GetTick>
 80030a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030a8:	e00e      	b.n	80030c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80030aa:	f7fe fdc1 	bl	8001c30 <HAL_GetTick>
 80030ae:	4602      	mov	r2, r0
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	1ad3      	subs	r3, r2, r3
 80030b4:	2b02      	cmp	r3, #2
 80030b6:	d907      	bls.n	80030c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e150      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
 80030bc:	40023800 	.word	0x40023800
 80030c0:	42470000 	.word	0x42470000
 80030c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c8:	4b88      	ldr	r3, [pc, #544]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030ca:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80030cc:	f003 0302 	and.w	r3, r3, #2
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d1ea      	bne.n	80030aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 8097 	beq.w	8003210 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030e2:	2300      	movs	r3, #0
 80030e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030e6:	4b81      	ldr	r3, [pc, #516]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10f      	bne.n	8003112 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	60bb      	str	r3, [r7, #8]
 80030f6:	4b7d      	ldr	r3, [pc, #500]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030fa:	4a7c      	ldr	r2, [pc, #496]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80030fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003100:	6413      	str	r3, [r2, #64]	@ 0x40
 8003102:	4b7a      	ldr	r3, [pc, #488]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800310e:	2301      	movs	r3, #1
 8003110:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003112:	4b77      	ldr	r3, [pc, #476]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800311a:	2b00      	cmp	r3, #0
 800311c:	d118      	bne.n	8003150 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800311e:	4b74      	ldr	r3, [pc, #464]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a73      	ldr	r2, [pc, #460]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003124:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003128:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800312a:	f7fe fd81 	bl	8001c30 <HAL_GetTick>
 800312e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003130:	e008      	b.n	8003144 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003132:	f7fe fd7d 	bl	8001c30 <HAL_GetTick>
 8003136:	4602      	mov	r2, r0
 8003138:	693b      	ldr	r3, [r7, #16]
 800313a:	1ad3      	subs	r3, r2, r3
 800313c:	2b02      	cmp	r3, #2
 800313e:	d901      	bls.n	8003144 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e10c      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003144:	4b6a      	ldr	r3, [pc, #424]	@ (80032f0 <HAL_RCC_OscConfig+0x474>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d0f0      	beq.n	8003132 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d106      	bne.n	8003166 <HAL_RCC_OscConfig+0x2ea>
 8003158:	4b64      	ldr	r3, [pc, #400]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800315a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800315c:	4a63      	ldr	r2, [pc, #396]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800315e:	f043 0301 	orr.w	r3, r3, #1
 8003162:	6713      	str	r3, [r2, #112]	@ 0x70
 8003164:	e01c      	b.n	80031a0 <HAL_RCC_OscConfig+0x324>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	2b05      	cmp	r3, #5
 800316c:	d10c      	bne.n	8003188 <HAL_RCC_OscConfig+0x30c>
 800316e:	4b5f      	ldr	r3, [pc, #380]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003172:	4a5e      	ldr	r2, [pc, #376]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003174:	f043 0304 	orr.w	r3, r3, #4
 8003178:	6713      	str	r3, [r2, #112]	@ 0x70
 800317a:	4b5c      	ldr	r3, [pc, #368]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800317c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800317e:	4a5b      	ldr	r2, [pc, #364]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003180:	f043 0301 	orr.w	r3, r3, #1
 8003184:	6713      	str	r3, [r2, #112]	@ 0x70
 8003186:	e00b      	b.n	80031a0 <HAL_RCC_OscConfig+0x324>
 8003188:	4b58      	ldr	r3, [pc, #352]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800318a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800318c:	4a57      	ldr	r2, [pc, #348]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800318e:	f023 0301 	bic.w	r3, r3, #1
 8003192:	6713      	str	r3, [r2, #112]	@ 0x70
 8003194:	4b55      	ldr	r3, [pc, #340]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003196:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003198:	4a54      	ldr	r2, [pc, #336]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800319a:	f023 0304 	bic.w	r3, r3, #4
 800319e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d015      	beq.n	80031d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031a8:	f7fe fd42 	bl	8001c30 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031b0:	f7fe fd3e 	bl	8001c30 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e0cb      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031c6:	4b49      	ldr	r3, [pc, #292]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80031c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ca:	f003 0302 	and.w	r3, r3, #2
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d0ee      	beq.n	80031b0 <HAL_RCC_OscConfig+0x334>
 80031d2:	e014      	b.n	80031fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d4:	f7fe fd2c 	bl	8001c30 <HAL_GetTick>
 80031d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031da:	e00a      	b.n	80031f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031dc:	f7fe fd28 	bl	8001c30 <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	693b      	ldr	r3, [r7, #16]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e0b5      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031f2:	4b3e      	ldr	r3, [pc, #248]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80031f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1ee      	bne.n	80031dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031fe:	7dfb      	ldrb	r3, [r7, #23]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d105      	bne.n	8003210 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003204:	4b39      	ldr	r3, [pc, #228]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	4a38      	ldr	r2, [pc, #224]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800320a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800320e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	699b      	ldr	r3, [r3, #24]
 8003214:	2b00      	cmp	r3, #0
 8003216:	f000 80a1 	beq.w	800335c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800321a:	4b34      	ldr	r3, [pc, #208]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b08      	cmp	r3, #8
 8003224:	d05c      	beq.n	80032e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d141      	bne.n	80032b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322e:	4b31      	ldr	r3, [pc, #196]	@ (80032f4 <HAL_RCC_OscConfig+0x478>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fe fcfc 	bl	8001c30 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323c:	f7fe fcf8 	bl	8001c30 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e087      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324e:	4b27      	ldr	r3, [pc, #156]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69da      	ldr	r2, [r3, #28]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6a1b      	ldr	r3, [r3, #32]
 8003262:	431a      	orrs	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003268:	019b      	lsls	r3, r3, #6
 800326a:	431a      	orrs	r2, r3
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003270:	085b      	lsrs	r3, r3, #1
 8003272:	3b01      	subs	r3, #1
 8003274:	041b      	lsls	r3, r3, #16
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800327c:	061b      	lsls	r3, r3, #24
 800327e:	491b      	ldr	r1, [pc, #108]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 8003280:	4313      	orrs	r3, r2
 8003282:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003284:	4b1b      	ldr	r3, [pc, #108]	@ (80032f4 <HAL_RCC_OscConfig+0x478>)
 8003286:	2201      	movs	r2, #1
 8003288:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800328a:	f7fe fcd1 	bl	8001c30 <HAL_GetTick>
 800328e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003290:	e008      	b.n	80032a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003292:	f7fe fccd 	bl	8001c30 <HAL_GetTick>
 8003296:	4602      	mov	r2, r0
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	2b02      	cmp	r3, #2
 800329e:	d901      	bls.n	80032a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80032a0:	2303      	movs	r3, #3
 80032a2:	e05c      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a4:	4b11      	ldr	r3, [pc, #68]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d0f0      	beq.n	8003292 <HAL_RCC_OscConfig+0x416>
 80032b0:	e054      	b.n	800335c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032b2:	4b10      	ldr	r3, [pc, #64]	@ (80032f4 <HAL_RCC_OscConfig+0x478>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b8:	f7fe fcba 	bl	8001c30 <HAL_GetTick>
 80032bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032be:	e008      	b.n	80032d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c0:	f7fe fcb6 	bl	8001c30 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	2b02      	cmp	r3, #2
 80032cc:	d901      	bls.n	80032d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80032ce:	2303      	movs	r3, #3
 80032d0:	e045      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d2:	4b06      	ldr	r3, [pc, #24]	@ (80032ec <HAL_RCC_OscConfig+0x470>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d1f0      	bne.n	80032c0 <HAL_RCC_OscConfig+0x444>
 80032de:	e03d      	b.n	800335c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	699b      	ldr	r3, [r3, #24]
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d107      	bne.n	80032f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e038      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
 80032ec:	40023800 	.word	0x40023800
 80032f0:	40007000 	.word	0x40007000
 80032f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003368 <HAL_RCC_OscConfig+0x4ec>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	699b      	ldr	r3, [r3, #24]
 8003302:	2b01      	cmp	r3, #1
 8003304:	d028      	beq.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003310:	429a      	cmp	r2, r3
 8003312:	d121      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800331e:	429a      	cmp	r2, r3
 8003320:	d11a      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003328:	4013      	ands	r3, r2
 800332a:	687a      	ldr	r2, [r7, #4]
 800332c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800332e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003330:	4293      	cmp	r3, r2
 8003332:	d111      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800333e:	085b      	lsrs	r3, r3, #1
 8003340:	3b01      	subs	r3, #1
 8003342:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003344:	429a      	cmp	r2, r3
 8003346:	d107      	bne.n	8003358 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003352:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003354:	429a      	cmp	r2, r3
 8003356:	d001      	beq.n	800335c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800335c:	2300      	movs	r3, #0
}
 800335e:	4618      	mov	r0, r3
 8003360:	3718      	adds	r7, #24
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	40023800 	.word	0x40023800

0800336c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d101      	bne.n	8003380 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	e0cc      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003380:	4b68      	ldr	r3, [pc, #416]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0307 	and.w	r3, r3, #7
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	429a      	cmp	r2, r3
 800338c:	d90c      	bls.n	80033a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800338e:	4b65      	ldr	r3, [pc, #404]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	b2d2      	uxtb	r2, r2
 8003394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003396:	4b63      	ldr	r3, [pc, #396]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	683a      	ldr	r2, [r7, #0]
 80033a0:	429a      	cmp	r2, r3
 80033a2:	d001      	beq.n	80033a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e0b8      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d020      	beq.n	80033f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0304 	and.w	r3, r3, #4
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d005      	beq.n	80033cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033c0:	4b59      	ldr	r3, [pc, #356]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	4a58      	ldr	r2, [pc, #352]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033c6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80033ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f003 0308 	and.w	r3, r3, #8
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d005      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033d8:	4b53      	ldr	r3, [pc, #332]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	4a52      	ldr	r2, [pc, #328]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033de:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80033e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033e4:	4b50      	ldr	r3, [pc, #320]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	494d      	ldr	r1, [pc, #308]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d044      	beq.n	800348c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b01      	cmp	r3, #1
 8003408:	d107      	bne.n	800341a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340a:	4b47      	ldr	r3, [pc, #284]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003412:	2b00      	cmp	r3, #0
 8003414:	d119      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e07f      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	2b02      	cmp	r3, #2
 8003420:	d003      	beq.n	800342a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003426:	2b03      	cmp	r3, #3
 8003428:	d107      	bne.n	800343a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800342a:	4b3f      	ldr	r3, [pc, #252]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003432:	2b00      	cmp	r3, #0
 8003434:	d109      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e06f      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800343a:	4b3b      	ldr	r3, [pc, #236]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0302 	and.w	r3, r3, #2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e067      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800344a:	4b37      	ldr	r3, [pc, #220]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f023 0203 	bic.w	r2, r3, #3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	4934      	ldr	r1, [pc, #208]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 8003458:	4313      	orrs	r3, r2
 800345a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800345c:	f7fe fbe8 	bl	8001c30 <HAL_GetTick>
 8003460:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003462:	e00a      	b.n	800347a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003464:	f7fe fbe4 	bl	8001c30 <HAL_GetTick>
 8003468:	4602      	mov	r2, r0
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1ad3      	subs	r3, r2, r3
 800346e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003472:	4293      	cmp	r3, r2
 8003474:	d901      	bls.n	800347a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e04f      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800347a:	4b2b      	ldr	r3, [pc, #172]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	f003 020c 	and.w	r2, r3, #12
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	429a      	cmp	r2, r3
 800348a:	d1eb      	bne.n	8003464 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800348c:	4b25      	ldr	r3, [pc, #148]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f003 0307 	and.w	r3, r3, #7
 8003494:	683a      	ldr	r2, [r7, #0]
 8003496:	429a      	cmp	r2, r3
 8003498:	d20c      	bcs.n	80034b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800349a:	4b22      	ldr	r3, [pc, #136]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	b2d2      	uxtb	r2, r2
 80034a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80034a2:	4b20      	ldr	r3, [pc, #128]	@ (8003524 <HAL_RCC_ClockConfig+0x1b8>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0307 	and.w	r3, r3, #7
 80034aa:	683a      	ldr	r2, [r7, #0]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e032      	b.n	800351a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 0304 	and.w	r3, r3, #4
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d008      	beq.n	80034d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034c0:	4b19      	ldr	r3, [pc, #100]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	4916      	ldr	r1, [pc, #88]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	4313      	orrs	r3, r2
 80034d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d009      	beq.n	80034f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80034de:	4b12      	ldr	r3, [pc, #72]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	00db      	lsls	r3, r3, #3
 80034ec:	490e      	ldr	r1, [pc, #56]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	4313      	orrs	r3, r2
 80034f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80034f2:	f000 f821 	bl	8003538 <HAL_RCC_GetSysClockFreq>
 80034f6:	4602      	mov	r2, r0
 80034f8:	4b0b      	ldr	r3, [pc, #44]	@ (8003528 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	091b      	lsrs	r3, r3, #4
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	490a      	ldr	r1, [pc, #40]	@ (800352c <HAL_RCC_ClockConfig+0x1c0>)
 8003504:	5ccb      	ldrb	r3, [r1, r3]
 8003506:	fa22 f303 	lsr.w	r3, r2, r3
 800350a:	4a09      	ldr	r2, [pc, #36]	@ (8003530 <HAL_RCC_ClockConfig+0x1c4>)
 800350c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800350e:	4b09      	ldr	r3, [pc, #36]	@ (8003534 <HAL_RCC_ClockConfig+0x1c8>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	4618      	mov	r0, r3
 8003514:	f7fe fb48 	bl	8001ba8 <HAL_InitTick>

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40023c00 	.word	0x40023c00
 8003528:	40023800 	.word	0x40023800
 800352c:	0800a674 	.word	0x0800a674
 8003530:	20000048 	.word	0x20000048
 8003534:	20000064 	.word	0x20000064

08003538 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800353c:	b090      	sub	sp, #64	@ 0x40
 800353e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003540:	2300      	movs	r3, #0
 8003542:	637b      	str	r3, [r7, #52]	@ 0x34
 8003544:	2300      	movs	r3, #0
 8003546:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003548:	2300      	movs	r3, #0
 800354a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800354c:	2300      	movs	r3, #0
 800354e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003550:	4b59      	ldr	r3, [pc, #356]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f003 030c 	and.w	r3, r3, #12
 8003558:	2b08      	cmp	r3, #8
 800355a:	d00d      	beq.n	8003578 <HAL_RCC_GetSysClockFreq+0x40>
 800355c:	2b08      	cmp	r3, #8
 800355e:	f200 80a1 	bhi.w	80036a4 <HAL_RCC_GetSysClockFreq+0x16c>
 8003562:	2b00      	cmp	r3, #0
 8003564:	d002      	beq.n	800356c <HAL_RCC_GetSysClockFreq+0x34>
 8003566:	2b04      	cmp	r3, #4
 8003568:	d003      	beq.n	8003572 <HAL_RCC_GetSysClockFreq+0x3a>
 800356a:	e09b      	b.n	80036a4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800356c:	4b53      	ldr	r3, [pc, #332]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x184>)
 800356e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8003570:	e09b      	b.n	80036aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003572:	4b53      	ldr	r3, [pc, #332]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003574:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003576:	e098      	b.n	80036aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003578:	4b4f      	ldr	r3, [pc, #316]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003580:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003582:	4b4d      	ldr	r3, [pc, #308]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800358a:	2b00      	cmp	r3, #0
 800358c:	d028      	beq.n	80035e0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800358e:	4b4a      	ldr	r3, [pc, #296]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	099b      	lsrs	r3, r3, #6
 8003594:	2200      	movs	r2, #0
 8003596:	623b      	str	r3, [r7, #32]
 8003598:	627a      	str	r2, [r7, #36]	@ 0x24
 800359a:	6a3b      	ldr	r3, [r7, #32]
 800359c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80035a0:	2100      	movs	r1, #0
 80035a2:	4b47      	ldr	r3, [pc, #284]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80035a4:	fb03 f201 	mul.w	r2, r3, r1
 80035a8:	2300      	movs	r3, #0
 80035aa:	fb00 f303 	mul.w	r3, r0, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	4a43      	ldr	r2, [pc, #268]	@ (80036c0 <HAL_RCC_GetSysClockFreq+0x188>)
 80035b2:	fba0 1202 	umull	r1, r2, r0, r2
 80035b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035b8:	460a      	mov	r2, r1
 80035ba:	62ba      	str	r2, [r7, #40]	@ 0x28
 80035bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035be:	4413      	add	r3, r2
 80035c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80035c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c4:	2200      	movs	r2, #0
 80035c6:	61bb      	str	r3, [r7, #24]
 80035c8:	61fa      	str	r2, [r7, #28]
 80035ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035ce:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80035d2:	f7fc fe5d 	bl	8000290 <__aeabi_uldivmod>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4613      	mov	r3, r2
 80035dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80035de:	e053      	b.n	8003688 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035e0:	4b35      	ldr	r3, [pc, #212]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x180>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	099b      	lsrs	r3, r3, #6
 80035e6:	2200      	movs	r2, #0
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	617a      	str	r2, [r7, #20]
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80035f2:	f04f 0b00 	mov.w	fp, #0
 80035f6:	4652      	mov	r2, sl
 80035f8:	465b      	mov	r3, fp
 80035fa:	f04f 0000 	mov.w	r0, #0
 80035fe:	f04f 0100 	mov.w	r1, #0
 8003602:	0159      	lsls	r1, r3, #5
 8003604:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003608:	0150      	lsls	r0, r2, #5
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	ebb2 080a 	subs.w	r8, r2, sl
 8003612:	eb63 090b 	sbc.w	r9, r3, fp
 8003616:	f04f 0200 	mov.w	r2, #0
 800361a:	f04f 0300 	mov.w	r3, #0
 800361e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003622:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003626:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800362a:	ebb2 0408 	subs.w	r4, r2, r8
 800362e:	eb63 0509 	sbc.w	r5, r3, r9
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	00eb      	lsls	r3, r5, #3
 800363c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003640:	00e2      	lsls	r2, r4, #3
 8003642:	4614      	mov	r4, r2
 8003644:	461d      	mov	r5, r3
 8003646:	eb14 030a 	adds.w	r3, r4, sl
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	eb45 030b 	adc.w	r3, r5, fp
 8003650:	607b      	str	r3, [r7, #4]
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	f04f 0300 	mov.w	r3, #0
 800365a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800365e:	4629      	mov	r1, r5
 8003660:	028b      	lsls	r3, r1, #10
 8003662:	4621      	mov	r1, r4
 8003664:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003668:	4621      	mov	r1, r4
 800366a:	028a      	lsls	r2, r1, #10
 800366c:	4610      	mov	r0, r2
 800366e:	4619      	mov	r1, r3
 8003670:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003672:	2200      	movs	r2, #0
 8003674:	60bb      	str	r3, [r7, #8]
 8003676:	60fa      	str	r2, [r7, #12]
 8003678:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800367c:	f7fc fe08 	bl	8000290 <__aeabi_uldivmod>
 8003680:	4602      	mov	r2, r0
 8003682:	460b      	mov	r3, r1
 8003684:	4613      	mov	r3, r2
 8003686:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003688:	4b0b      	ldr	r3, [pc, #44]	@ (80036b8 <HAL_RCC_GetSysClockFreq+0x180>)
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	0c1b      	lsrs	r3, r3, #16
 800368e:	f003 0303 	and.w	r3, r3, #3
 8003692:	3301      	adds	r3, #1
 8003694:	005b      	lsls	r3, r3, #1
 8003696:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003698:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800369a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800369c:	fbb2 f3f3 	udiv	r3, r2, r3
 80036a0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036a2:	e002      	b.n	80036aa <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036a4:	4b05      	ldr	r3, [pc, #20]	@ (80036bc <HAL_RCC_GetSysClockFreq+0x184>)
 80036a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	3740      	adds	r7, #64	@ 0x40
 80036b0:	46bd      	mov	sp, r7
 80036b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036b6:	bf00      	nop
 80036b8:	40023800 	.word	0x40023800
 80036bc:	00f42400 	.word	0x00f42400
 80036c0:	018cba80 	.word	0x018cba80

080036c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036c4:	b480      	push	{r7}
 80036c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036c8:	4b03      	ldr	r3, [pc, #12]	@ (80036d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036ca:	681b      	ldr	r3, [r3, #0]
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr
 80036d6:	bf00      	nop
 80036d8:	20000048 	.word	0x20000048

080036dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80036e0:	f7ff fff0 	bl	80036c4 <HAL_RCC_GetHCLKFreq>
 80036e4:	4602      	mov	r2, r0
 80036e6:	4b05      	ldr	r3, [pc, #20]	@ (80036fc <HAL_RCC_GetPCLK1Freq+0x20>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	0a9b      	lsrs	r3, r3, #10
 80036ec:	f003 0307 	and.w	r3, r3, #7
 80036f0:	4903      	ldr	r1, [pc, #12]	@ (8003700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036f2:	5ccb      	ldrb	r3, [r1, r3]
 80036f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40023800 	.word	0x40023800
 8003700:	0800a684 	.word	0x0800a684

08003704 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003704:	b084      	sub	sp, #16
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	f107 001c 	add.w	r0, r7, #28
 8003712:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003716:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800371a:	2b01      	cmp	r3, #1
 800371c:	d123      	bne.n	8003766 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003722:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003732:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003746:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800374a:	2b01      	cmp	r3, #1
 800374c:	d105      	bne.n	800375a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800375a:	6878      	ldr	r0, [r7, #4]
 800375c:	f000 faa0 	bl	8003ca0 <USB_CoreReset>
 8003760:	4603      	mov	r3, r0
 8003762:	73fb      	strb	r3, [r7, #15]
 8003764:	e01b      	b.n	800379e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fa94 	bl	8003ca0 <USB_CoreReset>
 8003778:	4603      	mov	r3, r0
 800377a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800377c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003780:	2b00      	cmp	r3, #0
 8003782:	d106      	bne.n	8003792 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003788:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003790:	e005      	b.n	800379e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003796:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800379e:	7fbb      	ldrb	r3, [r7, #30]
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d10b      	bne.n	80037bc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f043 0206 	orr.w	r2, r3, #6
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80037bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3710      	adds	r7, #16
 80037c2:	46bd      	mov	sp, r7
 80037c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037c8:	b004      	add	sp, #16
 80037ca:	4770      	bx	lr

080037cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f023 0201 	bic.w	r2, r3, #1
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80037e0:	2300      	movs	r3, #0
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	370c      	adds	r7, #12
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr

080037ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b084      	sub	sp, #16
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	6078      	str	r0, [r7, #4]
 80037f6:	460b      	mov	r3, r1
 80037f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800380a:	78fb      	ldrb	r3, [r7, #3]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d115      	bne.n	800383c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800381c:	200a      	movs	r0, #10
 800381e:	f7fe fa13 	bl	8001c48 <HAL_Delay>
      ms += 10U;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	330a      	adds	r3, #10
 8003826:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f000 fa2b 	bl	8003c84 <USB_GetMode>
 800382e:	4603      	mov	r3, r0
 8003830:	2b01      	cmp	r3, #1
 8003832:	d01e      	beq.n	8003872 <USB_SetCurrentMode+0x84>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2bc7      	cmp	r3, #199	@ 0xc7
 8003838:	d9f0      	bls.n	800381c <USB_SetCurrentMode+0x2e>
 800383a:	e01a      	b.n	8003872 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800383c:	78fb      	ldrb	r3, [r7, #3]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d115      	bne.n	800386e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	68db      	ldr	r3, [r3, #12]
 8003846:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800384e:	200a      	movs	r0, #10
 8003850:	f7fe f9fa 	bl	8001c48 <HAL_Delay>
      ms += 10U;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	330a      	adds	r3, #10
 8003858:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f000 fa12 	bl	8003c84 <USB_GetMode>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d005      	beq.n	8003872 <USB_SetCurrentMode+0x84>
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2bc7      	cmp	r3, #199	@ 0xc7
 800386a:	d9f0      	bls.n	800384e <USB_SetCurrentMode+0x60>
 800386c:	e001      	b.n	8003872 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e005      	b.n	800387e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	2bc8      	cmp	r3, #200	@ 0xc8
 8003876:	d101      	bne.n	800387c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003878:	2301      	movs	r3, #1
 800387a:	e000      	b.n	800387e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800387c:	2300      	movs	r3, #0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3710      	adds	r7, #16
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
	...

08003888 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003888:	b084      	sub	sp, #16
 800388a:	b580      	push	{r7, lr}
 800388c:	b086      	sub	sp, #24
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003896:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800389a:	2300      	movs	r3, #0
 800389c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038a2:	2300      	movs	r3, #0
 80038a4:	613b      	str	r3, [r7, #16]
 80038a6:	e009      	b.n	80038bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	3340      	adds	r3, #64	@ 0x40
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	4413      	add	r3, r2
 80038b2:	2200      	movs	r2, #0
 80038b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	3301      	adds	r3, #1
 80038ba:	613b      	str	r3, [r7, #16]
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	2b0e      	cmp	r3, #14
 80038c0:	d9f2      	bls.n	80038a8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80038c2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d11c      	bne.n	8003904 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038d8:	f043 0302 	orr.w	r3, r3, #2
 80038dc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ee:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038fa:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	639a      	str	r2, [r3, #56]	@ 0x38
 8003902:	e00b      	b.n	800391c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003908:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003914:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003922:	461a      	mov	r2, r3
 8003924:	2300      	movs	r3, #0
 8003926:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003928:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800392c:	2b01      	cmp	r3, #1
 800392e:	d10d      	bne.n	800394c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003930:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003934:	2b00      	cmp	r3, #0
 8003936:	d104      	bne.n	8003942 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003938:	2100      	movs	r1, #0
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 f968 	bl	8003c10 <USB_SetDevSpeed>
 8003940:	e008      	b.n	8003954 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003942:	2101      	movs	r1, #1
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f000 f963 	bl	8003c10 <USB_SetDevSpeed>
 800394a:	e003      	b.n	8003954 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800394c:	2103      	movs	r1, #3
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 f95e 	bl	8003c10 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003954:	2110      	movs	r1, #16
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f8fa 	bl	8003b50 <USB_FlushTxFifo>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f924 	bl	8003bb4 <USB_FlushRxFifo>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800397c:	461a      	mov	r2, r3
 800397e:	2300      	movs	r3, #0
 8003980:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003988:	461a      	mov	r2, r3
 800398a:	2300      	movs	r3, #0
 800398c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003994:	461a      	mov	r2, r3
 8003996:	2300      	movs	r3, #0
 8003998:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800399a:	2300      	movs	r3, #0
 800399c:	613b      	str	r3, [r7, #16]
 800399e:	e043      	b.n	8003a28 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	015a      	lsls	r2, r3, #5
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80039b2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80039b6:	d118      	bne.n	80039ea <USB_DevInit+0x162>
    {
      if (i == 0U)
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d10a      	bne.n	80039d4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039ca:	461a      	mov	r2, r3
 80039cc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80039d0:	6013      	str	r3, [r2, #0]
 80039d2:	e013      	b.n	80039fc <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039e0:	461a      	mov	r2, r3
 80039e2:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	e008      	b.n	80039fc <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	015a      	lsls	r2, r3, #5
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	4413      	add	r3, r2
 80039f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039f6:	461a      	mov	r2, r3
 80039f8:	2300      	movs	r3, #0
 80039fa:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	015a      	lsls	r2, r3, #5
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4413      	add	r3, r2
 8003a04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a08:	461a      	mov	r2, r3
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003a20:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	3301      	adds	r3, #1
 8003a26:	613b      	str	r3, [r7, #16]
 8003a28:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d3b5      	bcc.n	80039a0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a34:	2300      	movs	r3, #0
 8003a36:	613b      	str	r3, [r7, #16]
 8003a38:	e043      	b.n	8003ac2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003a50:	d118      	bne.n	8003a84 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d10a      	bne.n	8003a6e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a64:	461a      	mov	r2, r3
 8003a66:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003a6a:	6013      	str	r3, [r2, #0]
 8003a6c:	e013      	b.n	8003a96 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003a80:	6013      	str	r3, [r2, #0]
 8003a82:	e008      	b.n	8003a96 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	015a      	lsls	r2, r3, #5
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003a90:	461a      	mov	r2, r3
 8003a92:	2300      	movs	r3, #0
 8003a94:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	015a      	lsls	r2, r3, #5
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	4413      	add	r3, r2
 8003a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003aa2:	461a      	mov	r2, r3
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ab4:	461a      	mov	r2, r3
 8003ab6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003aba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	613b      	str	r3, [r7, #16]
 8003ac2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d3b5      	bcc.n	8003a3a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ae0:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003aee:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003af0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d105      	bne.n	8003b04 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	f043 0210 	orr.w	r2, r3, #16
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	699a      	ldr	r2, [r3, #24]
 8003b08:	4b10      	ldr	r3, [pc, #64]	@ (8003b4c <USB_DevInit+0x2c4>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b10:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d005      	beq.n	8003b24 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	699b      	ldr	r3, [r3, #24]
 8003b1c:	f043 0208 	orr.w	r2, r3, #8
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b24:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d107      	bne.n	8003b3c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003b34:	f043 0304 	orr.w	r3, r3, #4
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3718      	adds	r7, #24
 8003b42:	46bd      	mov	sp, r7
 8003b44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b48:	b004      	add	sp, #16
 8003b4a:	4770      	bx	lr
 8003b4c:	803c3800 	.word	0x803c3800

08003b50 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3301      	adds	r3, #1
 8003b62:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b6a:	d901      	bls.n	8003b70 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e01b      	b.n	8003ba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	daf2      	bge.n	8003b5e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003b78:	2300      	movs	r3, #0
 8003b7a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	019b      	lsls	r3, r3, #6
 8003b80:	f043 0220 	orr.w	r2, r3, #32
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003b94:	d901      	bls.n	8003b9a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e006      	b.n	8003ba8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	691b      	ldr	r3, [r3, #16]
 8003b9e:	f003 0320 	and.w	r3, r3, #32
 8003ba2:	2b20      	cmp	r3, #32
 8003ba4:	d0f0      	beq.n	8003b88 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003ba6:	2300      	movs	r3, #0
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3714      	adds	r7, #20
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b085      	sub	sp, #20
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bcc:	d901      	bls.n	8003bd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e018      	b.n	8003c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	daf2      	bge.n	8003bc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003bda:	2300      	movs	r3, #0
 8003bdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2210      	movs	r2, #16
 8003be2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3301      	adds	r3, #1
 8003be8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003bf0:	d901      	bls.n	8003bf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003bf2:	2303      	movs	r3, #3
 8003bf4:	e006      	b.n	8003c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	691b      	ldr	r3, [r3, #16]
 8003bfa:	f003 0310 	and.w	r3, r3, #16
 8003bfe:	2b10      	cmp	r3, #16
 8003c00:	d0f0      	beq.n	8003be4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003c02:	2300      	movs	r3, #0
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3714      	adds	r7, #20
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr

08003c10 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	460b      	mov	r3, r1
 8003c1a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	78fb      	ldrb	r3, [r7, #3]
 8003c2a:	68f9      	ldr	r1, [r7, #12]
 8003c2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003c30:	4313      	orrs	r3, r2
 8003c32:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c34:	2300      	movs	r3, #0
}
 8003c36:	4618      	mov	r0, r3
 8003c38:	3714      	adds	r7, #20
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b085      	sub	sp, #20
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8003c5c:	f023 0303 	bic.w	r3, r3, #3
 8003c60:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	68fa      	ldr	r2, [r7, #12]
 8003c6c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003c70:	f043 0302 	orr.w	r3, r3, #2
 8003c74:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003c76:	2300      	movs	r3, #0
}
 8003c78:	4618      	mov	r0, r3
 8003c7a:	3714      	adds	r7, #20
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c82:	4770      	bx	lr

08003c84 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b083      	sub	sp, #12
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f003 0301 	and.w	r3, r3, #1
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	370c      	adds	r7, #12
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9e:	4770      	bx	lr

08003ca0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003ca0:	b480      	push	{r7}
 8003ca2:	b085      	sub	sp, #20
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003cb8:	d901      	bls.n	8003cbe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003cba:	2303      	movs	r3, #3
 8003cbc:	e01b      	b.n	8003cf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	691b      	ldr	r3, [r3, #16]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	daf2      	bge.n	8003cac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	f043 0201 	orr.w	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8003ce2:	d901      	bls.n	8003ce8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e006      	b.n	8003cf6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	691b      	ldr	r3, [r3, #16]
 8003cec:	f003 0301 	and.w	r3, r3, #1
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d0f0      	beq.n	8003cd6 <USB_CoreReset+0x36>

  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3714      	adds	r7, #20
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
	...

08003d04 <_prep_out_transaction>:
static cdcd_interface_t _cdcd_itf[CFG_TUD_CDC];
CFG_TUD_MEM_SECTION static cdcd_epbuf_t _cdcd_epbuf[CFG_TUD_CDC];

static tud_cdc_configure_t _cdcd_cfg = TUD_CDC_CONFIGURE_DEFAULT();

static bool _prep_out_transaction(uint8_t itf) {
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b086      	sub	sp, #24
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	71fb      	strb	r3, [r7, #7]
  const uint8_t rhport = 0;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	75fb      	strb	r3, [r7, #23]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8003d12:	79fb      	ldrb	r3, [r7, #7]
 8003d14:	22a8      	movs	r2, #168	@ 0xa8
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	4a30      	ldr	r2, [pc, #192]	@ (8003ddc <_prep_out_transaction+0xd8>)
 8003d1c:	4413      	add	r3, r2
 8003d1e:	613b      	str	r3, [r7, #16]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	01db      	lsls	r3, r3, #7
 8003d24:	4a2e      	ldr	r2, [pc, #184]	@ (8003de0 <_prep_out_transaction+0xdc>)
 8003d26:	4413      	add	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]
bool tud_suspended(void);

// Check if device is ready to transfer
TU_ATTR_ALWAYS_INLINE static inline
bool tud_ready(void) {
  return tud_mounted() && !tud_suspended();
 8003d2a:	f001 fff7 	bl	8005d1c <tud_mounted>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d009      	beq.n	8003d48 <_prep_out_transaction+0x44>
 8003d34:	f002 f804 	bl	8005d40 <tud_suspended>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f083 0301 	eor.w	r3, r3, #1
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d001      	beq.n	8003d48 <_prep_out_transaction+0x44>
 8003d44:	2301      	movs	r3, #1
 8003d46:	e000      	b.n	8003d4a <_prep_out_transaction+0x46>
 8003d48:	2300      	movs	r3, #0
 8003d4a:	f003 0301 	and.w	r3, r3, #1
 8003d4e:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready() && p_cdc->ep_out);
 8003d50:	f083 0301 	eor.w	r3, r3, #1
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d103      	bne.n	8003d62 <_prep_out_transaction+0x5e>
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	78db      	ldrb	r3, [r3, #3]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d101      	bne.n	8003d66 <_prep_out_transaction+0x62>
 8003d62:	2300      	movs	r3, #0
 8003d64:	e035      	b.n	8003dd2 <_prep_out_transaction+0xce>

  uint16_t available = tu_fifo_remaining(&p_cdc->rx_ff);
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	3310      	adds	r3, #16
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f001 fe51 	bl	8005a12 <tu_fifo_remaining>
 8003d70:	4603      	mov	r3, r0
 8003d72:	817b      	strh	r3, [r7, #10]

  // Prepare for incoming data but only allow what we can store in the ring buffer.
  // TODO Actually we can still carry out the transfer, keeping count of received bytes
  // and slowly move it to the FIFO when read().
  // This pre-check reduces endpoint claiming
  TU_VERIFY(available >= CFG_TUD_CDC_EP_BUFSIZE);
 8003d74:	897b      	ldrh	r3, [r7, #10]
 8003d76:	2b3f      	cmp	r3, #63	@ 0x3f
 8003d78:	d801      	bhi.n	8003d7e <_prep_out_transaction+0x7a>
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	e029      	b.n	8003dd2 <_prep_out_transaction+0xce>

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_out));
 8003d7e:	693b      	ldr	r3, [r7, #16]
 8003d80:	78da      	ldrb	r2, [r3, #3]
 8003d82:	7dfb      	ldrb	r3, [r7, #23]
 8003d84:	4611      	mov	r1, r2
 8003d86:	4618      	mov	r0, r3
 8003d88:	f003 faea 	bl	8007360 <usbd_edpt_claim>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	f083 0301 	eor.w	r3, r3, #1
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d001      	beq.n	8003d9c <_prep_out_transaction+0x98>
 8003d98:	2300      	movs	r3, #0
 8003d9a:	e01a      	b.n	8003dd2 <_prep_out_transaction+0xce>

  // fifo can be changed before endpoint is claimed
  available = tu_fifo_remaining(&p_cdc->rx_ff);
 8003d9c:	693b      	ldr	r3, [r7, #16]
 8003d9e:	3310      	adds	r3, #16
 8003da0:	4618      	mov	r0, r3
 8003da2:	f001 fe36 	bl	8005a12 <tu_fifo_remaining>
 8003da6:	4603      	mov	r3, r0
 8003da8:	817b      	strh	r3, [r7, #10]

  if (available >= CFG_TUD_CDC_EP_BUFSIZE) {
 8003daa:	897b      	ldrh	r3, [r7, #10]
 8003dac:	2b3f      	cmp	r3, #63	@ 0x3f
 8003dae:	d908      	bls.n	8003dc2 <_prep_out_transaction+0xbe>
    return usbd_edpt_xfer(rhport, p_cdc->ep_out, p_epbuf->epout, CFG_TUD_CDC_EP_BUFSIZE);
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	78d9      	ldrb	r1, [r3, #3]
 8003db4:	68fa      	ldr	r2, [r7, #12]
 8003db6:	7df8      	ldrb	r0, [r7, #23]
 8003db8:	2340      	movs	r3, #64	@ 0x40
 8003dba:	f003 fb21 	bl	8007400 <usbd_edpt_xfer>
 8003dbe:	4603      	mov	r3, r0
 8003dc0:	e007      	b.n	8003dd2 <_prep_out_transaction+0xce>
  } else {
    // Release endpoint since we don't make any transfer
    usbd_edpt_release(rhport, p_cdc->ep_out);
 8003dc2:	693b      	ldr	r3, [r7, #16]
 8003dc4:	78da      	ldrb	r2, [r3, #3]
 8003dc6:	7dfb      	ldrb	r3, [r7, #23]
 8003dc8:	4611      	mov	r1, r2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f003 faf0 	bl	80073b0 <usbd_edpt_release>
    return false;
 8003dd0:	2300      	movs	r3, #0
  }
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000958 	.word	0x20000958
 8003de0:	20000a00 	.word	0x20000a00

08003de4 <tud_cdc_n_connected>:

bool tud_cdc_n_ready(uint8_t itf) {
  return tud_ready() && _cdcd_itf[itf].ep_in != 0 && _cdcd_itf[itf].ep_out != 0;
}

bool tud_cdc_n_connected(uint8_t itf) {
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	4603      	mov	r3, r0
 8003dec:	71fb      	strb	r3, [r7, #7]
 8003dee:	f001 ff95 	bl	8005d1c <tud_mounted>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d009      	beq.n	8003e0c <tud_cdc_n_connected+0x28>
 8003df8:	f001 ffa2 	bl	8005d40 <tud_suspended>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f083 0301 	eor.w	r3, r3, #1
 8003e02:	b2db      	uxtb	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d001      	beq.n	8003e0c <tud_cdc_n_connected+0x28>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <tud_cdc_n_connected+0x2a>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	f003 0301 	and.w	r3, r3, #1
 8003e12:	b2db      	uxtb	r3, r3
  // DTR (bit 0) active  is considered as connected
  return tud_ready() && tu_bit_test(_cdcd_itf[itf].line_state, 0);
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d019      	beq.n	8003e4c <tud_cdc_n_connected+0x68>
 8003e18:	79fb      	ldrb	r3, [r7, #7]
 8003e1a:	4a10      	ldr	r2, [pc, #64]	@ (8003e5c <tud_cdc_n_connected+0x78>)
 8003e1c:	21a8      	movs	r1, #168	@ 0xa8
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	4413      	add	r3, r2
 8003e24:	3304      	adds	r3, #4
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	60fb      	str	r3, [r7, #12]
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	72fb      	strb	r3, [r7, #11]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }

//------------- Bits -------------//
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_set  (uint32_t value, uint8_t pos) { return value | TU_BIT(pos);                  }
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_bit_clear(uint32_t value, uint8_t pos) { return value & (~TU_BIT(pos));               }
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8003e2e:	7afb      	ldrb	r3, [r7, #11]
 8003e30:	68fa      	ldr	r2, [r7, #12]
 8003e32:	fa22 f303 	lsr.w	r3, r2, r3
 8003e36:	f003 0301 	and.w	r3, r3, #1
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	bf14      	ite	ne
 8003e3e:	2301      	movne	r3, #1
 8003e40:	2300      	moveq	r3, #0
 8003e42:	b2db      	uxtb	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d001      	beq.n	8003e4c <tud_cdc_n_connected+0x68>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <tud_cdc_n_connected+0x6a>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	f003 0301 	and.w	r3, r3, #1
 8003e52:	b2db      	uxtb	r3, r3
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	20000958 	.word	0x20000958

08003e60 <tud_cdc_n_write>:
}

//--------------------------------------------------------------------+
// WRITE API
//--------------------------------------------------------------------+
uint32_t tud_cdc_n_write(uint8_t itf, const void* buffer, uint32_t bufsize) {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b086      	sub	sp, #24
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	60b9      	str	r1, [r7, #8]
 8003e6a:	607a      	str	r2, [r7, #4]
 8003e6c:	73fb      	strb	r3, [r7, #15]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
 8003e70:	22a8      	movs	r2, #168	@ 0xa8
 8003e72:	fb02 f303 	mul.w	r3, r2, r3
 8003e76:	4a13      	ldr	r2, [pc, #76]	@ (8003ec4 <tud_cdc_n_write+0x64>)
 8003e78:	4413      	add	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]
  uint16_t wr_count = tu_fifo_write_n(&p_cdc->tx_ff, buffer, (uint16_t) TU_MIN(bufsize, UINT16_MAX));
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	f103 001c 	add.w	r0, r3, #28
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d802      	bhi.n	8003e92 <tud_cdc_n_write+0x32>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	e001      	b.n	8003e96 <tud_cdc_n_write+0x36>
 8003e92:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003e96:	461a      	mov	r2, r3
 8003e98:	68b9      	ldr	r1, [r7, #8]
 8003e9a:	f001 fe7d 	bl	8005b98 <tu_fifo_write_n>
 8003e9e:	4603      	mov	r3, r0
 8003ea0:	827b      	strh	r3, [r7, #18]

  // flush if queue more than packet size
  if (tu_fifo_count(&p_cdc->tx_ff) >= BULK_PACKET_SIZE
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	331c      	adds	r3, #28
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f001 fd3e 	bl	8005928 <tu_fifo_count>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b3f      	cmp	r3, #63	@ 0x3f
 8003eb0:	d903      	bls.n	8003eba <tud_cdc_n_write+0x5a>
      #if CFG_TUD_CDC_TX_BUFSIZE < BULK_PACKET_SIZE
      || tu_fifo_full(&p_cdc->tx_ff) // check full if fifo size is less than packet size
      #endif
      ) {
    tud_cdc_n_write_flush(itf);
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	f000 f807 	bl	8003ec8 <tud_cdc_n_write_flush>
  }

  return wr_count;
 8003eba:	8a7b      	ldrh	r3, [r7, #18]
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	3718      	adds	r7, #24
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	20000958 	.word	0x20000958

08003ec8 <tud_cdc_n_write_flush>:

uint32_t tud_cdc_n_write_flush(uint8_t itf) {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b086      	sub	sp, #24
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	4603      	mov	r3, r0
 8003ed0:	71fb      	strb	r3, [r7, #7]
  cdcd_interface_t* p_cdc = &_cdcd_itf[itf];
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	22a8      	movs	r2, #168	@ 0xa8
 8003ed6:	fb02 f303 	mul.w	r3, r2, r3
 8003eda:	4a39      	ldr	r2, [pc, #228]	@ (8003fc0 <tud_cdc_n_write_flush+0xf8>)
 8003edc:	4413      	add	r3, r2
 8003ede:	617b      	str	r3, [r7, #20]
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	01db      	lsls	r3, r3, #7
 8003ee4:	4a37      	ldr	r2, [pc, #220]	@ (8003fc4 <tud_cdc_n_write_flush+0xfc>)
 8003ee6:	4413      	add	r3, r2
 8003ee8:	613b      	str	r3, [r7, #16]
 8003eea:	f001 ff17 	bl	8005d1c <tud_mounted>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d009      	beq.n	8003f08 <tud_cdc_n_write_flush+0x40>
 8003ef4:	f001 ff24 	bl	8005d40 <tud_suspended>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	f083 0301 	eor.w	r3, r3, #1
 8003efe:	b2db      	uxtb	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d001      	beq.n	8003f08 <tud_cdc_n_write_flush+0x40>
 8003f04:	2301      	movs	r3, #1
 8003f06:	e000      	b.n	8003f0a <tud_cdc_n_write_flush+0x42>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	b2db      	uxtb	r3, r3

  // Skip if usb is not ready yet
  TU_VERIFY(tud_ready(), 0);
 8003f10:	f083 0301 	eor.w	r3, r3, #1
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <tud_cdc_n_write_flush+0x56>
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	e04c      	b.n	8003fb8 <tud_cdc_n_write_flush+0xf0>

  // No data to send
  if (!tu_fifo_count(&p_cdc->tx_ff)) {
 8003f1e:	697b      	ldr	r3, [r7, #20]
 8003f20:	331c      	adds	r3, #28
 8003f22:	4618      	mov	r0, r3
 8003f24:	f001 fd00 	bl	8005928 <tu_fifo_count>
 8003f28:	4603      	mov	r3, r0
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d101      	bne.n	8003f32 <tud_cdc_n_write_flush+0x6a>
    return 0;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	e042      	b.n	8003fb8 <tud_cdc_n_write_flush+0xf0>
  }

  const uint8_t rhport = 0;
 8003f32:	2300      	movs	r3, #0
 8003f34:	73fb      	strb	r3, [r7, #15]

  // Claim the endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_cdc->ep_in), 0);
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	789a      	ldrb	r2, [r3, #2]
 8003f3a:	7bfb      	ldrb	r3, [r7, #15]
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f003 fa0e 	bl	8007360 <usbd_edpt_claim>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f083 0301 	eor.w	r3, r3, #1
 8003f4a:	b2db      	uxtb	r3, r3
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d001      	beq.n	8003f54 <tud_cdc_n_write_flush+0x8c>
 8003f50:	2300      	movs	r3, #0
 8003f52:	e031      	b.n	8003fb8 <tud_cdc_n_write_flush+0xf0>

  // Pull data from FIFO
  const uint16_t count = tu_fifo_read_n(&p_cdc->tx_ff, p_epbuf->epin, CFG_TUD_CDC_EP_BUFSIZE);
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	f103 001c 	add.w	r0, r3, #28
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	3340      	adds	r3, #64	@ 0x40
 8003f5e:	2240      	movs	r2, #64	@ 0x40
 8003f60:	4619      	mov	r1, r3
 8003f62:	f001 fdb2 	bl	8005aca <tu_fifo_read_n>
 8003f66:	4603      	mov	r3, r0
 8003f68:	81bb      	strh	r3, [r7, #12]

  if (count) {
 8003f6a:	89bb      	ldrh	r3, [r7, #12]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d01b      	beq.n	8003fa8 <tud_cdc_n_write_flush+0xe0>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, p_epbuf->epin, count), 0);
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	7899      	ldrb	r1, [r3, #2]
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8003f7a:	89bb      	ldrh	r3, [r7, #12]
 8003f7c:	7bf8      	ldrb	r0, [r7, #15]
 8003f7e:	f003 fa3f 	bl	8007400 <usbd_edpt_xfer>
 8003f82:	4603      	mov	r3, r0
 8003f84:	f083 0301 	eor.w	r3, r3, #1
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d00a      	beq.n	8003fa4 <tud_cdc_n_write_flush+0xdc>
 8003f8e:	4b0e      	ldr	r3, [pc, #56]	@ (8003fc8 <tud_cdc_n_write_flush+0x100>)
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d000      	beq.n	8003fa0 <tud_cdc_n_write_flush+0xd8>
 8003f9e:	be00      	bkpt	0x0000
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	e009      	b.n	8003fb8 <tud_cdc_n_write_flush+0xf0>
    return count;
 8003fa4:	89bb      	ldrh	r3, [r7, #12]
 8003fa6:	e007      	b.n	8003fb8 <tud_cdc_n_write_flush+0xf0>
  } else {
    // Release endpoint since we don't make any transfer
    // Note: data is dropped if terminal is not connected
    usbd_edpt_release(rhport, p_cdc->ep_in);
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	789a      	ldrb	r2, [r3, #2]
 8003fac:	7bfb      	ldrb	r3, [r7, #15]
 8003fae:	4611      	mov	r1, r2
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f003 f9fd 	bl	80073b0 <usbd_edpt_release>
    return 0;
 8003fb6:	2300      	movs	r3, #0
  }
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3718      	adds	r7, #24
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000958 	.word	0x20000958
 8003fc4:	20000a00 	.word	0x20000a00
 8003fc8:	e000edf0 	.word	0xe000edf0

08003fcc <cdcd_init>:
}

//--------------------------------------------------------------------+
// USBD Driver API
//--------------------------------------------------------------------+
void cdcd_init(void) {
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af02      	add	r7, sp, #8
  tu_memclr(_cdcd_itf, sizeof(_cdcd_itf));
 8003fd2:	22a8      	movs	r2, #168	@ 0xa8
 8003fd4:	2100      	movs	r1, #0
 8003fd6:	4824      	ldr	r0, [pc, #144]	@ (8004068 <cdcd_init+0x9c>)
 8003fd8:	f005 fe64 	bl	8009ca4 <memset>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8003fdc:	2300      	movs	r3, #0
 8003fde:	71fb      	strb	r3, [r7, #7]
 8003fe0:	e03a      	b.n	8004058 <cdcd_init+0x8c>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8003fe2:	79fb      	ldrb	r3, [r7, #7]
 8003fe4:	22a8      	movs	r2, #168	@ 0xa8
 8003fe6:	fb02 f303 	mul.w	r3, r2, r3
 8003fea:	4a1f      	ldr	r2, [pc, #124]	@ (8004068 <cdcd_init+0x9c>)
 8003fec:	4413      	add	r3, r2
 8003fee:	603b      	str	r3, [r7, #0]

    p_cdc->wanted_char = (char) -1;
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	22ff      	movs	r2, #255	@ 0xff
 8003ff4:	715a      	strb	r2, [r3, #5]

    // default line coding is : stop bit = 1, parity = none, data bits = 8
    p_cdc->line_coding.bit_rate = 115200;
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003ffc:	609a      	str	r2, [r3, #8]
    p_cdc->line_coding.stop_bits = 0;
 8003ffe:	683b      	ldr	r3, [r7, #0]
 8004000:	2200      	movs	r2, #0
 8004002:	731a      	strb	r2, [r3, #12]
    p_cdc->line_coding.parity = 0;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2200      	movs	r2, #0
 8004008:	735a      	strb	r2, [r3, #13]
    p_cdc->line_coding.data_bits = 8;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	2208      	movs	r2, #8
 800400e:	739a      	strb	r2, [r3, #14]

    // Config RX fifo
    tu_fifo_config(&p_cdc->rx_ff, p_cdc->rx_ff_buf, TU_ARRAY_SIZE(p_cdc->rx_ff_buf), 1, false);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	f103 0010 	add.w	r0, r3, #16
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	f103 0128 	add.w	r1, r3, #40	@ 0x28
 800401c:	2300      	movs	r3, #0
 800401e:	9300      	str	r3, [sp, #0]
 8004020:	2301      	movs	r3, #1
 8004022:	2240      	movs	r2, #64	@ 0x40
 8004024:	f000 ffee 	bl	8005004 <tu_fifo_config>

    // TX fifo can be configured to change to overwritable if not connected (DTR bit not set). Without DTR we do not
    // know if data is actually polled by terminal. This way the most current data is prioritized.
    // Default: is overwritable
    tu_fifo_config(&p_cdc->tx_ff, p_cdc->tx_ff_buf, TU_ARRAY_SIZE(p_cdc->tx_ff_buf), 1, _cdcd_cfg.tx_overwritabe_if_not_connected);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	f103 001c 	add.w	r0, r3, #28
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	f103 0168 	add.w	r1, r3, #104	@ 0x68
 8004034:	4b0d      	ldr	r3, [pc, #52]	@ (800406c <cdcd_init+0xa0>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	bf14      	ite	ne
 8004042:	2301      	movne	r3, #1
 8004044:	2300      	moveq	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	2301      	movs	r3, #1
 800404c:	2240      	movs	r2, #64	@ 0x40
 800404e:	f000 ffd9 	bl	8005004 <tu_fifo_config>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 8004052:	79fb      	ldrb	r3, [r7, #7]
 8004054:	3301      	adds	r3, #1
 8004056:	71fb      	strb	r3, [r7, #7]
 8004058:	79fb      	ldrb	r3, [r7, #7]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0c1      	beq.n	8003fe2 <cdcd_init+0x16>

    tu_fifo_config_mutex(&p_cdc->rx_ff, NULL, mutex_rd);
    tu_fifo_config_mutex(&p_cdc->tx_ff, mutex_wr, NULL);
    #endif
  }
}
 800405e:	bf00      	nop
 8004060:	bf00      	nop
 8004062:	3708      	adds	r7, #8
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}
 8004068:	20000958 	.word	0x20000958
 800406c:	2000006c 	.word	0x2000006c

08004070 <cdcd_deinit>:

bool cdcd_deinit(void) {
 8004070:	b480      	push	{r7}
 8004072:	af00      	add	r7, sp, #0
      tu_fifo_config_mutex(&p_cdc->tx_ff, NULL, NULL);
    }
  }
  #endif

  return true;
 8004074:	2301      	movs	r3, #1
}
 8004076:	4618      	mov	r0, r3
 8004078:	46bd      	mov	sp, r7
 800407a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407e:	4770      	bx	lr

08004080 <cdcd_reset>:

void cdcd_reset(uint8_t rhport) {
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	4603      	mov	r3, r0
 8004088:	71fb      	strb	r3, [r7, #7]
  (void) rhport;

  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 800408a:	2300      	movs	r3, #0
 800408c:	73fb      	strb	r3, [r7, #15]
 800408e:	e037      	b.n	8004100 <cdcd_reset+0x80>
    cdcd_interface_t* p_cdc = &_cdcd_itf[i];
 8004090:	7bfb      	ldrb	r3, [r7, #15]
 8004092:	22a8      	movs	r2, #168	@ 0xa8
 8004094:	fb02 f303 	mul.w	r3, r2, r3
 8004098:	4a1d      	ldr	r2, [pc, #116]	@ (8004110 <cdcd_reset+0x90>)
 800409a:	4413      	add	r3, r2
 800409c:	60bb      	str	r3, [r7, #8]

    tu_memclr(p_cdc, ITF_MEM_RESET_SIZE);
 800409e:	2205      	movs	r2, #5
 80040a0:	2100      	movs	r1, #0
 80040a2:	68b8      	ldr	r0, [r7, #8]
 80040a4:	f005 fdfe 	bl	8009ca4 <memset>
    if (!_cdcd_cfg.rx_persistent) {
 80040a8:	4b1a      	ldr	r3, [pc, #104]	@ (8004114 <cdcd_reset+0x94>)
 80040aa:	781b      	ldrb	r3, [r3, #0]
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d104      	bne.n	80040c0 <cdcd_reset+0x40>
      tu_fifo_clear(&p_cdc->rx_ff);
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	3310      	adds	r3, #16
 80040ba:	4618      	mov	r0, r3
 80040bc:	f001 fd90 	bl	8005be0 <tu_fifo_clear>
    }
    if (!_cdcd_cfg.tx_persistent) {
 80040c0:	4b14      	ldr	r3, [pc, #80]	@ (8004114 <cdcd_reset+0x94>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d104      	bne.n	80040d8 <cdcd_reset+0x58>
      tu_fifo_clear(&p_cdc->tx_ff);
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	331c      	adds	r3, #28
 80040d2:	4618      	mov	r0, r3
 80040d4:	f001 fd84 	bl	8005be0 <tu_fifo_clear>
    }
    tu_fifo_set_overwritable(&p_cdc->tx_ff, _cdcd_cfg.tx_overwritabe_if_not_connected);
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f103 021c 	add.w	r2, r3, #28
 80040de:	4b0d      	ldr	r3, [pc, #52]	@ (8004114 <cdcd_reset+0x94>)
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	bf14      	ite	ne
 80040ec:	2301      	movne	r3, #1
 80040ee:	2300      	moveq	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	4619      	mov	r1, r3
 80040f4:	4610      	mov	r0, r2
 80040f6:	f001 fd84 	bl	8005c02 <tu_fifo_set_overwritable>
  for (uint8_t i = 0; i < CFG_TUD_CDC; i++) {
 80040fa:	7bfb      	ldrb	r3, [r7, #15]
 80040fc:	3301      	adds	r3, #1
 80040fe:	73fb      	strb	r3, [r7, #15]
 8004100:	7bfb      	ldrb	r3, [r7, #15]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0c4      	beq.n	8004090 <cdcd_reset+0x10>
  }
}
 8004106:	bf00      	nop
 8004108:	bf00      	nop
 800410a:	3710      	adds	r7, #16
 800410c:	46bd      	mov	sp, r7
 800410e:	bd80      	pop	{r7, pc}
 8004110:	20000958 	.word	0x20000958
 8004114:	2000006c 	.word	0x2000006c

08004118 <cdcd_open>:

uint16_t cdcd_open(uint8_t rhport, const tusb_desc_interface_t* itf_desc, uint16_t max_len) {
 8004118:	b580      	push	{r7, lr}
 800411a:	b09a      	sub	sp, #104	@ 0x68
 800411c:	af02      	add	r7, sp, #8
 800411e:	4603      	mov	r3, r0
 8004120:	6039      	str	r1, [r7, #0]
 8004122:	71fb      	strb	r3, [r7, #7]
 8004124:	4613      	mov	r3, r2
 8004126:	80bb      	strh	r3, [r7, #4]
  // Only support ACM subclass
  TU_VERIFY( TUSB_CLASS_CDC                           == itf_desc->bInterfaceClass &&
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	795b      	ldrb	r3, [r3, #5]
 800412c:	2b02      	cmp	r3, #2
 800412e:	d103      	bne.n	8004138 <cdcd_open+0x20>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	799b      	ldrb	r3, [r3, #6]
 8004134:	2b02      	cmp	r3, #2
 8004136:	d001      	beq.n	800413c <cdcd_open+0x24>
 8004138:	2300      	movs	r3, #0
 800413a:	e0da      	b.n	80042f2 <cdcd_open+0x1da>
             CDC_COMM_SUBCLASS_ABSTRACT_CONTROL_MODEL == itf_desc->bInterfaceSubClass, 0);

  // Find available interface
  cdcd_interface_t* p_cdc;
  uint8_t cdc_id;
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 800413c:	2300      	movs	r3, #0
 800413e:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8004142:	e010      	b.n	8004166 <cdcd_open+0x4e>
    p_cdc = &_cdcd_itf[cdc_id];
 8004144:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004148:	22a8      	movs	r2, #168	@ 0xa8
 800414a:	fb02 f303 	mul.w	r3, r2, r3
 800414e:	4a6b      	ldr	r2, [pc, #428]	@ (80042fc <cdcd_open+0x1e4>)
 8004150:	4413      	add	r3, r2
 8004152:	65fb      	str	r3, [r7, #92]	@ 0x5c
    if (p_cdc->ep_in == 0) {
 8004154:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004156:	789b      	ldrb	r3, [r3, #2]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d009      	beq.n	8004170 <cdcd_open+0x58>
  for (cdc_id = 0; cdc_id < CFG_TUD_CDC; cdc_id++) {
 800415c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004160:	3301      	adds	r3, #1
 8004162:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
 8004166:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800416a:	2b00      	cmp	r3, #0
 800416c:	d0ea      	beq.n	8004144 <cdcd_open+0x2c>
 800416e:	e000      	b.n	8004172 <cdcd_open+0x5a>
      break;
 8004170:	bf00      	nop
    }
  }
  TU_ASSERT(cdc_id < CFG_TUD_CDC, 0);
 8004172:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <cdcd_open+0x78>
 800417a:	4b61      	ldr	r3, [pc, #388]	@ (8004300 <cdcd_open+0x1e8>)
 800417c:	647b      	str	r3, [r7, #68]	@ 0x44
 800417e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d000      	beq.n	800418c <cdcd_open+0x74>
 800418a:	be00      	bkpt	0x0000
 800418c:	2300      	movs	r3, #0
 800418e:	e0b0      	b.n	80042f2 <cdcd_open+0x1da>

  //------------- Control Interface -------------//
  p_cdc->itf_num = itf_desc->bInterfaceNumber;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	789a      	ldrb	r2, [r3, #2]
 8004194:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004196:	701a      	strb	r2, [r3, #0]

  uint16_t drv_len = sizeof(tusb_desc_interface_t);
 8004198:	2309      	movs	r3, #9
 800419a:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	643b      	str	r3, [r7, #64]	@ 0x40
// Descriptor helper
//--------------------------------------------------------------------+

// return next descriptor
TU_ATTR_ALWAYS_INLINE static inline uint8_t const * tu_desc_next(void const* desc) {
  uint8_t const* desc8 = (uint8_t const*) desc;
 80041a2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80041a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return desc8 + desc8[DESC_OFFSET_LEN];
 80041a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80041ae:	4413      	add	r3, r2
  const uint8_t* p_desc = tu_desc_next(itf_desc);
 80041b0:	657b      	str	r3, [r7, #84]	@ 0x54

  // Communication Functional Descriptors
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 80041b2:	e013      	b.n	80041dc <cdcd_open+0xc4>
 80041b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041b6:	633b      	str	r3, [r7, #48]	@ 0x30
}

// get descriptor length
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_len(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 80041b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ba:	781b      	ldrb	r3, [r3, #0]
    drv_len += tu_desc_len(p_desc);
 80041bc:	461a      	mov	r2, r3
 80041be:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80041c2:	4413      	add	r3, r2
 80041c4:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 80041c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t const* desc8 = (uint8_t const*) desc;
 80041cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ce:	637b      	str	r3, [r7, #52]	@ 0x34
  return desc8 + desc8[DESC_OFFSET_LEN];
 80041d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d2:	781b      	ldrb	r3, [r3, #0]
 80041d4:	461a      	mov	r2, r3
 80041d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80041d8:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 80041da:	657b      	str	r3, [r7, #84]	@ 0x54
 80041dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041de:	62fb      	str	r3, [r7, #44]	@ 0x2c
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 80041e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041e2:	3301      	adds	r3, #1
 80041e4:	781b      	ldrb	r3, [r3, #0]
  while (TUSB_DESC_CS_INTERFACE == tu_desc_type(p_desc) && drv_len <= max_len) {
 80041e6:	2b24      	cmp	r3, #36	@ 0x24
 80041e8:	d104      	bne.n	80041f4 <cdcd_open+0xdc>
 80041ea:	f8b7 2058 	ldrh.w	r2, [r7, #88]	@ 0x58
 80041ee:	88bb      	ldrh	r3, [r7, #4]
 80041f0:	429a      	cmp	r2, r3
 80041f2:	d9df      	bls.n	80041b4 <cdcd_open+0x9c>
 80041f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041f6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80041f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fa:	3301      	adds	r3, #1
 80041fc:	781b      	ldrb	r3, [r3, #0]
  }

  if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 80041fe:	2b05      	cmp	r3, #5
 8004200:	d12f      	bne.n	8004262 <cdcd_open+0x14a>
    // notification endpoint
    const tusb_desc_endpoint_t* desc_ep = (const tusb_desc_endpoint_t*) p_desc;
 8004202:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004204:	653b      	str	r3, [r7, #80]	@ 0x50

    TU_ASSERT(usbd_edpt_open(rhport, desc_ep), 0);
 8004206:	79fb      	ldrb	r3, [r7, #7]
 8004208:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800420a:	4618      	mov	r0, r3
 800420c:	f003 f862 	bl	80072d4 <usbd_edpt_open>
 8004210:	4603      	mov	r3, r0
 8004212:	f083 0301 	eor.w	r3, r3, #1
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b00      	cmp	r3, #0
 800421a:	d00a      	beq.n	8004232 <cdcd_open+0x11a>
 800421c:	4b38      	ldr	r3, [pc, #224]	@ (8004300 <cdcd_open+0x1e8>)
 800421e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004220:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0301 	and.w	r3, r3, #1
 8004228:	2b00      	cmp	r3, #0
 800422a:	d000      	beq.n	800422e <cdcd_open+0x116>
 800422c:	be00      	bkpt	0x0000
 800422e:	2300      	movs	r3, #0
 8004230:	e05f      	b.n	80042f2 <cdcd_open+0x1da>
    p_cdc->ep_notif = desc_ep->bEndpointAddress;
 8004232:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004234:	789a      	ldrb	r2, [r3, #2]
 8004236:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004238:	705a      	strb	r2, [r3, #1]
 800423a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800423c:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	781b      	ldrb	r3, [r3, #0]

    drv_len += tu_desc_len(p_desc);
 8004242:	461a      	mov	r2, r3
 8004244:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004248:	4413      	add	r3, r2
 800424a:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800424e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004250:	627b      	str	r3, [r7, #36]	@ 0x24
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004254:	623b      	str	r3, [r7, #32]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	781b      	ldrb	r3, [r3, #0]
 800425a:	461a      	mov	r2, r3
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 8004260:	657b      	str	r3, [r7, #84]	@ 0x54
 8004262:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004264:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	3301      	adds	r3, #1
 800426a:	781b      	ldrb	r3, [r3, #0]
  }

  //------------- Data Interface (if any) -------------//
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 800426c:	2b04      	cmp	r3, #4
 800426e:	d139      	bne.n	80042e4 <cdcd_open+0x1cc>
      (TUSB_CLASS_CDC_DATA == ((const tusb_desc_interface_t*) p_desc)->bInterfaceClass)) {
 8004270:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004272:	795b      	ldrb	r3, [r3, #5]
  if ((TUSB_DESC_INTERFACE == tu_desc_type(p_desc)) &&
 8004274:	2b0a      	cmp	r3, #10
 8004276:	d135      	bne.n	80042e4 <cdcd_open+0x1cc>
 8004278:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800427a:	60fb      	str	r3, [r7, #12]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	781b      	ldrb	r3, [r3, #0]
    // next to endpoint descriptor
    drv_len += tu_desc_len(p_desc);
 8004280:	461a      	mov	r2, r3
 8004282:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 8004286:	4413      	add	r3, r2
 8004288:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
 800428c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800428e:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	4413      	add	r3, r2
    p_desc = tu_desc_next(p_desc);
 800429e:	657b      	str	r3, [r7, #84]	@ 0x54

    // Open endpoint pair
    TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, 2, TUSB_XFER_BULK, &p_cdc->ep_out, &p_cdc->ep_in), 0);
 80042a0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80042a2:	3303      	adds	r3, #3
 80042a4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 80042a6:	3202      	adds	r2, #2
 80042a8:	79f8      	ldrb	r0, [r7, #7]
 80042aa:	9201      	str	r2, [sp, #4]
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	2302      	movs	r3, #2
 80042b0:	2202      	movs	r2, #2
 80042b2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042b4:	f002 ffa6 	bl	8007204 <usbd_open_edpt_pair>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f083 0301 	eor.w	r3, r3, #1
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d00a      	beq.n	80042da <cdcd_open+0x1c2>
 80042c4:	4b0e      	ldr	r3, [pc, #56]	@ (8004300 <cdcd_open+0x1e8>)
 80042c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f003 0301 	and.w	r3, r3, #1
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d000      	beq.n	80042d6 <cdcd_open+0x1be>
 80042d4:	be00      	bkpt	0x0000
 80042d6:	2300      	movs	r3, #0
 80042d8:	e00b      	b.n	80042f2 <cdcd_open+0x1da>

    drv_len += 2 * sizeof(tusb_desc_endpoint_t);
 80042da:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
 80042de:	330e      	adds	r3, #14
 80042e0:	f8a7 3058 	strh.w	r3, [r7, #88]	@ 0x58
  }

  // Prepare for incoming data
  _prep_out_transaction(cdc_id);
 80042e4:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80042e8:	4618      	mov	r0, r3
 80042ea:	f7ff fd0b 	bl	8003d04 <_prep_out_transaction>

  return drv_len;
 80042ee:	f8b7 3058 	ldrh.w	r3, [r7, #88]	@ 0x58
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3760      	adds	r7, #96	@ 0x60
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	20000958 	.word	0x20000958
 8004300:	e000edf0 	.word	0xe000edf0

08004304 <cdcd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool cdcd_control_xfer_cb(uint8_t rhport, uint8_t stage, const tusb_control_request_t* request) {
 8004304:	b580      	push	{r7, lr}
 8004306:	b08a      	sub	sp, #40	@ 0x28
 8004308:	af00      	add	r7, sp, #0
 800430a:	4603      	mov	r3, r0
 800430c:	603a      	str	r2, [r7, #0]
 800430e:	71fb      	strb	r3, [r7, #7]
 8004310:	460b      	mov	r3, r1
 8004312:	71bb      	strb	r3, [r7, #6]
  // Handle class request only
  TU_VERIFY(request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800431c:	b2db      	uxtb	r3, r3
 800431e:	2b20      	cmp	r3, #32
 8004320:	d001      	beq.n	8004326 <cdcd_control_xfer_cb+0x22>
 8004322:	2300      	movs	r3, #0
 8004324:	e0e6      	b.n	80044f4 <cdcd_control_xfer_cb+0x1f0>

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8004326:	2300      	movs	r3, #0
 8004328:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800432c:	e014      	b.n	8004358 <cdcd_control_xfer_cb+0x54>
    p_cdc = &_cdcd_itf[itf];
 800432e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004332:	22a8      	movs	r2, #168	@ 0xa8
 8004334:	fb02 f303 	mul.w	r3, r2, r3
 8004338:	4a70      	ldr	r2, [pc, #448]	@ (80044fc <cdcd_control_xfer_cb+0x1f8>)
 800433a:	4413      	add	r3, r2
 800433c:	623b      	str	r3, [r7, #32]
    if (p_cdc->itf_num == request->wIndex) {
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	461a      	mov	r2, r3
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	889b      	ldrh	r3, [r3, #4]
 8004348:	b29b      	uxth	r3, r3
 800434a:	429a      	cmp	r2, r3
 800434c:	d009      	beq.n	8004362 <cdcd_control_xfer_cb+0x5e>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 800434e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004352:	3301      	adds	r3, #1
 8004354:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8004358:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800435c:	2b00      	cmp	r3, #0
 800435e:	d0e6      	beq.n	800432e <cdcd_control_xfer_cb+0x2a>
 8004360:	e000      	b.n	8004364 <cdcd_control_xfer_cb+0x60>
      break;
 8004362:	bf00      	nop
    }
  }
  TU_VERIFY(itf < CFG_TUD_CDC);
 8004364:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004368:	2b00      	cmp	r3, #0
 800436a:	d001      	beq.n	8004370 <cdcd_control_xfer_cb+0x6c>
 800436c:	2300      	movs	r3, #0
 800436e:	e0c1      	b.n	80044f4 <cdcd_control_xfer_cb+0x1f0>

  switch (request->bRequest) {
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	785b      	ldrb	r3, [r3, #1]
 8004374:	3b20      	subs	r3, #32
 8004376:	2b03      	cmp	r3, #3
 8004378:	f200 80b2 	bhi.w	80044e0 <cdcd_control_xfer_cb+0x1dc>
 800437c:	a201      	add	r2, pc, #4	@ (adr r2, 8004384 <cdcd_control_xfer_cb+0x80>)
 800437e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004382:	bf00      	nop
 8004384:	08004395 	.word	0x08004395
 8004388:	080043d1 	.word	0x080043d1
 800438c:	080043eb 	.word	0x080043eb
 8004390:	080044af 	.word	0x080044af
    case CDC_REQUEST_SET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 8004394:	79bb      	ldrb	r3, [r7, #6]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d108      	bne.n	80043ac <cdcd_control_xfer_cb+0xa8>
        TU_LOG_DRV("  Set Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	f103 0208 	add.w	r2, r3, #8
 80043a0:	79f8      	ldrb	r0, [r7, #7]
 80043a2:	2307      	movs	r3, #7
 80043a4:	6839      	ldr	r1, [r7, #0]
 80043a6:	f003 fa13 	bl	80077d0 <tud_control_xfer>
      } else if (stage == CONTROL_STAGE_ACK) {
        if (tud_cdc_line_coding_cb) {
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
        }
      }
      break;
 80043aa:	e09b      	b.n	80044e4 <cdcd_control_xfer_cb+0x1e0>
      } else if (stage == CONTROL_STAGE_ACK) {
 80043ac:	79bb      	ldrb	r3, [r7, #6]
 80043ae:	2b03      	cmp	r3, #3
 80043b0:	f040 8098 	bne.w	80044e4 <cdcd_control_xfer_cb+0x1e0>
        if (tud_cdc_line_coding_cb) {
 80043b4:	4b52      	ldr	r3, [pc, #328]	@ (8004500 <cdcd_control_xfer_cb+0x1fc>)
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	f000 8094 	beq.w	80044e4 <cdcd_control_xfer_cb+0x1e0>
          tud_cdc_line_coding_cb(itf, &p_cdc->line_coding);
 80043bc:	6a3b      	ldr	r3, [r7, #32]
 80043be:	f103 0208 	add.w	r2, r3, #8
 80043c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80043c6:	4611      	mov	r1, r2
 80043c8:	4618      	mov	r0, r3
 80043ca:	f7fd fb61 	bl	8001a90 <tud_cdc_line_coding_cb>
      break;
 80043ce:	e089      	b.n	80044e4 <cdcd_control_xfer_cb+0x1e0>

    case CDC_REQUEST_GET_LINE_CODING:
      if (stage == CONTROL_STAGE_SETUP) {
 80043d0:	79bb      	ldrb	r3, [r7, #6]
 80043d2:	2b01      	cmp	r3, #1
 80043d4:	f040 8088 	bne.w	80044e8 <cdcd_control_xfer_cb+0x1e4>
        TU_LOG_DRV("  Get Line Coding\r\n");
        tud_control_xfer(rhport, request, &p_cdc->line_coding, sizeof(cdc_line_coding_t));
 80043d8:	6a3b      	ldr	r3, [r7, #32]
 80043da:	f103 0208 	add.w	r2, r3, #8
 80043de:	79f8      	ldrb	r0, [r7, #7]
 80043e0:	2307      	movs	r3, #7
 80043e2:	6839      	ldr	r1, [r7, #0]
 80043e4:	f003 f9f4 	bl	80077d0 <tud_control_xfer>
      }
      break;
 80043e8:	e07e      	b.n	80044e8 <cdcd_control_xfer_cb+0x1e4>

    case CDC_REQUEST_SET_CONTROL_LINE_STATE:
      if (stage == CONTROL_STAGE_SETUP) {
 80043ea:	79bb      	ldrb	r3, [r7, #6]
 80043ec:	2b01      	cmp	r3, #1
 80043ee:	d105      	bne.n	80043fc <cdcd_control_xfer_cb+0xf8>
        tud_control_status(rhport, request);
 80043f0:	79fb      	ldrb	r3, [r7, #7]
 80043f2:	6839      	ldr	r1, [r7, #0]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f003 f979 	bl	80076ec <tud_control_status>
        // Invoke callback
        if (tud_cdc_line_state_cb) {
          tud_cdc_line_state_cb(itf, dtr, rts);
        }
      }
      break;
 80043fa:	e077      	b.n	80044ec <cdcd_control_xfer_cb+0x1e8>
      } else if (stage == CONTROL_STAGE_ACK) {
 80043fc:	79bb      	ldrb	r3, [r7, #6]
 80043fe:	2b03      	cmp	r3, #3
 8004400:	d174      	bne.n	80044ec <cdcd_control_xfer_cb+0x1e8>
        bool const dtr = tu_bit_test(request->wValue, 0);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	885b      	ldrh	r3, [r3, #2]
 8004406:	b29b      	uxth	r3, r3
 8004408:	613b      	str	r3, [r7, #16]
 800440a:	2300      	movs	r3, #0
 800440c:	73fb      	strb	r3, [r7, #15]
 800440e:	7bfb      	ldrb	r3, [r7, #15]
 8004410:	693a      	ldr	r2, [r7, #16]
 8004412:	fa22 f303 	lsr.w	r3, r2, r3
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	bf14      	ite	ne
 800441e:	2301      	movne	r3, #1
 8004420:	2300      	moveq	r3, #0
 8004422:	b2db      	uxtb	r3, r3
 8004424:	77fb      	strb	r3, [r7, #31]
        bool const rts = tu_bit_test(request->wValue, 1);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	885b      	ldrh	r3, [r3, #2]
 800442a:	b29b      	uxth	r3, r3
 800442c:	61bb      	str	r3, [r7, #24]
 800442e:	2301      	movs	r3, #1
 8004430:	75fb      	strb	r3, [r7, #23]
 8004432:	7dfb      	ldrb	r3, [r7, #23]
 8004434:	69ba      	ldr	r2, [r7, #24]
 8004436:	fa22 f303 	lsr.w	r3, r2, r3
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	bf14      	ite	ne
 8004442:	2301      	movne	r3, #1
 8004444:	2300      	moveq	r3, #0
 8004446:	b2db      	uxtb	r3, r3
 8004448:	77bb      	strb	r3, [r7, #30]
        p_cdc->line_state = (uint8_t) request->wValue;
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	885b      	ldrh	r3, [r3, #2]
 800444e:	b29b      	uxth	r3, r3
 8004450:	b2da      	uxtb	r2, r3
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	711a      	strb	r2, [r3, #4]
        if (_cdcd_cfg.tx_overwritabe_if_not_connected) {
 8004456:	4b2b      	ldr	r3, [pc, #172]	@ (8004504 <cdcd_control_xfer_cb+0x200>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	f003 0304 	and.w	r3, r3, #4
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b00      	cmp	r3, #0
 8004462:	d013      	beq.n	800448c <cdcd_control_xfer_cb+0x188>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, !dtr);
 8004464:	6a3b      	ldr	r3, [r7, #32]
 8004466:	f103 021c 	add.w	r2, r3, #28
 800446a:	7ffb      	ldrb	r3, [r7, #31]
 800446c:	2b00      	cmp	r3, #0
 800446e:	bf14      	ite	ne
 8004470:	2301      	movne	r3, #1
 8004472:	2300      	moveq	r3, #0
 8004474:	b2db      	uxtb	r3, r3
 8004476:	f083 0301 	eor.w	r3, r3, #1
 800447a:	b2db      	uxtb	r3, r3
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	b2db      	uxtb	r3, r3
 8004482:	4619      	mov	r1, r3
 8004484:	4610      	mov	r0, r2
 8004486:	f001 fbbc 	bl	8005c02 <tu_fifo_set_overwritable>
 800448a:	e005      	b.n	8004498 <cdcd_control_xfer_cb+0x194>
          tu_fifo_set_overwritable(&p_cdc->tx_ff, false);
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	331c      	adds	r3, #28
 8004490:	2100      	movs	r1, #0
 8004492:	4618      	mov	r0, r3
 8004494:	f001 fbb5 	bl	8005c02 <tu_fifo_set_overwritable>
        if (tud_cdc_line_state_cb) {
 8004498:	4b1b      	ldr	r3, [pc, #108]	@ (8004508 <cdcd_control_xfer_cb+0x204>)
 800449a:	2b00      	cmp	r3, #0
 800449c:	d026      	beq.n	80044ec <cdcd_control_xfer_cb+0x1e8>
          tud_cdc_line_state_cb(itf, dtr, rts);
 800449e:	7fba      	ldrb	r2, [r7, #30]
 80044a0:	7ff9      	ldrb	r1, [r7, #31]
 80044a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fc f9e2 	bl	8000870 <tud_cdc_line_state_cb>
      break;
 80044ac:	e01e      	b.n	80044ec <cdcd_control_xfer_cb+0x1e8>

    case CDC_REQUEST_SEND_BREAK:
      if (stage == CONTROL_STAGE_SETUP) {
 80044ae:	79bb      	ldrb	r3, [r7, #6]
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d105      	bne.n	80044c0 <cdcd_control_xfer_cb+0x1bc>
        tud_control_status(rhport, request);
 80044b4:	79fb      	ldrb	r3, [r7, #7]
 80044b6:	6839      	ldr	r1, [r7, #0]
 80044b8:	4618      	mov	r0, r3
 80044ba:	f003 f917 	bl	80076ec <tud_control_status>
        TU_LOG_DRV("  Send Break\r\n");
        if (tud_cdc_send_break_cb) {
          tud_cdc_send_break_cb(itf, request->wValue);
        }
      }
      break;
 80044be:	e017      	b.n	80044f0 <cdcd_control_xfer_cb+0x1ec>
      } else if (stage == CONTROL_STAGE_ACK) {
 80044c0:	79bb      	ldrb	r3, [r7, #6]
 80044c2:	2b03      	cmp	r3, #3
 80044c4:	d114      	bne.n	80044f0 <cdcd_control_xfer_cb+0x1ec>
        if (tud_cdc_send_break_cb) {
 80044c6:	4b11      	ldr	r3, [pc, #68]	@ (800450c <cdcd_control_xfer_cb+0x208>)
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d011      	beq.n	80044f0 <cdcd_control_xfer_cb+0x1ec>
          tud_cdc_send_break_cb(itf, request->wValue);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	885b      	ldrh	r3, [r3, #2]
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80044d6:	4611      	mov	r1, r2
 80044d8:	4618      	mov	r0, r3
 80044da:	f3af 8000 	nop.w
      break;
 80044de:	e007      	b.n	80044f0 <cdcd_control_xfer_cb+0x1ec>

    default:
      return false; // stall unsupported request
 80044e0:	2300      	movs	r3, #0
 80044e2:	e007      	b.n	80044f4 <cdcd_control_xfer_cb+0x1f0>
      break;
 80044e4:	bf00      	nop
 80044e6:	e004      	b.n	80044f2 <cdcd_control_xfer_cb+0x1ee>
      break;
 80044e8:	bf00      	nop
 80044ea:	e002      	b.n	80044f2 <cdcd_control_xfer_cb+0x1ee>
      break;
 80044ec:	bf00      	nop
 80044ee:	e000      	b.n	80044f2 <cdcd_control_xfer_cb+0x1ee>
      break;
 80044f0:	bf00      	nop
  }

  return true;
 80044f2:	2301      	movs	r3, #1
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3728      	adds	r7, #40	@ 0x28
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}
 80044fc:	20000958 	.word	0x20000958
 8004500:	08001a91 	.word	0x08001a91
 8004504:	2000006c 	.word	0x2000006c
 8004508:	08000871 	.word	0x08000871
 800450c:	00000000 	.word	0x00000000

08004510 <cdcd_xfer_cb>:

bool cdcd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8004510:	b580      	push	{r7, lr}
 8004512:	b088      	sub	sp, #32
 8004514:	af00      	add	r7, sp, #0
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	4603      	mov	r3, r0
 800451a:	71fb      	strb	r3, [r7, #7]
 800451c:	460b      	mov	r3, r1
 800451e:	71bb      	strb	r3, [r7, #6]
 8004520:	4613      	mov	r3, r2
 8004522:	717b      	strb	r3, [r7, #5]

  uint8_t itf;
  cdcd_interface_t* p_cdc;

  // Identify which interface to use
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 8004524:	2300      	movs	r3, #0
 8004526:	77fb      	strb	r3, [r7, #31]
 8004528:	e013      	b.n	8004552 <cdcd_xfer_cb+0x42>
    p_cdc = &_cdcd_itf[itf];
 800452a:	7ffb      	ldrb	r3, [r7, #31]
 800452c:	22a8      	movs	r2, #168	@ 0xa8
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	4a5f      	ldr	r2, [pc, #380]	@ (80046b0 <cdcd_xfer_cb+0x1a0>)
 8004534:	4413      	add	r3, r2
 8004536:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_cdc->ep_out) || (ep_addr == p_cdc->ep_in)) {
 8004538:	69bb      	ldr	r3, [r7, #24]
 800453a:	78db      	ldrb	r3, [r3, #3]
 800453c:	79ba      	ldrb	r2, [r7, #6]
 800453e:	429a      	cmp	r2, r3
 8004540:	d00a      	beq.n	8004558 <cdcd_xfer_cb+0x48>
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	789b      	ldrb	r3, [r3, #2]
 8004546:	79ba      	ldrb	r2, [r7, #6]
 8004548:	429a      	cmp	r2, r3
 800454a:	d005      	beq.n	8004558 <cdcd_xfer_cb+0x48>
  for (itf = 0; itf < CFG_TUD_CDC; itf++) {
 800454c:	7ffb      	ldrb	r3, [r7, #31]
 800454e:	3301      	adds	r3, #1
 8004550:	77fb      	strb	r3, [r7, #31]
 8004552:	7ffb      	ldrb	r3, [r7, #31]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0e8      	beq.n	800452a <cdcd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(itf < CFG_TUD_CDC);
 8004558:	7ffb      	ldrb	r3, [r7, #31]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <cdcd_xfer_cb+0x64>
 800455e:	4b55      	ldr	r3, [pc, #340]	@ (80046b4 <cdcd_xfer_cb+0x1a4>)
 8004560:	60bb      	str	r3, [r7, #8]
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f003 0301 	and.w	r3, r3, #1
 800456a:	2b00      	cmp	r3, #0
 800456c:	d000      	beq.n	8004570 <cdcd_xfer_cb+0x60>
 800456e:	be00      	bkpt	0x0000
 8004570:	2300      	movs	r3, #0
 8004572:	e098      	b.n	80046a6 <cdcd_xfer_cb+0x196>
  cdcd_epbuf_t* p_epbuf = &_cdcd_epbuf[itf];
 8004574:	7ffb      	ldrb	r3, [r7, #31]
 8004576:	01db      	lsls	r3, r3, #7
 8004578:	4a4f      	ldr	r2, [pc, #316]	@ (80046b8 <cdcd_xfer_cb+0x1a8>)
 800457a:	4413      	add	r3, r2
 800457c:	613b      	str	r3, [r7, #16]

  // Received new data
  if (ep_addr == p_cdc->ep_out) {
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	78db      	ldrb	r3, [r3, #3]
 8004582:	79ba      	ldrb	r2, [r7, #6]
 8004584:	429a      	cmp	r2, r3
 8004586:	d148      	bne.n	800461a <cdcd_xfer_cb+0x10a>
    tu_fifo_write_n(&p_cdc->rx_ff, p_epbuf->epout, (uint16_t) xferred_bytes);
 8004588:	69bb      	ldr	r3, [r7, #24]
 800458a:	3310      	adds	r3, #16
 800458c:	6939      	ldr	r1, [r7, #16]
 800458e:	683a      	ldr	r2, [r7, #0]
 8004590:	b292      	uxth	r2, r2
 8004592:	4618      	mov	r0, r3
 8004594:	f001 fb00 	bl	8005b98 <tu_fifo_write_n>

    // Check for wanted char and invoke callback if needed
    if (tud_cdc_rx_wanted_cb && (((signed char) p_cdc->wanted_char) != -1)) {
 8004598:	4b48      	ldr	r3, [pc, #288]	@ (80046bc <cdcd_xfer_cb+0x1ac>)
 800459a:	2b00      	cmp	r3, #0
 800459c:	d027      	beq.n	80045ee <cdcd_xfer_cb+0xde>
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	795b      	ldrb	r3, [r3, #5]
 80045a2:	2bff      	cmp	r3, #255	@ 0xff
 80045a4:	d023      	beq.n	80045ee <cdcd_xfer_cb+0xde>
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 80045a6:	2300      	movs	r3, #0
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	e01c      	b.n	80045e6 <cdcd_xfer_cb+0xd6>
        if ((p_cdc->wanted_char == p_epbuf->epout[i]) && !tu_fifo_empty(&p_cdc->rx_ff)) {
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	795a      	ldrb	r2, [r3, #5]
 80045b0:	6939      	ldr	r1, [r7, #16]
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	440b      	add	r3, r1
 80045b6:	781b      	ldrb	r3, [r3, #0]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d111      	bne.n	80045e0 <cdcd_xfer_cb+0xd0>
 80045bc:	69bb      	ldr	r3, [r7, #24]
 80045be:	3310      	adds	r3, #16
 80045c0:	4618      	mov	r0, r3
 80045c2:	f001 f9e3 	bl	800598c <tu_fifo_empty>
 80045c6:	4603      	mov	r3, r0
 80045c8:	f083 0301 	eor.w	r3, r3, #1
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d006      	beq.n	80045e0 <cdcd_xfer_cb+0xd0>
          tud_cdc_rx_wanted_cb(itf, p_cdc->wanted_char);
 80045d2:	69bb      	ldr	r3, [r7, #24]
 80045d4:	795a      	ldrb	r2, [r3, #5]
 80045d6:	7ffb      	ldrb	r3, [r7, #31]
 80045d8:	4611      	mov	r1, r2
 80045da:	4618      	mov	r0, r3
 80045dc:	f3af 8000 	nop.w
      for (uint32_t i = 0; i < xferred_bytes; i++) {
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	3301      	adds	r3, #1
 80045e4:	617b      	str	r3, [r7, #20]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d3de      	bcc.n	80045ac <cdcd_xfer_cb+0x9c>
        }
      }
    }

    // invoke receive callback (if there is still data)
    if (tud_cdc_rx_cb && !tu_fifo_empty(&p_cdc->rx_ff)) {
 80045ee:	4b34      	ldr	r3, [pc, #208]	@ (80046c0 <cdcd_xfer_cb+0x1b0>)
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00e      	beq.n	8004612 <cdcd_xfer_cb+0x102>
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	3310      	adds	r3, #16
 80045f8:	4618      	mov	r0, r3
 80045fa:	f001 f9c7 	bl	800598c <tu_fifo_empty>
 80045fe:	4603      	mov	r3, r0
 8004600:	f083 0301 	eor.w	r3, r3, #1
 8004604:	b2db      	uxtb	r3, r3
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <cdcd_xfer_cb+0x102>
      tud_cdc_rx_cb(itf);
 800460a:	7ffb      	ldrb	r3, [r7, #31]
 800460c:	4618      	mov	r0, r3
 800460e:	f7fc f951 	bl	80008b4 <tud_cdc_rx_cb>
    }

    // prepare for OUT transaction
    _prep_out_transaction(itf);
 8004612:	7ffb      	ldrb	r3, [r7, #31]
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff fb75 	bl	8003d04 <_prep_out_transaction>
  }

  // Data sent to host, we continue to fetch from tx fifo to send.
  // Note: This will cause incorrect baudrate set in line coding.
  //       Though maybe the baudrate is not really important !!!
  if (ep_addr == p_cdc->ep_in) {
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	789b      	ldrb	r3, [r3, #2]
 800461e:	79ba      	ldrb	r2, [r7, #6]
 8004620:	429a      	cmp	r2, r3
 8004622:	d13f      	bne.n	80046a4 <cdcd_xfer_cb+0x194>
    // invoke transmit callback to possibly refill tx fifo
    if (tud_cdc_tx_complete_cb) {
 8004624:	4b27      	ldr	r3, [pc, #156]	@ (80046c4 <cdcd_xfer_cb+0x1b4>)
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <cdcd_xfer_cb+0x122>
      tud_cdc_tx_complete_cb(itf);
 800462a:	7ffb      	ldrb	r3, [r7, #31]
 800462c:	4618      	mov	r0, r3
 800462e:	f3af 8000 	nop.w
    }

    if (0 == tud_cdc_n_write_flush(itf)) {
 8004632:	7ffb      	ldrb	r3, [r7, #31]
 8004634:	4618      	mov	r0, r3
 8004636:	f7ff fc47 	bl	8003ec8 <tud_cdc_n_write_flush>
 800463a:	4603      	mov	r3, r0
 800463c:	2b00      	cmp	r3, #0
 800463e:	d131      	bne.n	80046a4 <cdcd_xfer_cb+0x194>
      // If there is no data left, a ZLP should be sent if
      // xferred_bytes is multiple of EP Packet size and not zero
      if (!tu_fifo_count(&p_cdc->tx_ff) && xferred_bytes && (0 == (xferred_bytes & (BULK_PACKET_SIZE - 1)))) {
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	331c      	adds	r3, #28
 8004644:	4618      	mov	r0, r3
 8004646:	f001 f96f 	bl	8005928 <tu_fifo_count>
 800464a:	4603      	mov	r3, r0
 800464c:	2b00      	cmp	r3, #0
 800464e:	d129      	bne.n	80046a4 <cdcd_xfer_cb+0x194>
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d026      	beq.n	80046a4 <cdcd_xfer_cb+0x194>
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800465c:	2b00      	cmp	r3, #0
 800465e:	d121      	bne.n	80046a4 <cdcd_xfer_cb+0x194>
        if (usbd_edpt_claim(rhport, p_cdc->ep_in)) {
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	789a      	ldrb	r2, [r3, #2]
 8004664:	79fb      	ldrb	r3, [r7, #7]
 8004666:	4611      	mov	r1, r2
 8004668:	4618      	mov	r0, r3
 800466a:	f002 fe79 	bl	8007360 <usbd_edpt_claim>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d017      	beq.n	80046a4 <cdcd_xfer_cb+0x194>
          TU_ASSERT(usbd_edpt_xfer(rhport, p_cdc->ep_in, NULL, 0));
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	7899      	ldrb	r1, [r3, #2]
 8004678:	79f8      	ldrb	r0, [r7, #7]
 800467a:	2300      	movs	r3, #0
 800467c:	2200      	movs	r2, #0
 800467e:	f002 febf 	bl	8007400 <usbd_edpt_xfer>
 8004682:	4603      	mov	r3, r0
 8004684:	f083 0301 	eor.w	r3, r3, #1
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d00a      	beq.n	80046a4 <cdcd_xfer_cb+0x194>
 800468e:	4b09      	ldr	r3, [pc, #36]	@ (80046b4 <cdcd_xfer_cb+0x1a4>)
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f003 0301 	and.w	r3, r3, #1
 800469a:	2b00      	cmp	r3, #0
 800469c:	d000      	beq.n	80046a0 <cdcd_xfer_cb+0x190>
 800469e:	be00      	bkpt	0x0000
 80046a0:	2300      	movs	r3, #0
 80046a2:	e000      	b.n	80046a6 <cdcd_xfer_cb+0x196>
    }
  }

  // nothing to do with notif endpoint for now

  return true;
 80046a4:	2301      	movs	r3, #1
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3720      	adds	r7, #32
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	20000958 	.word	0x20000958
 80046b4:	e000edf0 	.word	0xe000edf0
 80046b8:	20000a00 	.word	0x20000a00
 80046bc:	00000000 	.word	0x00000000
 80046c0:	080008b5 	.word	0x080008b5
 80046c4:	00000000 	.word	0x00000000

080046c8 <tud_hid_set_idle_cb>:
TU_ATTR_WEAK void tud_hid_set_protocol_cb(uint8_t instance, uint8_t protocol) {
  (void) instance;
  (void) protocol;
}

TU_ATTR_WEAK bool tud_hid_set_idle_cb(uint8_t instance, uint8_t idle_rate) {
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	4603      	mov	r3, r0
 80046d0:	460a      	mov	r2, r1
 80046d2:	71fb      	strb	r3, [r7, #7]
 80046d4:	4613      	mov	r3, r2
 80046d6:	71bb      	strb	r3, [r7, #6]
  (void) instance;
  (void) idle_rate;
  return true;
 80046d8:	2301      	movs	r3, #1
}
 80046da:	4618      	mov	r0, r3
 80046dc:	370c      	adds	r7, #12
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr

080046e6 <tud_hid_report_failed_cb>:
  (void) report;
  (void) len;
}

// Invoked when a transfer wasn't successful
TU_ATTR_WEAK void tud_hid_report_failed_cb(uint8_t instance, hid_report_type_t report_type, uint8_t const* report, uint16_t xferred_bytes) {
 80046e6:	b480      	push	{r7}
 80046e8:	b083      	sub	sp, #12
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	603a      	str	r2, [r7, #0]
 80046ee:	461a      	mov	r2, r3
 80046f0:	4603      	mov	r3, r0
 80046f2:	71fb      	strb	r3, [r7, #7]
 80046f4:	460b      	mov	r3, r1
 80046f6:	71bb      	strb	r3, [r7, #6]
 80046f8:	4613      	mov	r3, r2
 80046fa:	80bb      	strh	r3, [r7, #4]
  (void) instance;
  (void) report_type;
  (void) report;
  (void) xferred_bytes;
}
 80046fc:	bf00      	nop
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <tud_hid_n_ready>:

//--------------------------------------------------------------------+
// APPLICATION API
//--------------------------------------------------------------------+
bool tud_hid_n_ready(uint8_t instance) {
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	4603      	mov	r3, r0
 8004710:	71fb      	strb	r3, [r7, #7]
  uint8_t const rhport = 0;
 8004712:	2300      	movs	r3, #0
 8004714:	73fb      	strb	r3, [r7, #15]
  uint8_t const ep_in = _hidd_itf[instance].ep_in;
 8004716:	79fa      	ldrb	r2, [r7, #7]
 8004718:	491b      	ldr	r1, [pc, #108]	@ (8004788 <tud_hid_n_ready+0x80>)
 800471a:	4613      	mov	r3, r2
 800471c:	005b      	lsls	r3, r3, #1
 800471e:	4413      	add	r3, r2
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	440b      	add	r3, r1
 8004724:	3301      	adds	r3, #1
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	73bb      	strb	r3, [r7, #14]
 800472a:	f001 faf7 	bl	8005d1c <tud_mounted>
 800472e:	4603      	mov	r3, r0
 8004730:	2b00      	cmp	r3, #0
 8004732:	d009      	beq.n	8004748 <tud_hid_n_ready+0x40>
 8004734:	f001 fb04 	bl	8005d40 <tud_suspended>
 8004738:	4603      	mov	r3, r0
 800473a:	f083 0301 	eor.w	r3, r3, #1
 800473e:	b2db      	uxtb	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <tud_hid_n_ready+0x40>
 8004744:	2301      	movs	r3, #1
 8004746:	e000      	b.n	800474a <tud_hid_n_ready+0x42>
 8004748:	2300      	movs	r3, #0
 800474a:	f003 0301 	and.w	r3, r3, #1
 800474e:	b2db      	uxtb	r3, r3
  return tud_ready() && (ep_in != 0) && !usbd_edpt_busy(rhport, ep_in);
 8004750:	2b00      	cmp	r3, #0
 8004752:	d010      	beq.n	8004776 <tud_hid_n_ready+0x6e>
 8004754:	7bbb      	ldrb	r3, [r7, #14]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d00d      	beq.n	8004776 <tud_hid_n_ready+0x6e>
 800475a:	7bba      	ldrb	r2, [r7, #14]
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	4611      	mov	r1, r2
 8004760:	4618      	mov	r0, r3
 8004762:	f002 fec3 	bl	80074ec <usbd_edpt_busy>
 8004766:	4603      	mov	r3, r0
 8004768:	f083 0301 	eor.w	r3, r3, #1
 800476c:	b2db      	uxtb	r3, r3
 800476e:	2b00      	cmp	r3, #0
 8004770:	d001      	beq.n	8004776 <tud_hid_n_ready+0x6e>
 8004772:	2301      	movs	r3, #1
 8004774:	e000      	b.n	8004778 <tud_hid_n_ready+0x70>
 8004776:	2300      	movs	r3, #0
 8004778:	f003 0301 	and.w	r3, r3, #1
 800477c:	b2db      	uxtb	r3, r3
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	20000a80 	.word	0x20000a80

0800478c <tud_hid_n_report>:

bool tud_hid_n_report(uint8_t instance, uint8_t report_id, void const *report, uint16_t len) {
 800478c:	b580      	push	{r7, lr}
 800478e:	b08e      	sub	sp, #56	@ 0x38
 8004790:	af00      	add	r7, sp, #0
 8004792:	603a      	str	r2, [r7, #0]
 8004794:	461a      	mov	r2, r3
 8004796:	4603      	mov	r3, r0
 8004798:	71fb      	strb	r3, [r7, #7]
 800479a:	460b      	mov	r3, r1
 800479c:	71bb      	strb	r3, [r7, #6]
 800479e:	4613      	mov	r3, r2
 80047a0:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(instance < CFG_TUD_HID);
 80047a2:	79fb      	ldrb	r3, [r7, #7]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d001      	beq.n	80047ac <tud_hid_n_report+0x20>
 80047a8:	2300      	movs	r3, #0
 80047aa:	e06d      	b.n	8004888 <tud_hid_n_report+0xfc>
  const uint8_t rhport = 0;
 80047ac:	2300      	movs	r3, #0
 80047ae:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  hidd_interface_t *p_hid = &_hidd_itf[instance];
 80047b2:	79fa      	ldrb	r2, [r7, #7]
 80047b4:	4613      	mov	r3, r2
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	4a34      	ldr	r2, [pc, #208]	@ (8004890 <tud_hid_n_report+0x104>)
 80047be:	4413      	add	r3, r2
 80047c0:	633b      	str	r3, [r7, #48]	@ 0x30
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 80047c2:	79fa      	ldrb	r2, [r7, #7]
 80047c4:	4613      	mov	r3, r2
 80047c6:	005b      	lsls	r3, r3, #1
 80047c8:	4413      	add	r3, r2
 80047ca:	011b      	lsls	r3, r3, #4
 80047cc:	4a31      	ldr	r2, [pc, #196]	@ (8004894 <tud_hid_n_report+0x108>)
 80047ce:	4413      	add	r3, r2
 80047d0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  // claim endpoint
  TU_VERIFY(usbd_edpt_claim(rhport, p_hid->ep_in));
 80047d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d4:	785a      	ldrb	r2, [r3, #1]
 80047d6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80047da:	4611      	mov	r1, r2
 80047dc:	4618      	mov	r0, r3
 80047de:	f002 fdbf 	bl	8007360 <usbd_edpt_claim>
 80047e2:	4603      	mov	r3, r0
 80047e4:	f083 0301 	eor.w	r3, r3, #1
 80047e8:	b2db      	uxtb	r3, r3
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <tud_hid_n_report+0x66>
 80047ee:	2300      	movs	r3, #0
 80047f0:	e04a      	b.n	8004888 <tud_hid_n_report+0xfc>

  // prepare data
  if (report_id) {
 80047f2:	79bb      	ldrb	r3, [r7, #6]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d021      	beq.n	800483c <tud_hid_n_report+0xb0>
    p_epbuf->epin[0] = report_id;
 80047f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047fa:	79ba      	ldrb	r2, [r7, #6]
 80047fc:	741a      	strb	r2, [r3, #16]
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin + 1, CFG_TUD_HID_EP_BUFSIZE - 1, report, len));
 80047fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004800:	3310      	adds	r3, #16
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	88bb      	ldrh	r3, [r7, #4]
 8004806:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004808:	220f      	movs	r2, #15
 800480a:	627a      	str	r2, [r7, #36]	@ 0x24
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	623a      	str	r2, [r7, #32]
 8004810:	61fb      	str	r3, [r7, #28]
  if ( count > destsz ) {
 8004812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	429a      	cmp	r2, r3
 8004818:	d202      	bcs.n	8004820 <tud_hid_n_report+0x94>
    return -1;
 800481a:	f04f 33ff 	mov.w	r3, #4294967295
 800481e:	e005      	b.n	800482c <tud_hid_n_report+0xa0>
  memcpy(dest, src, count);
 8004820:	69fa      	ldr	r2, [r7, #28]
 8004822:	6a39      	ldr	r1, [r7, #32]
 8004824:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004826:	f005 fa71 	bl	8009d0c <memcpy>
  return 0;
 800482a:	2300      	movs	r3, #0
 800482c:	2b00      	cmp	r3, #0
 800482e:	d001      	beq.n	8004834 <tud_hid_n_report+0xa8>
 8004830:	2300      	movs	r3, #0
 8004832:	e029      	b.n	8004888 <tud_hid_n_report+0xfc>
    len++;
 8004834:	88bb      	ldrh	r3, [r7, #4]
 8004836:	3301      	adds	r3, #1
 8004838:	80bb      	strh	r3, [r7, #4]
 800483a:	e01a      	b.n	8004872 <tud_hid_n_report+0xe6>
  } else {
    TU_VERIFY(0 == tu_memcpy_s(p_epbuf->epin, CFG_TUD_HID_EP_BUFSIZE, report, len));
 800483c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800483e:	f103 0210 	add.w	r2, r3, #16
 8004842:	88bb      	ldrh	r3, [r7, #4]
 8004844:	61ba      	str	r2, [r7, #24]
 8004846:	2210      	movs	r2, #16
 8004848:	617a      	str	r2, [r7, #20]
 800484a:	683a      	ldr	r2, [r7, #0]
 800484c:	613a      	str	r2, [r7, #16]
 800484e:	60fb      	str	r3, [r7, #12]
  if ( count > destsz ) {
 8004850:	697a      	ldr	r2, [r7, #20]
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	429a      	cmp	r2, r3
 8004856:	d202      	bcs.n	800485e <tud_hid_n_report+0xd2>
    return -1;
 8004858:	f04f 33ff 	mov.w	r3, #4294967295
 800485c:	e005      	b.n	800486a <tud_hid_n_report+0xde>
  memcpy(dest, src, count);
 800485e:	68fa      	ldr	r2, [r7, #12]
 8004860:	6939      	ldr	r1, [r7, #16]
 8004862:	69b8      	ldr	r0, [r7, #24]
 8004864:	f005 fa52 	bl	8009d0c <memcpy>
  return 0;
 8004868:	2300      	movs	r3, #0
 800486a:	2b00      	cmp	r3, #0
 800486c:	d001      	beq.n	8004872 <tud_hid_n_report+0xe6>
 800486e:	2300      	movs	r3, #0
 8004870:	e00a      	b.n	8004888 <tud_hid_n_report+0xfc>
  }

  return usbd_edpt_xfer(rhport, p_hid->ep_in, p_epbuf->epin, len);
 8004872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004874:	7859      	ldrb	r1, [r3, #1]
 8004876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004878:	f103 0210 	add.w	r2, r3, #16
 800487c:	88bb      	ldrh	r3, [r7, #4]
 800487e:	f897 0037 	ldrb.w	r0, [r7, #55]	@ 0x37
 8004882:	f002 fdbd 	bl	8007400 <usbd_edpt_xfer>
 8004886:	4603      	mov	r3, r0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3738      	adds	r7, #56	@ 0x38
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	20000a80 	.word	0x20000a80
 8004894:	20000a8c 	.word	0x20000a8c

08004898 <tud_hid_n_keyboard_report>:

uint8_t tud_hid_n_get_protocol(uint8_t instance) {
  return _hidd_itf[instance].protocol_mode;
}

bool tud_hid_n_keyboard_report(uint8_t instance, uint8_t report_id, uint8_t modifier, const uint8_t keycode[6]) {
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	603b      	str	r3, [r7, #0]
 80048a0:	4603      	mov	r3, r0
 80048a2:	71fb      	strb	r3, [r7, #7]
 80048a4:	460b      	mov	r3, r1
 80048a6:	71bb      	strb	r3, [r7, #6]
 80048a8:	4613      	mov	r3, r2
 80048aa:	717b      	strb	r3, [r7, #5]
  hid_keyboard_report_t report;
  report.modifier = modifier;
 80048ac:	797b      	ldrb	r3, [r7, #5]
 80048ae:	723b      	strb	r3, [r7, #8]
  report.reserved = 0;
 80048b0:	2300      	movs	r3, #0
 80048b2:	727b      	strb	r3, [r7, #9]

  if (keycode) {
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d007      	beq.n	80048ca <tud_hid_n_keyboard_report+0x32>
    memcpy(report.keycode, keycode, sizeof(report.keycode));
 80048ba:	683a      	ldr	r2, [r7, #0]
 80048bc:	f107 030a 	add.w	r3, r7, #10
 80048c0:	6811      	ldr	r1, [r2, #0]
 80048c2:	6019      	str	r1, [r3, #0]
 80048c4:	8892      	ldrh	r2, [r2, #4]
 80048c6:	809a      	strh	r2, [r3, #4]
 80048c8:	e007      	b.n	80048da <tud_hid_n_keyboard_report+0x42>
  } else {
    tu_memclr(report.keycode, 6);
 80048ca:	f107 0308 	add.w	r3, r7, #8
 80048ce:	3302      	adds	r3, #2
 80048d0:	2206      	movs	r2, #6
 80048d2:	2100      	movs	r1, #0
 80048d4:	4618      	mov	r0, r3
 80048d6:	f005 f9e5 	bl	8009ca4 <memset>
  }

  return tud_hid_n_report(instance, report_id, &report, sizeof(report));
 80048da:	f107 0208 	add.w	r2, r7, #8
 80048de:	79b9      	ldrb	r1, [r7, #6]
 80048e0:	79f8      	ldrb	r0, [r7, #7]
 80048e2:	2308      	movs	r3, #8
 80048e4:	f7ff ff52 	bl	800478c <tud_hid_n_report>
 80048e8:	4603      	mov	r3, r0
}
 80048ea:	4618      	mov	r0, r3
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <hidd_init>:
}

//--------------------------------------------------------------------+
// USBD-CLASS API
//--------------------------------------------------------------------+
void hidd_init(void) {
 80048f2:	b580      	push	{r7, lr}
 80048f4:	af00      	add	r7, sp, #0
  hidd_reset(0);
 80048f6:	2000      	movs	r0, #0
 80048f8:	f000 f80a 	bl	8004910 <hidd_reset>
}
 80048fc:	bf00      	nop
 80048fe:	bd80      	pop	{r7, pc}

08004900 <hidd_deinit>:

bool hidd_deinit(void) {
 8004900:	b480      	push	{r7}
 8004902:	af00      	add	r7, sp, #0
  return true;
 8004904:	2301      	movs	r3, #1
}
 8004906:	4618      	mov	r0, r3
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <hidd_reset>:

void hidd_reset(uint8_t rhport) {
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	4603      	mov	r3, r0
 8004918:	71fb      	strb	r3, [r7, #7]
  (void)rhport;
  tu_memclr(_hidd_itf, sizeof(_hidd_itf));
 800491a:	220c      	movs	r2, #12
 800491c:	2100      	movs	r1, #0
 800491e:	4803      	ldr	r0, [pc, #12]	@ (800492c <hidd_reset+0x1c>)
 8004920:	f005 f9c0 	bl	8009ca4 <memset>
}
 8004924:	bf00      	nop
 8004926:	3708      	adds	r7, #8
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	20000a80 	.word	0x20000a80

08004930 <hidd_open>:

uint16_t hidd_open(uint8_t rhport, tusb_desc_interface_t const *desc_itf, uint16_t max_len) {
 8004930:	b580      	push	{r7, lr}
 8004932:	b094      	sub	sp, #80	@ 0x50
 8004934:	af02      	add	r7, sp, #8
 8004936:	4603      	mov	r3, r0
 8004938:	6039      	str	r1, [r7, #0]
 800493a:	71fb      	strb	r3, [r7, #7]
 800493c:	4613      	mov	r3, r2
 800493e:	80bb      	strh	r3, [r7, #4]
  TU_VERIFY(TUSB_CLASS_HID == desc_itf->bInterfaceClass, 0);
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	795b      	ldrb	r3, [r3, #5]
 8004944:	2b03      	cmp	r3, #3
 8004946:	d001      	beq.n	800494c <hidd_open+0x1c>
 8004948:	2300      	movs	r3, #0
 800494a:	e0ce      	b.n	8004aea <hidd_open+0x1ba>

  // len = interface + hid + n*endpoints
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
                                       desc_itf->bNumEndpoints * sizeof(tusb_desc_endpoint_t));
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	791b      	ldrb	r3, [r3, #4]
 8004950:	461a      	mov	r2, r3
 8004952:	00d2      	lsls	r2, r2, #3
 8004954:	1ad3      	subs	r3, r2, r3
 8004956:	b29b      	uxth	r3, r3
  uint16_t const drv_len = (uint16_t) (sizeof(tusb_desc_interface_t) + sizeof(tusb_hid_descriptor_hid_t) +
 8004958:	3312      	adds	r3, #18
 800495a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
  TU_ASSERT(max_len >= drv_len, 0);
 800495e:	88ba      	ldrh	r2, [r7, #4]
 8004960:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004964:	429a      	cmp	r2, r3
 8004966:	d20a      	bcs.n	800497e <hidd_open+0x4e>
 8004968:	4b62      	ldr	r3, [pc, #392]	@ (8004af4 <hidd_open+0x1c4>)
 800496a:	627b      	str	r3, [r7, #36]	@ 0x24
 800496c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 0301 	and.w	r3, r3, #1
 8004974:	2b00      	cmp	r3, #0
 8004976:	d000      	beq.n	800497a <hidd_open+0x4a>
 8004978:	be00      	bkpt	0x0000
 800497a:	2300      	movs	r3, #0
 800497c:	e0b5      	b.n	8004aea <hidd_open+0x1ba>

  // Find available interface
  hidd_interface_t *p_hid;
  uint8_t hid_id;
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 800497e:	2300      	movs	r3, #0
 8004980:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004984:	e011      	b.n	80049aa <hidd_open+0x7a>
    p_hid = &_hidd_itf[hid_id];
 8004986:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 800498a:	4613      	mov	r3, r2
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	4413      	add	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4a59      	ldr	r2, [pc, #356]	@ (8004af8 <hidd_open+0x1c8>)
 8004994:	4413      	add	r3, r2
 8004996:	647b      	str	r3, [r7, #68]	@ 0x44
    if (p_hid->ep_in == 0) {
 8004998:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800499a:	785b      	ldrb	r3, [r3, #1]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d009      	beq.n	80049b4 <hidd_open+0x84>
  for (hid_id = 0; hid_id < CFG_TUD_HID; hid_id++) {
 80049a0:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80049a4:	3301      	adds	r3, #1
 80049a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049aa:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d0e9      	beq.n	8004986 <hidd_open+0x56>
 80049b2:	e000      	b.n	80049b6 <hidd_open+0x86>
      break;
 80049b4:	bf00      	nop
    }
  }
  TU_ASSERT(hid_id < CFG_TUD_HID, 0);
 80049b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <hidd_open+0xa4>
 80049be:	4b4d      	ldr	r3, [pc, #308]	@ (8004af4 <hidd_open+0x1c4>)
 80049c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0301 	and.w	r3, r3, #1
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d000      	beq.n	80049d0 <hidd_open+0xa0>
 80049ce:	be00      	bkpt	0x0000
 80049d0:	2300      	movs	r3, #0
 80049d2:	e08a      	b.n	8004aea <hidd_open+0x1ba>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_id];
 80049d4:	f897 2043 	ldrb.w	r2, [r7, #67]	@ 0x43
 80049d8:	4613      	mov	r3, r2
 80049da:	005b      	lsls	r3, r3, #1
 80049dc:	4413      	add	r3, r2
 80049de:	011b      	lsls	r3, r3, #4
 80049e0:	4a46      	ldr	r2, [pc, #280]	@ (8004afc <hidd_open+0x1cc>)
 80049e2:	4413      	add	r3, r2
 80049e4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  uint8_t const *p_desc = (uint8_t const *)desc_itf;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ec:	61fb      	str	r3, [r7, #28]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	61bb      	str	r3, [r7, #24]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	781b      	ldrb	r3, [r3, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	4413      	add	r3, r2

  //------------- HID descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 80049fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80049fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a00:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8004a02:	6a3b      	ldr	r3, [r7, #32]
 8004a04:	3301      	adds	r3, #1
 8004a06:	781b      	ldrb	r3, [r3, #0]
  TU_ASSERT(HID_DESC_TYPE_HID == tu_desc_type(p_desc), 0);
 8004a08:	2b21      	cmp	r3, #33	@ 0x21
 8004a0a:	d00a      	beq.n	8004a22 <hidd_open+0xf2>
 8004a0c:	4b39      	ldr	r3, [pc, #228]	@ (8004af4 <hidd_open+0x1c4>)
 8004a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 0301 	and.w	r3, r3, #1
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d000      	beq.n	8004a1e <hidd_open+0xee>
 8004a1c:	be00      	bkpt	0x0000
 8004a1e:	2300      	movs	r3, #0
 8004a20:	e063      	b.n	8004aea <hidd_open+0x1ba>
  p_hid->hid_descriptor = (tusb_hid_descriptor_hid_t const *)p_desc;
 8004a22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a26:	609a      	str	r2, [r3, #8]
 8004a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a2a:	617b      	str	r3, [r7, #20]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	613b      	str	r3, [r7, #16]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8004a30:	693b      	ldr	r3, [r7, #16]
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	4413      	add	r3, r2

  //------------- Endpoint Descriptor -------------//
  p_desc = tu_desc_next(p_desc);
 8004a3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  TU_ASSERT(usbd_open_edpt_pair(rhport, p_desc, desc_itf->bNumEndpoints, TUSB_XFER_INTERRUPT, &p_hid->ep_out, &p_hid->ep_in), 0);
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	7919      	ldrb	r1, [r3, #4]
 8004a40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a42:	3302      	adds	r3, #2
 8004a44:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a46:	3201      	adds	r2, #1
 8004a48:	79f8      	ldrb	r0, [r7, #7]
 8004a4a:	9201      	str	r2, [sp, #4]
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	2303      	movs	r3, #3
 8004a50:	460a      	mov	r2, r1
 8004a52:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004a54:	f002 fbd6 	bl	8007204 <usbd_open_edpt_pair>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	f083 0301 	eor.w	r3, r3, #1
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00a      	beq.n	8004a7a <hidd_open+0x14a>
 8004a64:	4b23      	ldr	r3, [pc, #140]	@ (8004af4 <hidd_open+0x1c4>)
 8004a66:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0301 	and.w	r3, r3, #1
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d000      	beq.n	8004a76 <hidd_open+0x146>
 8004a74:	be00      	bkpt	0x0000
 8004a76:	2300      	movs	r3, #0
 8004a78:	e037      	b.n	8004aea <hidd_open+0x1ba>

  if (desc_itf->bInterfaceSubClass == HID_SUBCLASS_BOOT) {
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	799b      	ldrb	r3, [r3, #6]
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d103      	bne.n	8004a8a <hidd_open+0x15a>
    p_hid->itf_protocol = desc_itf->bInterfaceProtocol;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	79da      	ldrb	r2, [r3, #7]
 8004a86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a88:	70da      	strb	r2, [r3, #3]
  }

  p_hid->protocol_mode = HID_PROTOCOL_REPORT; // Per Specs: default is report mode
 8004a8a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	719a      	strb	r2, [r3, #6]
  p_hid->itf_num = desc_itf->bInterfaceNumber;
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	789a      	ldrb	r2, [r3, #2]
 8004a94:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a96:	701a      	strb	r2, [r3, #0]

  // Use offsetof to avoid pointer to the odd/misaligned address
  p_hid->report_desc_len = tu_unaligned_read16((uint8_t const *)p_hid->hid_descriptor + offsetof(tusb_hid_descriptor_hid_t, wReportLength));
 8004a98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a9a:	689b      	ldr	r3, [r3, #8]
 8004a9c:	3307      	adds	r3, #7
 8004a9e:	60fb      	str	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_unaligned_read32(const void *mem) {
  return *((uint32_t const *) mem);
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_unaligned_read16(const void *mem) {
  return *((uint16_t const *) mem);
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	881a      	ldrh	r2, [r3, #0]
 8004aa4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aa6:	809a      	strh	r2, [r3, #4]

  // Prepare for output endpoint
  if (p_hid->ep_out) {
 8004aa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004aaa:	789b      	ldrb	r3, [r3, #2]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d01a      	beq.n	8004ae6 <hidd_open+0x1b6>
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE), drv_len);
 8004ab0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004ab2:	7899      	ldrb	r1, [r3, #2]
 8004ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ab6:	f103 0220 	add.w	r2, r3, #32
 8004aba:	79f8      	ldrb	r0, [r7, #7]
 8004abc:	2310      	movs	r3, #16
 8004abe:	f002 fc9f 	bl	8007400 <usbd_edpt_xfer>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	f083 0301 	eor.w	r3, r3, #1
 8004ac8:	b2db      	uxtb	r3, r3
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00b      	beq.n	8004ae6 <hidd_open+0x1b6>
 8004ace:	4b09      	ldr	r3, [pc, #36]	@ (8004af4 <hidd_open+0x1c4>)
 8004ad0:	637b      	str	r3, [r7, #52]	@ 0x34
 8004ad2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d000      	beq.n	8004ae0 <hidd_open+0x1b0>
 8004ade:	be00      	bkpt	0x0000
 8004ae0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004ae4:	e001      	b.n	8004aea <hidd_open+0x1ba>
  }

  return drv_len;
 8004ae6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
}
 8004aea:	4618      	mov	r0, r3
 8004aec:	3748      	adds	r7, #72	@ 0x48
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	e000edf0 	.word	0xe000edf0
 8004af8:	20000a80 	.word	0x20000a80
 8004afc:	20000a8c 	.word	0x20000a8c

08004b00 <hidd_control_xfer_cb>:

// Invoked when a control transfer occurred on an interface of this class
// Driver response accordingly to the request and the transfer stage (setup/data/ack)
// return false to stall control endpoint (e.g unsupported request)
bool hidd_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const *request) {
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b094      	sub	sp, #80	@ 0x50
 8004b04:	af02      	add	r7, sp, #8
 8004b06:	4603      	mov	r3, r0
 8004b08:	603a      	str	r2, [r7, #0]
 8004b0a:	71fb      	strb	r3, [r7, #7]
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	71bb      	strb	r3, [r7, #6]
  TU_VERIFY(request->bmRequestType_bit.recipient == TUSB_REQ_RCPT_INTERFACE);
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	f003 031f 	and.w	r3, r3, #31
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d001      	beq.n	8004b22 <hidd_control_xfer_cb+0x22>
 8004b1e:	2300      	movs	r3, #0
 8004b20:	e1d6      	b.n	8004ed0 <hidd_control_xfer_cb+0x3d0>

  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	889b      	ldrh	r3, [r3, #4]
 8004b26:	b29b      	uxth	r3, r3
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	77fb      	strb	r3, [r7, #31]
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	77bb      	strb	r3, [r7, #30]
 8004b30:	e00f      	b.n	8004b52 <hidd_control_xfer_cb+0x52>
    if (itf_num == _hidd_itf[i].itf_num) {
 8004b32:	7fba      	ldrb	r2, [r7, #30]
 8004b34:	498f      	ldr	r1, [pc, #572]	@ (8004d74 <hidd_control_xfer_cb+0x274>)
 8004b36:	4613      	mov	r3, r2
 8004b38:	005b      	lsls	r3, r3, #1
 8004b3a:	4413      	add	r3, r2
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	440b      	add	r3, r1
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	7ffa      	ldrb	r2, [r7, #31]
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d101      	bne.n	8004b4c <hidd_control_xfer_cb+0x4c>
      return i;
 8004b48:	7fbb      	ldrb	r3, [r7, #30]
 8004b4a:	e006      	b.n	8004b5a <hidd_control_xfer_cb+0x5a>
  for (uint8_t i = 0; i < CFG_TUD_HID; i++) {
 8004b4c:	7fbb      	ldrb	r3, [r7, #30]
 8004b4e:	3301      	adds	r3, #1
 8004b50:	77bb      	strb	r3, [r7, #30]
 8004b52:	7fbb      	ldrb	r3, [r7, #30]
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d0ec      	beq.n	8004b32 <hidd_control_xfer_cb+0x32>
  return 0xFF;
 8004b58:	23ff      	movs	r3, #255	@ 0xff
  uint8_t const hid_itf = get_index_by_itfnum((uint8_t)request->wIndex);
 8004b5a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
  TU_VERIFY(hid_itf < CFG_TUD_HID);
 8004b5e:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <hidd_control_xfer_cb+0x6a>
 8004b66:	2300      	movs	r3, #0
 8004b68:	e1b2      	b.n	8004ed0 <hidd_control_xfer_cb+0x3d0>
  hidd_interface_t *p_hid = &_hidd_itf[hid_itf];
 8004b6a:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004b6e:	4613      	mov	r3, r2
 8004b70:	005b      	lsls	r3, r3, #1
 8004b72:	4413      	add	r3, r2
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	4a7f      	ldr	r2, [pc, #508]	@ (8004d74 <hidd_control_xfer_cb+0x274>)
 8004b78:	4413      	add	r3, r2
 8004b7a:	637b      	str	r3, [r7, #52]	@ 0x34
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[hid_itf];
 8004b7c:	f897 2039 	ldrb.w	r2, [r7, #57]	@ 0x39
 8004b80:	4613      	mov	r3, r2
 8004b82:	005b      	lsls	r3, r3, #1
 8004b84:	4413      	add	r3, r2
 8004b86:	011b      	lsls	r3, r3, #4
 8004b88:	4a7b      	ldr	r2, [pc, #492]	@ (8004d78 <hidd_control_xfer_cb+0x278>)
 8004b8a:	4413      	add	r3, r2
 8004b8c:	633b      	str	r3, [r7, #48]	@ 0x30

  if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_STANDARD) {
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	781b      	ldrb	r3, [r3, #0]
 8004b92:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d145      	bne.n	8004c28 <hidd_control_xfer_cb+0x128>
    //------------- STD Request -------------//
    if (stage == CONTROL_STAGE_SETUP) {
 8004b9c:	79bb      	ldrb	r3, [r7, #6]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	f040 8195 	bne.w	8004ece <hidd_control_xfer_cb+0x3ce>
      uint8_t const desc_type = tu_u16_high(request->wValue);
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	885b      	ldrh	r3, [r3, #2]
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	83bb      	strh	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8004bac:	8bbb      	ldrh	r3, [r7, #28]
 8004bae:	0a1b      	lsrs	r3, r3, #8
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	b2db      	uxtb	r3, r3
 8004bb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      // uint8_t const desc_index = tu_u16_low (request->wValue);

      if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_HID) {
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	785b      	ldrb	r3, [r3, #1]
 8004bbc:	2b06      	cmp	r3, #6
 8004bbe:	d11b      	bne.n	8004bf8 <hidd_control_xfer_cb+0xf8>
 8004bc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004bc4:	2b21      	cmp	r3, #33	@ 0x21
 8004bc6:	d117      	bne.n	8004bf8 <hidd_control_xfer_cb+0xf8>
        TU_VERIFY(p_hid->hid_descriptor);
 8004bc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <hidd_control_xfer_cb+0xd4>
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	e17d      	b.n	8004ed0 <hidd_control_xfer_cb+0x3d0>
        TU_VERIFY(tud_control_xfer(rhport, request, (void *)(uintptr_t)p_hid->hid_descriptor, p_hid->hid_descriptor->bLength));
 8004bd4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bd6:	689a      	ldr	r2, [r3, #8]
 8004bd8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	79f8      	ldrb	r0, [r7, #7]
 8004be0:	6839      	ldr	r1, [r7, #0]
 8004be2:	f002 fdf5 	bl	80077d0 <tud_control_xfer>
 8004be6:	4603      	mov	r3, r0
 8004be8:	f083 0301 	eor.w	r3, r3, #1
 8004bec:	b2db      	uxtb	r3, r3
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	f000 816d 	beq.w	8004ece <hidd_control_xfer_cb+0x3ce>
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	e16b      	b.n	8004ed0 <hidd_control_xfer_cb+0x3d0>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	785b      	ldrb	r3, [r3, #1]
 8004bfc:	2b06      	cmp	r3, #6
 8004bfe:	d111      	bne.n	8004c24 <hidd_control_xfer_cb+0x124>
 8004c00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004c04:	2b22      	cmp	r3, #34	@ 0x22
 8004c06:	d10d      	bne.n	8004c24 <hidd_control_xfer_cb+0x124>
        uint8_t const *desc_report = tud_hid_descriptor_report_cb(hid_itf);
 8004c08:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f7fc fed1 	bl	80019b4 <tud_hid_descriptor_report_cb>
 8004c12:	6238      	str	r0, [r7, #32]
        tud_control_xfer(rhport, request, (void *)(uintptr_t)desc_report, p_hid->report_desc_len);
 8004c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c16:	889b      	ldrh	r3, [r3, #4]
 8004c18:	79f8      	ldrb	r0, [r7, #7]
 8004c1a:	6a3a      	ldr	r2, [r7, #32]
 8004c1c:	6839      	ldr	r1, [r7, #0]
 8004c1e:	f002 fdd7 	bl	80077d0 <tud_control_xfer>
      } else if (request->bRequest == TUSB_REQ_GET_DESCRIPTOR && desc_type == HID_DESC_TYPE_REPORT) {
 8004c22:	e154      	b.n	8004ece <hidd_control_xfer_cb+0x3ce>
      } else {
        return false; // stall unsupported request
 8004c24:	2300      	movs	r3, #0
 8004c26:	e153      	b.n	8004ed0 <hidd_control_xfer_cb+0x3d0>
      }
    }
  } else if (request->bmRequestType_bit.type == TUSB_REQ_TYPE_CLASS) {
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004c30:	b2db      	uxtb	r3, r3
 8004c32:	2b20      	cmp	r3, #32
 8004c34:	f040 813e 	bne.w	8004eb4 <hidd_control_xfer_cb+0x3b4>
    //------------- Class Specific Request -------------//
    switch (request->bRequest) {
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	785b      	ldrb	r3, [r3, #1]
 8004c3c:	3b01      	subs	r3, #1
 8004c3e:	2b0a      	cmp	r3, #10
 8004c40:	f200 8136 	bhi.w	8004eb0 <hidd_control_xfer_cb+0x3b0>
 8004c44:	a201      	add	r2, pc, #4	@ (adr r2, 8004c4c <hidd_control_xfer_cb+0x14c>)
 8004c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4a:	bf00      	nop
 8004c4c:	08004c79 	.word	0x08004c79
 8004c50:	08004e4f 	.word	0x08004e4f
 8004c54:	08004e65 	.word	0x08004e65
 8004c58:	08004eb1 	.word	0x08004eb1
 8004c5c:	08004eb1 	.word	0x08004eb1
 8004c60:	08004eb1 	.word	0x08004eb1
 8004c64:	08004eb1 	.word	0x08004eb1
 8004c68:	08004eb1 	.word	0x08004eb1
 8004c6c:	08004d4f 	.word	0x08004d4f
 8004c70:	08004e09 	.word	0x08004e09
 8004c74:	08004e7b 	.word	0x08004e7b
      case HID_REQ_CONTROL_GET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8004c78:	79bb      	ldrb	r3, [r7, #6]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	f040 811c 	bne.w	8004eb8 <hidd_control_xfer_cb+0x3b8>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	885b      	ldrh	r3, [r3, #2]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	82bb      	strh	r3, [r7, #20]
 8004c88:	8abb      	ldrh	r3, [r7, #20]
 8004c8a:	0a1b      	lsrs	r3, r3, #8
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
          uint8_t const report_id = tu_u16_low(request->wValue);
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	885b      	ldrh	r3, [r3, #2]
 8004c98:	b29b      	uxth	r3, r3
 8004c9a:	82fb      	strh	r3, [r7, #22]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8004c9c:	8afb      	ldrh	r3, [r7, #22]
 8004c9e:	b2db      	uxtb	r3, r3
 8004ca0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

          uint8_t* report_buf = p_epbuf->ctrl;
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca6:	647b      	str	r3, [r7, #68]	@ 0x44
          uint16_t req_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	88db      	ldrh	r3, [r3, #6]
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	837b      	strh	r3, [r7, #26]
 8004cb0:	2310      	movs	r3, #16
 8004cb2:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8004cb4:	8b7a      	ldrh	r2, [r7, #26]
 8004cb6:	8b3b      	ldrh	r3, [r7, #24]
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	bf28      	it	cs
 8004cbc:	4613      	movcs	r3, r2
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
          uint16_t xferlen = 0;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40

          // If host request a specific Report ID, add ID to as 1 byte of response
          if ((report_id != HID_REPORT_TYPE_INVALID) && (req_len > 1)) {
 8004cca:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d013      	beq.n	8004cfa <hidd_control_xfer_cb+0x1fa>
 8004cd2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d90f      	bls.n	8004cfa <hidd_control_xfer_cb+0x1fa>
            *report_buf++ = report_id;
 8004cda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004cdc:	1c5a      	adds	r2, r3, #1
 8004cde:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ce0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8004ce4:	701a      	strb	r2, [r3, #0]
            req_len--;
 8004ce6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004cea:	3b01      	subs	r3, #1
 8004cec:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42
            xferlen++;
 8004cf0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004cf4:	3301      	adds	r3, #1
 8004cf6:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          }

          xferlen += tud_hid_get_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, req_len);
 8004cfa:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8004cfe:	f897 102c 	ldrb.w	r1, [r7, #44]	@ 0x2c
 8004d02:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8004d06:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8004d0a:	9300      	str	r3, [sp, #0]
 8004d0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d0e:	f7fc fecb 	bl	8001aa8 <tud_hid_get_report_cb>
 8004d12:	4603      	mov	r3, r0
 8004d14:	461a      	mov	r2, r3
 8004d16:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004d1a:	4413      	add	r3, r2
 8004d1c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
          TU_ASSERT(xferlen > 0);
 8004d20:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10a      	bne.n	8004d3e <hidd_control_xfer_cb+0x23e>
 8004d28:	4b14      	ldr	r3, [pc, #80]	@ (8004d7c <hidd_control_xfer_cb+0x27c>)
 8004d2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d000      	beq.n	8004d3a <hidd_control_xfer_cb+0x23a>
 8004d38:	be00      	bkpt	0x0000
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	e0c8      	b.n	8004ed0 <hidd_control_xfer_cb+0x3d0>

          tud_control_xfer(rhport, request, p_epbuf->ctrl, xferlen);
 8004d3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d40:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8004d44:	79f8      	ldrb	r0, [r7, #7]
 8004d46:	6839      	ldr	r1, [r7, #0]
 8004d48:	f002 fd42 	bl	80077d0 <tud_control_xfer>
        }
        break;
 8004d4c:	e0b4      	b.n	8004eb8 <hidd_control_xfer_cb+0x3b8>

      case HID_REQ_CONTROL_SET_REPORT:
        if (stage == CONTROL_STAGE_SETUP) {
 8004d4e:	79bb      	ldrb	r3, [r7, #6]
 8004d50:	2b01      	cmp	r3, #1
 8004d52:	d115      	bne.n	8004d80 <hidd_control_xfer_cb+0x280>
          TU_VERIFY(request->wLength <= CFG_TUD_HID_EP_BUFSIZE);
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	88db      	ldrh	r3, [r3, #6]
 8004d58:	b29b      	uxth	r3, r3
 8004d5a:	2b10      	cmp	r3, #16
 8004d5c:	d901      	bls.n	8004d62 <hidd_control_xfer_cb+0x262>
 8004d5e:	2300      	movs	r3, #0
 8004d60:	e0b6      	b.n	8004ed0 <hidd_control_xfer_cb+0x3d0>
          tud_control_xfer(rhport, request, p_epbuf->ctrl, request->wLength);
 8004d62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	88db      	ldrh	r3, [r3, #6]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	79f8      	ldrb	r0, [r7, #7]
 8004d6c:	6839      	ldr	r1, [r7, #0]
 8004d6e:	f002 fd2f 	bl	80077d0 <tud_control_xfer>
            report_len--;
          }

          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
        }
        break;
 8004d72:	e0a3      	b.n	8004ebc <hidd_control_xfer_cb+0x3bc>
 8004d74:	20000a80 	.word	0x20000a80
 8004d78:	20000a8c 	.word	0x20000a8c
 8004d7c:	e000edf0 	.word	0xe000edf0
        } else if (stage == CONTROL_STAGE_ACK) {
 8004d80:	79bb      	ldrb	r3, [r7, #6]
 8004d82:	2b03      	cmp	r3, #3
 8004d84:	f040 809a 	bne.w	8004ebc <hidd_control_xfer_cb+0x3bc>
          uint8_t const report_type = tu_u16_high(request->wValue);
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	885b      	ldrh	r3, [r3, #2]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	81bb      	strh	r3, [r7, #12]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8004d90:	89bb      	ldrh	r3, [r7, #12]
 8004d92:	0a1b      	lsrs	r3, r3, #8
 8004d94:	b29b      	uxth	r3, r3
 8004d96:	b2db      	uxtb	r3, r3
 8004d98:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
          uint8_t const report_id = tu_u16_low(request->wValue);
 8004d9c:	683b      	ldr	r3, [r7, #0]
 8004d9e:	885b      	ldrh	r3, [r3, #2]
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	81fb      	strh	r3, [r7, #14]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8004da4:	89fb      	ldrh	r3, [r7, #14]
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          uint8_t const* report_buf = p_epbuf->ctrl;
 8004dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
          uint16_t report_len = tu_min16(request->wLength, CFG_TUD_HID_EP_BUFSIZE);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	88db      	ldrh	r3, [r3, #6]
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	827b      	strh	r3, [r7, #18]
 8004db8:	2310      	movs	r3, #16
 8004dba:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8004dbc:	8a7a      	ldrh	r2, [r7, #18]
 8004dbe:	8a3b      	ldrh	r3, [r7, #16]
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	bf28      	it	cs
 8004dc4:	4613      	movcs	r3, r2
 8004dc6:	b29b      	uxth	r3, r3
 8004dc8:	877b      	strh	r3, [r7, #58]	@ 0x3a
          if ((report_id != HID_REPORT_TYPE_INVALID) && (report_len > 1) && (report_id == report_buf[0])) {
 8004dca:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d00e      	beq.n	8004df0 <hidd_control_xfer_cb+0x2f0>
 8004dd2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d90b      	bls.n	8004df0 <hidd_control_xfer_cb+0x2f0>
 8004dd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dda:	781b      	ldrb	r3, [r3, #0]
 8004ddc:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d105      	bne.n	8004df0 <hidd_control_xfer_cb+0x2f0>
            report_buf++;
 8004de4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004de6:	3301      	adds	r3, #1
 8004de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
            report_len--;
 8004dea:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004dec:	3b01      	subs	r3, #1
 8004dee:	877b      	strh	r3, [r7, #58]	@ 0x3a
          tud_hid_set_report_cb(hid_itf, report_id, (hid_report_type_t) report_type, report_buf, report_len);
 8004df0:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004df4:	f897 102e 	ldrb.w	r1, [r7, #46]	@ 0x2e
 8004df8:	f897 0039 	ldrb.w	r0, [r7, #57]	@ 0x39
 8004dfc:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 8004dfe:	9300      	str	r3, [sp, #0]
 8004e00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e02:	f7fc fe6b 	bl	8001adc <tud_hid_set_report_cb>
        break;
 8004e06:	e059      	b.n	8004ebc <hidd_control_xfer_cb+0x3bc>

      case HID_REQ_CONTROL_SET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8004e08:	79bb      	ldrb	r3, [r7, #6]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d158      	bne.n	8004ec0 <hidd_control_xfer_cb+0x3c0>
          p_hid->idle_rate = tu_u16_high(request->wValue);
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	885b      	ldrh	r3, [r3, #2]
 8004e12:	b29b      	uxth	r3, r3
 8004e14:	817b      	strh	r3, [r7, #10]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8004e16:	897b      	ldrh	r3, [r7, #10]
 8004e18:	0a1b      	lsrs	r3, r3, #8
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e20:	71da      	strb	r2, [r3, #7]
          TU_VERIFY(tud_hid_set_idle_cb(hid_itf, p_hid->idle_rate)); // stall if false
 8004e22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e24:	79da      	ldrb	r2, [r3, #7]
 8004e26:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	4618      	mov	r0, r3
 8004e2e:	f7ff fc4b 	bl	80046c8 <tud_hid_set_idle_cb>
 8004e32:	4603      	mov	r3, r0
 8004e34:	f083 0301 	eor.w	r3, r3, #1
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d001      	beq.n	8004e42 <hidd_control_xfer_cb+0x342>
 8004e3e:	2300      	movs	r3, #0
 8004e40:	e046      	b.n	8004ed0 <hidd_control_xfer_cb+0x3d0>
          tud_control_status(rhport, request);
 8004e42:	79fb      	ldrb	r3, [r7, #7]
 8004e44:	6839      	ldr	r1, [r7, #0]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f002 fc50 	bl	80076ec <tud_control_status>
        }
        break;
 8004e4c:	e038      	b.n	8004ec0 <hidd_control_xfer_cb+0x3c0>

      case HID_REQ_CONTROL_GET_IDLE:
        if (stage == CONTROL_STAGE_SETUP) {
 8004e4e:	79bb      	ldrb	r3, [r7, #6]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d137      	bne.n	8004ec4 <hidd_control_xfer_cb+0x3c4>
          // TODO idle rate of report
          tud_control_xfer(rhport, request, &p_hid->idle_rate, 1);
 8004e54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e56:	1dda      	adds	r2, r3, #7
 8004e58:	79f8      	ldrb	r0, [r7, #7]
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	6839      	ldr	r1, [r7, #0]
 8004e5e:	f002 fcb7 	bl	80077d0 <tud_control_xfer>
        }
        break;
 8004e62:	e02f      	b.n	8004ec4 <hidd_control_xfer_cb+0x3c4>

      case HID_REQ_CONTROL_GET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8004e64:	79bb      	ldrb	r3, [r7, #6]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d12e      	bne.n	8004ec8 <hidd_control_xfer_cb+0x3c8>
          tud_control_xfer(rhport, request, &p_hid->protocol_mode, 1);
 8004e6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e6c:	1d9a      	adds	r2, r3, #6
 8004e6e:	79f8      	ldrb	r0, [r7, #7]
 8004e70:	2301      	movs	r3, #1
 8004e72:	6839      	ldr	r1, [r7, #0]
 8004e74:	f002 fcac 	bl	80077d0 <tud_control_xfer>
        }
        break;
 8004e78:	e026      	b.n	8004ec8 <hidd_control_xfer_cb+0x3c8>

      case HID_REQ_CONTROL_SET_PROTOCOL:
        if (stage == CONTROL_STAGE_SETUP) {
 8004e7a:	79bb      	ldrb	r3, [r7, #6]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d105      	bne.n	8004e8c <hidd_control_xfer_cb+0x38c>
          tud_control_status(rhport, request);
 8004e80:	79fb      	ldrb	r3, [r7, #7]
 8004e82:	6839      	ldr	r1, [r7, #0]
 8004e84:	4618      	mov	r0, r3
 8004e86:	f002 fc31 	bl	80076ec <tud_control_status>
        } else if (stage == CONTROL_STAGE_ACK) {
          p_hid->protocol_mode = (uint8_t) request->wValue;
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
        }
        break;
 8004e8a:	e01f      	b.n	8004ecc <hidd_control_xfer_cb+0x3cc>
        } else if (stage == CONTROL_STAGE_ACK) {
 8004e8c:	79bb      	ldrb	r3, [r7, #6]
 8004e8e:	2b03      	cmp	r3, #3
 8004e90:	d11c      	bne.n	8004ecc <hidd_control_xfer_cb+0x3cc>
          p_hid->protocol_mode = (uint8_t) request->wValue;
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	885b      	ldrh	r3, [r3, #2]
 8004e96:	b29b      	uxth	r3, r3
 8004e98:	b2da      	uxtb	r2, r3
 8004e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e9c:	719a      	strb	r2, [r3, #6]
          tud_hid_set_protocol_cb(hid_itf, p_hid->protocol_mode);
 8004e9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea0:	799a      	ldrb	r2, [r3, #6]
 8004ea2:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8004ea6:	4611      	mov	r1, r2
 8004ea8:	4618      	mov	r0, r3
 8004eaa:	f7fb fcb9 	bl	8000820 <tud_hid_set_protocol_cb>
        break;
 8004eae:	e00d      	b.n	8004ecc <hidd_control_xfer_cb+0x3cc>

      default:
        return false; // stall unsupported request
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	e00d      	b.n	8004ed0 <hidd_control_xfer_cb+0x3d0>
    }
  } else {
    return false; // stall unsupported request
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	e00b      	b.n	8004ed0 <hidd_control_xfer_cb+0x3d0>
        break;
 8004eb8:	bf00      	nop
 8004eba:	e008      	b.n	8004ece <hidd_control_xfer_cb+0x3ce>
        break;
 8004ebc:	bf00      	nop
 8004ebe:	e006      	b.n	8004ece <hidd_control_xfer_cb+0x3ce>
        break;
 8004ec0:	bf00      	nop
 8004ec2:	e004      	b.n	8004ece <hidd_control_xfer_cb+0x3ce>
        break;
 8004ec4:	bf00      	nop
 8004ec6:	e002      	b.n	8004ece <hidd_control_xfer_cb+0x3ce>
        break;
 8004ec8:	bf00      	nop
 8004eca:	e000      	b.n	8004ece <hidd_control_xfer_cb+0x3ce>
        break;
 8004ecc:	bf00      	nop
  }

  return true;
 8004ece:	2301      	movs	r3, #1
}
 8004ed0:	4618      	mov	r0, r3
 8004ed2:	3748      	adds	r7, #72	@ 0x48
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <hidd_xfer_cb>:

bool hidd_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b08a      	sub	sp, #40	@ 0x28
 8004edc:	af02      	add	r7, sp, #8
 8004ede:	603b      	str	r3, [r7, #0]
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	71fb      	strb	r3, [r7, #7]
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	71bb      	strb	r3, [r7, #6]
 8004ee8:	4613      	mov	r3, r2
 8004eea:	717b      	strb	r3, [r7, #5]
  uint8_t instance;
  hidd_interface_t *p_hid;

  // Identify which interface to use
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8004eec:	2300      	movs	r3, #0
 8004eee:	77fb      	strb	r3, [r7, #31]
 8004ef0:	e014      	b.n	8004f1c <hidd_xfer_cb+0x44>
    p_hid = &_hidd_itf[instance];
 8004ef2:	7ffa      	ldrb	r2, [r7, #31]
 8004ef4:	4613      	mov	r3, r2
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	4413      	add	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4a3e      	ldr	r2, [pc, #248]	@ (8004ff8 <hidd_xfer_cb+0x120>)
 8004efe:	4413      	add	r3, r2
 8004f00:	61bb      	str	r3, [r7, #24]
    if ((ep_addr == p_hid->ep_out) || (ep_addr == p_hid->ep_in)) {
 8004f02:	69bb      	ldr	r3, [r7, #24]
 8004f04:	789b      	ldrb	r3, [r3, #2]
 8004f06:	79ba      	ldrb	r2, [r7, #6]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d00a      	beq.n	8004f22 <hidd_xfer_cb+0x4a>
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	785b      	ldrb	r3, [r3, #1]
 8004f10:	79ba      	ldrb	r2, [r7, #6]
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d005      	beq.n	8004f22 <hidd_xfer_cb+0x4a>
  for (instance = 0; instance < CFG_TUD_HID; instance++) {
 8004f16:	7ffb      	ldrb	r3, [r7, #31]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	77fb      	strb	r3, [r7, #31]
 8004f1c:	7ffb      	ldrb	r3, [r7, #31]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d0e7      	beq.n	8004ef2 <hidd_xfer_cb+0x1a>
      break;
    }
  }
  TU_ASSERT(instance < CFG_TUD_HID);
 8004f22:	7ffb      	ldrb	r3, [r7, #31]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d00a      	beq.n	8004f3e <hidd_xfer_cb+0x66>
 8004f28:	4b34      	ldr	r3, [pc, #208]	@ (8004ffc <hidd_xfer_cb+0x124>)
 8004f2a:	60fb      	str	r3, [r7, #12]
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0301 	and.w	r3, r3, #1
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d000      	beq.n	8004f3a <hidd_xfer_cb+0x62>
 8004f38:	be00      	bkpt	0x0000
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	e057      	b.n	8004fee <hidd_xfer_cb+0x116>
  hidd_epbuf_t *p_epbuf = &_hidd_epbuf[instance];
 8004f3e:	7ffa      	ldrb	r2, [r7, #31]
 8004f40:	4613      	mov	r3, r2
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	4413      	add	r3, r2
 8004f46:	011b      	lsls	r3, r3, #4
 8004f48:	4a2d      	ldr	r2, [pc, #180]	@ (8005000 <hidd_xfer_cb+0x128>)
 8004f4a:	4413      	add	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]

  if (ep_addr == p_hid->ep_in) {
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	785b      	ldrb	r3, [r3, #1]
 8004f52:	79ba      	ldrb	r2, [r7, #6]
 8004f54:	429a      	cmp	r2, r3
 8004f56:	d116      	bne.n	8004f86 <hidd_xfer_cb+0xae>
    // Input report
    if (XFER_RESULT_SUCCESS == result) {
 8004f58:	797b      	ldrb	r3, [r7, #5]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d109      	bne.n	8004f72 <hidd_xfer_cb+0x9a>
      tud_hid_report_complete_cb(instance, p_epbuf->epin, (uint16_t) xferred_bytes);
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f103 0110 	add.w	r1, r3, #16
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	7ffb      	ldrb	r3, [r7, #31]
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f7fb fc66 	bl	800083c <tud_hid_report_complete_cb>
 8004f70:	e03c      	b.n	8004fec <hidd_xfer_cb+0x114>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_INPUT, p_epbuf->epin, (uint16_t) xferred_bytes);
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f103 0210 	add.w	r2, r3, #16
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	7ff8      	ldrb	r0, [r7, #31]
 8004f7e:	2101      	movs	r1, #1
 8004f80:	f7ff fbb1 	bl	80046e6 <tud_hid_report_failed_cb>
 8004f84:	e032      	b.n	8004fec <hidd_xfer_cb+0x114>
    }
  } else {
    // Output report
    if (XFER_RESULT_SUCCESS == result) {
 8004f86:	797b      	ldrb	r3, [r7, #5]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d10c      	bne.n	8004fa6 <hidd_xfer_cb+0xce>
      tud_hid_set_report_cb(instance, 0, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t)xferred_bytes);
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	f103 0220 	add.w	r2, r3, #32
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	b29b      	uxth	r3, r3
 8004f96:	7ff8      	ldrb	r0, [r7, #31]
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	2202      	movs	r2, #2
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	f7fc fd9c 	bl	8001adc <tud_hid_set_report_cb>
 8004fa4:	e008      	b.n	8004fb8 <hidd_xfer_cb+0xe0>
    } else {
      tud_hid_report_failed_cb(instance, HID_REPORT_TYPE_OUTPUT, p_epbuf->epout, (uint16_t) xferred_bytes);
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	f103 0220 	add.w	r2, r3, #32
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	b29b      	uxth	r3, r3
 8004fb0:	7ff8      	ldrb	r0, [r7, #31]
 8004fb2:	2102      	movs	r1, #2
 8004fb4:	f7ff fb97 	bl	80046e6 <tud_hid_report_failed_cb>
    }

    // prepare for new transfer
    TU_ASSERT(usbd_edpt_xfer(rhport, p_hid->ep_out, p_epbuf->epout, CFG_TUD_HID_EP_BUFSIZE));
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	7899      	ldrb	r1, [r3, #2]
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	f103 0220 	add.w	r2, r3, #32
 8004fc2:	79f8      	ldrb	r0, [r7, #7]
 8004fc4:	2310      	movs	r3, #16
 8004fc6:	f002 fa1b 	bl	8007400 <usbd_edpt_xfer>
 8004fca:	4603      	mov	r3, r0
 8004fcc:	f083 0301 	eor.w	r3, r3, #1
 8004fd0:	b2db      	uxtb	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d00a      	beq.n	8004fec <hidd_xfer_cb+0x114>
 8004fd6:	4b09      	ldr	r3, [pc, #36]	@ (8004ffc <hidd_xfer_cb+0x124>)
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d000      	beq.n	8004fe8 <hidd_xfer_cb+0x110>
 8004fe6:	be00      	bkpt	0x0000
 8004fe8:	2300      	movs	r3, #0
 8004fea:	e000      	b.n	8004fee <hidd_xfer_cb+0x116>
  }

  return true;
 8004fec:	2301      	movs	r3, #1
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3720      	adds	r7, #32
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
 8004ff6:	bf00      	nop
 8004ff8:	20000a80 	.word	0x20000a80
 8004ffc:	e000edf0 	.word	0xe000edf0
 8005000:	20000a8c 	.word	0x20000a8c

08005004 <tu_fifo_config>:
  TU_FIFO_COPY_CST_FULL_WORDS, ///< Copy from/to a constant source/destination address - required for e.g. STM32 to write into USB hardware FIFO
#endif
} tu_fifo_copy_mode_t;

bool tu_fifo_config(tu_fifo_t *f, void* buffer, uint16_t depth, uint16_t item_size, bool overwritable)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	60f8      	str	r0, [r7, #12]
 800500c:	60b9      	str	r1, [r7, #8]
 800500e:	4611      	mov	r1, r2
 8005010:	461a      	mov	r2, r3
 8005012:	460b      	mov	r3, r1
 8005014:	80fb      	strh	r3, [r7, #6]
 8005016:	4613      	mov	r3, r2
 8005018:	80bb      	strh	r3, [r7, #4]
  // Limit index space to 2*depth - this allows for a fast "modulo" calculation
  // but limits the maximum depth to 2^16/2 = 2^15 and buffer overflows are detectable
  // only if overflow happens once (important for unsupervised DMA applications)
  if (depth > 0x8000) return false;
 800501a:	88fb      	ldrh	r3, [r7, #6]
 800501c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005020:	d901      	bls.n	8005026 <tu_fifo_config+0x22>
 8005022:	2300      	movs	r3, #0
 8005024:	e01b      	b.n	800505e <tu_fifo_config+0x5a>

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->buffer       = (uint8_t*) buffer;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	68ba      	ldr	r2, [r7, #8]
 800502a:	601a      	str	r2, [r3, #0]
  f->depth        = depth;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	88fa      	ldrh	r2, [r7, #6]
 8005030:	809a      	strh	r2, [r3, #4]
  f->item_size    = (uint16_t) (item_size & 0x7FFF);
 8005032:	88bb      	ldrh	r3, [r7, #4]
 8005034:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005038:	b299      	uxth	r1, r3
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	88d3      	ldrh	r3, [r2, #6]
 800503e:	f361 030e 	bfi	r3, r1, #0, #15
 8005042:	80d3      	strh	r3, [r2, #6]
  f->overwritable = overwritable;
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	79d3      	ldrb	r3, [r2, #7]
 8005048:	7e39      	ldrb	r1, [r7, #24]
 800504a:	f361 13c7 	bfi	r3, r1, #7, #1
 800504e:	71d3      	strb	r3, [r2, #7]
  f->rd_idx       = 0;
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	2200      	movs	r2, #0
 8005054:	815a      	strh	r2, [r3, #10]
  f->wr_idx       = 0;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 800505c:	2301      	movs	r3, #1
}
 800505e:	4618      	mov	r0, r3
 8005060:	3714      	adds	r7, #20
 8005062:	46bd      	mov	sp, r7
 8005064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005068:	4770      	bx	lr

0800506a <_ff_push_const_addr>:
#ifdef TUP_MEM_CONST_ADDR
// Intended to be used to read from hardware USB FIFO in e.g. STM32 where all data is read from a constant address
// Code adapted from dcd_synopsys.c
// TODO generalize with configurable 1 byte or 4 byte each read
static void _ff_push_const_addr(uint8_t * ff_buf, const void * app_buf, uint16_t len)
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b08a      	sub	sp, #40	@ 0x28
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	4613      	mov	r3, r2
 8005076:	80fb      	strh	r3, [r7, #6]
  volatile const uint32_t * reg_rx = (volatile const uint32_t *) app_buf;
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	623b      	str	r3, [r7, #32]

  // Reading full available 32 bit words from const app address
  uint16_t full_words = len >> 2;
 800507c:	88fb      	ldrh	r3, [r7, #6]
 800507e:	089b      	lsrs	r3, r3, #2
 8005080:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 8005082:	e00b      	b.n	800509c <_ff_push_const_addr+0x32>
  {
    tu_unaligned_write32(ff_buf, *reg_rx);
 8005084:	6a3b      	ldr	r3, [r7, #32]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	68fa      	ldr	r2, [r7, #12]
 800508a:	61ba      	str	r2, [r7, #24]
 800508c:	617b      	str	r3, [r7, #20]
}

TU_ATTR_ALWAYS_INLINE static inline void tu_unaligned_write32(void *mem, uint32_t value) {
  *((uint32_t *) mem) = value;
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	697a      	ldr	r2, [r7, #20]
 8005092:	601a      	str	r2, [r3, #0]
}
 8005094:	bf00      	nop
    ff_buf += 4;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	3304      	adds	r3, #4
 800509a:	60fb      	str	r3, [r7, #12]
  while(full_words--)
 800509c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800509e:	1e5a      	subs	r2, r3, #1
 80050a0:	84fa      	strh	r2, [r7, #38]	@ 0x26
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d1ee      	bne.n	8005084 <_ff_push_const_addr+0x1a>
  }

  // Read the remaining 1-3 bytes from const app address
  uint8_t const bytes_rem = len & 0x03;
 80050a6:	88fb      	ldrh	r3, [r7, #6]
 80050a8:	b2db      	uxtb	r3, r3
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 80050b0:	7ffb      	ldrb	r3, [r7, #31]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d009      	beq.n	80050ca <_ff_push_const_addr+0x60>
  {
    uint32_t tmp32 = *reg_rx;
 80050b6:	6a3b      	ldr	r3, [r7, #32]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	613b      	str	r3, [r7, #16]
    memcpy(ff_buf, &tmp32, bytes_rem);
 80050bc:	7ffa      	ldrb	r2, [r7, #31]
 80050be:	f107 0310 	add.w	r3, r7, #16
 80050c2:	4619      	mov	r1, r3
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f004 fe21 	bl	8009d0c <memcpy>
  }
}
 80050ca:	bf00      	nop
 80050cc:	3728      	adds	r7, #40	@ 0x28
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <_ff_pull_const_addr>:

// Intended to be used to write to hardware USB FIFO in e.g. STM32
// where all data is written to a constant address in full word copies
static void _ff_pull_const_addr(void * app_buf, const uint8_t * ff_buf, uint16_t len)
{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b08a      	sub	sp, #40	@ 0x28
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	60f8      	str	r0, [r7, #12]
 80050da:	60b9      	str	r1, [r7, #8]
 80050dc:	4613      	mov	r3, r2
 80050de:	80fb      	strh	r3, [r7, #6]
  volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	623b      	str	r3, [r7, #32]

  // Write full available 32 bit words to const address
  uint16_t full_words = len >> 2;
 80050e4:	88fb      	ldrh	r3, [r7, #6]
 80050e6:	089b      	lsrs	r3, r3, #2
 80050e8:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while(full_words--)
 80050ea:	e008      	b.n	80050fe <_ff_pull_const_addr+0x2c>
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	61bb      	str	r3, [r7, #24]
  return *((uint32_t const *) mem);
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	681a      	ldr	r2, [r3, #0]
  {
    *reg_tx = tu_unaligned_read32(ff_buf);
 80050f4:	6a3b      	ldr	r3, [r7, #32]
 80050f6:	601a      	str	r2, [r3, #0]
    ff_buf += 4;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	3304      	adds	r3, #4
 80050fc:	60bb      	str	r3, [r7, #8]
  while(full_words--)
 80050fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005100:	1e5a      	subs	r2, r3, #1
 8005102:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1f1      	bne.n	80050ec <_ff_pull_const_addr+0x1a>
  }

  // Write the remaining 1-3 bytes into const address
  uint8_t const bytes_rem = len & 0x03;
 8005108:	88fb      	ldrh	r3, [r7, #6]
 800510a:	b2db      	uxtb	r3, r3
 800510c:	f003 0303 	and.w	r3, r3, #3
 8005110:	77fb      	strb	r3, [r7, #31]
  if ( bytes_rem )
 8005112:	7ffb      	ldrb	r3, [r7, #31]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d00b      	beq.n	8005130 <_ff_pull_const_addr+0x5e>
  {
    uint32_t tmp32 = 0;
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]
    memcpy(&tmp32, ff_buf, bytes_rem);
 800511c:	7ffa      	ldrb	r2, [r7, #31]
 800511e:	f107 0314 	add.w	r3, r7, #20
 8005122:	68b9      	ldr	r1, [r7, #8]
 8005124:	4618      	mov	r0, r3
 8005126:	f004 fdf1 	bl	8009d0c <memcpy>

    *reg_tx = tmp32;
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	6a3b      	ldr	r3, [r7, #32]
 800512e:	601a      	str	r2, [r3, #0]
  }
}
 8005130:	bf00      	nop
 8005132:	3728      	adds	r7, #40	@ 0x28
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <_ff_push>:
#endif

// send one item to fifo WITHOUT updating write pointer
static inline void _ff_push(tu_fifo_t* f, void const * app_buf, uint16_t rel)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	4613      	mov	r3, r2
 8005144:	80fb      	strh	r3, [r7, #6]
  memcpy(f->buffer + (rel * f->item_size), app_buf, f->item_size);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	88fa      	ldrh	r2, [r7, #6]
 800514c:	68f9      	ldr	r1, [r7, #12]
 800514e:	88c9      	ldrh	r1, [r1, #6]
 8005150:	f3c1 010e 	ubfx	r1, r1, #0, #15
 8005154:	b289      	uxth	r1, r1
 8005156:	fb01 f202 	mul.w	r2, r1, r2
 800515a:	1898      	adds	r0, r3, r2
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	88db      	ldrh	r3, [r3, #6]
 8005160:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005164:	b29b      	uxth	r3, r3
 8005166:	461a      	mov	r2, r3
 8005168:	68b9      	ldr	r1, [r7, #8]
 800516a:	f004 fdcf 	bl	8009d0c <memcpy>
}
 800516e:	bf00      	nop
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <_ff_push_n>:

// send n items to fifo WITHOUT updating write pointer
static void _ff_push_n(tu_fifo_t* f, void const * app_buf, uint16_t n, uint16_t wr_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b08e      	sub	sp, #56	@ 0x38
 800517a:	af00      	add	r7, sp, #0
 800517c:	60f8      	str	r0, [r7, #12]
 800517e:	60b9      	str	r1, [r7, #8]
 8005180:	4611      	mov	r1, r2
 8005182:	461a      	mov	r2, r3
 8005184:	460b      	mov	r3, r1
 8005186:	80fb      	strh	r3, [r7, #6]
 8005188:	4613      	mov	r3, r2
 800518a:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - wr_ptr;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	889a      	ldrh	r2, [r3, #4]
 8005190:	88bb      	ldrh	r3, [r7, #4]
 8005192:	1ad3      	subs	r3, r2, r3
 8005194:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count;
 8005196:	88fa      	ldrh	r2, [r7, #6]
 8005198:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	88db      	ldrh	r3, [r3, #6]
 80051a2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	461a      	mov	r2, r3
 80051aa:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80051ac:	fb13 f302 	smulbb	r3, r3, r2
 80051b0:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	88db      	ldrh	r3, [r3, #6]
 80051b6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80051ba:	b29b      	uxth	r3, r3
 80051bc:	461a      	mov	r2, r3
 80051be:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051c0:	fb13 f302 	smulbb	r3, r3, r2
 80051c4:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (wr_ptr * f->item_size);
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	88ba      	ldrh	r2, [r7, #4]
 80051cc:	68f9      	ldr	r1, [r7, #12]
 80051ce:	88c9      	ldrh	r1, [r1, #6]
 80051d0:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80051d4:	b289      	uxth	r1, r1
 80051d6:	fb01 f202 	mul.w	r2, r1, r2
 80051da:	4413      	add	r3, r2
 80051dc:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 80051de:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d002      	beq.n	80051ec <_ff_push_n+0x76>
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d022      	beq.n	8005230 <_ff_push_n+0xba>
        // Write data wrapped part
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
      }
      break;
#endif
    default: break;
 80051ea:	e09e      	b.n	800532a <_ff_push_n+0x1b4>
      if(n <= lin_count)
 80051ec:	88fa      	ldrh	r2, [r7, #6]
 80051ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d80d      	bhi.n	8005210 <_ff_push_n+0x9a>
        memcpy(ff_buf, app_buf, n*f->item_size);
 80051f4:	88fb      	ldrh	r3, [r7, #6]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	88d2      	ldrh	r2, [r2, #6]
 80051fa:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80051fe:	b292      	uxth	r2, r2
 8005200:	fb02 f303 	mul.w	r3, r2, r3
 8005204:	461a      	mov	r2, r3
 8005206:	68b9      	ldr	r1, [r7, #8]
 8005208:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800520a:	f004 fd7f 	bl	8009d0c <memcpy>
      break;
 800520e:	e08c      	b.n	800532a <_ff_push_n+0x1b4>
        memcpy(ff_buf, app_buf, lin_bytes);
 8005210:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005212:	461a      	mov	r2, r3
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005218:	f004 fd78 	bl	8009d0c <memcpy>
        memcpy(f->buffer, ((uint8_t const*) app_buf) + lin_bytes, wrap_bytes);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6818      	ldr	r0, [r3, #0]
 8005220:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	4413      	add	r3, r2
 8005226:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005228:	4619      	mov	r1, r3
 800522a:	f004 fd6f 	bl	8009d0c <memcpy>
      break;
 800522e:	e07c      	b.n	800532a <_ff_push_n+0x1b4>
      if(n <= lin_count)
 8005230:	88fa      	ldrh	r2, [r7, #6]
 8005232:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005234:	429a      	cmp	r2, r3
 8005236:	d80f      	bhi.n	8005258 <_ff_push_n+0xe2>
        _ff_push_const_addr(ff_buf, app_buf, n*f->item_size);
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	88db      	ldrh	r3, [r3, #6]
 800523c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8005240:	b29b      	uxth	r3, r3
 8005242:	461a      	mov	r2, r3
 8005244:	88fb      	ldrh	r3, [r7, #6]
 8005246:	fb13 f302 	smulbb	r3, r3, r2
 800524a:	b29b      	uxth	r3, r3
 800524c:	461a      	mov	r2, r3
 800524e:	68b9      	ldr	r1, [r7, #8]
 8005250:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005252:	f7ff ff0a 	bl	800506a <_ff_push_const_addr>
      break;
 8005256:	e067      	b.n	8005328 <_ff_push_n+0x1b2>
        uint16_t nLin_4n_bytes = lin_bytes & 0xFFFC;
 8005258:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800525a:	f023 0303 	bic.w	r3, r3, #3
 800525e:	843b      	strh	r3, [r7, #32]
        _ff_push_const_addr(ff_buf, app_buf, nLin_4n_bytes);
 8005260:	8c3b      	ldrh	r3, [r7, #32]
 8005262:	461a      	mov	r2, r3
 8005264:	68b9      	ldr	r1, [r7, #8]
 8005266:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005268:	f7ff feff 	bl	800506a <_ff_push_const_addr>
        ff_buf += nLin_4n_bytes;
 800526c:	8c3b      	ldrh	r3, [r7, #32]
 800526e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005270:	4413      	add	r3, r2
 8005272:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 8005274:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005276:	b2db      	uxtb	r3, r3
 8005278:	f003 0303 	and.w	r3, r3, #3
 800527c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 8005280:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005284:	2b00      	cmp	r3, #0
 8005286:	d043      	beq.n	8005310 <_ff_push_n+0x19a>
          volatile const uint32_t * rx_fifo = (volatile const uint32_t *) app_buf;
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 800528c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005290:	b29b      	uxth	r3, r3
 8005292:	f1c3 0304 	rsb	r3, r3, #4
 8005296:	b29a      	uxth	r2, r3
 8005298:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800529a:	837b      	strh	r3, [r7, #26]
 800529c:	4613      	mov	r3, r2
 800529e:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 80052a0:	8b7a      	ldrh	r2, [r7, #26]
 80052a2:	8b3b      	ldrh	r3, [r7, #24]
 80052a4:	4293      	cmp	r3, r2
 80052a6:	bf28      	it	cs
 80052a8:	4613      	movcs	r3, r2
 80052aa:	b29b      	uxth	r3, r3
 80052ac:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 80052b0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80052b4:	b29b      	uxth	r3, r3
 80052b6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32 = *rx_fifo;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	617b      	str	r3, [r7, #20]
          uint8_t * src_u8 = ((uint8_t *) &tmp32);
 80052c2:	f107 0314 	add.w	r3, r7, #20
 80052c6:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *ff_buf++ = *src_u8++;
 80052c8:	e007      	b.n	80052da <_ff_push_n+0x164>
 80052ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052cc:	1c53      	adds	r3, r2, #1
 80052ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052d2:	1c59      	adds	r1, r3, #1
 80052d4:	6339      	str	r1, [r7, #48]	@ 0x30
 80052d6:	7812      	ldrb	r2, [r2, #0]
 80052d8:	701a      	strb	r2, [r3, #0]
 80052da:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80052de:	1e5a      	subs	r2, r3, #1
 80052e0:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d1f0      	bne.n	80052ca <_ff_push_n+0x154>
          ff_buf = f->buffer;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *ff_buf++ = *src_u8++;
 80052ee:	e007      	b.n	8005300 <_ff_push_n+0x18a>
 80052f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052f2:	1c53      	adds	r3, r2, #1
 80052f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80052f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f8:	1c59      	adds	r1, r3, #1
 80052fa:	6339      	str	r1, [r7, #48]	@ 0x30
 80052fc:	7812      	ldrb	r2, [r2, #0]
 80052fe:	701a      	strb	r2, [r3, #0]
 8005300:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8005304:	1e5a      	subs	r2, r3, #1
 8005306:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1f0      	bne.n	80052f0 <_ff_push_n+0x17a>
 800530e:	e002      	b.n	8005316 <_ff_push_n+0x1a0>
          ff_buf = f->buffer; // wrap around to beginning
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_push_const_addr(ff_buf, app_buf, wrap_bytes);
 8005316:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005318:	2b00      	cmp	r3, #0
 800531a:	d005      	beq.n	8005328 <_ff_push_n+0x1b2>
 800531c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800531e:	461a      	mov	r2, r3
 8005320:	68b9      	ldr	r1, [r7, #8]
 8005322:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005324:	f7ff fea1 	bl	800506a <_ff_push_const_addr>
      break;
 8005328:	bf00      	nop
  }
}
 800532a:	bf00      	nop
 800532c:	3738      	adds	r7, #56	@ 0x38
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}

08005332 <_ff_pull>:

// get one item from fifo WITHOUT updating read pointer
static inline void _ff_pull(tu_fifo_t* f, void * app_buf, uint16_t rel)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	60f8      	str	r0, [r7, #12]
 800533a:	60b9      	str	r1, [r7, #8]
 800533c:	4613      	mov	r3, r2
 800533e:	80fb      	strh	r3, [r7, #6]
  memcpy(app_buf, f->buffer + (rel * f->item_size), f->item_size);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	88fa      	ldrh	r2, [r7, #6]
 8005346:	68f9      	ldr	r1, [r7, #12]
 8005348:	88c9      	ldrh	r1, [r1, #6]
 800534a:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800534e:	b289      	uxth	r1, r1
 8005350:	fb01 f202 	mul.w	r2, r1, r2
 8005354:	1899      	adds	r1, r3, r2
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	88db      	ldrh	r3, [r3, #6]
 800535a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800535e:	b29b      	uxth	r3, r3
 8005360:	461a      	mov	r2, r3
 8005362:	68b8      	ldr	r0, [r7, #8]
 8005364:	f004 fcd2 	bl	8009d0c <memcpy>
}
 8005368:	bf00      	nop
 800536a:	3710      	adds	r7, #16
 800536c:	46bd      	mov	sp, r7
 800536e:	bd80      	pop	{r7, pc}

08005370 <_ff_pull_n>:

// get n items from fifo WITHOUT updating read pointer
static void _ff_pull_n(tu_fifo_t* f, void* app_buf, uint16_t n, uint16_t rd_ptr, tu_fifo_copy_mode_t copy_mode)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b08e      	sub	sp, #56	@ 0x38
 8005374:	af00      	add	r7, sp, #0
 8005376:	60f8      	str	r0, [r7, #12]
 8005378:	60b9      	str	r1, [r7, #8]
 800537a:	4611      	mov	r1, r2
 800537c:	461a      	mov	r2, r3
 800537e:	460b      	mov	r3, r1
 8005380:	80fb      	strh	r3, [r7, #6]
 8005382:	4613      	mov	r3, r2
 8005384:	80bb      	strh	r3, [r7, #4]
  uint16_t const lin_count = f->depth - rd_ptr;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	889a      	ldrh	r2, [r3, #4]
 800538a:	88bb      	ldrh	r3, [r7, #4]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	84fb      	strh	r3, [r7, #38]	@ 0x26
  uint16_t const wrap_count = n - lin_count; // only used if wrapped
 8005390:	88fa      	ldrh	r2, [r7, #6]
 8005392:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	84bb      	strh	r3, [r7, #36]	@ 0x24

  uint16_t lin_bytes = lin_count * f->item_size;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	88db      	ldrh	r3, [r3, #6]
 800539c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	461a      	mov	r2, r3
 80053a4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80053a6:	fb13 f302 	smulbb	r3, r3, r2
 80053aa:	847b      	strh	r3, [r7, #34]	@ 0x22
  uint16_t wrap_bytes = wrap_count * f->item_size;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	88db      	ldrh	r3, [r3, #6]
 80053b0:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	461a      	mov	r2, r3
 80053b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80053ba:	fb13 f302 	smulbb	r3, r3, r2
 80053be:	86fb      	strh	r3, [r7, #54]	@ 0x36

  // current buffer of fifo
  uint8_t* ff_buf = f->buffer + (rd_ptr * f->item_size);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	88ba      	ldrh	r2, [r7, #4]
 80053c6:	68f9      	ldr	r1, [r7, #12]
 80053c8:	88c9      	ldrh	r1, [r1, #6]
 80053ca:	f3c1 010e 	ubfx	r1, r1, #0, #15
 80053ce:	b289      	uxth	r1, r1
 80053d0:	fb01 f202 	mul.w	r2, r1, r2
 80053d4:	4413      	add	r3, r2
 80053d6:	633b      	str	r3, [r7, #48]	@ 0x30

  switch (copy_mode)
 80053d8:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d002      	beq.n	80053e6 <_ff_pull_n+0x76>
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d022      	beq.n	800542a <_ff_pull_n+0xba>
        // Read data wrapped part
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
      }
    break;
#endif
    default: break;
 80053e4:	e0a0      	b.n	8005528 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 80053e6:	88fa      	ldrh	r2, [r7, #6]
 80053e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d80d      	bhi.n	800540a <_ff_pull_n+0x9a>
        memcpy(app_buf, ff_buf, n*f->item_size);
 80053ee:	88fb      	ldrh	r3, [r7, #6]
 80053f0:	68fa      	ldr	r2, [r7, #12]
 80053f2:	88d2      	ldrh	r2, [r2, #6]
 80053f4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80053f8:	b292      	uxth	r2, r2
 80053fa:	fb02 f303 	mul.w	r3, r2, r3
 80053fe:	461a      	mov	r2, r3
 8005400:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005402:	68b8      	ldr	r0, [r7, #8]
 8005404:	f004 fc82 	bl	8009d0c <memcpy>
    break;
 8005408:	e08e      	b.n	8005528 <_ff_pull_n+0x1b8>
        memcpy(app_buf, ff_buf, lin_bytes);
 800540a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800540c:	461a      	mov	r2, r3
 800540e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005410:	68b8      	ldr	r0, [r7, #8]
 8005412:	f004 fc7b 	bl	8009d0c <memcpy>
        memcpy((uint8_t*) app_buf + lin_bytes, f->buffer, wrap_bytes);
 8005416:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005418:	68ba      	ldr	r2, [r7, #8]
 800541a:	18d0      	adds	r0, r2, r3
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005422:	4619      	mov	r1, r3
 8005424:	f004 fc72 	bl	8009d0c <memcpy>
    break;
 8005428:	e07e      	b.n	8005528 <_ff_pull_n+0x1b8>
      if ( n <= lin_count )
 800542a:	88fa      	ldrh	r2, [r7, #6]
 800542c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800542e:	429a      	cmp	r2, r3
 8005430:	d80f      	bhi.n	8005452 <_ff_pull_n+0xe2>
        _ff_pull_const_addr(app_buf, ff_buf, n*f->item_size);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	88db      	ldrh	r3, [r3, #6]
 8005436:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800543a:	b29b      	uxth	r3, r3
 800543c:	461a      	mov	r2, r3
 800543e:	88fb      	ldrh	r3, [r7, #6]
 8005440:	fb13 f302 	smulbb	r3, r3, r2
 8005444:	b29b      	uxth	r3, r3
 8005446:	461a      	mov	r2, r3
 8005448:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800544a:	68b8      	ldr	r0, [r7, #8]
 800544c:	f7ff fe41 	bl	80050d2 <_ff_pull_const_addr>
    break;
 8005450:	e069      	b.n	8005526 <_ff_pull_n+0x1b6>
        uint16_t lin_4n_bytes = lin_bytes & 0xFFFC;
 8005452:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005454:	f023 0303 	bic.w	r3, r3, #3
 8005458:	843b      	strh	r3, [r7, #32]
        _ff_pull_const_addr(app_buf, ff_buf, lin_4n_bytes);
 800545a:	8c3b      	ldrh	r3, [r7, #32]
 800545c:	461a      	mov	r2, r3
 800545e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005460:	68b8      	ldr	r0, [r7, #8]
 8005462:	f7ff fe36 	bl	80050d2 <_ff_pull_const_addr>
        ff_buf += lin_4n_bytes;
 8005466:	8c3b      	ldrh	r3, [r7, #32]
 8005468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800546a:	4413      	add	r3, r2
 800546c:	633b      	str	r3, [r7, #48]	@ 0x30
        uint8_t rem = lin_bytes & 0x03;
 800546e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005470:	b2db      	uxtb	r3, r3
 8005472:	f003 0303 	and.w	r3, r3, #3
 8005476:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        if (rem > 0)
 800547a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800547e:	2b00      	cmp	r3, #0
 8005480:	d045      	beq.n	800550e <_ff_pull_n+0x19e>
          volatile uint32_t * reg_tx = (volatile uint32_t *) app_buf;
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	61fb      	str	r3, [r7, #28]
          uint8_t remrem = (uint8_t) tu_min16(wrap_bytes, 4-rem);
 8005486:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800548a:	b29b      	uxth	r3, r3
 800548c:	f1c3 0304 	rsb	r3, r3, #4
 8005490:	b29a      	uxth	r2, r3
 8005492:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005494:	837b      	strh	r3, [r7, #26]
 8005496:	4613      	mov	r3, r2
 8005498:	833b      	strh	r3, [r7, #24]
 800549a:	8b7a      	ldrh	r2, [r7, #26]
 800549c:	8b3b      	ldrh	r3, [r7, #24]
 800549e:	4293      	cmp	r3, r2
 80054a0:	bf28      	it	cs
 80054a2:	4613      	movcs	r3, r2
 80054a4:	b29b      	uxth	r3, r3
 80054a6:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
          wrap_bytes -= remrem;
 80054aa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	86fb      	strh	r3, [r7, #54]	@ 0x36
          uint32_t tmp32=0;
 80054b6:	2300      	movs	r3, #0
 80054b8:	617b      	str	r3, [r7, #20]
          uint8_t * dst_u8 = (uint8_t *)&tmp32;
 80054ba:	f107 0314 	add.w	r3, r7, #20
 80054be:	62bb      	str	r3, [r7, #40]	@ 0x28
          while(rem--) *dst_u8++ = *ff_buf++;
 80054c0:	e007      	b.n	80054d2 <_ff_pull_n+0x162>
 80054c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054c4:	1c53      	adds	r3, r2, #1
 80054c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80054c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ca:	1c59      	adds	r1, r3, #1
 80054cc:	62b9      	str	r1, [r7, #40]	@ 0x28
 80054ce:	7812      	ldrb	r2, [r2, #0]
 80054d0:	701a      	strb	r2, [r3, #0]
 80054d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80054d6:	1e5a      	subs	r2, r3, #1
 80054d8:	f887 202f 	strb.w	r2, [r7, #47]	@ 0x2f
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1f0      	bne.n	80054c2 <_ff_pull_n+0x152>
          ff_buf = f->buffer;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	633b      	str	r3, [r7, #48]	@ 0x30
          while(remrem--) *dst_u8++ = *ff_buf++;
 80054e6:	e007      	b.n	80054f8 <_ff_pull_n+0x188>
 80054e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054ea:	1c53      	adds	r3, r2, #1
 80054ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80054ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f0:	1c59      	adds	r1, r3, #1
 80054f2:	62b9      	str	r1, [r7, #40]	@ 0x28
 80054f4:	7812      	ldrb	r2, [r2, #0]
 80054f6:	701a      	strb	r2, [r3, #0]
 80054f8:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80054fc:	1e5a      	subs	r2, r3, #1
 80054fe:	f887 202e 	strb.w	r2, [r7, #46]	@ 0x2e
 8005502:	2b00      	cmp	r3, #0
 8005504:	d1f0      	bne.n	80054e8 <_ff_pull_n+0x178>
          *reg_tx = tmp32;
 8005506:	697a      	ldr	r2, [r7, #20]
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	601a      	str	r2, [r3, #0]
 800550c:	e002      	b.n	8005514 <_ff_pull_n+0x1a4>
          ff_buf = f->buffer; // wrap around to beginning
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	633b      	str	r3, [r7, #48]	@ 0x30
        if (wrap_bytes > 0) _ff_pull_const_addr(app_buf, ff_buf, wrap_bytes);
 8005514:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005516:	2b00      	cmp	r3, #0
 8005518:	d005      	beq.n	8005526 <_ff_pull_n+0x1b6>
 800551a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800551c:	461a      	mov	r2, r3
 800551e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8005520:	68b8      	ldr	r0, [r7, #8]
 8005522:	f7ff fdd6 	bl	80050d2 <_ff_pull_const_addr>
    break;
 8005526:	bf00      	nop
  }
}
 8005528:	bf00      	nop
 800552a:	3738      	adds	r7, #56	@ 0x38
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <advance_index>:
//--------------------------------------------------------------------+

// Advance an absolute index
// "absolute" index is only in the range of [0..2*depth)
static uint16_t advance_index(uint16_t depth, uint16_t idx, uint16_t offset)
{
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	80fb      	strh	r3, [r7, #6]
 800553a:	460b      	mov	r3, r1
 800553c:	80bb      	strh	r3, [r7, #4]
 800553e:	4613      	mov	r3, r2
 8005540:	807b      	strh	r3, [r7, #2]
  // We limit the index space of p such that a correct wrap around happens
  // Check for a wrap around or if we are in unused index space - This has to be checked first!!
  // We are exploiting the wrap around to the correct index
  uint16_t new_idx = (uint16_t) (idx + offset);
 8005542:	88ba      	ldrh	r2, [r7, #4]
 8005544:	887b      	ldrh	r3, [r7, #2]
 8005546:	4413      	add	r3, r2
 8005548:	81fb      	strh	r3, [r7, #14]
  if ( (idx > new_idx) || (new_idx >= 2*depth) )
 800554a:	88ba      	ldrh	r2, [r7, #4]
 800554c:	89fb      	ldrh	r3, [r7, #14]
 800554e:	429a      	cmp	r2, r3
 8005550:	d804      	bhi.n	800555c <advance_index+0x2c>
 8005552:	89fa      	ldrh	r2, [r7, #14]
 8005554:	88fb      	ldrh	r3, [r7, #6]
 8005556:	005b      	lsls	r3, r3, #1
 8005558:	429a      	cmp	r2, r3
 800555a:	db08      	blt.n	800556e <advance_index+0x3e>
  {
    uint16_t const non_used_index_space = (uint16_t) (UINT16_MAX - (2*depth-1));
 800555c:	88fb      	ldrh	r3, [r7, #6]
 800555e:	005b      	lsls	r3, r3, #1
 8005560:	b29b      	uxth	r3, r3
 8005562:	425b      	negs	r3, r3
 8005564:	81bb      	strh	r3, [r7, #12]
    new_idx = (uint16_t) (new_idx + non_used_index_space);
 8005566:	89fa      	ldrh	r2, [r7, #14]
 8005568:	89bb      	ldrh	r3, [r7, #12]
 800556a:	4413      	add	r3, r2
 800556c:	81fb      	strh	r3, [r7, #14]
  }

  return new_idx;
 800556e:	89fb      	ldrh	r3, [r7, #14]
}
 8005570:	4618      	mov	r0, r3
 8005572:	3714      	adds	r7, #20
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <_tu_fifo_peek>:
}

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static bool _tu_fifo_peek(tu_fifo_t* f, void * p_buffer, uint16_t wr_idx, uint16_t rd_idx)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b08a      	sub	sp, #40	@ 0x28
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	4611      	mov	r1, r2
 8005588:	461a      	mov	r2, r3
 800558a:	460b      	mov	r3, r1
 800558c:	80fb      	strh	r3, [r7, #6]
 800558e:	4613      	mov	r3, r2
 8005590:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	889b      	ldrh	r3, [r3, #4]
 8005596:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005598:	88fb      	ldrh	r3, [r7, #6]
 800559a:	843b      	strh	r3, [r7, #32]
 800559c:	88bb      	ldrh	r3, [r7, #4]
 800559e:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 80055a0:	8c3a      	ldrh	r2, [r7, #32]
 80055a2:	8bfb      	ldrh	r3, [r7, #30]
 80055a4:	429a      	cmp	r2, r3
 80055a6:	d304      	bcc.n	80055b2 <_tu_fifo_peek+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 80055a8:	8c3a      	ldrh	r2, [r7, #32]
 80055aa:	8bfb      	ldrh	r3, [r7, #30]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	e008      	b.n	80055c4 <_tu_fifo_peek+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80055b2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80055b4:	005b      	lsls	r3, r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	8c39      	ldrh	r1, [r7, #32]
 80055ba:	8bfb      	ldrh	r3, [r7, #30]
 80055bc:	1acb      	subs	r3, r1, r3
 80055be:	b29b      	uxth	r3, r3
 80055c0:	4413      	add	r3, r2
 80055c2:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 80055c4:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return false;
 80055c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <_tu_fifo_peek+0x54>
 80055cc:	2300      	movs	r3, #0
 80055ce:	e037      	b.n	8005640 <_tu_fifo_peek+0xc4>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	889b      	ldrh	r3, [r3, #4]
 80055d4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d91b      	bls.n	8005612 <_tu_fifo_peek+0x96>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	61bb      	str	r3, [r7, #24]
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80055e2:	69bb      	ldr	r3, [r7, #24]
 80055e4:	889b      	ldrh	r3, [r3, #4]
 80055e6:	8afa      	ldrh	r2, [r7, #22]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d305      	bcc.n	80055f8 <_tu_fifo_peek+0x7c>
    rd_idx = wr_idx - f->depth;
 80055ec:	69bb      	ldr	r3, [r7, #24]
 80055ee:	889b      	ldrh	r3, [r3, #4]
 80055f0:	8afa      	ldrh	r2, [r7, #22]
 80055f2:	1ad3      	subs	r3, r2, r3
 80055f4:	82bb      	strh	r3, [r7, #20]
 80055f6:	e004      	b.n	8005602 <_tu_fifo_peek+0x86>
    rd_idx = wr_idx + f->depth;
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	889a      	ldrh	r2, [r3, #4]
 80055fc:	8afb      	ldrh	r3, [r7, #22]
 80055fe:	4413      	add	r3, r2
 8005600:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	8aba      	ldrh	r2, [r7, #20]
 8005606:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 8005608:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 800560a:	80bb      	strh	r3, [r7, #4]
    cnt = f->depth;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	889b      	ldrh	r3, [r3, #4]
 8005610:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	889b      	ldrh	r3, [r3, #4]
 8005616:	827b      	strh	r3, [r7, #18]
 8005618:	88bb      	ldrh	r3, [r7, #4]
 800561a:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 800561c:	e003      	b.n	8005626 <_tu_fifo_peek+0xaa>
 800561e:	8a3a      	ldrh	r2, [r7, #16]
 8005620:	8a7b      	ldrh	r3, [r7, #18]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	823b      	strh	r3, [r7, #16]
 8005626:	8a7a      	ldrh	r2, [r7, #18]
 8005628:	8a3b      	ldrh	r3, [r7, #16]
 800562a:	429a      	cmp	r2, r3
 800562c:	d9f7      	bls.n	800561e <_tu_fifo_peek+0xa2>
  return idx;
 800562e:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8005630:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull(f, p_buffer, rd_ptr);
 8005632:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005634:	461a      	mov	r2, r3
 8005636:	68b9      	ldr	r1, [r7, #8]
 8005638:	68f8      	ldr	r0, [r7, #12]
 800563a:	f7ff fe7a 	bl	8005332 <_ff_pull>

  return true;
 800563e:	2301      	movs	r3, #1
}
 8005640:	4618      	mov	r0, r3
 8005642:	3728      	adds	r7, #40	@ 0x28
 8005644:	46bd      	mov	sp, r7
 8005646:	bd80      	pop	{r7, pc}

08005648 <_tu_fifo_peek_n>:

// Works on local copies of w and r
// Must be protected by mutexes since in case of an overflow read pointer gets modified
static uint16_t _tu_fifo_peek_n(tu_fifo_t* f, void * p_buffer, uint16_t n, uint16_t wr_idx, uint16_t rd_idx, tu_fifo_copy_mode_t copy_mode)
{
 8005648:	b580      	push	{r7, lr}
 800564a:	b08c      	sub	sp, #48	@ 0x30
 800564c:	af02      	add	r7, sp, #8
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	4611      	mov	r1, r2
 8005654:	461a      	mov	r2, r3
 8005656:	460b      	mov	r3, r1
 8005658:	80fb      	strh	r3, [r7, #6]
 800565a:	4613      	mov	r3, r2
 800565c:	80bb      	strh	r3, [r7, #4]
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	889b      	ldrh	r3, [r3, #4]
 8005662:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005664:	88bb      	ldrh	r3, [r7, #4]
 8005666:	843b      	strh	r3, [r7, #32]
 8005668:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800566a:	83fb      	strh	r3, [r7, #30]
  if (wr_idx >= rd_idx)
 800566c:	8c3a      	ldrh	r2, [r7, #32]
 800566e:	8bfb      	ldrh	r3, [r7, #30]
 8005670:	429a      	cmp	r2, r3
 8005672:	d304      	bcc.n	800567e <_tu_fifo_peek_n+0x36>
    return (uint16_t) (wr_idx - rd_idx);
 8005674:	8c3a      	ldrh	r2, [r7, #32]
 8005676:	8bfb      	ldrh	r3, [r7, #30]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	b29b      	uxth	r3, r3
 800567c:	e008      	b.n	8005690 <_tu_fifo_peek_n+0x48>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 800567e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005680:	005b      	lsls	r3, r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	8c39      	ldrh	r1, [r7, #32]
 8005686:	8bfb      	ldrh	r3, [r7, #30]
 8005688:	1acb      	subs	r3, r1, r3
 800568a:	b29b      	uxth	r3, r3
 800568c:	4413      	add	r3, r2
 800568e:	b29b      	uxth	r3, r3
  uint16_t cnt = _ff_count(f->depth, wr_idx, rd_idx);
 8005690:	84fb      	strh	r3, [r7, #38]	@ 0x26

  // nothing to peek
  if ( cnt == 0 ) return 0;
 8005692:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <_tu_fifo_peek_n+0x54>
 8005698:	2300      	movs	r3, #0
 800569a:	e041      	b.n	8005720 <_tu_fifo_peek_n+0xd8>

  // Check overflow and correct if required
  if ( cnt > f->depth )
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	889b      	ldrh	r3, [r3, #4]
 80056a0:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d91b      	bls.n	80056de <_tu_fifo_peek_n+0x96>
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	61bb      	str	r3, [r7, #24]
 80056aa:	88bb      	ldrh	r3, [r7, #4]
 80056ac:	82fb      	strh	r3, [r7, #22]
  if ( wr_idx >= f->depth )
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	889b      	ldrh	r3, [r3, #4]
 80056b2:	8afa      	ldrh	r2, [r7, #22]
 80056b4:	429a      	cmp	r2, r3
 80056b6:	d305      	bcc.n	80056c4 <_tu_fifo_peek_n+0x7c>
    rd_idx = wr_idx - f->depth;
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	889b      	ldrh	r3, [r3, #4]
 80056bc:	8afa      	ldrh	r2, [r7, #22]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	82bb      	strh	r3, [r7, #20]
 80056c2:	e004      	b.n	80056ce <_tu_fifo_peek_n+0x86>
    rd_idx = wr_idx + f->depth;
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	889a      	ldrh	r2, [r3, #4]
 80056c8:	8afb      	ldrh	r3, [r7, #22]
 80056ca:	4413      	add	r3, r2
 80056cc:	82bb      	strh	r3, [r7, #20]
  f->rd_idx = rd_idx;
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	8aba      	ldrh	r2, [r7, #20]
 80056d2:	815a      	strh	r2, [r3, #10]
  return rd_idx;
 80056d4:	8abb      	ldrh	r3, [r7, #20]
  {
    rd_idx = _ff_correct_read_index(f, wr_idx);
 80056d6:	863b      	strh	r3, [r7, #48]	@ 0x30
    cnt = f->depth;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	889b      	ldrh	r3, [r3, #4]
 80056dc:	84fb      	strh	r3, [r7, #38]	@ 0x26
  }

  // Check if we can read something at and after offset - if too less is available we read what remains
  if ( cnt < n ) n = cnt;
 80056de:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80056e0:	88fb      	ldrh	r3, [r7, #6]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d201      	bcs.n	80056ea <_tu_fifo_peek_n+0xa2>
 80056e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80056e8:	80fb      	strh	r3, [r7, #6]

  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	889b      	ldrh	r3, [r3, #4]
 80056ee:	827b      	strh	r3, [r7, #18]
 80056f0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80056f2:	823b      	strh	r3, [r7, #16]
  while ( idx >= depth ) idx -= depth;
 80056f4:	e003      	b.n	80056fe <_tu_fifo_peek_n+0xb6>
 80056f6:	8a3a      	ldrh	r2, [r7, #16]
 80056f8:	8a7b      	ldrh	r3, [r7, #18]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	823b      	strh	r3, [r7, #16]
 80056fe:	8a7a      	ldrh	r2, [r7, #18]
 8005700:	8a3b      	ldrh	r3, [r7, #16]
 8005702:	429a      	cmp	r2, r3
 8005704:	d9f7      	bls.n	80056f6 <_tu_fifo_peek_n+0xae>
  return idx;
 8005706:	8a3b      	ldrh	r3, [r7, #16]
  uint16_t rd_ptr = idx2ptr(f->depth, rd_idx);
 8005708:	84bb      	strh	r3, [r7, #36]	@ 0x24

  // Peek data
  _ff_pull_n(f, p_buffer, n, rd_ptr, copy_mode);
 800570a:	8cb9      	ldrh	r1, [r7, #36]	@ 0x24
 800570c:	88fa      	ldrh	r2, [r7, #6]
 800570e:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8005712:	9300      	str	r3, [sp, #0]
 8005714:	460b      	mov	r3, r1
 8005716:	68b9      	ldr	r1, [r7, #8]
 8005718:	68f8      	ldr	r0, [r7, #12]
 800571a:	f7ff fe29 	bl	8005370 <_ff_pull_n>

  return n;
 800571e:	88fb      	ldrh	r3, [r7, #6]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3728      	adds	r7, #40	@ 0x28
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <_tu_fifo_write_n>:

static uint16_t _tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b092      	sub	sp, #72	@ 0x48
 800572c:	af02      	add	r7, sp, #8
 800572e:	60f8      	str	r0, [r7, #12]
 8005730:	60b9      	str	r1, [r7, #8]
 8005732:	4611      	mov	r1, r2
 8005734:	461a      	mov	r2, r3
 8005736:	460b      	mov	r3, r1
 8005738:	80fb      	strh	r3, [r7, #6]
 800573a:	4613      	mov	r3, r2
 800573c:	717b      	strb	r3, [r7, #5]
  if ( n == 0 ) return 0;
 800573e:	88fb      	ldrh	r3, [r7, #6]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d101      	bne.n	8005748 <_tu_fifo_write_n+0x20>
 8005744:	2300      	movs	r3, #0
 8005746:	e0bc      	b.n	80058c2 <_tu_fifo_write_n+0x19a>

  _ff_lock(f->mutex_wr);

  uint16_t wr_idx = f->wr_idx;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	891b      	ldrh	r3, [r3, #8]
 800574c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  uint16_t rd_idx = f->rd_idx;
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	895b      	ldrh	r3, [r3, #10]
 8005752:	86fb      	strh	r3, [r7, #54]	@ 0x36

  uint8_t const* buf8 = (uint8_t const*) data;
 8005754:	68bb      	ldr	r3, [r7, #8]
 8005756:	63bb      	str	r3, [r7, #56]	@ 0x38

  TU_LOG(TU_FIFO_DBG, "rd = %3u, wr = %3u, count = %3u, remain = %3u, n = %3u:  ",
                       rd_idx, wr_idx, _ff_count(f->depth, wr_idx, rd_idx), _ff_remaining(f->depth, wr_idx, rd_idx), n);

  if ( !f->overwritable )
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	79db      	ldrb	r3, [r3, #7]
 800575c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005760:	b2db      	uxtb	r3, r3
 8005762:	f083 0301 	eor.w	r3, r3, #1
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b00      	cmp	r3, #0
 800576a:	d036      	beq.n	80057da <_tu_fifo_write_n+0xb2>
  {
    // limit up to full
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	889b      	ldrh	r3, [r3, #4]
 8005770:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8005772:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005774:	853b      	strh	r3, [r7, #40]	@ 0x28
 8005776:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005778:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800577a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800577c:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800577e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8005780:	847b      	strh	r3, [r7, #34]	@ 0x22
 8005782:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005784:	843b      	strh	r3, [r7, #32]
  if (wr_idx >= rd_idx)
 8005786:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005788:	8c3b      	ldrh	r3, [r7, #32]
 800578a:	429a      	cmp	r2, r3
 800578c:	d304      	bcc.n	8005798 <_tu_fifo_write_n+0x70>
    return (uint16_t) (wr_idx - rd_idx);
 800578e:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8005790:	8c3b      	ldrh	r3, [r7, #32]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	b29b      	uxth	r3, r3
 8005796:	e008      	b.n	80057aa <_tu_fifo_write_n+0x82>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8005798:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800579a:	005b      	lsls	r3, r3, #1
 800579c:	b29a      	uxth	r2, r3
 800579e:	8c79      	ldrh	r1, [r7, #34]	@ 0x22
 80057a0:	8c3b      	ldrh	r3, [r7, #32]
 80057a2:	1acb      	subs	r3, r1, r3
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	4413      	add	r3, r2
 80057a8:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 80057aa:	83fb      	strh	r3, [r7, #30]
  return (depth > count) ? (depth - count) : 0;
 80057ac:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80057ae:	8bfb      	ldrh	r3, [r7, #30]
 80057b0:	429a      	cmp	r2, r3
 80057b2:	d904      	bls.n	80057be <_tu_fifo_write_n+0x96>
 80057b4:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80057b6:	8bfb      	ldrh	r3, [r7, #30]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	e000      	b.n	80057c0 <_tu_fifo_write_n+0x98>
 80057be:	2300      	movs	r3, #0
    uint16_t const remain = _ff_remaining(f->depth, wr_idx, rd_idx);
 80057c0:	867b      	strh	r3, [r7, #50]	@ 0x32
 80057c2:	88fb      	ldrh	r3, [r7, #6]
 80057c4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80057c6:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 80057c8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80057ca:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80057cc:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80057ce:	4293      	cmp	r3, r2
 80057d0:	bf28      	it	cs
 80057d2:	4613      	movcs	r3, r2
 80057d4:	b29b      	uxth	r3, r3
    n = tu_min16(n, remain);
 80057d6:	80fb      	strh	r3, [r7, #6]
 80057d8:	e04b      	b.n	8005872 <_tu_fifo_write_n+0x14a>
  {
    // In over-writable mode, fifo_write() is allowed even when fifo is full. In such case,
    // oldest data in fifo i.e at read pointer data will be overwritten
    // Note: we can modify read buffer contents but we must not modify the read index itself within a write function!
    // Since it would end up in a race condition with read functions!
    if ( n >= f->depth )
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	889b      	ldrh	r3, [r3, #4]
 80057de:	88fa      	ldrh	r2, [r7, #6]
 80057e0:	429a      	cmp	r2, r3
 80057e2:	d317      	bcc.n	8005814 <_tu_fifo_write_n+0xec>
    {
      // Only copy last part
      if ( copy_mode == TU_FIFO_COPY_INC )
 80057e4:	797b      	ldrb	r3, [r7, #5]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d10e      	bne.n	8005808 <_tu_fifo_write_n+0xe0>
      {
        buf8 += (n - f->depth) * f->item_size;
 80057ea:	88fb      	ldrh	r3, [r7, #6]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	8892      	ldrh	r2, [r2, #4]
 80057f0:	1a9b      	subs	r3, r3, r2
 80057f2:	68fa      	ldr	r2, [r7, #12]
 80057f4:	88d2      	ldrh	r2, [r2, #6]
 80057f6:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80057fa:	b292      	uxth	r2, r2
 80057fc:	fb02 f303 	mul.w	r3, r2, r3
 8005800:	461a      	mov	r2, r3
 8005802:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005804:	4413      	add	r3, r2
 8005806:	63bb      	str	r3, [r7, #56]	@ 0x38
      {
        // TODO should read from hw fifo to discard data, however reading an odd number could
        // accidentally discard data.
      }

      n = f->depth;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	889b      	ldrh	r3, [r3, #4]
 800580c:	80fb      	strh	r3, [r7, #6]

      // We start writing at the read pointer's position since we fill the whole buffer
      wr_idx = rd_idx;
 800580e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005810:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 8005812:	e02e      	b.n	8005872 <_tu_fifo_write_n+0x14a>
    }
    else
    {
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	889b      	ldrh	r3, [r3, #4]
 8005818:	83bb      	strh	r3, [r7, #28]
 800581a:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 800581c:	837b      	strh	r3, [r7, #26]
 800581e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005820:	833b      	strh	r3, [r7, #24]
  if (wr_idx >= rd_idx)
 8005822:	8b7a      	ldrh	r2, [r7, #26]
 8005824:	8b3b      	ldrh	r3, [r7, #24]
 8005826:	429a      	cmp	r2, r3
 8005828:	d304      	bcc.n	8005834 <_tu_fifo_write_n+0x10c>
    return (uint16_t) (wr_idx - rd_idx);
 800582a:	8b7a      	ldrh	r2, [r7, #26]
 800582c:	8b3b      	ldrh	r3, [r7, #24]
 800582e:	1ad3      	subs	r3, r2, r3
 8005830:	b29b      	uxth	r3, r3
 8005832:	e008      	b.n	8005846 <_tu_fifo_write_n+0x11e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8005834:	8bbb      	ldrh	r3, [r7, #28]
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	8b79      	ldrh	r1, [r7, #26]
 800583c:	8b3b      	ldrh	r3, [r7, #24]
 800583e:	1acb      	subs	r3, r1, r3
 8005840:	b29b      	uxth	r3, r3
 8005842:	4413      	add	r3, r2
 8005844:	b29b      	uxth	r3, r3
      uint16_t const overflowable_count = _ff_count(f->depth, wr_idx, rd_idx);
 8005846:	86bb      	strh	r3, [r7, #52]	@ 0x34
      if (overflowable_count + n >= 2*f->depth)
 8005848:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800584a:	88fb      	ldrh	r3, [r7, #6]
 800584c:	441a      	add	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	889b      	ldrh	r3, [r3, #4]
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	429a      	cmp	r2, r3
 8005856:	db0c      	blt.n	8005872 <_tu_fifo_write_n+0x14a>
      {
        // Double overflowed
        // Index is bigger than the allowed range [0,2*depth)
        // re-position write index to have a full fifo after pushed
        wr_idx = advance_index(f->depth, rd_idx, f->depth - n);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	8898      	ldrh	r0, [r3, #4]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	889a      	ldrh	r2, [r3, #4]
 8005860:	88fb      	ldrh	r3, [r7, #6]
 8005862:	1ad3      	subs	r3, r2, r3
 8005864:	b29a      	uxth	r2, r3
 8005866:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005868:	4619      	mov	r1, r3
 800586a:	f7ff fe61 	bl	8005530 <advance_index>
 800586e:	4603      	mov	r3, r0
 8005870:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        // we will correct (re-position) read index later on in fifo_read() function
      }
    }
  }

  if (n)
 8005872:	88fb      	ldrh	r3, [r7, #6]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d023      	beq.n	80058c0 <_tu_fifo_write_n+0x198>
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	889b      	ldrh	r3, [r3, #4]
 800587c:	82fb      	strh	r3, [r7, #22]
 800587e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8005880:	82bb      	strh	r3, [r7, #20]
  while ( idx >= depth ) idx -= depth;
 8005882:	e003      	b.n	800588c <_tu_fifo_write_n+0x164>
 8005884:	8aba      	ldrh	r2, [r7, #20]
 8005886:	8afb      	ldrh	r3, [r7, #22]
 8005888:	1ad3      	subs	r3, r2, r3
 800588a:	82bb      	strh	r3, [r7, #20]
 800588c:	8afa      	ldrh	r2, [r7, #22]
 800588e:	8abb      	ldrh	r3, [r7, #20]
 8005890:	429a      	cmp	r2, r3
 8005892:	d9f7      	bls.n	8005884 <_tu_fifo_write_n+0x15c>
  return idx;
 8005894:	8abb      	ldrh	r3, [r7, #20]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8005896:	863b      	strh	r3, [r7, #48]	@ 0x30

    TU_LOG(TU_FIFO_DBG, "actual_n = %u, wr_ptr = %u", n, wr_ptr);

    // Write data
    _ff_push_n(f, buf8, n, wr_ptr, copy_mode);
 8005898:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 800589a:	88fa      	ldrh	r2, [r7, #6]
 800589c:	797b      	ldrb	r3, [r7, #5]
 800589e:	9300      	str	r3, [sp, #0]
 80058a0:	460b      	mov	r3, r1
 80058a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80058a4:	68f8      	ldr	r0, [r7, #12]
 80058a6:	f7ff fc66 	bl	8005176 <_ff_push_n>

    // Advance index
    f->wr_idx = advance_index(f->depth, wr_idx, n);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	889b      	ldrh	r3, [r3, #4]
 80058ae:	88fa      	ldrh	r2, [r7, #6]
 80058b0:	8ff9      	ldrh	r1, [r7, #62]	@ 0x3e
 80058b2:	4618      	mov	r0, r3
 80058b4:	f7ff fe3c 	bl	8005530 <advance_index>
 80058b8:	4603      	mov	r3, r0
 80058ba:	461a      	mov	r2, r3
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	811a      	strh	r2, [r3, #8]
    TU_LOG(TU_FIFO_DBG, "\tnew_wr = %u\r\n", f->wr_idx);
  }

  _ff_unlock(f->mutex_wr);

  return n;
 80058c0:	88fb      	ldrh	r3, [r7, #6]
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3740      	adds	r7, #64	@ 0x40
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <_tu_fifo_read_n>:

static uint16_t _tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n, tu_fifo_copy_mode_t copy_mode)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b086      	sub	sp, #24
 80058ce:	af02      	add	r7, sp, #8
 80058d0:	60f8      	str	r0, [r7, #12]
 80058d2:	60b9      	str	r1, [r7, #8]
 80058d4:	4611      	mov	r1, r2
 80058d6:	461a      	mov	r2, r3
 80058d8:	460b      	mov	r3, r1
 80058da:	80fb      	strh	r3, [r7, #6]
 80058dc:	4613      	mov	r3, r2
 80058de:	717b      	strb	r3, [r7, #5]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  n = _tu_fifo_peek_n(f, buffer, n, f->wr_idx, f->rd_idx, copy_mode);
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	891b      	ldrh	r3, [r3, #8]
 80058e4:	b298      	uxth	r0, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	895b      	ldrh	r3, [r3, #10]
 80058ea:	b29b      	uxth	r3, r3
 80058ec:	88f9      	ldrh	r1, [r7, #6]
 80058ee:	797a      	ldrb	r2, [r7, #5]
 80058f0:	9201      	str	r2, [sp, #4]
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	4603      	mov	r3, r0
 80058f6:	460a      	mov	r2, r1
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f7ff fea4 	bl	8005648 <_tu_fifo_peek_n>
 8005900:	4603      	mov	r3, r0
 8005902:	80fb      	strh	r3, [r7, #6]

  // Advance read pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, n);
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	8898      	ldrh	r0, [r3, #4]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	895b      	ldrh	r3, [r3, #10]
 800590c:	b29b      	uxth	r3, r3
 800590e:	88fa      	ldrh	r2, [r7, #6]
 8005910:	4619      	mov	r1, r3
 8005912:	f7ff fe0d 	bl	8005530 <advance_index>
 8005916:	4603      	mov	r3, r0
 8005918:	461a      	mov	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return n;
 800591e:	88fb      	ldrh	r3, [r7, #6]
}
 8005920:	4618      	mov	r0, r3
 8005922:	3710      	adds	r7, #16
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}

08005928 <tu_fifo_count>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_count(tu_fifo_t* f)
{
 8005928:	b480      	push	{r7}
 800592a:	b087      	sub	sp, #28
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	8899      	ldrh	r1, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	891b      	ldrh	r3, [r3, #8]
 8005938:	b29a      	uxth	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	895b      	ldrh	r3, [r3, #10]
 800593e:	b29b      	uxth	r3, r3
 8005940:	8279      	strh	r1, [r7, #18]
 8005942:	823a      	strh	r2, [r7, #16]
 8005944:	81fb      	strh	r3, [r7, #14]
  if (wr_idx >= rd_idx)
 8005946:	8a3a      	ldrh	r2, [r7, #16]
 8005948:	89fb      	ldrh	r3, [r7, #14]
 800594a:	429a      	cmp	r2, r3
 800594c:	d304      	bcc.n	8005958 <tu_fifo_count+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 800594e:	8a3a      	ldrh	r2, [r7, #16]
 8005950:	89fb      	ldrh	r3, [r7, #14]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	b29b      	uxth	r3, r3
 8005956:	e008      	b.n	800596a <tu_fifo_count+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8005958:	8a7b      	ldrh	r3, [r7, #18]
 800595a:	005b      	lsls	r3, r3, #1
 800595c:	b29a      	uxth	r2, r3
 800595e:	8a39      	ldrh	r1, [r7, #16]
 8005960:	89fb      	ldrh	r3, [r7, #14]
 8005962:	1acb      	subs	r3, r1, r3
 8005964:	b29b      	uxth	r3, r3
 8005966:	4413      	add	r3, r2
 8005968:	b29b      	uxth	r3, r3
  return tu_min16(_ff_count(f->depth, f->wr_idx, f->rd_idx), f->depth);
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	8892      	ldrh	r2, [r2, #4]
 800596e:	82fb      	strh	r3, [r7, #22]
 8005970:	4613      	mov	r3, r2
 8005972:	82bb      	strh	r3, [r7, #20]
 8005974:	8afa      	ldrh	r2, [r7, #22]
 8005976:	8abb      	ldrh	r3, [r7, #20]
 8005978:	4293      	cmp	r3, r2
 800597a:	bf28      	it	cs
 800597c:	4613      	movcs	r3, r2
 800597e:	b29b      	uxth	r3, r3
}
 8005980:	4618      	mov	r0, r3
 8005982:	371c      	adds	r7, #28
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr

0800598c <tu_fifo_empty>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_empty(tu_fifo_t* f)
{
 800598c:	b480      	push	{r7}
 800598e:	b083      	sub	sp, #12
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  return f->wr_idx == f->rd_idx;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	891b      	ldrh	r3, [r3, #8]
 8005998:	b29a      	uxth	r2, r3
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	895b      	ldrh	r3, [r3, #10]
 800599e:	b29b      	uxth	r3, r3
 80059a0:	429a      	cmp	r2, r3
 80059a2:	bf0c      	ite	eq
 80059a4:	2301      	moveq	r3, #1
 80059a6:	2300      	movne	r3, #0
 80059a8:	b2db      	uxtb	r3, r3
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	370c      	adds	r7, #12
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr

080059b6 <tu_fifo_full>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
bool tu_fifo_full(tu_fifo_t* f)
{
 80059b6:	b480      	push	{r7}
 80059b8:	b085      	sub	sp, #20
 80059ba:	af00      	add	r7, sp, #0
 80059bc:	6078      	str	r0, [r7, #4]
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	8899      	ldrh	r1, [r3, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	891b      	ldrh	r3, [r3, #8]
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	895b      	ldrh	r3, [r3, #10]
 80059cc:	b29b      	uxth	r3, r3
 80059ce:	81f9      	strh	r1, [r7, #14]
 80059d0:	81ba      	strh	r2, [r7, #12]
 80059d2:	817b      	strh	r3, [r7, #10]
  if (wr_idx >= rd_idx)
 80059d4:	89ba      	ldrh	r2, [r7, #12]
 80059d6:	897b      	ldrh	r3, [r7, #10]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d304      	bcc.n	80059e6 <tu_fifo_full+0x30>
    return (uint16_t) (wr_idx - rd_idx);
 80059dc:	89ba      	ldrh	r2, [r7, #12]
 80059de:	897b      	ldrh	r3, [r7, #10]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	b29b      	uxth	r3, r3
 80059e4:	e008      	b.n	80059f8 <tu_fifo_full+0x42>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 80059e6:	89fb      	ldrh	r3, [r7, #14]
 80059e8:	005b      	lsls	r3, r3, #1
 80059ea:	b29a      	uxth	r2, r3
 80059ec:	89b9      	ldrh	r1, [r7, #12]
 80059ee:	897b      	ldrh	r3, [r7, #10]
 80059f0:	1acb      	subs	r3, r1, r3
 80059f2:	b29b      	uxth	r3, r3
 80059f4:	4413      	add	r3, r2
 80059f6:	b29b      	uxth	r3, r3
  return _ff_count(f->depth, f->wr_idx, f->rd_idx) >= f->depth;
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	8892      	ldrh	r2, [r2, #4]
 80059fc:	4293      	cmp	r3, r2
 80059fe:	bf2c      	ite	cs
 8005a00:	2301      	movcs	r3, #1
 8005a02:	2300      	movcc	r3, #0
 8005a04:	b2db      	uxtb	r3, r3
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <tu_fifo_remaining>:

    @returns Number of items in FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_remaining(tu_fifo_t* f)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b087      	sub	sp, #28
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  return _ff_remaining(f->depth, f->wr_idx, f->rd_idx);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	8899      	ldrh	r1, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	891b      	ldrh	r3, [r3, #8]
 8005a22:	b29a      	uxth	r2, r3
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	895b      	ldrh	r3, [r3, #10]
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	82f9      	strh	r1, [r7, #22]
 8005a2c:	82ba      	strh	r2, [r7, #20]
 8005a2e:	827b      	strh	r3, [r7, #18]
 8005a30:	8afb      	ldrh	r3, [r7, #22]
 8005a32:	823b      	strh	r3, [r7, #16]
 8005a34:	8abb      	ldrh	r3, [r7, #20]
 8005a36:	81fb      	strh	r3, [r7, #14]
 8005a38:	8a7b      	ldrh	r3, [r7, #18]
 8005a3a:	81bb      	strh	r3, [r7, #12]
  if (wr_idx >= rd_idx)
 8005a3c:	89fa      	ldrh	r2, [r7, #14]
 8005a3e:	89bb      	ldrh	r3, [r7, #12]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d304      	bcc.n	8005a4e <tu_fifo_remaining+0x3c>
    return (uint16_t) (wr_idx - rd_idx);
 8005a44:	89fa      	ldrh	r2, [r7, #14]
 8005a46:	89bb      	ldrh	r3, [r7, #12]
 8005a48:	1ad3      	subs	r3, r2, r3
 8005a4a:	b29b      	uxth	r3, r3
 8005a4c:	e008      	b.n	8005a60 <tu_fifo_remaining+0x4e>
    return (uint16_t) (2*depth - (rd_idx - wr_idx));
 8005a4e:	8a3b      	ldrh	r3, [r7, #16]
 8005a50:	005b      	lsls	r3, r3, #1
 8005a52:	b29a      	uxth	r2, r3
 8005a54:	89f9      	ldrh	r1, [r7, #14]
 8005a56:	89bb      	ldrh	r3, [r7, #12]
 8005a58:	1acb      	subs	r3, r1, r3
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	4413      	add	r3, r2
 8005a5e:	b29b      	uxth	r3, r3
  uint16_t const count = _ff_count(depth, wr_idx, rd_idx);
 8005a60:	817b      	strh	r3, [r7, #10]
  return (depth > count) ? (depth - count) : 0;
 8005a62:	8afa      	ldrh	r2, [r7, #22]
 8005a64:	897b      	ldrh	r3, [r7, #10]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d904      	bls.n	8005a74 <tu_fifo_remaining+0x62>
 8005a6a:	8afa      	ldrh	r2, [r7, #22]
 8005a6c:	897b      	ldrh	r3, [r7, #10]
 8005a6e:	1ad3      	subs	r3, r2, r3
 8005a70:	b29b      	uxth	r3, r3
 8005a72:	e000      	b.n	8005a76 <tu_fifo_remaining+0x64>
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	371c      	adds	r7, #28
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <tu_fifo_read>:

    @returns TRUE if the queue is not empty
 */
/******************************************************************************/
bool tu_fifo_read(tu_fifo_t* f, void * buffer)
{
 8005a82:	b580      	push	{r7, lr}
 8005a84:	b084      	sub	sp, #16
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_rd);

  // Peek the data
  // f->rd_idx might get modified in case of an overflow so we can not use a local variable
  bool ret = _tu_fifo_peek(f, buffer, f->wr_idx, f->rd_idx);
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	891b      	ldrh	r3, [r3, #8]
 8005a90:	b29a      	uxth	r2, r3
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	895b      	ldrh	r3, [r3, #10]
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	6839      	ldr	r1, [r7, #0]
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f7ff fd6e 	bl	800557c <_tu_fifo_peek>
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	73fb      	strb	r3, [r7, #15]

  // Advance pointer
  f->rd_idx = advance_index(f->depth, f->rd_idx, ret);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	8898      	ldrh	r0, [r3, #4]
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	895b      	ldrh	r3, [r3, #10]
 8005aac:	b29b      	uxth	r3, r3
 8005aae:	7bfa      	ldrb	r2, [r7, #15]
 8005ab0:	b292      	uxth	r2, r2
 8005ab2:	4619      	mov	r1, r3
 8005ab4:	f7ff fd3c 	bl	8005530 <advance_index>
 8005ab8:	4603      	mov	r3, r0
 8005aba:	461a      	mov	r2, r3
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	815a      	strh	r2, [r3, #10]

  _ff_unlock(f->mutex_rd);
  return ret;
 8005ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <tu_fifo_read_n>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b084      	sub	sp, #16
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	60f8      	str	r0, [r7, #12]
 8005ad2:	60b9      	str	r1, [r7, #8]
 8005ad4:	4613      	mov	r3, r2
 8005ad6:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_INC);
 8005ad8:	88fa      	ldrh	r2, [r7, #6]
 8005ada:	2300      	movs	r3, #0
 8005adc:	68b9      	ldr	r1, [r7, #8]
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f7ff fef3 	bl	80058ca <_tu_fifo_read_n>
 8005ae4:	4603      	mov	r3, r0
}
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	3710      	adds	r7, #16
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}

08005aee <tu_fifo_read_n_const_addr_full_words>:

    @returns number of items read from the FIFO
 */
/******************************************************************************/
uint16_t tu_fifo_read_n_const_addr_full_words(tu_fifo_t* f, void * buffer, uint16_t n)
{
 8005aee:	b580      	push	{r7, lr}
 8005af0:	b084      	sub	sp, #16
 8005af2:	af00      	add	r7, sp, #0
 8005af4:	60f8      	str	r0, [r7, #12]
 8005af6:	60b9      	str	r1, [r7, #8]
 8005af8:	4613      	mov	r3, r2
 8005afa:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_read_n(f, buffer, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8005afc:	88fa      	ldrh	r2, [r7, #6]
 8005afe:	2301      	movs	r3, #1
 8005b00:	68b9      	ldr	r1, [r7, #8]
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f7ff fee1 	bl	80058ca <_tu_fifo_read_n>
 8005b08:	4603      	mov	r3, r0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3710      	adds	r7, #16
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <tu_fifo_write>:
    @returns TRUE if the data was written to the FIFO (overwrittable
             FIFO will always return TRUE)
 */
/******************************************************************************/
bool tu_fifo_write(tu_fifo_t* f, const void * data)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b086      	sub	sp, #24
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	6039      	str	r1, [r7, #0]
  _ff_lock(f->mutex_wr);

  bool ret;
  uint16_t const wr_idx = f->wr_idx;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	891b      	ldrh	r3, [r3, #8]
 8005b20:	82bb      	strh	r3, [r7, #20]

  if ( tu_fifo_full(f) && !f->overwritable )
 8005b22:	6878      	ldr	r0, [r7, #4]
 8005b24:	f7ff ff47 	bl	80059b6 <tu_fifo_full>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d00c      	beq.n	8005b48 <tu_fifo_write+0x36>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	79db      	ldrb	r3, [r3, #7]
 8005b32:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005b36:	b2db      	uxtb	r3, r3
 8005b38:	f083 0301 	eor.w	r3, r3, #1
 8005b3c:	b2db      	uxtb	r3, r3
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d002      	beq.n	8005b48 <tu_fifo_write+0x36>
  {
    ret = false;
 8005b42:	2300      	movs	r3, #0
 8005b44:	75fb      	strb	r3, [r7, #23]
 8005b46:	e022      	b.n	8005b8e <tu_fifo_write+0x7c>
  }else
  {
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	889b      	ldrh	r3, [r3, #4]
 8005b4c:	823b      	strh	r3, [r7, #16]
 8005b4e:	8abb      	ldrh	r3, [r7, #20]
 8005b50:	81fb      	strh	r3, [r7, #14]
  while ( idx >= depth ) idx -= depth;
 8005b52:	e003      	b.n	8005b5c <tu_fifo_write+0x4a>
 8005b54:	89fa      	ldrh	r2, [r7, #14]
 8005b56:	8a3b      	ldrh	r3, [r7, #16]
 8005b58:	1ad3      	subs	r3, r2, r3
 8005b5a:	81fb      	strh	r3, [r7, #14]
 8005b5c:	8a3a      	ldrh	r2, [r7, #16]
 8005b5e:	89fb      	ldrh	r3, [r7, #14]
 8005b60:	429a      	cmp	r2, r3
 8005b62:	d9f7      	bls.n	8005b54 <tu_fifo_write+0x42>
  return idx;
 8005b64:	89fb      	ldrh	r3, [r7, #14]
    uint16_t wr_ptr = idx2ptr(f->depth, wr_idx);
 8005b66:	827b      	strh	r3, [r7, #18]

    // Write data
    _ff_push(f, data, wr_ptr);
 8005b68:	8a7b      	ldrh	r3, [r7, #18]
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	6839      	ldr	r1, [r7, #0]
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f7ff fae2 	bl	8005138 <_ff_push>

    // Advance pointer
    f->wr_idx = advance_index(f->depth, wr_idx, 1);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	889b      	ldrh	r3, [r3, #4]
 8005b78:	8ab9      	ldrh	r1, [r7, #20]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f7ff fcd7 	bl	8005530 <advance_index>
 8005b82:	4603      	mov	r3, r0
 8005b84:	461a      	mov	r2, r3
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	811a      	strh	r2, [r3, #8]

    ret = true;
 8005b8a:	2301      	movs	r3, #1
 8005b8c:	75fb      	strb	r3, [r7, #23]
  }

  _ff_unlock(f->mutex_wr);

  return ret;
 8005b8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3718      	adds	r7, #24
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <tu_fifo_write_n>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n(tu_fifo_t* f, const void * data, uint16_t n)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	60f8      	str	r0, [r7, #12]
 8005ba0:	60b9      	str	r1, [r7, #8]
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_INC);
 8005ba6:	88fa      	ldrh	r2, [r7, #6]
 8005ba8:	2300      	movs	r3, #0
 8005baa:	68b9      	ldr	r1, [r7, #8]
 8005bac:	68f8      	ldr	r0, [r7, #12]
 8005bae:	f7ff fdbb 	bl	8005728 <_tu_fifo_write_n>
 8005bb2:	4603      	mov	r3, r0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <tu_fifo_write_n_const_addr_full_words>:
                Number of element
    @return Number of written elements
 */
/******************************************************************************/
uint16_t tu_fifo_write_n_const_addr_full_words(tu_fifo_t* f, const void * data, uint16_t n)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	4613      	mov	r3, r2
 8005bc8:	80fb      	strh	r3, [r7, #6]
  return _tu_fifo_write_n(f, data, n, TU_FIFO_COPY_CST_FULL_WORDS);
 8005bca:	88fa      	ldrh	r2, [r7, #6]
 8005bcc:	2301      	movs	r3, #1
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f7ff fda9 	bl	8005728 <_tu_fifo_write_n>
 8005bd6:	4603      	mov	r3, r0
}
 8005bd8:	4618      	mov	r0, r3
 8005bda:	3710      	adds	r7, #16
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	bd80      	pop	{r7, pc}

08005be0 <tu_fifo_clear>:
    @param[in]  f
                Pointer to the FIFO buffer to manipulate
 */
/******************************************************************************/
bool tu_fifo_clear(tu_fifo_t *f)
{
 8005be0:	b480      	push	{r7}
 8005be2:	b083      	sub	sp, #12
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->rd_idx = 0;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	815a      	strh	r2, [r3, #10]
  f->wr_idx = 0;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	811a      	strh	r2, [r3, #8]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);
  return true;
 8005bf4:	2301      	movs	r3, #1
}
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <tu_fifo_set_overwritable>:
                Pointer to the FIFO buffer to manipulate
    @param[in]  overwritable
                Overwritable mode the fifo is set to
 */
/******************************************************************************/
bool tu_fifo_set_overwritable(tu_fifo_t *f, bool overwritable) {
 8005c02:	b480      	push	{r7}
 8005c04:	b083      	sub	sp, #12
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	70fb      	strb	r3, [r7, #3]
  if (f->overwritable == overwritable) {
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	79db      	ldrb	r3, [r3, #7]
 8005c12:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	78fa      	ldrb	r2, [r7, #3]
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d101      	bne.n	8005c22 <tu_fifo_set_overwritable+0x20>
    return true;
 8005c1e:	2301      	movs	r3, #1
 8005c20:	e006      	b.n	8005c30 <tu_fifo_set_overwritable+0x2e>
  }

  _ff_lock(f->mutex_wr);
  _ff_lock(f->mutex_rd);

  f->overwritable = overwritable;
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	79d3      	ldrb	r3, [r2, #7]
 8005c26:	78f9      	ldrb	r1, [r7, #3]
 8005c28:	f361 13c7 	bfi	r3, r1, #7, #1
 8005c2c:	71d3      	strb	r3, [r2, #7]

  _ff_unlock(f->mutex_wr);
  _ff_unlock(f->mutex_rd);

  return true;
 8005c2e:	2301      	movs	r3, #1
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <tud_event_hook_cb>:
#endif

//--------------------------------------------------------------------+
// Weak stubs: invoked if no strong implementation is available
//--------------------------------------------------------------------+
TU_ATTR_WEAK void tud_event_hook_cb(uint8_t rhport, uint32_t eventid, bool in_isr) {
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	4603      	mov	r3, r0
 8005c44:	6039      	str	r1, [r7, #0]
 8005c46:	71fb      	strb	r3, [r7, #7]
 8005c48:	4613      	mov	r3, r2
 8005c4a:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) eventid; (void) in_isr;
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <tud_sof_cb>:

TU_ATTR_WEAK void tud_sof_cb(uint32_t frame_count) {
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  (void) frame_count;
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <tud_descriptor_bos_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_bos_cb(void) {
 8005c6c:	b480      	push	{r7}
 8005c6e:	af00      	add	r7, sp, #0
  return NULL;
 8005c70:	2300      	movs	r3, #0
}
 8005c72:	4618      	mov	r0, r3
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <tud_descriptor_device_qualifier_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_device_qualifier_cb(void) {
 8005c7c:	b480      	push	{r7}
 8005c7e:	af00      	add	r7, sp, #0
  return NULL;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <tud_descriptor_other_speed_configuration_cb>:

TU_ATTR_WEAK uint8_t const* tud_descriptor_other_speed_configuration_cb(uint8_t index) {
 8005c8c:	b480      	push	{r7}
 8005c8e:	b083      	sub	sp, #12
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	4603      	mov	r3, r0
 8005c94:	71fb      	strb	r3, [r7, #7]
  (void) index;
  return NULL;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	370c      	adds	r7, #12
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <tud_mount_cb>:

TU_ATTR_WEAK void tud_mount_cb(void) {
 8005ca4:	b480      	push	{r7}
 8005ca6:	af00      	add	r7, sp, #0
}
 8005ca8:	bf00      	nop
 8005caa:	46bd      	mov	sp, r7
 8005cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb0:	4770      	bx	lr

08005cb2 <tud_umount_cb>:

TU_ATTR_WEAK void tud_umount_cb(void) {
 8005cb2:	b480      	push	{r7}
 8005cb4:	af00      	add	r7, sp, #0
}
 8005cb6:	bf00      	nop
 8005cb8:	46bd      	mov	sp, r7
 8005cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cbe:	4770      	bx	lr

08005cc0 <tud_suspend_cb>:

TU_ATTR_WEAK void tud_suspend_cb(bool remote_wakeup_en) {
 8005cc0:	b480      	push	{r7}
 8005cc2:	b083      	sub	sp, #12
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	71fb      	strb	r3, [r7, #7]
  (void) remote_wakeup_en;
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <tud_resume_cb>:

TU_ATTR_WEAK void tud_resume_cb(void) {
 8005cd6:	b480      	push	{r7}
 8005cd8:	af00      	add	r7, sp, #0
}
 8005cda:	bf00      	nop
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr

08005ce4 <tud_vendor_control_xfer_cb>:

TU_ATTR_WEAK bool tud_vendor_control_xfer_cb(uint8_t rhport, uint8_t stage, tusb_control_request_t const* request) {
 8005ce4:	b480      	push	{r7}
 8005ce6:	b083      	sub	sp, #12
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	4603      	mov	r3, r0
 8005cec:	603a      	str	r2, [r7, #0]
 8005cee:	71fb      	strb	r3, [r7, #7]
 8005cf0:	460b      	mov	r3, r1
 8005cf2:	71bb      	strb	r3, [r7, #6]
  (void) rhport; (void) stage; (void) request;
  return false;
 8005cf4:	2300      	movs	r3, #0
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	370c      	adds	r7, #12
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr

08005d02 <dcd_dcache_clean>:

TU_ATTR_WEAK void dcd_disconnect(uint8_t rhport) {
  (void) rhport;
}

TU_ATTR_WEAK bool dcd_dcache_clean(const void* addr, uint32_t data_size) {
 8005d02:	b480      	push	{r7}
 8005d04:	b083      	sub	sp, #12
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	6078      	str	r0, [r7, #4]
 8005d0a:	6039      	str	r1, [r7, #0]
  (void) addr; (void) data_size;
  return true;
 8005d0c:	2301      	movs	r3, #1
}
 8005d0e:	4618      	mov	r0, r3
 8005d10:	370c      	adds	r7, #12
 8005d12:	46bd      	mov	sp, r7
 8005d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d18:	4770      	bx	lr
	...

08005d1c <tud_mounted>:

bool tud_connected(void) {
  return _usbd_dev.connected;
}

bool tud_mounted(void) {
 8005d1c:	b480      	push	{r7}
 8005d1e:	af00      	add	r7, sp, #0
  return _usbd_dev.cfg_num ? true : false;
 8005d20:	4b06      	ldr	r3, [pc, #24]	@ (8005d3c <tud_mounted+0x20>)
 8005d22:	785b      	ldrb	r3, [r3, #1]
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	bf14      	ite	ne
 8005d2a:	2301      	movne	r3, #1
 8005d2c:	2300      	moveq	r3, #0
 8005d2e:	b2db      	uxtb	r3, r3
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	46bd      	mov	sp, r7
 8005d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d38:	4770      	bx	lr
 8005d3a:	bf00      	nop
 8005d3c:	20000abc 	.word	0x20000abc

08005d40 <tud_suspended>:

bool tud_suspended(void) {
 8005d40:	b480      	push	{r7}
 8005d42:	af00      	add	r7, sp, #0
  return _usbd_dev.suspended;
 8005d44:	4b07      	ldr	r3, [pc, #28]	@ (8005d64 <tud_suspended+0x24>)
 8005d46:	781b      	ldrb	r3, [r3, #0]
 8005d48:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	bf14      	ite	ne
 8005d52:	2301      	movne	r3, #1
 8005d54:	2300      	moveq	r3, #0
 8005d56:	b2db      	uxtb	r3, r3
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d60:	4770      	bx	lr
 8005d62:	bf00      	nop
 8005d64:	20000abc 	.word	0x20000abc

08005d68 <tud_remote_wakeup>:

bool tud_remote_wakeup(void) {
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	af00      	add	r7, sp, #0
  // only wake up host if this feature is supported and enabled and we are suspended
  TU_VERIFY (_usbd_dev.suspended && _usbd_dev.remote_wakeup_support && _usbd_dev.remote_wakeup_en);
 8005d6c:	4b0f      	ldr	r3, [pc, #60]	@ (8005dac <tud_remote_wakeup+0x44>)
 8005d6e:	781b      	ldrb	r3, [r3, #0]
 8005d70:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d00d      	beq.n	8005d96 <tud_remote_wakeup+0x2e>
 8005d7a:	4b0c      	ldr	r3, [pc, #48]	@ (8005dac <tud_remote_wakeup+0x44>)
 8005d7c:	781b      	ldrb	r3, [r3, #0]
 8005d7e:	f003 0310 	and.w	r3, r3, #16
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d006      	beq.n	8005d96 <tud_remote_wakeup+0x2e>
 8005d88:	4b08      	ldr	r3, [pc, #32]	@ (8005dac <tud_remote_wakeup+0x44>)
 8005d8a:	781b      	ldrb	r3, [r3, #0]
 8005d8c:	f003 0308 	and.w	r3, r3, #8
 8005d90:	b2db      	uxtb	r3, r3
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d101      	bne.n	8005d9a <tud_remote_wakeup+0x32>
 8005d96:	2300      	movs	r3, #0
 8005d98:	e005      	b.n	8005da6 <tud_remote_wakeup+0x3e>
  dcd_remote_wakeup(_usbd_rhport);
 8005d9a:	4b05      	ldr	r3, [pc, #20]	@ (8005db0 <tud_remote_wakeup+0x48>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f002 fba4 	bl	80084ec <dcd_remote_wakeup>
  return true;
 8005da4:	2301      	movs	r3, #1
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	bd80      	pop	{r7, pc}
 8005daa:	bf00      	nop
 8005dac:	20000abc 	.word	0x20000abc
 8005db0:	2000006d 	.word	0x2000006d

08005db4 <tud_inited>:
}

//--------------------------------------------------------------------+
// USBD Task
//--------------------------------------------------------------------+
bool tud_inited(void) {
 8005db4:	b480      	push	{r7}
 8005db6:	af00      	add	r7, sp, #0
  return _usbd_rhport != RHPORT_INVALID;
 8005db8:	4b05      	ldr	r3, [pc, #20]	@ (8005dd0 <tud_inited+0x1c>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2bff      	cmp	r3, #255	@ 0xff
 8005dbe:	bf14      	ite	ne
 8005dc0:	2301      	movne	r3, #1
 8005dc2:	2300      	moveq	r3, #0
 8005dc4:	b2db      	uxtb	r3, r3
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	46bd      	mov	sp, r7
 8005dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dce:	4770      	bx	lr
 8005dd0:	2000006d 	.word	0x2000006d

08005dd4 <tud_rhport_init>:

bool tud_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08c      	sub	sp, #48	@ 0x30
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	4603      	mov	r3, r0
 8005ddc:	6039      	str	r1, [r7, #0]
 8005dde:	71fb      	strb	r3, [r7, #7]
  if (tud_inited()) {
 8005de0:	f7ff ffe8 	bl	8005db4 <tud_inited>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <tud_rhport_init+0x1a>
    return true; // skip if already initialized
 8005dea:	2301      	movs	r3, #1
 8005dec:	e09e      	b.n	8005f2c <tud_rhport_init+0x158>
  }
  TU_ASSERT(rh_init);
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10a      	bne.n	8005e0a <tud_rhport_init+0x36>
 8005df4:	4b4f      	ldr	r3, [pc, #316]	@ (8005f34 <tud_rhport_init+0x160>)
 8005df6:	61bb      	str	r3, [r7, #24]
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d000      	beq.n	8005e06 <tud_rhport_init+0x32>
 8005e04:	be00      	bkpt	0x0000
 8005e06:	2300      	movs	r3, #0
 8005e08:	e090      	b.n	8005f2c <tud_rhport_init+0x158>
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(usbd_device_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(dcd_event_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_fifo_t));
  TU_LOG_INT(CFG_TUD_LOG_LEVEL, sizeof(tu_edpt_stream_t));

  tu_varclr(&_usbd_dev);
 8005e0a:	222c      	movs	r2, #44	@ 0x2c
 8005e0c:	2100      	movs	r1, #0
 8005e0e:	484a      	ldr	r0, [pc, #296]	@ (8005f38 <tud_rhport_init+0x164>)
 8005e10:	f003 ff48 	bl	8009ca4 <memset>
  _usbd_queued_setup = 0;
 8005e14:	4b49      	ldr	r3, [pc, #292]	@ (8005f3c <tud_rhport_init+0x168>)
 8005e16:	2200      	movs	r2, #0
 8005e18:	701a      	strb	r2, [r3, #0]
 8005e1a:	4b49      	ldr	r3, [pc, #292]	@ (8005f40 <tud_rhport_init+0x16c>)
 8005e1c:	613b      	str	r3, [r7, #16]
#define OSAL_SPINLOCK_DEF(_name, _int_set) \
  osal_spinlock_t _name = { .interrupt_set = _int_set }

TU_ATTR_ALWAYS_INLINE static inline void osal_spin_init(osal_spinlock_t *ctx) {
  (void) ctx;
}
 8005e1e:	bf00      	nop
 8005e20:	4b48      	ldr	r3, [pc, #288]	@ (8005f44 <tud_rhport_init+0x170>)
 8005e22:	617b      	str	r3, [r7, #20]
    .interrupt_set = _int_set,                            \
    .ff = TU_FIFO_INIT(_name##_buf, _depth, _type, false) \
  }

TU_ATTR_ALWAYS_INLINE static inline osal_queue_t osal_queue_create(osal_queue_def_t* qdef) {
  tu_fifo_clear(&qdef->ff);
 8005e24:	697b      	ldr	r3, [r7, #20]
 8005e26:	3304      	adds	r3, #4
 8005e28:	4618      	mov	r0, r3
 8005e2a:	f7ff fed9 	bl	8005be0 <tu_fifo_clear>
  return (osal_queue_t) qdef;
 8005e2e:	697b      	ldr	r3, [r7, #20]
  _usbd_mutex = osal_mutex_create(&_ubsd_mutexdef);
  TU_ASSERT(_usbd_mutex);
#endif

  // Init device queue & task
  _usbd_q = osal_queue_create(&_usbd_qdef);
 8005e30:	4a45      	ldr	r2, [pc, #276]	@ (8005f48 <tud_rhport_init+0x174>)
 8005e32:	6013      	str	r3, [r2, #0]
  TU_ASSERT(_usbd_q);
 8005e34:	4b44      	ldr	r3, [pc, #272]	@ (8005f48 <tud_rhport_init+0x174>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d10a      	bne.n	8005e52 <tud_rhport_init+0x7e>
 8005e3c:	4b3d      	ldr	r3, [pc, #244]	@ (8005f34 <tud_rhport_init+0x160>)
 8005e3e:	61fb      	str	r3, [r7, #28]
 8005e40:	69fb      	ldr	r3, [r7, #28]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0301 	and.w	r3, r3, #1
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d000      	beq.n	8005e4e <tud_rhport_init+0x7a>
 8005e4c:	be00      	bkpt	0x0000
 8005e4e:	2300      	movs	r3, #0
 8005e50:	e06c      	b.n	8005f2c <tud_rhport_init+0x158>

  // Get application driver if available
  if (usbd_app_driver_get_cb) {
 8005e52:	4b3e      	ldr	r3, [pc, #248]	@ (8005f4c <tud_rhport_init+0x178>)
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d005      	beq.n	8005e64 <tud_rhport_init+0x90>
    _app_driver = usbd_app_driver_get_cb(&_app_driver_count);
 8005e58:	483d      	ldr	r0, [pc, #244]	@ (8005f50 <tud_rhport_init+0x17c>)
 8005e5a:	f3af 8000 	nop.w
 8005e5e:	4603      	mov	r3, r0
 8005e60:	4a3c      	ldr	r2, [pc, #240]	@ (8005f54 <tud_rhport_init+0x180>)
 8005e62:	6013      	str	r3, [r2, #0]
  }

  // Init class drivers
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8005e64:	2300      	movs	r3, #0
 8005e66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005e6a:	e03a      	b.n	8005ee2 <tud_rhport_init+0x10e>
 8005e6c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005e70:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8005e72:	2300      	movs	r3, #0
 8005e74:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8005e76:	4b36      	ldr	r3, [pc, #216]	@ (8005f50 <tud_rhport_init+0x17c>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	7bfa      	ldrb	r2, [r7, #15]
 8005e7c:	429a      	cmp	r2, r3
 8005e7e:	d206      	bcs.n	8005e8e <tud_rhport_init+0xba>
    driver = &_app_driver[drvid];
 8005e80:	4b34      	ldr	r3, [pc, #208]	@ (8005f54 <tud_rhport_init+0x180>)
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	015b      	lsls	r3, r3, #5
 8005e88:	4413      	add	r3, r2
 8005e8a:	60bb      	str	r3, [r7, #8]
 8005e8c:	e00d      	b.n	8005eaa <tud_rhport_init+0xd6>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8005e8e:	4b30      	ldr	r3, [pc, #192]	@ (8005f50 <tud_rhport_init+0x17c>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	7bfb      	ldrb	r3, [r7, #15]
 8005e96:	429a      	cmp	r2, r3
 8005e98:	db07      	blt.n	8005eaa <tud_rhport_init+0xd6>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005e9a:	7bfb      	ldrb	r3, [r7, #15]
 8005e9c:	4a2c      	ldr	r2, [pc, #176]	@ (8005f50 <tud_rhport_init+0x17c>)
 8005e9e:	7812      	ldrb	r2, [r2, #0]
 8005ea0:	1a9b      	subs	r3, r3, r2
 8005ea2:	015b      	lsls	r3, r3, #5
 8005ea4:	4a2c      	ldr	r2, [pc, #176]	@ (8005f58 <tud_rhport_init+0x184>)
 8005ea6:	4413      	add	r3, r2
 8005ea8:	60bb      	str	r3, [r7, #8]
  return driver;
 8005eaa:	68bb      	ldr	r3, [r7, #8]
    usbd_class_driver_t const* driver = get_driver(i);
 8005eac:	627b      	str	r3, [r7, #36]	@ 0x24
    TU_ASSERT(driver && driver->init);
 8005eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d003      	beq.n	8005ebc <tud_rhport_init+0xe8>
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d10a      	bne.n	8005ed2 <tud_rhport_init+0xfe>
 8005ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8005f34 <tud_rhport_init+0x160>)
 8005ebe:	623b      	str	r3, [r7, #32]
 8005ec0:	6a3b      	ldr	r3, [r7, #32]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	f003 0301 	and.w	r3, r3, #1
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d000      	beq.n	8005ece <tud_rhport_init+0xfa>
 8005ecc:	be00      	bkpt	0x0000
 8005ece:	2300      	movs	r3, #0
 8005ed0:	e02c      	b.n	8005f2c <tud_rhport_init+0x158>
    TU_LOG_USBD("%s init\r\n", driver->name);
    driver->init();
 8005ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed4:	685b      	ldr	r3, [r3, #4]
 8005ed6:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8005ed8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005edc:	3301      	adds	r3, #1
 8005ede:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8005ee2:	4b1b      	ldr	r3, [pc, #108]	@ (8005f50 <tud_rhport_init+0x17c>)
 8005ee4:	781b      	ldrb	r3, [r3, #0]
 8005ee6:	1c5a      	adds	r2, r3, #1
 8005ee8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005eec:	429a      	cmp	r2, r3
 8005eee:	dabd      	bge.n	8005e6c <tud_rhport_init+0x98>
  }

  _usbd_rhport = rhport;
 8005ef0:	4a1a      	ldr	r2, [pc, #104]	@ (8005f5c <tud_rhport_init+0x188>)
 8005ef2:	79fb      	ldrb	r3, [r7, #7]
 8005ef4:	7013      	strb	r3, [r2, #0]

  // Init device controller driver
  TU_ASSERT(dcd_init(rhport, rh_init));
 8005ef6:	79fb      	ldrb	r3, [r7, #7]
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	4618      	mov	r0, r3
 8005efc:	f002 f9cc 	bl	8008298 <dcd_init>
 8005f00:	4603      	mov	r3, r0
 8005f02:	f083 0301 	eor.w	r3, r3, #1
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00a      	beq.n	8005f22 <tud_rhport_init+0x14e>
 8005f0c:	4b09      	ldr	r3, [pc, #36]	@ (8005f34 <tud_rhport_init+0x160>)
 8005f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f003 0301 	and.w	r3, r3, #1
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d000      	beq.n	8005f1e <tud_rhport_init+0x14a>
 8005f1c:	be00      	bkpt	0x0000
 8005f1e:	2300      	movs	r3, #0
 8005f20:	e004      	b.n	8005f2c <tud_rhport_init+0x158>
  dcd_int_enable(rhport);
 8005f22:	79fb      	ldrb	r3, [r7, #7]
 8005f24:	4618      	mov	r0, r3
 8005f26:	f002 fa55 	bl	80083d4 <dcd_int_enable>

  return true;
 8005f2a:	2301      	movs	r3, #1
}
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	3730      	adds	r7, #48	@ 0x30
 8005f30:	46bd      	mov	sp, r7
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	e000edf0 	.word	0xe000edf0
 8005f38:	20000abc 	.word	0x20000abc
 8005f3c:	20000ae8 	.word	0x20000ae8
 8005f40:	20000070 	.word	0x20000070
 8005f44:	20000074 	.word	0x20000074
 8005f48:	20000bb4 	.word	0x20000bb4
 8005f4c:	00000000 	.word	0x00000000
 8005f50:	20000af0 	.word	0x20000af0
 8005f54:	20000aec 	.word	0x20000aec
 8005f58:	0800a764 	.word	0x0800a764
 8005f5c:	2000006d 	.word	0x2000006d

08005f60 <configuration_reset>:
  _usbd_rhport = RHPORT_INVALID;

  return true;
}

static void configuration_reset(uint8_t rhport) {
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b088      	sub	sp, #32
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	4603      	mov	r3, r0
 8005f68:	71fb      	strb	r3, [r7, #7]
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	77fb      	strb	r3, [r7, #31]
 8005f6e:	e034      	b.n	8005fda <configuration_reset+0x7a>
 8005f70:	7ffb      	ldrb	r3, [r7, #31]
 8005f72:	74fb      	strb	r3, [r7, #19]
  usbd_class_driver_t const * driver = NULL;
 8005f74:	2300      	movs	r3, #0
 8005f76:	60fb      	str	r3, [r7, #12]
  if ( drvid < _app_driver_count ) {
 8005f78:	4b25      	ldr	r3, [pc, #148]	@ (8006010 <configuration_reset+0xb0>)
 8005f7a:	781b      	ldrb	r3, [r3, #0]
 8005f7c:	7cfa      	ldrb	r2, [r7, #19]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d206      	bcs.n	8005f90 <configuration_reset+0x30>
    driver = &_app_driver[drvid];
 8005f82:	4b24      	ldr	r3, [pc, #144]	@ (8006014 <configuration_reset+0xb4>)
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	7cfb      	ldrb	r3, [r7, #19]
 8005f88:	015b      	lsls	r3, r3, #5
 8005f8a:	4413      	add	r3, r2
 8005f8c:	60fb      	str	r3, [r7, #12]
 8005f8e:	e00d      	b.n	8005fac <configuration_reset+0x4c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8005f90:	4b1f      	ldr	r3, [pc, #124]	@ (8006010 <configuration_reset+0xb0>)
 8005f92:	781b      	ldrb	r3, [r3, #0]
 8005f94:	1c5a      	adds	r2, r3, #1
 8005f96:	7cfb      	ldrb	r3, [r7, #19]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	db07      	blt.n	8005fac <configuration_reset+0x4c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8005f9c:	7cfb      	ldrb	r3, [r7, #19]
 8005f9e:	4a1c      	ldr	r2, [pc, #112]	@ (8006010 <configuration_reset+0xb0>)
 8005fa0:	7812      	ldrb	r2, [r2, #0]
 8005fa2:	1a9b      	subs	r3, r3, r2
 8005fa4:	015b      	lsls	r3, r3, #5
 8005fa6:	4a1c      	ldr	r2, [pc, #112]	@ (8006018 <configuration_reset+0xb8>)
 8005fa8:	4413      	add	r3, r2
 8005faa:	60fb      	str	r3, [r7, #12]
  return driver;
 8005fac:	68fb      	ldr	r3, [r7, #12]
    usbd_class_driver_t const* driver = get_driver(i);
 8005fae:	61bb      	str	r3, [r7, #24]
    TU_ASSERT(driver,);
 8005fb0:	69bb      	ldr	r3, [r7, #24]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d109      	bne.n	8005fca <configuration_reset+0x6a>
 8005fb6:	4b19      	ldr	r3, [pc, #100]	@ (800601c <configuration_reset+0xbc>)
 8005fb8:	617b      	str	r3, [r7, #20]
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d01f      	beq.n	8006006 <configuration_reset+0xa6>
 8005fc6:	be00      	bkpt	0x0000
 8005fc8:	e01d      	b.n	8006006 <configuration_reset+0xa6>
    driver->reset(rhport);
 8005fca:	69bb      	ldr	r3, [r7, #24]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	79fa      	ldrb	r2, [r7, #7]
 8005fd0:	4610      	mov	r0, r2
 8005fd2:	4798      	blx	r3
  for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8005fd4:	7ffb      	ldrb	r3, [r7, #31]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	77fb      	strb	r3, [r7, #31]
 8005fda:	4b0d      	ldr	r3, [pc, #52]	@ (8006010 <configuration_reset+0xb0>)
 8005fdc:	781b      	ldrb	r3, [r3, #0]
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	7ffb      	ldrb	r3, [r7, #31]
 8005fe2:	429a      	cmp	r2, r3
 8005fe4:	dac4      	bge.n	8005f70 <configuration_reset+0x10>
  }

  tu_varclr(&_usbd_dev);
 8005fe6:	222c      	movs	r2, #44	@ 0x2c
 8005fe8:	2100      	movs	r1, #0
 8005fea:	480d      	ldr	r0, [pc, #52]	@ (8006020 <configuration_reset+0xc0>)
 8005fec:	f003 fe5a 	bl	8009ca4 <memset>
  memset(_usbd_dev.itf2drv, DRVID_INVALID, sizeof(_usbd_dev.itf2drv)); // invalid mapping
 8005ff0:	2210      	movs	r2, #16
 8005ff2:	21ff      	movs	r1, #255	@ 0xff
 8005ff4:	480b      	ldr	r0, [pc, #44]	@ (8006024 <configuration_reset+0xc4>)
 8005ff6:	f003 fe55 	bl	8009ca4 <memset>
  memset(_usbd_dev.ep2drv, DRVID_INVALID, sizeof(_usbd_dev.ep2drv)); // invalid mapping
 8005ffa:	220c      	movs	r2, #12
 8005ffc:	21ff      	movs	r1, #255	@ 0xff
 8005ffe:	480a      	ldr	r0, [pc, #40]	@ (8006028 <configuration_reset+0xc8>)
 8006000:	f003 fe50 	bl	8009ca4 <memset>
 8006004:	e000      	b.n	8006008 <configuration_reset+0xa8>
    TU_ASSERT(driver,);
 8006006:	bf00      	nop
}
 8006008:	3720      	adds	r7, #32
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	20000af0 	.word	0x20000af0
 8006014:	20000aec 	.word	0x20000aec
 8006018:	0800a764 	.word	0x0800a764
 800601c:	e000edf0 	.word	0xe000edf0
 8006020:	20000abc 	.word	0x20000abc
 8006024:	20000ac0 	.word	0x20000ac0
 8006028:	20000ad0 	.word	0x20000ad0

0800602c <usbd_reset>:

static void usbd_reset(uint8_t rhport) {
 800602c:	b580      	push	{r7, lr}
 800602e:	b082      	sub	sp, #8
 8006030:	af00      	add	r7, sp, #0
 8006032:	4603      	mov	r3, r0
 8006034:	71fb      	strb	r3, [r7, #7]
  configuration_reset(rhport);
 8006036:	79fb      	ldrb	r3, [r7, #7]
 8006038:	4618      	mov	r0, r3
 800603a:	f7ff ff91 	bl	8005f60 <configuration_reset>
  usbd_control_reset();
 800603e:	f001 fc37 	bl	80078b0 <usbd_control_reset>
}
 8006042:	bf00      	nop
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <tud_task_ext>:
        application_code();
        tud_task(); // tinyusb device task
      }
    }
 */
void tud_task_ext(uint32_t timeout_ms, bool in_isr) {
 800604c:	b590      	push	{r4, r7, lr}
 800604e:	b093      	sub	sp, #76	@ 0x4c
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	460b      	mov	r3, r1
 8006056:	70fb      	strb	r3, [r7, #3]
  (void) in_isr; // not implemented yet

  // Skip if stack is not initialized
  if (!tud_inited()) return;
 8006058:	f7ff feac 	bl	8005db4 <tud_inited>
 800605c:	4603      	mov	r3, r0
 800605e:	f083 0301 	eor.w	r3, r3, #1
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	f040 8189 	bne.w	800637c <tud_task_ext+0x330>

  // Loop until there is no more events in the queue
  while (1) {
    dcd_event_t event;
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 800606a:	4bb1      	ldr	r3, [pc, #708]	@ (8006330 <tud_task_ext+0x2e4>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006070:	f107 030c 	add.w	r3, r7, #12
 8006074:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	62bb      	str	r3, [r7, #40]	@ 0x28
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_receive(osal_queue_t qhdl, void* data, uint32_t msec) {
  (void) msec; // not used, always behave as msec = 0

  qhdl->interrupt_set(false);
 800607a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2000      	movs	r0, #0
 8006080:	4798      	blx	r3
  const bool success = tu_fifo_read(&qhdl->ff, data);
 8006082:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006084:	3304      	adds	r3, #4
 8006086:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006088:	4618      	mov	r0, r3
 800608a:	f7ff fcfa 	bl	8005a82 <tu_fifo_read>
 800608e:	4603      	mov	r3, r0
 8006090:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  qhdl->interrupt_set(true);
 8006094:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2001      	movs	r0, #1
 800609a:	4798      	blx	r3

  return success;
 800609c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060a0:	f083 0301 	eor.w	r3, r3, #1
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	f040 816a 	bne.w	8006380 <tud_task_ext+0x334>
#if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
    if (event.event_id == DCD_EVENT_SETUP_RECEIVED) TU_LOG_USBD("\r\n"); // extra line for setup
    TU_LOG_USBD("USBD %s ", event.event_id < DCD_EVENT_COUNT ? _usbd_event_str[event.event_id] : "CORRUPTED");
#endif

    switch (event.event_id) {
 80060ac:	7b7b      	ldrb	r3, [r7, #13]
 80060ae:	3b01      	subs	r3, #1
 80060b0:	2b07      	cmp	r3, #7
 80060b2:	f200 814b 	bhi.w	800634c <tud_task_ext+0x300>
 80060b6:	a201      	add	r2, pc, #4	@ (adr r2, 80060bc <tud_task_ext+0x70>)
 80060b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060bc:	080060dd 	.word	0x080060dd
 80060c0:	080060ed 	.word	0x080060ed
 80060c4:	08006301 	.word	0x08006301
 80060c8:	080062b3 	.word	0x080062b3
 80060cc:	080062dd 	.word	0x080062dd
 80060d0:	080060fb 	.word	0x080060fb
 80060d4:	080061ab 	.word	0x080061ab
 80060d8:	080062f1 	.word	0x080062f1
      case DCD_EVENT_BUS_RESET:
        TU_LOG_USBD(": %s Speed\r\n", tu_str_speed[event.bus_reset.speed]);
        usbd_reset(event.rhport);
 80060dc:	7b3b      	ldrb	r3, [r7, #12]
 80060de:	4618      	mov	r0, r3
 80060e0:	f7ff ffa4 	bl	800602c <usbd_reset>
        _usbd_dev.speed = event.bus_reset.speed;
 80060e4:	7c3a      	ldrb	r2, [r7, #16]
 80060e6:	4b93      	ldr	r3, [pc, #588]	@ (8006334 <tud_task_ext+0x2e8>)
 80060e8:	709a      	strb	r2, [r3, #2]
        break;
 80060ea:	e146      	b.n	800637a <tud_task_ext+0x32e>

      case DCD_EVENT_UNPLUGGED:
        TU_LOG_USBD("\r\n");
        usbd_reset(event.rhport);
 80060ec:	7b3b      	ldrb	r3, [r7, #12]
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7ff ff9c 	bl	800602c <usbd_reset>
        tud_umount_cb();
 80060f4:	f7ff fddd 	bl	8005cb2 <tud_umount_cb>
        break;
 80060f8:	e13f      	b.n	800637a <tud_task_ext+0x32e>

      case DCD_EVENT_SETUP_RECEIVED:
        TU_ASSERT(_usbd_queued_setup > 0,);
 80060fa:	4b8f      	ldr	r3, [pc, #572]	@ (8006338 <tud_task_ext+0x2ec>)
 80060fc:	781b      	ldrb	r3, [r3, #0]
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10a      	bne.n	800611a <tud_task_ext+0xce>
 8006104:	4b8d      	ldr	r3, [pc, #564]	@ (800633c <tud_task_ext+0x2f0>)
 8006106:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006108:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0301 	and.w	r3, r3, #1
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 8137 	beq.w	8006384 <tud_task_ext+0x338>
 8006116:	be00      	bkpt	0x0000
 8006118:	e134      	b.n	8006384 <tud_task_ext+0x338>
        _usbd_queued_setup--;
 800611a:	4b87      	ldr	r3, [pc, #540]	@ (8006338 <tud_task_ext+0x2ec>)
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	b2db      	uxtb	r3, r3
 8006120:	3b01      	subs	r3, #1
 8006122:	b2da      	uxtb	r2, r3
 8006124:	4b84      	ldr	r3, [pc, #528]	@ (8006338 <tud_task_ext+0x2ec>)
 8006126:	701a      	strb	r2, [r3, #0]
        TU_LOG_BUF(CFG_TUD_LOG_LEVEL, &event.setup_received, 8);
        if (_usbd_queued_setup) {
 8006128:	4b83      	ldr	r3, [pc, #524]	@ (8006338 <tud_task_ext+0x2ec>)
 800612a:	781b      	ldrb	r3, [r3, #0]
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	f040 8116 	bne.w	8006360 <tud_task_ext+0x314>
          break;
        }

        // Mark as connected after receiving 1st setup packet.
        // But it is easier to set it every time instead of wasting time to check then set
        _usbd_dev.connected = 1;
 8006134:	4a7f      	ldr	r2, [pc, #508]	@ (8006334 <tud_task_ext+0x2e8>)
 8006136:	7813      	ldrb	r3, [r2, #0]
 8006138:	f043 0301 	orr.w	r3, r3, #1
 800613c:	7013      	strb	r3, [r2, #0]

        // mark both in & out control as free
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].busy = 0;
 800613e:	4a7d      	ldr	r2, [pc, #500]	@ (8006334 <tud_task_ext+0x2e8>)
 8006140:	f892 3020 	ldrb.w	r3, [r2, #32]
 8006144:	f023 0301 	bic.w	r3, r3, #1
 8006148:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_OUT].claimed = 0;
 800614c:	4a79      	ldr	r2, [pc, #484]	@ (8006334 <tud_task_ext+0x2e8>)
 800614e:	f892 3020 	ldrb.w	r3, [r2, #32]
 8006152:	f023 0304 	bic.w	r3, r3, #4
 8006156:	f882 3020 	strb.w	r3, [r2, #32]
        _usbd_dev.ep_status[0][TUSB_DIR_IN].busy = 0;
 800615a:	4a76      	ldr	r2, [pc, #472]	@ (8006334 <tud_task_ext+0x2e8>)
 800615c:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 8006160:	f023 0301 	bic.w	r3, r3, #1
 8006164:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21
        _usbd_dev.ep_status[0][TUSB_DIR_IN].claimed = 0;
 8006168:	4a72      	ldr	r2, [pc, #456]	@ (8006334 <tud_task_ext+0x2e8>)
 800616a:	f892 3021 	ldrb.w	r3, [r2, #33]	@ 0x21
 800616e:	f023 0304 	bic.w	r3, r3, #4
 8006172:	f882 3021 	strb.w	r3, [r2, #33]	@ 0x21

        // Process control request
        if (!process_control_request(event.rhport, &event.setup_received)) {
 8006176:	7b3a      	ldrb	r2, [r7, #12]
 8006178:	f107 030c 	add.w	r3, r7, #12
 800617c:	3304      	adds	r3, #4
 800617e:	4619      	mov	r1, r3
 8006180:	4610      	mov	r0, r2
 8006182:	f000 f91f 	bl	80063c4 <process_control_request>
 8006186:	4603      	mov	r3, r0
 8006188:	f083 0301 	eor.w	r3, r3, #1
 800618c:	b2db      	uxtb	r3, r3
 800618e:	2b00      	cmp	r3, #0
 8006190:	f000 80e8 	beq.w	8006364 <tud_task_ext+0x318>
          TU_LOG_USBD("  Stall EP0\r\n");
          // Failed -> stall both control endpoint IN and OUT
          dcd_edpt_stall(event.rhport, 0);
 8006194:	7b3b      	ldrb	r3, [r7, #12]
 8006196:	2100      	movs	r1, #0
 8006198:	4618      	mov	r0, r3
 800619a:	f002 fb7b 	bl	8008894 <dcd_edpt_stall>
          dcd_edpt_stall(event.rhport, 0 | TUSB_DIR_IN_MASK);
 800619e:	7b3b      	ldrb	r3, [r7, #12]
 80061a0:	2180      	movs	r1, #128	@ 0x80
 80061a2:	4618      	mov	r0, r3
 80061a4:	f002 fb76 	bl	8008894 <dcd_edpt_stall>
        }
        break;
 80061a8:	e0dc      	b.n	8006364 <tud_task_ext+0x318>

      case DCD_EVENT_XFER_COMPLETE: {
        // Invoke the class callback associated with the endpoint address
        uint8_t const ep_addr = event.xfer_complete.ep_addr;
 80061aa:	7c3b      	ldrb	r3, [r7, #16]
 80061ac:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80061b0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80061b4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80061b8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80061bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80061c0:	b2db      	uxtb	r3, r3
        uint8_t const epnum = tu_edpt_number(ep_addr);
 80061c2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80061c6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80061ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80061ce:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80061d2:	09db      	lsrs	r3, r3, #7
 80061d4:	b2db      	uxtb	r3, r3
        uint8_t const ep_dir = tu_edpt_dir(ep_addr);
 80061d6:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45

        TU_LOG_USBD("on EP %02X with %u bytes\r\n", ep_addr, (unsigned int) event.xfer_complete.len);

        _usbd_dev.ep_status[epnum][ep_dir].busy = 0;
 80061da:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80061de:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80061e2:	4954      	ldr	r1, [pc, #336]	@ (8006334 <tud_task_ext+0x2e8>)
 80061e4:	0052      	lsls	r2, r2, #1
 80061e6:	440a      	add	r2, r1
 80061e8:	4413      	add	r3, r2
 80061ea:	f103 0220 	add.w	r2, r3, #32
 80061ee:	7813      	ldrb	r3, [r2, #0]
 80061f0:	f023 0301 	bic.w	r3, r3, #1
 80061f4:	7013      	strb	r3, [r2, #0]
        _usbd_dev.ep_status[epnum][ep_dir].claimed = 0;
 80061f6:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 80061fa:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 80061fe:	494d      	ldr	r1, [pc, #308]	@ (8006334 <tud_task_ext+0x2e8>)
 8006200:	0052      	lsls	r2, r2, #1
 8006202:	440a      	add	r2, r1
 8006204:	4413      	add	r3, r2
 8006206:	f103 0220 	add.w	r2, r3, #32
 800620a:	7813      	ldrb	r3, [r2, #0]
 800620c:	f023 0304 	bic.w	r3, r3, #4
 8006210:	7013      	strb	r3, [r2, #0]

        if (0 == epnum) {
 8006212:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8006216:	2b00      	cmp	r3, #0
 8006218:	d107      	bne.n	800622a <tud_task_ext+0x1de>
          usbd_control_xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result,
 800621a:	7b38      	ldrb	r0, [r7, #12]
 800621c:	7c7a      	ldrb	r2, [r7, #17]
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 8006224:	f001 fb7a 	bl	800791c <usbd_control_xfer_cb>
          TU_ASSERT(driver,);

          TU_LOG_USBD("  %s xfer callback\r\n", driver->name);
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
        }
        break;
 8006228:	e0a7      	b.n	800637a <tud_task_ext+0x32e>
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 800622a:	f897 2046 	ldrb.w	r2, [r7, #70]	@ 0x46
 800622e:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8006232:	4940      	ldr	r1, [pc, #256]	@ (8006334 <tud_task_ext+0x2e8>)
 8006234:	0052      	lsls	r2, r2, #1
 8006236:	440a      	add	r2, r1
 8006238:	4413      	add	r3, r2
 800623a:	3314      	adds	r3, #20
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
  usbd_class_driver_t const * driver = NULL;
 8006242:	2300      	movs	r3, #0
 8006244:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 8006246:	4b3e      	ldr	r3, [pc, #248]	@ (8006340 <tud_task_ext+0x2f4>)
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800624e:	429a      	cmp	r2, r3
 8006250:	d207      	bcs.n	8006262 <tud_task_ext+0x216>
    driver = &_app_driver[drvid];
 8006252:	4b3c      	ldr	r3, [pc, #240]	@ (8006344 <tud_task_ext+0x2f8>)
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800625a:	015b      	lsls	r3, r3, #5
 800625c:	4413      	add	r3, r2
 800625e:	623b      	str	r3, [r7, #32]
 8006260:	e00f      	b.n	8006282 <tud_task_ext+0x236>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006262:	4b37      	ldr	r3, [pc, #220]	@ (8006340 <tud_task_ext+0x2f4>)
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	1c5a      	adds	r2, r3, #1
 8006268:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800626c:	429a      	cmp	r2, r3
 800626e:	db08      	blt.n	8006282 <tud_task_ext+0x236>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006270:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8006274:	4a32      	ldr	r2, [pc, #200]	@ (8006340 <tud_task_ext+0x2f4>)
 8006276:	7812      	ldrb	r2, [r2, #0]
 8006278:	1a9b      	subs	r3, r3, r2
 800627a:	015b      	lsls	r3, r3, #5
 800627c:	4a32      	ldr	r2, [pc, #200]	@ (8006348 <tud_task_ext+0x2fc>)
 800627e:	4413      	add	r3, r2
 8006280:	623b      	str	r3, [r7, #32]
  return driver;
 8006282:	6a3b      	ldr	r3, [r7, #32]
          usbd_class_driver_t const* driver = get_driver(_usbd_dev.ep2drv[epnum][ep_dir]);
 8006284:	643b      	str	r3, [r7, #64]	@ 0x40
          TU_ASSERT(driver,);
 8006286:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006288:	2b00      	cmp	r3, #0
 800628a:	d109      	bne.n	80062a0 <tud_task_ext+0x254>
 800628c:	4b2b      	ldr	r3, [pc, #172]	@ (800633c <tud_task_ext+0x2f0>)
 800628e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006290:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f003 0301 	and.w	r3, r3, #1
 8006298:	2b00      	cmp	r3, #0
 800629a:	d075      	beq.n	8006388 <tud_task_ext+0x33c>
 800629c:	be00      	bkpt	0x0000
 800629e:	e073      	b.n	8006388 <tud_task_ext+0x33c>
          driver->xfer_cb(event.rhport, ep_addr, (xfer_result_t) event.xfer_complete.result, event.xfer_complete.len);
 80062a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80062a2:	699c      	ldr	r4, [r3, #24]
 80062a4:	7b38      	ldrb	r0, [r7, #12]
 80062a6:	7c7a      	ldrb	r2, [r7, #17]
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	f897 1047 	ldrb.w	r1, [r7, #71]	@ 0x47
 80062ae:	47a0      	blx	r4
        break;
 80062b0:	e063      	b.n	800637a <tud_task_ext+0x32e>

      case DCD_EVENT_SUSPEND:
        // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
        // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ), which result in a series of event
        // e.g suspend -> resume -> unplug/plug. Skip suspend/resume if not connected
        if (_usbd_dev.connected) {
 80062b2:	4b20      	ldr	r3, [pc, #128]	@ (8006334 <tud_task_ext+0x2e8>)
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80062ba:	b2db      	uxtb	r3, r3
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d053      	beq.n	8006368 <tud_task_ext+0x31c>
          TU_LOG_USBD(": Remote Wakeup = %u\r\n", _usbd_dev.remote_wakeup_en);
          tud_suspend_cb(_usbd_dev.remote_wakeup_en);
 80062c0:	4b1c      	ldr	r3, [pc, #112]	@ (8006334 <tud_task_ext+0x2e8>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80062c8:	b2db      	uxtb	r3, r3
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	bf14      	ite	ne
 80062ce:	2301      	movne	r3, #1
 80062d0:	2300      	moveq	r3, #0
 80062d2:	b2db      	uxtb	r3, r3
 80062d4:	4618      	mov	r0, r3
 80062d6:	f7ff fcf3 	bl	8005cc0 <tud_suspend_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80062da:	e045      	b.n	8006368 <tud_task_ext+0x31c>

      case DCD_EVENT_RESUME:
        if (_usbd_dev.connected) {
 80062dc:	4b15      	ldr	r3, [pc, #84]	@ (8006334 <tud_task_ext+0x2e8>)
 80062de:	781b      	ldrb	r3, [r3, #0]
 80062e0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d040      	beq.n	800636c <tud_task_ext+0x320>
          TU_LOG_USBD("\r\n");
          tud_resume_cb();
 80062ea:	f7ff fcf4 	bl	8005cd6 <tud_resume_cb>
        } else {
          TU_LOG_USBD(" Skipped\r\n");
        }
        break;
 80062ee:	e03d      	b.n	800636c <tud_task_ext+0x320>

      case USBD_EVENT_FUNC_CALL:
        TU_LOG_USBD("\r\n");
        if (event.func_call.func) {
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d03c      	beq.n	8006370 <tud_task_ext+0x324>
          event.func_call.func(event.func_call.param);
 80062f6:	693b      	ldr	r3, [r7, #16]
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	4610      	mov	r0, r2
 80062fc:	4798      	blx	r3
        }
        break;
 80062fe:	e037      	b.n	8006370 <tud_task_ext+0x324>

      case DCD_EVENT_SOF:
        if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8006300:	4b0c      	ldr	r3, [pc, #48]	@ (8006334 <tud_task_ext+0x2e8>)
 8006302:	78db      	ldrb	r3, [r3, #3]
 8006304:	b2db      	uxtb	r3, r3
 8006306:	61fb      	str	r3, [r7, #28]
 8006308:	2300      	movs	r3, #0
 800630a:	76fb      	strb	r3, [r7, #27]
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 800630c:	7efb      	ldrb	r3, [r7, #27]
 800630e:	69fa      	ldr	r2, [r7, #28]
 8006310:	fa22 f303 	lsr.w	r3, r2, r3
 8006314:	f003 0301 	and.w	r3, r3, #1
 8006318:	2b00      	cmp	r3, #0
 800631a:	bf14      	ite	ne
 800631c:	2301      	movne	r3, #1
 800631e:	2300      	moveq	r3, #0
 8006320:	b2db      	uxtb	r3, r3
 8006322:	2b00      	cmp	r3, #0
 8006324:	d026      	beq.n	8006374 <tud_task_ext+0x328>
          TU_LOG_USBD("\r\n");
          tud_sof_cb(event.sof.frame_count);
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	4618      	mov	r0, r3
 800632a:	f7ff fc95 	bl	8005c58 <tud_sof_cb>
        }
      break;
 800632e:	e021      	b.n	8006374 <tud_task_ext+0x328>
 8006330:	20000bb4 	.word	0x20000bb4
 8006334:	20000abc 	.word	0x20000abc
 8006338:	20000ae8 	.word	0x20000ae8
 800633c:	e000edf0 	.word	0xe000edf0
 8006340:	20000af0 	.word	0x20000af0
 8006344:	20000aec 	.word	0x20000aec
 8006348:	0800a764 	.word	0x0800a764

      default:
        TU_BREAKPOINT();
 800634c:	4b10      	ldr	r3, [pc, #64]	@ (8006390 <tud_task_ext+0x344>)
 800634e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006350:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b00      	cmp	r3, #0
 800635a:	d00d      	beq.n	8006378 <tud_task_ext+0x32c>
 800635c:	be00      	bkpt	0x0000
        break;
 800635e:	e00b      	b.n	8006378 <tud_task_ext+0x32c>
          break;
 8006360:	bf00      	nop
 8006362:	e682      	b.n	800606a <tud_task_ext+0x1e>
        break;
 8006364:	bf00      	nop
 8006366:	e680      	b.n	800606a <tud_task_ext+0x1e>
        break;
 8006368:	bf00      	nop
 800636a:	e67e      	b.n	800606a <tud_task_ext+0x1e>
        break;
 800636c:	bf00      	nop
 800636e:	e67c      	b.n	800606a <tud_task_ext+0x1e>
        break;
 8006370:	bf00      	nop
 8006372:	e67a      	b.n	800606a <tud_task_ext+0x1e>
      break;
 8006374:	bf00      	nop
 8006376:	e678      	b.n	800606a <tud_task_ext+0x1e>
        break;
 8006378:	bf00      	nop
  while (1) {
 800637a:	e676      	b.n	800606a <tud_task_ext+0x1e>
  if (!tud_inited()) return;
 800637c:	bf00      	nop
 800637e:	e004      	b.n	800638a <tud_task_ext+0x33e>
    if (!osal_queue_receive(_usbd_q, &event, timeout_ms)) return;
 8006380:	bf00      	nop
 8006382:	e002      	b.n	800638a <tud_task_ext+0x33e>
        TU_ASSERT(_usbd_queued_setup > 0,);
 8006384:	bf00      	nop
 8006386:	e000      	b.n	800638a <tud_task_ext+0x33e>
          TU_ASSERT(driver,);
 8006388:	bf00      	nop
#if CFG_TUSB_OS != OPT_OS_NONE && CFG_TUSB_OS != OPT_OS_PICO
    // return if there is no more events, for application to run other background
    if (osal_queue_empty(_usbd_q)) { return; }
#endif
  }
}
 800638a:	374c      	adds	r7, #76	@ 0x4c
 800638c:	46bd      	mov	sp, r7
 800638e:	bd90      	pop	{r4, r7, pc}
 8006390:	e000edf0 	.word	0xe000edf0

08006394 <invoke_class_control>:
//--------------------------------------------------------------------+
// Control Request Parser & Handling
//--------------------------------------------------------------------+

// Helper to invoke class driver control request handler
static bool invoke_class_control(uint8_t rhport, usbd_class_driver_t const * driver, tusb_control_request_t const * request) {
 8006394:	b580      	push	{r7, lr}
 8006396:	b084      	sub	sp, #16
 8006398:	af00      	add	r7, sp, #0
 800639a:	4603      	mov	r3, r0
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	73fb      	strb	r3, [r7, #15]
  usbd_control_set_complete_callback(driver->control_xfer_cb);
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	4618      	mov	r0, r3
 80063a8:	f001 fa8e 	bl	80078c8 <usbd_control_set_complete_callback>
  TU_LOG_USBD("  %s control request\r\n", driver->name);
  return driver->control_xfer_cb(rhport, CONTROL_STAGE_SETUP, request);
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	695b      	ldr	r3, [r3, #20]
 80063b0:	7bf8      	ldrb	r0, [r7, #15]
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	2101      	movs	r1, #1
 80063b6:	4798      	blx	r3
 80063b8:	4603      	mov	r3, r0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	3710      	adds	r7, #16
 80063be:	46bd      	mov	sp, r7
 80063c0:	bd80      	pop	{r7, pc}
	...

080063c4 <process_control_request>:

// This handles the actual request and its response.
// Returns false if unable to complete the request, causing caller to stall control endpoints.
static bool process_control_request(uint8_t rhport, tusb_control_request_t const * p_request) {
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b09a      	sub	sp, #104	@ 0x68
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	4603      	mov	r3, r0
 80063cc:	6039      	str	r1, [r7, #0]
 80063ce:	71fb      	strb	r3, [r7, #7]
  usbd_control_set_complete_callback(NULL);
 80063d0:	2000      	movs	r0, #0
 80063d2:	f001 fa79 	bl	80078c8 <usbd_control_set_complete_callback>
  TU_ASSERT(p_request->bmRequestType_bit.type < TUSB_REQ_TYPE_INVALID);
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	781b      	ldrb	r3, [r3, #0]
 80063da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80063de:	b2db      	uxtb	r3, r3
 80063e0:	2b60      	cmp	r3, #96	@ 0x60
 80063e2:	d10a      	bne.n	80063fa <process_control_request+0x36>
 80063e4:	4ba5      	ldr	r3, [pc, #660]	@ (800667c <process_control_request+0x2b8>)
 80063e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80063e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d000      	beq.n	80063f6 <process_control_request+0x32>
 80063f4:	be00      	bkpt	0x0000
 80063f6:	2300      	movs	r3, #0
 80063f8:	e2bb      	b.n	8006972 <process_control_request+0x5ae>

  // Vendor request
  if ( p_request->bmRequestType_bit.type == TUSB_REQ_TYPE_VENDOR ) {
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006402:	b2db      	uxtb	r3, r3
 8006404:	2b40      	cmp	r3, #64	@ 0x40
 8006406:	d10a      	bne.n	800641e <process_control_request+0x5a>
    usbd_control_set_complete_callback(tud_vendor_control_xfer_cb);
 8006408:	489d      	ldr	r0, [pc, #628]	@ (8006680 <process_control_request+0x2bc>)
 800640a:	f001 fa5d 	bl	80078c8 <usbd_control_set_complete_callback>
    return tud_vendor_control_xfer_cb(rhport, CONTROL_STAGE_SETUP, p_request);
 800640e:	79fb      	ldrb	r3, [r7, #7]
 8006410:	683a      	ldr	r2, [r7, #0]
 8006412:	2101      	movs	r1, #1
 8006414:	4618      	mov	r0, r3
 8006416:	f7ff fc65 	bl	8005ce4 <tud_vendor_control_xfer_cb>
 800641a:	4603      	mov	r3, r0
 800641c:	e2a9      	b.n	8006972 <process_control_request+0x5ae>
    TU_LOG_USBD("  %s", tu_str_std_request[p_request->bRequest]);
    if (TUSB_REQ_GET_DESCRIPTOR != p_request->bRequest) TU_LOG_USBD("\r\n");
  }
#endif

  switch ( p_request->bmRequestType_bit.recipient ) {
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	f3c3 0304 	ubfx	r3, r3, #0, #5
 8006426:	b2db      	uxtb	r3, r3
 8006428:	2b02      	cmp	r3, #2
 800642a:	f000 81ca 	beq.w	80067c2 <process_control_request+0x3fe>
 800642e:	2b02      	cmp	r3, #2
 8006430:	f300 8292 	bgt.w	8006958 <process_control_request+0x594>
 8006434:	2b00      	cmp	r3, #0
 8006436:	d003      	beq.n	8006440 <process_control_request+0x7c>
 8006438:	2b01      	cmp	r3, #1
 800643a:	f000 8151 	beq.w	80066e0 <process_control_request+0x31c>
 800643e:	e28b      	b.n	8006958 <process_control_request+0x594>
    //------------- Device Requests e.g in enumeration -------------//
    case TUSB_REQ_RCPT_DEVICE:
      if ( TUSB_REQ_TYPE_CLASS == p_request->bmRequestType_bit.type ) {
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006448:	b2db      	uxtb	r3, r3
 800644a:	2b20      	cmp	r3, #32
 800644c:	d143      	bne.n	80064d6 <process_control_request+0x112>
        uint8_t const itf = tu_u16_low(p_request->wIndex);
 800644e:	683b      	ldr	r3, [r7, #0]
 8006450:	889b      	ldrh	r3, [r3, #4]
 8006452:	b29b      	uxth	r3, r3
 8006454:	85fb      	strh	r3, [r7, #46]	@ 0x2e
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8006456:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006458:	b2db      	uxtb	r3, r3
 800645a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 800645e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006462:	2b0f      	cmp	r3, #15
 8006464:	d901      	bls.n	800646a <process_control_request+0xa6>
 8006466:	2300      	movs	r3, #0
 8006468:	e283      	b.n	8006972 <process_control_request+0x5ae>

        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800646a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800646e:	4a85      	ldr	r2, [pc, #532]	@ (8006684 <process_control_request+0x2c0>)
 8006470:	4413      	add	r3, r2
 8006472:	791b      	ldrb	r3, [r3, #4]
 8006474:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  usbd_class_driver_t const * driver = NULL;
 8006478:	2300      	movs	r3, #0
 800647a:	62bb      	str	r3, [r7, #40]	@ 0x28
  if ( drvid < _app_driver_count ) {
 800647c:	4b82      	ldr	r3, [pc, #520]	@ (8006688 <process_control_request+0x2c4>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	f897 202d 	ldrb.w	r2, [r7, #45]	@ 0x2d
 8006484:	429a      	cmp	r2, r3
 8006486:	d207      	bcs.n	8006498 <process_control_request+0xd4>
    driver = &_app_driver[drvid];
 8006488:	4b80      	ldr	r3, [pc, #512]	@ (800668c <process_control_request+0x2c8>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8006490:	015b      	lsls	r3, r3, #5
 8006492:	4413      	add	r3, r2
 8006494:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006496:	e00f      	b.n	80064b8 <process_control_request+0xf4>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006498:	4b7b      	ldr	r3, [pc, #492]	@ (8006688 <process_control_request+0x2c4>)
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	1c5a      	adds	r2, r3, #1
 800649e:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80064a2:	429a      	cmp	r2, r3
 80064a4:	db08      	blt.n	80064b8 <process_control_request+0xf4>
    driver = &_usbd_driver[drvid - _app_driver_count];
 80064a6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80064aa:	4a77      	ldr	r2, [pc, #476]	@ (8006688 <process_control_request+0x2c4>)
 80064ac:	7812      	ldrb	r2, [r2, #0]
 80064ae:	1a9b      	subs	r3, r3, r2
 80064b0:	015b      	lsls	r3, r3, #5
 80064b2:	4a77      	ldr	r2, [pc, #476]	@ (8006690 <process_control_request+0x2cc>)
 80064b4:	4413      	add	r3, r2
 80064b6:	62bb      	str	r3, [r7, #40]	@ 0x28
  return driver;
 80064b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80064ba:	63bb      	str	r3, [r7, #56]	@ 0x38
        TU_VERIFY(driver);
 80064bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d101      	bne.n	80064c6 <process_control_request+0x102>
 80064c2:	2300      	movs	r3, #0
 80064c4:	e255      	b.n	8006972 <process_control_request+0x5ae>

        // forward to class driver: "non-STD request to Interface"
        return invoke_class_control(rhport, driver, p_request);
 80064c6:	79fb      	ldrb	r3, [r7, #7]
 80064c8:	683a      	ldr	r2, [r7, #0]
 80064ca:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80064cc:	4618      	mov	r0, r3
 80064ce:	f7ff ff61 	bl	8006394 <invoke_class_control>
 80064d2:	4603      	mov	r3, r0
 80064d4:	e24d      	b.n	8006972 <process_control_request+0x5ae>
      }

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	781b      	ldrb	r3, [r3, #0]
 80064da:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00a      	beq.n	80064fa <process_control_request+0x136>
        // Non-standard request is not supported
        TU_BREAKPOINT();
 80064e4:	4b65      	ldr	r3, [pc, #404]	@ (800667c <process_control_request+0x2b8>)
 80064e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80064e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f003 0301 	and.w	r3, r3, #1
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d000      	beq.n	80064f6 <process_control_request+0x132>
 80064f4:	be00      	bkpt	0x0000
        return false;
 80064f6:	2300      	movs	r3, #0
 80064f8:	e23b      	b.n	8006972 <process_control_request+0x5ae>
      }

      switch ( p_request->bRequest ) {
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	785b      	ldrb	r3, [r3, #1]
 80064fe:	2b09      	cmp	r3, #9
 8006500:	f200 80e1 	bhi.w	80066c6 <process_control_request+0x302>
 8006504:	a201      	add	r2, pc, #4	@ (adr r2, 800650c <process_control_request+0x148>)
 8006506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800650a:	bf00      	nop
 800650c:	08006695 	.word	0x08006695
 8006510:	08006659 	.word	0x08006659
 8006514:	080066c7 	.word	0x080066c7
 8006518:	08006633 	.word	0x08006633
 800651c:	080066c7 	.word	0x080066c7
 8006520:	08006535 	.word	0x08006535
 8006524:	08006619 	.word	0x08006619
 8006528:	080066c7 	.word	0x080066c7
 800652c:	08006559 	.word	0x08006559
 8006530:	08006571 	.word	0x08006571
        case TUSB_REQ_SET_ADDRESS:
          // Depending on mcu, status phase could be sent either before or after changing device address,
          // or even require stack to not response with status at all
          // Therefore DCD must take full responsibility to response and include zlp status packet if needed.
          usbd_control_set_request(p_request); // set request since DCD has no access to tud_control_status() API
 8006534:	6838      	ldr	r0, [r7, #0]
 8006536:	f001 f9d7 	bl	80078e8 <usbd_control_set_request>
          dcd_set_address(rhport, (uint8_t) p_request->wValue);
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	885b      	ldrh	r3, [r3, #2]
 800653e:	b29b      	uxth	r3, r3
 8006540:	b2da      	uxtb	r2, r3
 8006542:	79fb      	ldrb	r3, [r7, #7]
 8006544:	4611      	mov	r1, r2
 8006546:	4618      	mov	r0, r3
 8006548:	f001 ff94 	bl	8008474 <dcd_set_address>
          // skip tud_control_status()
          _usbd_dev.addressed = 1;
 800654c:	4a4d      	ldr	r2, [pc, #308]	@ (8006684 <process_control_request+0x2c0>)
 800654e:	7813      	ldrb	r3, [r2, #0]
 8006550:	f043 0302 	orr.w	r3, r3, #2
 8006554:	7013      	strb	r3, [r2, #0]
        break;
 8006556:	e0c2      	b.n	80066de <process_control_request+0x31a>

        case TUSB_REQ_GET_CONFIGURATION: {
          uint8_t cfg_num = _usbd_dev.cfg_num;
 8006558:	4b4a      	ldr	r3, [pc, #296]	@ (8006684 <process_control_request+0x2c0>)
 800655a:	785b      	ldrb	r3, [r3, #1]
 800655c:	b2db      	uxtb	r3, r3
 800655e:	74fb      	strb	r3, [r7, #19]
          tud_control_xfer(rhport, p_request, &cfg_num, 1);
 8006560:	f107 0213 	add.w	r2, r7, #19
 8006564:	79f8      	ldrb	r0, [r7, #7]
 8006566:	2301      	movs	r3, #1
 8006568:	6839      	ldr	r1, [r7, #0]
 800656a:	f001 f931 	bl	80077d0 <tud_control_xfer>
        }
        break;
 800656e:	e0b6      	b.n	80066de <process_control_request+0x31a>

        case TUSB_REQ_SET_CONFIGURATION: {
          uint8_t const cfg_num = (uint8_t) p_request->wValue;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	885b      	ldrh	r3, [r3, #2]
 8006574:	b29b      	uxth	r3, r3
 8006576:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

          // Only process if new configure is different
          if (_usbd_dev.cfg_num != cfg_num) {
 800657a:	4b42      	ldr	r3, [pc, #264]	@ (8006684 <process_control_request+0x2c0>)
 800657c:	785b      	ldrb	r3, [r3, #1]
 800657e:	b2db      	uxtb	r3, r3
 8006580:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 8006584:	429a      	cmp	r2, r3
 8006586:	d041      	beq.n	800660c <process_control_request+0x248>
            if ( _usbd_dev.cfg_num ) {
 8006588:	4b3e      	ldr	r3, [pc, #248]	@ (8006684 <process_control_request+0x2c0>)
 800658a:	785b      	ldrb	r3, [r3, #1]
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b00      	cmp	r3, #0
 8006590:	d014      	beq.n	80065bc <process_control_request+0x1f8>
              // already configured: need to clear all endpoints and driver first
              TU_LOG_USBD("  Clear current Configuration (%u) before switching\r\n", _usbd_dev.cfg_num);

              // disable SOF
              dcd_sof_enable(rhport, false);
 8006592:	79fb      	ldrb	r3, [r7, #7]
 8006594:	2100      	movs	r1, #0
 8006596:	4618      	mov	r0, r3
 8006598:	f002 f832 	bl	8008600 <dcd_sof_enable>

              // close all non-control endpoints, cancel all pending transfers if any
              dcd_edpt_close_all(rhport);
 800659c:	79fb      	ldrb	r3, [r7, #7]
 800659e:	4618      	mov	r0, r3
 80065a0:	f002 f896 	bl	80086d0 <dcd_edpt_close_all>

              // close all drivers and current configured state except bus speed
              uint8_t const speed = _usbd_dev.speed;
 80065a4:	4b37      	ldr	r3, [pc, #220]	@ (8006684 <process_control_request+0x2c0>)
 80065a6:	789b      	ldrb	r3, [r3, #2]
 80065a8:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
              configuration_reset(rhport);
 80065ac:	79fb      	ldrb	r3, [r7, #7]
 80065ae:	4618      	mov	r0, r3
 80065b0:	f7ff fcd6 	bl	8005f60 <configuration_reset>

              _usbd_dev.speed = speed; // restore speed
 80065b4:	4a33      	ldr	r2, [pc, #204]	@ (8006684 <process_control_request+0x2c0>)
 80065b6:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80065ba:	7093      	strb	r3, [r2, #2]
            }

            _usbd_dev.cfg_num = cfg_num;
 80065bc:	4a31      	ldr	r2, [pc, #196]	@ (8006684 <process_control_request+0x2c0>)
 80065be:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80065c2:	7053      	strb	r3, [r2, #1]

            // Handle the new configuration and execute the corresponding callback
            if ( cfg_num ) {
 80065c4:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d01d      	beq.n	8006608 <process_control_request+0x244>
              // switch to new configuration if not zero
              if (!process_set_config(rhport, cfg_num)) {
 80065cc:	f897 204f 	ldrb.w	r2, [r7, #79]	@ 0x4f
 80065d0:	79fb      	ldrb	r3, [r7, #7]
 80065d2:	4611      	mov	r1, r2
 80065d4:	4618      	mov	r0, r3
 80065d6:	f000 f9d5 	bl	8006984 <process_set_config>
 80065da:	4603      	mov	r3, r0
 80065dc:	f083 0301 	eor.w	r3, r3, #1
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00d      	beq.n	8006602 <process_control_request+0x23e>
                TU_MESS_FAILED();
                TU_BREAKPOINT();
 80065e6:	4b25      	ldr	r3, [pc, #148]	@ (800667c <process_control_request+0x2b8>)
 80065e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f003 0301 	and.w	r3, r3, #1
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d000      	beq.n	80065f8 <process_control_request+0x234>
 80065f6:	be00      	bkpt	0x0000
                _usbd_dev.cfg_num = 0;
 80065f8:	4b22      	ldr	r3, [pc, #136]	@ (8006684 <process_control_request+0x2c0>)
 80065fa:	2200      	movs	r2, #0
 80065fc:	705a      	strb	r2, [r3, #1]
                return false;
 80065fe:	2300      	movs	r3, #0
 8006600:	e1b7      	b.n	8006972 <process_control_request+0x5ae>
              }
              tud_mount_cb();
 8006602:	f7ff fb4f 	bl	8005ca4 <tud_mount_cb>
 8006606:	e001      	b.n	800660c <process_control_request+0x248>
            } else {
              tud_umount_cb();
 8006608:	f7ff fb53 	bl	8005cb2 <tud_umount_cb>
            }
          }

          tud_control_status(rhport, p_request);
 800660c:	79fb      	ldrb	r3, [r7, #7]
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	4618      	mov	r0, r3
 8006612:	f001 f86b 	bl	80076ec <tud_control_status>
        }
        break;
 8006616:	e062      	b.n	80066de <process_control_request+0x31a>

        case TUSB_REQ_GET_DESCRIPTOR:
          TU_VERIFY( process_get_descriptor(rhport, p_request) );
 8006618:	79fb      	ldrb	r3, [r7, #7]
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	4618      	mov	r0, r3
 800661e:	f000 fae5 	bl	8006bec <process_get_descriptor>
 8006622:	4603      	mov	r3, r0
 8006624:	f083 0301 	eor.w	r3, r3, #1
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d056      	beq.n	80066dc <process_control_request+0x318>
 800662e:	2300      	movs	r3, #0
 8006630:	e19f      	b.n	8006972 <process_control_request+0x5ae>
        break;

        case TUSB_REQ_SET_FEATURE:
          switch(p_request->wValue) {
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	885b      	ldrh	r3, [r3, #2]
 8006636:	b29b      	uxth	r3, r3
 8006638:	2b01      	cmp	r3, #1
 800663a:	d10b      	bne.n	8006654 <process_control_request+0x290>
            case TUSB_REQ_FEATURE_REMOTE_WAKEUP:
              TU_LOG_USBD("    Enable Remote Wakeup\r\n");
              // Host may enable remote wake up before suspending especially HID device
              _usbd_dev.remote_wakeup_en = true;
 800663c:	4a11      	ldr	r2, [pc, #68]	@ (8006684 <process_control_request+0x2c0>)
 800663e:	7813      	ldrb	r3, [r2, #0]
 8006640:	f043 0308 	orr.w	r3, r3, #8
 8006644:	7013      	strb	r3, [r2, #0]
              tud_control_status(rhport, p_request);
 8006646:	79fb      	ldrb	r3, [r7, #7]
 8006648:	6839      	ldr	r1, [r7, #0]
 800664a:	4618      	mov	r0, r3
 800664c:	f001 f84e 	bl	80076ec <tud_control_status>
            break;
 8006650:	bf00      	nop
            #endif /* CFG_TUD_TEST_MODE */

            // Stall unsupported feature selector
            default: return false;
          }
        break;
 8006652:	e044      	b.n	80066de <process_control_request+0x31a>
            default: return false;
 8006654:	2300      	movs	r3, #0
 8006656:	e18c      	b.n	8006972 <process_control_request+0x5ae>

        case TUSB_REQ_CLEAR_FEATURE:
          // Only support remote wakeup for device feature
          TU_VERIFY(TUSB_REQ_FEATURE_REMOTE_WAKEUP == p_request->wValue);
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	885b      	ldrh	r3, [r3, #2]
 800665c:	b29b      	uxth	r3, r3
 800665e:	2b01      	cmp	r3, #1
 8006660:	d001      	beq.n	8006666 <process_control_request+0x2a2>
 8006662:	2300      	movs	r3, #0
 8006664:	e185      	b.n	8006972 <process_control_request+0x5ae>

          TU_LOG_USBD("    Disable Remote Wakeup\r\n");

          // Host may disable remote wake up after resuming
          _usbd_dev.remote_wakeup_en = false;
 8006666:	4a07      	ldr	r2, [pc, #28]	@ (8006684 <process_control_request+0x2c0>)
 8006668:	7813      	ldrb	r3, [r2, #0]
 800666a:	f023 0308 	bic.w	r3, r3, #8
 800666e:	7013      	strb	r3, [r2, #0]
          tud_control_status(rhport, p_request);
 8006670:	79fb      	ldrb	r3, [r7, #7]
 8006672:	6839      	ldr	r1, [r7, #0]
 8006674:	4618      	mov	r0, r3
 8006676:	f001 f839 	bl	80076ec <tud_control_status>
        break;
 800667a:	e030      	b.n	80066de <process_control_request+0x31a>
 800667c:	e000edf0 	.word	0xe000edf0
 8006680:	08005ce5 	.word	0x08005ce5
 8006684:	20000abc 	.word	0x20000abc
 8006688:	20000af0 	.word	0x20000af0
 800668c:	20000aec 	.word	0x20000aec
 8006690:	0800a764 	.word	0x0800a764

        case TUSB_REQ_GET_STATUS: {
          // Device status bit mask
          // - Bit 0: Self Powered
          // - Bit 1: Remote Wakeup enabled
          uint16_t status = (uint16_t) ((_usbd_dev.self_powered ? 1u : 0u) | (_usbd_dev.remote_wakeup_en ? 2u : 0u));
 8006694:	4b94      	ldr	r3, [pc, #592]	@ (80068e8 <process_control_request+0x524>)
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	095b      	lsrs	r3, r3, #5
 800669a:	b2db      	uxtb	r3, r3
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	b29a      	uxth	r2, r3
 80066a2:	4b91      	ldr	r3, [pc, #580]	@ (80068e8 <process_control_request+0x524>)
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	089b      	lsrs	r3, r3, #2
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	f003 0302 	and.w	r3, r3, #2
 80066ae:	b29b      	uxth	r3, r3
 80066b0:	4313      	orrs	r3, r2
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	823b      	strh	r3, [r7, #16]
          tud_control_xfer(rhport, p_request, &status, 2);
 80066b6:	f107 0210 	add.w	r2, r7, #16
 80066ba:	79f8      	ldrb	r0, [r7, #7]
 80066bc:	2302      	movs	r3, #2
 80066be:	6839      	ldr	r1, [r7, #0]
 80066c0:	f001 f886 	bl	80077d0 <tud_control_xfer>
          break;
 80066c4:	e00b      	b.n	80066de <process_control_request+0x31a>
        }

        // Unknown/Unsupported request
        default: TU_BREAKPOINT(); return false;
 80066c6:	4b89      	ldr	r3, [pc, #548]	@ (80068ec <process_control_request+0x528>)
 80066c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80066ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	f003 0301 	and.w	r3, r3, #1
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d000      	beq.n	80066d8 <process_control_request+0x314>
 80066d6:	be00      	bkpt	0x0000
 80066d8:	2300      	movs	r3, #0
 80066da:	e14a      	b.n	8006972 <process_control_request+0x5ae>
        break;
 80066dc:	bf00      	nop
      }
    break;
 80066de:	e147      	b.n	8006970 <process_control_request+0x5ac>

    //------------- Class/Interface Specific Request -------------//
    case TUSB_REQ_RCPT_INTERFACE: {
      uint8_t const itf = tu_u16_low(p_request->wIndex);
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	889b      	ldrh	r3, [r3, #4]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80066e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      TU_VERIFY(itf < TU_ARRAY_SIZE(_usbd_dev.itf2drv));
 80066f0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80066f4:	2b0f      	cmp	r3, #15
 80066f6:	d901      	bls.n	80066fc <process_control_request+0x338>
 80066f8:	2300      	movs	r3, #0
 80066fa:	e13a      	b.n	8006972 <process_control_request+0x5ae>

      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 80066fc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006700:	4a79      	ldr	r2, [pc, #484]	@ (80068e8 <process_control_request+0x524>)
 8006702:	4413      	add	r3, r2
 8006704:	791b      	ldrb	r3, [r3, #4]
 8006706:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
  usbd_class_driver_t const * driver = NULL;
 800670a:	2300      	movs	r3, #0
 800670c:	623b      	str	r3, [r7, #32]
  if ( drvid < _app_driver_count ) {
 800670e:	4b78      	ldr	r3, [pc, #480]	@ (80068f0 <process_control_request+0x52c>)
 8006710:	781b      	ldrb	r3, [r3, #0]
 8006712:	f897 2025 	ldrb.w	r2, [r7, #37]	@ 0x25
 8006716:	429a      	cmp	r2, r3
 8006718:	d207      	bcs.n	800672a <process_control_request+0x366>
    driver = &_app_driver[drvid];
 800671a:	4b76      	ldr	r3, [pc, #472]	@ (80068f4 <process_control_request+0x530>)
 800671c:	681a      	ldr	r2, [r3, #0]
 800671e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006722:	015b      	lsls	r3, r3, #5
 8006724:	4413      	add	r3, r2
 8006726:	623b      	str	r3, [r7, #32]
 8006728:	e00f      	b.n	800674a <process_control_request+0x386>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 800672a:	4b71      	ldr	r3, [pc, #452]	@ (80068f0 <process_control_request+0x52c>)
 800672c:	781b      	ldrb	r3, [r3, #0]
 800672e:	1c5a      	adds	r2, r3, #1
 8006730:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006734:	429a      	cmp	r2, r3
 8006736:	db08      	blt.n	800674a <process_control_request+0x386>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006738:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800673c:	4a6c      	ldr	r2, [pc, #432]	@ (80068f0 <process_control_request+0x52c>)
 800673e:	7812      	ldrb	r2, [r2, #0]
 8006740:	1a9b      	subs	r3, r3, r2
 8006742:	015b      	lsls	r3, r3, #5
 8006744:	4a6c      	ldr	r2, [pc, #432]	@ (80068f8 <process_control_request+0x534>)
 8006746:	4413      	add	r3, r2
 8006748:	623b      	str	r3, [r7, #32]
  return driver;
 800674a:	6a3b      	ldr	r3, [r7, #32]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.itf2drv[itf]);
 800674c:	653b      	str	r3, [r7, #80]	@ 0x50
      TU_VERIFY(driver);
 800674e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <process_control_request+0x394>
 8006754:	2300      	movs	r3, #0
 8006756:	e10c      	b.n	8006972 <process_control_request+0x5ae>

      // all requests to Interface (STD or Class) is forwarded to class driver.
      // notable requests are: GET HID REPORT DESCRIPTOR, SET_INTERFACE, GET_INTERFACE
      if ( !invoke_class_control(rhport, driver, p_request) ) {
 8006758:	79fb      	ldrb	r3, [r7, #7]
 800675a:	683a      	ldr	r2, [r7, #0]
 800675c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800675e:	4618      	mov	r0, r3
 8006760:	f7ff fe18 	bl	8006394 <invoke_class_control>
 8006764:	4603      	mov	r3, r0
 8006766:	f083 0301 	eor.w	r3, r3, #1
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b00      	cmp	r3, #0
 800676e:	f000 80fe 	beq.w	800696e <process_control_request+0x5aa>
        // For GET_INTERFACE and SET_INTERFACE, it is mandatory to respond even if the class
        // driver doesn't use alternate settings or implement this
        TU_VERIFY(TUSB_REQ_TYPE_STANDARD == p_request->bmRequestType_bit.type);
 8006772:	683b      	ldr	r3, [r7, #0]
 8006774:	781b      	ldrb	r3, [r3, #0]
 8006776:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	d001      	beq.n	8006784 <process_control_request+0x3c0>
 8006780:	2300      	movs	r3, #0
 8006782:	e0f6      	b.n	8006972 <process_control_request+0x5ae>

        switch(p_request->bRequest) {
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	785b      	ldrb	r3, [r3, #1]
 8006788:	3b0a      	subs	r3, #10
 800678a:	2b01      	cmp	r3, #1
 800678c:	d816      	bhi.n	80067bc <process_control_request+0x3f8>
          case TUSB_REQ_GET_INTERFACE:
          case TUSB_REQ_SET_INTERFACE:
            // Clear complete callback if driver set since it can also stall the request.
            usbd_control_set_complete_callback(NULL);
 800678e:	2000      	movs	r0, #0
 8006790:	f001 f89a 	bl	80078c8 <usbd_control_set_complete_callback>

            if (TUSB_REQ_GET_INTERFACE == p_request->bRequest) {
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	785b      	ldrb	r3, [r3, #1]
 8006798:	2b0a      	cmp	r3, #10
 800679a:	d109      	bne.n	80067b0 <process_control_request+0x3ec>
              uint8_t alternate = 0;
 800679c:	2300      	movs	r3, #0
 800679e:	73fb      	strb	r3, [r7, #15]
              tud_control_xfer(rhport, p_request, &alternate, 1);
 80067a0:	f107 020f 	add.w	r2, r7, #15
 80067a4:	79f8      	ldrb	r0, [r7, #7]
 80067a6:	2301      	movs	r3, #1
 80067a8:	6839      	ldr	r1, [r7, #0]
 80067aa:	f001 f811 	bl	80077d0 <tud_control_xfer>
            }else {
              tud_control_status(rhport, p_request);
            }
          break;
 80067ae:	e007      	b.n	80067c0 <process_control_request+0x3fc>
              tud_control_status(rhport, p_request);
 80067b0:	79fb      	ldrb	r3, [r7, #7]
 80067b2:	6839      	ldr	r1, [r7, #0]
 80067b4:	4618      	mov	r0, r3
 80067b6:	f000 ff99 	bl	80076ec <tud_control_status>
          break;
 80067ba:	e001      	b.n	80067c0 <process_control_request+0x3fc>

          default: return false;
 80067bc:	2300      	movs	r3, #0
 80067be:	e0d8      	b.n	8006972 <process_control_request+0x5ae>
        }
      }
      break;
 80067c0:	e0d5      	b.n	800696e <process_control_request+0x5aa>
    }

    //------------- Endpoint Request -------------//
    case TUSB_REQ_RCPT_ENDPOINT: {
      uint8_t const ep_addr = tu_u16_low(p_request->wIndex);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	889b      	ldrh	r3, [r3, #4]
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	83bb      	strh	r3, [r7, #28]
 80067ca:	8bbb      	ldrh	r3, [r7, #28]
 80067cc:	b2db      	uxtb	r3, r3
 80067ce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80067d2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80067d6:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80067d8:	7fbb      	ldrb	r3, [r7, #30]
 80067da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067de:	b2db      	uxtb	r3, r3
      uint8_t const ep_num  = tu_edpt_number(ep_addr);
 80067e0:	f887 3066 	strb.w	r3, [r7, #102]	@ 0x66
 80067e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80067e8:	77fb      	strb	r3, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80067ea:	7ffb      	ldrb	r3, [r7, #31]
 80067ec:	09db      	lsrs	r3, r3, #7
 80067ee:	b2db      	uxtb	r3, r3
      uint8_t const ep_dir  = tu_edpt_dir(ep_addr);
 80067f0:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

      TU_ASSERT(ep_num < TU_ARRAY_SIZE(_usbd_dev.ep2drv) );
 80067f4:	f897 3066 	ldrb.w	r3, [r7, #102]	@ 0x66
 80067f8:	2b05      	cmp	r3, #5
 80067fa:	d90a      	bls.n	8006812 <process_control_request+0x44e>
 80067fc:	4b3b      	ldr	r3, [pc, #236]	@ (80068ec <process_control_request+0x528>)
 80067fe:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006800:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f003 0301 	and.w	r3, r3, #1
 8006808:	2b00      	cmp	r3, #0
 800680a:	d000      	beq.n	800680e <process_control_request+0x44a>
 800680c:	be00      	bkpt	0x0000
 800680e:	2300      	movs	r3, #0
 8006810:	e0af      	b.n	8006972 <process_control_request+0x5ae>
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8006812:	f897 2066 	ldrb.w	r2, [r7, #102]	@ 0x66
 8006816:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 800681a:	4933      	ldr	r1, [pc, #204]	@ (80068e8 <process_control_request+0x524>)
 800681c:	0052      	lsls	r2, r2, #1
 800681e:	440a      	add	r2, r1
 8006820:	4413      	add	r3, r2
 8006822:	3314      	adds	r3, #20
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	76fb      	strb	r3, [r7, #27]
  usbd_class_driver_t const * driver = NULL;
 8006828:	2300      	movs	r3, #0
 800682a:	617b      	str	r3, [r7, #20]
  if ( drvid < _app_driver_count ) {
 800682c:	4b30      	ldr	r3, [pc, #192]	@ (80068f0 <process_control_request+0x52c>)
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	7efa      	ldrb	r2, [r7, #27]
 8006832:	429a      	cmp	r2, r3
 8006834:	d206      	bcs.n	8006844 <process_control_request+0x480>
    driver = &_app_driver[drvid];
 8006836:	4b2f      	ldr	r3, [pc, #188]	@ (80068f4 <process_control_request+0x530>)
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	7efb      	ldrb	r3, [r7, #27]
 800683c:	015b      	lsls	r3, r3, #5
 800683e:	4413      	add	r3, r2
 8006840:	617b      	str	r3, [r7, #20]
 8006842:	e00d      	b.n	8006860 <process_control_request+0x49c>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006844:	4b2a      	ldr	r3, [pc, #168]	@ (80068f0 <process_control_request+0x52c>)
 8006846:	781b      	ldrb	r3, [r3, #0]
 8006848:	1c5a      	adds	r2, r3, #1
 800684a:	7efb      	ldrb	r3, [r7, #27]
 800684c:	429a      	cmp	r2, r3
 800684e:	db07      	blt.n	8006860 <process_control_request+0x49c>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006850:	7efb      	ldrb	r3, [r7, #27]
 8006852:	4a27      	ldr	r2, [pc, #156]	@ (80068f0 <process_control_request+0x52c>)
 8006854:	7812      	ldrb	r2, [r2, #0]
 8006856:	1a9b      	subs	r3, r3, r2
 8006858:	015b      	lsls	r3, r3, #5
 800685a:	4a27      	ldr	r2, [pc, #156]	@ (80068f8 <process_control_request+0x534>)
 800685c:	4413      	add	r3, r2
 800685e:	617b      	str	r3, [r7, #20]
  return driver;
 8006860:	697b      	ldr	r3, [r7, #20]
      usbd_class_driver_t const * driver = get_driver(_usbd_dev.ep2drv[ep_num][ep_dir]);
 8006862:	663b      	str	r3, [r7, #96]	@ 0x60

      if ( TUSB_REQ_TYPE_STANDARD != p_request->bmRequestType_bit.type ) {
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	781b      	ldrb	r3, [r3, #0]
 8006868:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800686c:	b2db      	uxtb	r3, r3
 800686e:	2b00      	cmp	r3, #0
 8006870:	d00c      	beq.n	800688c <process_control_request+0x4c8>
        // Forward class request to its driver
        TU_VERIFY(driver);
 8006872:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006874:	2b00      	cmp	r3, #0
 8006876:	d101      	bne.n	800687c <process_control_request+0x4b8>
 8006878:	2300      	movs	r3, #0
 800687a:	e07a      	b.n	8006972 <process_control_request+0x5ae>
        return invoke_class_control(rhport, driver, p_request);
 800687c:	79fb      	ldrb	r3, [r7, #7]
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006882:	4618      	mov	r0, r3
 8006884:	f7ff fd86 	bl	8006394 <invoke_class_control>
 8006888:	4603      	mov	r3, r0
 800688a:	e072      	b.n	8006972 <process_control_request+0x5ae>
      } else {
        // Handle STD request to endpoint
        switch ( p_request->bRequest ) {
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	785b      	ldrb	r3, [r3, #1]
 8006890:	2b03      	cmp	r3, #3
 8006892:	d017      	beq.n	80068c4 <process_control_request+0x500>
 8006894:	2b03      	cmp	r3, #3
 8006896:	dc52      	bgt.n	800693e <process_control_request+0x57a>
 8006898:	2b00      	cmp	r3, #0
 800689a:	d002      	beq.n	80068a2 <process_control_request+0x4de>
 800689c:	2b01      	cmp	r3, #1
 800689e:	d011      	beq.n	80068c4 <process_control_request+0x500>
 80068a0:	e04d      	b.n	800693e <process_control_request+0x57a>
          case TUSB_REQ_GET_STATUS: {
            uint16_t status = usbd_edpt_stalled(rhport, ep_addr) ? 0x0001 : 0x0000;
 80068a2:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80068a6:	79fb      	ldrb	r3, [r7, #7]
 80068a8:	4611      	mov	r1, r2
 80068aa:	4618      	mov	r0, r3
 80068ac:	f000 fec8 	bl	8007640 <usbd_edpt_stalled>
 80068b0:	4603      	mov	r3, r0
 80068b2:	81bb      	strh	r3, [r7, #12]
            tud_control_xfer(rhport, p_request, &status, 2);
 80068b4:	f107 020c 	add.w	r2, r7, #12
 80068b8:	79f8      	ldrb	r0, [r7, #7]
 80068ba:	2302      	movs	r3, #2
 80068bc:	6839      	ldr	r1, [r7, #0]
 80068be:	f000 ff87 	bl	80077d0 <tud_control_xfer>
          }
          break;
 80068c2:	e048      	b.n	8006956 <process_control_request+0x592>

          case TUSB_REQ_CLEAR_FEATURE:
          case TUSB_REQ_SET_FEATURE: {
            if ( TUSB_REQ_FEATURE_EDPT_HALT == p_request->wValue ) {
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	885b      	ldrh	r3, [r3, #2]
 80068c8:	b29b      	uxth	r3, r3
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d11d      	bne.n	800690a <process_control_request+0x546>
              if ( TUSB_REQ_CLEAR_FEATURE ==  p_request->bRequest ) {
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	785b      	ldrb	r3, [r3, #1]
 80068d2:	2b01      	cmp	r3, #1
 80068d4:	d112      	bne.n	80068fc <process_control_request+0x538>
                usbd_edpt_clear_stall(rhport, ep_addr);
 80068d6:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 80068da:	79fb      	ldrb	r3, [r7, #7]
 80068dc:	4611      	mov	r1, r2
 80068de:	4618      	mov	r0, r3
 80068e0:	f000 fe70 	bl	80075c4 <usbd_edpt_clear_stall>
 80068e4:	e011      	b.n	800690a <process_control_request+0x546>
 80068e6:	bf00      	nop
 80068e8:	20000abc 	.word	0x20000abc
 80068ec:	e000edf0 	.word	0xe000edf0
 80068f0:	20000af0 	.word	0x20000af0
 80068f4:	20000aec 	.word	0x20000aec
 80068f8:	0800a764 	.word	0x0800a764
              }else {
                usbd_edpt_stall(rhport, ep_addr);
 80068fc:	f897 2067 	ldrb.w	r2, [r7, #103]	@ 0x67
 8006900:	79fb      	ldrb	r3, [r7, #7]
 8006902:	4611      	mov	r1, r2
 8006904:	4618      	mov	r0, r3
 8006906:	f000 fe1f 	bl	8007548 <usbd_edpt_stall>
              }
            }

            if (driver) {
 800690a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800690c:	2b00      	cmp	r3, #0
 800690e:	d021      	beq.n	8006954 <process_control_request+0x590>
              // Some classes such as USBTMC needs to clear/re-init its buffer when receiving CLEAR_FEATURE request
              // We will also forward std request targeted endpoint to class drivers as well

              // STD request must always be ACKed regardless of driver returned value
              // Also clear complete callback if driver set since it can also stall the request.
              (void) invoke_class_control(rhport, driver, p_request);
 8006910:	79fb      	ldrb	r3, [r7, #7]
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006916:	4618      	mov	r0, r3
 8006918:	f7ff fd3c 	bl	8006394 <invoke_class_control>
              usbd_control_set_complete_callback(NULL);
 800691c:	2000      	movs	r0, #0
 800691e:	f000 ffd3 	bl	80078c8 <usbd_control_set_complete_callback>

              // skip ZLP status if driver already did that
              if ( !_usbd_dev.ep_status[0][TUSB_DIR_IN].busy ) tud_control_status(rhport, p_request);
 8006922:	4b16      	ldr	r3, [pc, #88]	@ (800697c <process_control_request+0x5b8>)
 8006924:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006928:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d110      	bne.n	8006954 <process_control_request+0x590>
 8006932:	79fb      	ldrb	r3, [r7, #7]
 8006934:	6839      	ldr	r1, [r7, #0]
 8006936:	4618      	mov	r0, r3
 8006938:	f000 fed8 	bl	80076ec <tud_control_status>
            }
          }
          break;
 800693c:	e00a      	b.n	8006954 <process_control_request+0x590>

          // Unknown/Unsupported request
          default:
            TU_BREAKPOINT();
 800693e:	4b10      	ldr	r3, [pc, #64]	@ (8006980 <process_control_request+0x5bc>)
 8006940:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006942:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d000      	beq.n	8006950 <process_control_request+0x58c>
 800694e:	be00      	bkpt	0x0000
            return false;
 8006950:	2300      	movs	r3, #0
 8006952:	e00e      	b.n	8006972 <process_control_request+0x5ae>
          break;
 8006954:	bf00      	nop
        }
      }
    }
    break;
 8006956:	e00b      	b.n	8006970 <process_control_request+0x5ac>

    // Unknown recipient
    default:
      TU_BREAKPOINT();
 8006958:	4b09      	ldr	r3, [pc, #36]	@ (8006980 <process_control_request+0x5bc>)
 800695a:	637b      	str	r3, [r7, #52]	@ 0x34
 800695c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f003 0301 	and.w	r3, r3, #1
 8006964:	2b00      	cmp	r3, #0
 8006966:	d000      	beq.n	800696a <process_control_request+0x5a6>
 8006968:	be00      	bkpt	0x0000
      return false;
 800696a:	2300      	movs	r3, #0
 800696c:	e001      	b.n	8006972 <process_control_request+0x5ae>
      break;
 800696e:	bf00      	nop
  }

  return true;
 8006970:	2301      	movs	r3, #1
}
 8006972:	4618      	mov	r0, r3
 8006974:	3768      	adds	r7, #104	@ 0x68
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}
 800697a:	bf00      	nop
 800697c:	20000abc 	.word	0x20000abc
 8006980:	e000edf0 	.word	0xe000edf0

08006984 <process_set_config>:

// Process Set Configure Request
// This function parse configuration descriptor & open drivers accordingly
static bool process_set_config(uint8_t rhport, uint8_t cfg_num)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b096      	sub	sp, #88	@ 0x58
 8006988:	af00      	add	r7, sp, #0
 800698a:	4603      	mov	r3, r0
 800698c:	460a      	mov	r2, r1
 800698e:	71fb      	strb	r3, [r7, #7]
 8006990:	4613      	mov	r3, r2
 8006992:	71bb      	strb	r3, [r7, #6]
  // index is cfg_num-1
  tusb_desc_configuration_t const * desc_cfg = (tusb_desc_configuration_t const *) tud_descriptor_configuration_cb(cfg_num-1);
 8006994:	79bb      	ldrb	r3, [r7, #6]
 8006996:	3b01      	subs	r3, #1
 8006998:	b2db      	uxtb	r3, r3
 800699a:	4618      	mov	r0, r3
 800699c:	f7fb f818 	bl	80019d0 <tud_descriptor_configuration_cb>
 80069a0:	64f8      	str	r0, [r7, #76]	@ 0x4c
  TU_ASSERT(desc_cfg != NULL && desc_cfg->bDescriptorType == TUSB_DESC_CONFIGURATION);
 80069a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d003      	beq.n	80069b0 <process_set_config+0x2c>
 80069a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069aa:	785b      	ldrb	r3, [r3, #1]
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d00a      	beq.n	80069c6 <process_set_config+0x42>
 80069b0:	4b87      	ldr	r3, [pc, #540]	@ (8006bd0 <process_set_config+0x24c>)
 80069b2:	623b      	str	r3, [r7, #32]
 80069b4:	6a3b      	ldr	r3, [r7, #32]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0301 	and.w	r3, r3, #1
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d000      	beq.n	80069c2 <process_set_config+0x3e>
 80069c0:	be00      	bkpt	0x0000
 80069c2:	2300      	movs	r3, #0
 80069c4:	e100      	b.n	8006bc8 <process_set_config+0x244>

  // Parse configuration descriptor
  _usbd_dev.remote_wakeup_support = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_REMOTE_WAKEUP) ? 1u : 0u;
 80069c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069c8:	79db      	ldrb	r3, [r3, #7]
 80069ca:	115b      	asrs	r3, r3, #5
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	b2d9      	uxtb	r1, r3
 80069d2:	4a80      	ldr	r2, [pc, #512]	@ (8006bd4 <process_set_config+0x250>)
 80069d4:	7813      	ldrb	r3, [r2, #0]
 80069d6:	f361 1304 	bfi	r3, r1, #4, #1
 80069da:	7013      	strb	r3, [r2, #0]
  _usbd_dev.self_powered          = (desc_cfg->bmAttributes & TUSB_DESC_CONFIG_ATT_SELF_POWERED ) ? 1u : 0u;
 80069dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069de:	79db      	ldrb	r3, [r3, #7]
 80069e0:	119b      	asrs	r3, r3, #6
 80069e2:	f003 0301 	and.w	r3, r3, #1
 80069e6:	b2d9      	uxtb	r1, r3
 80069e8:	4a7a      	ldr	r2, [pc, #488]	@ (8006bd4 <process_set_config+0x250>)
 80069ea:	7813      	ldrb	r3, [r2, #0]
 80069ec:	f361 1345 	bfi	r3, r1, #5, #1
 80069f0:	7013      	strb	r3, [r2, #0]

  // Parse interface descriptor
  uint8_t const * p_desc   = ((uint8_t const*) desc_cfg) + sizeof(tusb_desc_configuration_t);
 80069f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069f4:	3309      	adds	r3, #9
 80069f6:	657b      	str	r3, [r7, #84]	@ 0x54
  uint8_t const * desc_end = ((uint8_t const*) desc_cfg) + tu_le16toh(desc_cfg->wTotalLength);
 80069f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80069fa:	885b      	ldrh	r3, [r3, #2]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	461a      	mov	r2, r3
 8006a00:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a02:	4413      	add	r3, r2
 8006a04:	64bb      	str	r3, [r7, #72]	@ 0x48

  while( p_desc < desc_end )
 8006a06:	e0d9      	b.n	8006bbc <process_set_config+0x238>
  {
    uint8_t assoc_itf_count = 1;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8006a0e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a10:	61fb      	str	r3, [r7, #28]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	3301      	adds	r3, #1
 8006a16:	781b      	ldrb	r3, [r3, #0]

    // Class will always starts with Interface Association (if any) and then Interface descriptor
    if ( TUSB_DESC_INTERFACE_ASSOCIATION == tu_desc_type(p_desc) )
 8006a18:	2b0b      	cmp	r3, #11
 8006a1a:	d10f      	bne.n	8006a3c <process_set_config+0xb8>
    {
      tusb_desc_interface_assoc_t const * desc_iad = (tusb_desc_interface_assoc_t const *) p_desc;
 8006a1c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a1e:	647b      	str	r3, [r7, #68]	@ 0x44
      assoc_itf_count = desc_iad->bInterfaceCount;
 8006a20:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006a22:	78db      	ldrb	r3, [r3, #3]
 8006a24:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
 8006a28:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a2a:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8006a2c:	69bb      	ldr	r3, [r7, #24]
 8006a2e:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8006a30:	697b      	ldr	r3, [r7, #20]
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	461a      	mov	r2, r3
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	4413      	add	r3, r2

      p_desc = tu_desc_next(p_desc); // next to Interface
 8006a3a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006a3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a3e:	613b      	str	r3, [r7, #16]
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	3301      	adds	r3, #1
 8006a44:	781b      	ldrb	r3, [r3, #0]
      // IAD's first interface number and class should match with opened interface
      //TU_ASSERT(desc_iad->bFirstInterface == desc_itf->bInterfaceNumber &&
      //          desc_iad->bFunctionClass  == desc_itf->bInterfaceClass);
    }

    TU_ASSERT( TUSB_DESC_INTERFACE == tu_desc_type(p_desc) );
 8006a46:	2b04      	cmp	r3, #4
 8006a48:	d00a      	beq.n	8006a60 <process_set_config+0xdc>
 8006a4a:	4b61      	ldr	r3, [pc, #388]	@ (8006bd0 <process_set_config+0x24c>)
 8006a4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d000      	beq.n	8006a5c <process_set_config+0xd8>
 8006a5a:	be00      	bkpt	0x0000
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	e0b3      	b.n	8006bc8 <process_set_config+0x244>
    tusb_desc_interface_t const * desc_itf = (tusb_desc_interface_t const*) p_desc;
 8006a60:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a62:	643b      	str	r3, [r7, #64]	@ 0x40

    // Find driver for this interface
    uint16_t const remaining_len = (uint16_t) (desc_end-p_desc);
 8006a64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006a66:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a68:	1ad3      	subs	r3, r2, r3
 8006a6a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    uint8_t drv_id;
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8006a72:	e089      	b.n	8006b88 <process_set_config+0x204>
 8006a74:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8006a78:	73fb      	strb	r3, [r7, #15]
  usbd_class_driver_t const * driver = NULL;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	60bb      	str	r3, [r7, #8]
  if ( drvid < _app_driver_count ) {
 8006a7e:	4b56      	ldr	r3, [pc, #344]	@ (8006bd8 <process_set_config+0x254>)
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	7bfa      	ldrb	r2, [r7, #15]
 8006a84:	429a      	cmp	r2, r3
 8006a86:	d206      	bcs.n	8006a96 <process_set_config+0x112>
    driver = &_app_driver[drvid];
 8006a88:	4b54      	ldr	r3, [pc, #336]	@ (8006bdc <process_set_config+0x258>)
 8006a8a:	681a      	ldr	r2, [r3, #0]
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
 8006a8e:	015b      	lsls	r3, r3, #5
 8006a90:	4413      	add	r3, r2
 8006a92:	60bb      	str	r3, [r7, #8]
 8006a94:	e00d      	b.n	8006ab2 <process_set_config+0x12e>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006a96:	4b50      	ldr	r3, [pc, #320]	@ (8006bd8 <process_set_config+0x254>)
 8006a98:	781b      	ldrb	r3, [r3, #0]
 8006a9a:	1c5a      	adds	r2, r3, #1
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
 8006a9e:	429a      	cmp	r2, r3
 8006aa0:	db07      	blt.n	8006ab2 <process_set_config+0x12e>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
 8006aa4:	4a4c      	ldr	r2, [pc, #304]	@ (8006bd8 <process_set_config+0x254>)
 8006aa6:	7812      	ldrb	r2, [r2, #0]
 8006aa8:	1a9b      	subs	r3, r3, r2
 8006aaa:	015b      	lsls	r3, r3, #5
 8006aac:	4a4c      	ldr	r2, [pc, #304]	@ (8006be0 <process_set_config+0x25c>)
 8006aae:	4413      	add	r3, r2
 8006ab0:	60bb      	str	r3, [r7, #8]
  return driver;
 8006ab2:	68bb      	ldr	r3, [r7, #8]
    {
      usbd_class_driver_t const *driver = get_driver(drv_id);
 8006ab4:	63bb      	str	r3, [r7, #56]	@ 0x38
      TU_ASSERT(driver);
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d10a      	bne.n	8006ad2 <process_set_config+0x14e>
 8006abc:	4b44      	ldr	r3, [pc, #272]	@ (8006bd0 <process_set_config+0x24c>)
 8006abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f003 0301 	and.w	r3, r3, #1
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d000      	beq.n	8006ace <process_set_config+0x14a>
 8006acc:	be00      	bkpt	0x0000
 8006ace:	2300      	movs	r3, #0
 8006ad0:	e07a      	b.n	8006bc8 <process_set_config+0x244>
      uint16_t const drv_len = driver->open(rhport, desc_itf, remaining_len);
 8006ad2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ad4:	691b      	ldr	r3, [r3, #16]
 8006ad6:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8006ad8:	79f8      	ldrb	r0, [r7, #7]
 8006ada:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006adc:	4798      	blx	r3
 8006ade:	4603      	mov	r3, r0
 8006ae0:	86fb      	strh	r3, [r7, #54]	@ 0x36

      if ( (sizeof(tusb_desc_interface_t) <= drv_len)  && (drv_len <= remaining_len) )
 8006ae2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006ae4:	2b08      	cmp	r3, #8
 8006ae6:	d94a      	bls.n	8006b7e <process_set_config+0x1fa>
 8006ae8:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006aea:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d846      	bhi.n	8006b7e <process_set_config+0x1fa>
        // Open successfully
        TU_LOG_USBD("  %s opened\r\n", driver->name);

        // Some drivers use 2 or more interfaces but may not have IAD e.g MIDI (always) or
        // BTH (even CDC) with class in device descriptor (single interface)
        if ( assoc_itf_count == 1)
 8006af0:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d107      	bne.n	8006b08 <process_set_config+0x184>
        {
          #if CFG_TUD_CDC
          if ( driver->open == cdcd_open ) assoc_itf_count = 2;
 8006af8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	4a39      	ldr	r2, [pc, #228]	@ (8006be4 <process_set_config+0x260>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d102      	bne.n	8006b08 <process_set_config+0x184>
 8006b02:	2302      	movs	r3, #2
 8006b04:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
          if ( driver->open == btd_open ) assoc_itf_count = 2;
          #endif
        }

        // bind (associated) interfaces to found driver
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8006b08:	2300      	movs	r3, #0
 8006b0a:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8006b0e:	e024      	b.n	8006b5a <process_set_config+0x1d6>
        {
          uint8_t const itf_num = desc_itf->bInterfaceNumber+i;
 8006b10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b12:	789a      	ldrb	r2, [r3, #2]
 8006b14:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8006b18:	4413      	add	r3, r2
 8006b1a:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35

          // Interface number must not be used already
          TU_ASSERT(DRVID_INVALID == _usbd_dev.itf2drv[itf_num]);
 8006b1e:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006b22:	4a2c      	ldr	r2, [pc, #176]	@ (8006bd4 <process_set_config+0x250>)
 8006b24:	4413      	add	r3, r2
 8006b26:	791b      	ldrb	r3, [r3, #4]
 8006b28:	2bff      	cmp	r3, #255	@ 0xff
 8006b2a:	d00a      	beq.n	8006b42 <process_set_config+0x1be>
 8006b2c:	4b28      	ldr	r3, [pc, #160]	@ (8006bd0 <process_set_config+0x24c>)
 8006b2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	f003 0301 	and.w	r3, r3, #1
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d000      	beq.n	8006b3e <process_set_config+0x1ba>
 8006b3c:	be00      	bkpt	0x0000
 8006b3e:	2300      	movs	r3, #0
 8006b40:	e042      	b.n	8006bc8 <process_set_config+0x244>
          _usbd_dev.itf2drv[itf_num] = drv_id;
 8006b42:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8006b46:	4a23      	ldr	r2, [pc, #140]	@ (8006bd4 <process_set_config+0x250>)
 8006b48:	4413      	add	r3, r2
 8006b4a:	f897 2052 	ldrb.w	r2, [r7, #82]	@ 0x52
 8006b4e:	711a      	strb	r2, [r3, #4]
        for(uint8_t i=0; i<assoc_itf_count; i++)
 8006b50:	f897 3051 	ldrb.w	r3, [r7, #81]	@ 0x51
 8006b54:	3301      	adds	r3, #1
 8006b56:	f887 3051 	strb.w	r3, [r7, #81]	@ 0x51
 8006b5a:	f897 2051 	ldrb.w	r2, [r7, #81]	@ 0x51
 8006b5e:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d3d4      	bcc.n	8006b10 <process_set_config+0x18c>
        }

        // bind all endpoints to found driver
        tu_edpt_bind_driver(_usbd_dev.ep2drv, desc_itf, drv_len, drv_id);
 8006b66:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8006b6a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8006b6c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b6e:	481e      	ldr	r0, [pc, #120]	@ (8006be8 <process_set_config+0x264>)
 8006b70:	f003 f81c 	bl	8009bac <tu_edpt_bind_driver>

        // next Interface
        p_desc += drv_len;
 8006b74:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8006b76:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b78:	4413      	add	r3, r2
 8006b7a:	657b      	str	r3, [r7, #84]	@ 0x54

        break; // exit driver find loop
 8006b7c:	e00c      	b.n	8006b98 <process_set_config+0x214>
    for (drv_id = 0; drv_id < TOTAL_DRIVER_COUNT; drv_id++)
 8006b7e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8006b82:	3301      	adds	r3, #1
 8006b84:	f887 3052 	strb.w	r3, [r7, #82]	@ 0x52
 8006b88:	4b13      	ldr	r3, [pc, #76]	@ (8006bd8 <process_set_config+0x254>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	1c5a      	adds	r2, r3, #1
 8006b8e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8006b92:	429a      	cmp	r2, r3
 8006b94:	f6bf af6e 	bge.w	8006a74 <process_set_config+0xf0>
      }
    }

    // Failed if there is no supported drivers
    TU_ASSERT(drv_id < TOTAL_DRIVER_COUNT);
 8006b98:	4b0f      	ldr	r3, [pc, #60]	@ (8006bd8 <process_set_config+0x254>)
 8006b9a:	781b      	ldrb	r3, [r3, #0]
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	f897 3052 	ldrb.w	r3, [r7, #82]	@ 0x52
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	da0a      	bge.n	8006bbc <process_set_config+0x238>
 8006ba6:	4b0a      	ldr	r3, [pc, #40]	@ (8006bd0 <process_set_config+0x24c>)
 8006ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006baa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 0301 	and.w	r3, r3, #1
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d000      	beq.n	8006bb8 <process_set_config+0x234>
 8006bb6:	be00      	bkpt	0x0000
 8006bb8:	2300      	movs	r3, #0
 8006bba:	e005      	b.n	8006bc8 <process_set_config+0x244>
  while( p_desc < desc_end )
 8006bbc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006bbe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006bc0:	429a      	cmp	r2, r3
 8006bc2:	f4ff af21 	bcc.w	8006a08 <process_set_config+0x84>
  }

  return true;
 8006bc6:	2301      	movs	r3, #1
}
 8006bc8:	4618      	mov	r0, r3
 8006bca:	3758      	adds	r7, #88	@ 0x58
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	bd80      	pop	{r7, pc}
 8006bd0:	e000edf0 	.word	0xe000edf0
 8006bd4:	20000abc 	.word	0x20000abc
 8006bd8:	20000af0 	.word	0x20000af0
 8006bdc:	20000aec 	.word	0x20000aec
 8006be0:	0800a764 	.word	0x0800a764
 8006be4:	08004119 	.word	0x08004119
 8006be8:	20000ad0 	.word	0x20000ad0

08006bec <process_get_descriptor>:

// return descriptor's buffer and update desc_len
static bool process_get_descriptor(uint8_t rhport, tusb_control_request_t const * p_request)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b094      	sub	sp, #80	@ 0x50
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	6039      	str	r1, [r7, #0]
 8006bf6:	71fb      	strb	r3, [r7, #7]
  tusb_desc_type_t const desc_type = (tusb_desc_type_t) tu_u16_high(p_request->wValue);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	885b      	ldrh	r3, [r3, #2]
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	84bb      	strh	r3, [r7, #36]	@ 0x24
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_high(uint16_t ui16) { return TU_U16_HIGH(ui16); }
 8006c00:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006c02:	0a1b      	lsrs	r3, r3, #8
 8006c04:	b29b      	uxth	r3, r3
 8006c06:	b2db      	uxtb	r3, r3
 8006c08:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  uint8_t const desc_index = tu_u16_low( p_request->wValue );
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	885b      	ldrh	r3, [r3, #2]
 8006c10:	b29b      	uxth	r3, r3
 8006c12:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u16_low (uint16_t ui16) { return TU_U16_LOW(ui16); }
 8006c14:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a

  switch(desc_type)
 8006c1c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8006c20:	3b01      	subs	r3, #1
 8006c22:	2b0e      	cmp	r3, #14
 8006c24:	f200 80b4 	bhi.w	8006d90 <process_get_descriptor+0x1a4>
 8006c28:	a201      	add	r2, pc, #4	@ (adr r2, 8006c30 <process_get_descriptor+0x44>)
 8006c2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c2e:	bf00      	nop
 8006c30:	08006c6d 	.word	0x08006c6d
 8006c34:	08006cd1 	.word	0x08006cd1
 8006c38:	08006d37 	.word	0x08006d37
 8006c3c:	08006d91 	.word	0x08006d91
 8006c40:	08006d91 	.word	0x08006d91
 8006c44:	08006d6b 	.word	0x08006d6b
 8006c48:	08006cd1 	.word	0x08006cd1
 8006c4c:	08006d91 	.word	0x08006d91
 8006c50:	08006d91 	.word	0x08006d91
 8006c54:	08006d91 	.word	0x08006d91
 8006c58:	08006d91 	.word	0x08006d91
 8006c5c:	08006d91 	.word	0x08006d91
 8006c60:	08006d91 	.word	0x08006d91
 8006c64:	08006d91 	.word	0x08006d91
 8006c68:	08006c9f 	.word	0x08006c9f
  {
    case TUSB_DESC_DEVICE: {
      TU_LOG_USBD(" Device\r\n");

      void* desc_device = (void*) (uintptr_t) tud_descriptor_device_cb();
 8006c6c:	f7fa fe98 	bl	80019a0 <tud_descriptor_device_cb>
 8006c70:	62f8      	str	r0, [r7, #44]	@ 0x2c
      TU_ASSERT(desc_device);
 8006c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10a      	bne.n	8006c8e <process_get_descriptor+0xa2>
 8006c78:	4b48      	ldr	r3, [pc, #288]	@ (8006d9c <process_get_descriptor+0x1b0>)
 8006c7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006c7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d000      	beq.n	8006c8a <process_get_descriptor+0x9e>
 8006c88:	be00      	bkpt	0x0000
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	e081      	b.n	8006d92 <process_get_descriptor+0x1a6>
        tusb_control_request_t mod_request = *p_request;
        mod_request.wLength = CFG_TUD_ENDPOINT0_SIZE;

        return tud_control_xfer(rhport, &mod_request, desc_device, CFG_TUD_ENDPOINT0_SIZE);
      }else {
        return tud_control_xfer(rhport, p_request, desc_device, sizeof(tusb_desc_device_t));
 8006c8e:	79f8      	ldrb	r0, [r7, #7]
 8006c90:	2312      	movs	r3, #18
 8006c92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c94:	6839      	ldr	r1, [r7, #0]
 8006c96:	f000 fd9b 	bl	80077d0 <tud_control_xfer>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	e079      	b.n	8006d92 <process_get_descriptor+0x1a6>

    case TUSB_DESC_BOS: {
      TU_LOG_USBD(" BOS\r\n");

      // requested by host if USB > 2.0 ( i.e 2.1 or 3.x )
      uintptr_t desc_bos = (uintptr_t) tud_descriptor_bos_cb();
 8006c9e:	f7fe ffe5 	bl	8005c6c <tud_descriptor_bos_cb>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	647b      	str	r3, [r7, #68]	@ 0x44
      TU_VERIFY(desc_bos);
 8006ca6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <process_get_descriptor+0xc4>
 8006cac:	2300      	movs	r3, #0
 8006cae:	e070      	b.n	8006d92 <process_get_descriptor+0x1a6>

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_bos + offsetof(tusb_desc_bos_t, wTotalLength))) );
 8006cb0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cb2:	3302      	adds	r3, #2
 8006cb4:	623b      	str	r3, [r7, #32]
  return *((uint16_t const *) mem);
 8006cb6:	6a3b      	ldr	r3, [r7, #32]
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

      return tud_control_xfer(rhport, p_request, (void*) desc_bos, total_len);
 8006cbe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006cc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 8006cc4:	79f8      	ldrb	r0, [r7, #7]
 8006cc6:	6839      	ldr	r1, [r7, #0]
 8006cc8:	f000 fd82 	bl	80077d0 <tud_control_xfer>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	e060      	b.n	8006d92 <process_get_descriptor+0x1a6>

    case TUSB_DESC_CONFIGURATION:
    case TUSB_DESC_OTHER_SPEED_CONFIG: {
      uintptr_t desc_config;

      if ( desc_type == TUSB_DESC_CONFIGURATION ) {
 8006cd0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d114      	bne.n	8006d02 <process_get_descriptor+0x116>
        TU_LOG_USBD(" Configuration[%u]\r\n", desc_index);
        desc_config = (uintptr_t) tud_descriptor_configuration_cb(desc_index);
 8006cd8:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fa fe77 	bl	80019d0 <tud_descriptor_configuration_cb>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_ASSERT(desc_config);
 8006ce6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d116      	bne.n	8006d1a <process_get_descriptor+0x12e>
 8006cec:	4b2b      	ldr	r3, [pc, #172]	@ (8006d9c <process_get_descriptor+0x1b0>)
 8006cee:	637b      	str	r3, [r7, #52]	@ 0x34
 8006cf0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f003 0301 	and.w	r3, r3, #1
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d000      	beq.n	8006cfe <process_get_descriptor+0x112>
 8006cfc:	be00      	bkpt	0x0000
 8006cfe:	2300      	movs	r3, #0
 8006d00:	e047      	b.n	8006d92 <process_get_descriptor+0x1a6>
      }else {
        // Host only request this after getting Device Qualifier descriptor
        TU_LOG_USBD(" Other Speed Configuration\r\n");
        desc_config = (uintptr_t) tud_descriptor_other_speed_configuration_cb(desc_index);
 8006d02:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8006d06:	4618      	mov	r0, r3
 8006d08:	f7fe ffc0 	bl	8005c8c <tud_descriptor_other_speed_configuration_cb>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        TU_VERIFY(desc_config);
 8006d10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d101      	bne.n	8006d1a <process_get_descriptor+0x12e>
 8006d16:	2300      	movs	r3, #0
 8006d18:	e03b      	b.n	8006d92 <process_get_descriptor+0x1a6>
      }

      // Use offsetof to avoid pointer to the odd/misaligned address
      uint16_t const total_len = tu_le16toh( tu_unaligned_read16((const void*) (desc_config + offsetof(tusb_desc_configuration_t, wTotalLength))) );
 8006d1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d1c:	3302      	adds	r3, #2
 8006d1e:	61fb      	str	r3, [r7, #28]
 8006d20:	69fb      	ldr	r3, [r7, #28]
 8006d22:	881b      	ldrh	r3, [r3, #0]
 8006d24:	867b      	strh	r3, [r7, #50]	@ 0x32

      return tud_control_xfer(rhport, p_request, (void*) desc_config, total_len);
 8006d26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006d28:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8006d2a:	79f8      	ldrb	r0, [r7, #7]
 8006d2c:	6839      	ldr	r1, [r7, #0]
 8006d2e:	f000 fd4f 	bl	80077d0 <tud_control_xfer>
 8006d32:	4603      	mov	r3, r0
 8006d34:	e02d      	b.n	8006d92 <process_get_descriptor+0x1a6>
    case TUSB_DESC_STRING:
    {
      TU_LOG_USBD(" String[%u]\r\n", desc_index);

      // String Descriptor always uses the desc set from user
      uint8_t const* desc_str = (uint8_t const*) tud_descriptor_string_cb(desc_index, tu_le16toh(p_request->wIndex));
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	889b      	ldrh	r3, [r3, #4]
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8006d40:	4611      	mov	r1, r2
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fa fe52 	bl	80019ec <tud_descriptor_string_cb>
 8006d48:	63b8      	str	r0, [r7, #56]	@ 0x38
      TU_VERIFY(desc_str);
 8006d4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d101      	bne.n	8006d54 <process_get_descriptor+0x168>
 8006d50:	2300      	movs	r3, #0
 8006d52:	e01e      	b.n	8006d92 <process_get_descriptor+0x1a6>
 8006d54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d56:	61bb      	str	r3, [r7, #24]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
 8006d58:	69bb      	ldr	r3, [r7, #24]
 8006d5a:	781b      	ldrb	r3, [r3, #0]

      // first byte of descriptor is its size
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_str, tu_desc_len(desc_str));
 8006d5c:	79f8      	ldrb	r0, [r7, #7]
 8006d5e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	f000 fd35 	bl	80077d0 <tud_control_xfer>
 8006d66:	4603      	mov	r3, r0
 8006d68:	e013      	b.n	8006d92 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    case TUSB_DESC_DEVICE_QUALIFIER: {
      TU_LOG_USBD(" Device Qualifier\r\n");
      uint8_t const* desc_qualifier = tud_descriptor_device_qualifier_cb();
 8006d6a:	f7fe ff87 	bl	8005c7c <tud_descriptor_device_qualifier_cb>
 8006d6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
      TU_VERIFY(desc_qualifier);
 8006d70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d101      	bne.n	8006d7a <process_get_descriptor+0x18e>
 8006d76:	2300      	movs	r3, #0
 8006d78:	e00b      	b.n	8006d92 <process_get_descriptor+0x1a6>
 8006d7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006d7c:	617b      	str	r3, [r7, #20]
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	781b      	ldrb	r3, [r3, #0]
      return tud_control_xfer(rhport, p_request, (void*) (uintptr_t) desc_qualifier, tu_desc_len(desc_qualifier));
 8006d82:	79f8      	ldrb	r0, [r7, #7]
 8006d84:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	f000 fd22 	bl	80077d0 <tud_control_xfer>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	e000      	b.n	8006d92 <process_get_descriptor+0x1a6>
    }
    // break; // unreachable

    default: return false;
 8006d90:	2300      	movs	r3, #0
  }
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3750      	adds	r7, #80	@ 0x50
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	e000edf0 	.word	0xe000edf0

08006da0 <dcd_event_handler>:

//--------------------------------------------------------------------+
// DCD Event Handler
//--------------------------------------------------------------------+
TU_ATTR_FAST_FUNC void dcd_event_handler(dcd_event_t const* event, bool in_isr) {
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b0a0      	sub	sp, #128	@ 0x80
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	460b      	mov	r3, r1
 8006daa:	70fb      	strb	r3, [r7, #3]
  bool send = false;
 8006dac:	2300      	movs	r3, #0
 8006dae:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  switch (event->event_id) {
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	785b      	ldrb	r3, [r3, #1]
 8006db6:	3b02      	subs	r3, #2
 8006db8:	2b04      	cmp	r3, #4
 8006dba:	f200 8175 	bhi.w	80070a8 <dcd_event_handler+0x308>
 8006dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8006dc4 <dcd_event_handler+0x24>)
 8006dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dc4:	08006dd9 	.word	0x08006dd9
 8006dc8:	08006e49 	.word	0x08006e49
 8006dcc:	08006e05 	.word	0x08006e05
 8006dd0:	08006e27 	.word	0x08006e27
 8006dd4:	08007075 	.word	0x08007075
    case DCD_EVENT_UNPLUGGED:
      _usbd_dev.connected = 0;
 8006dd8:	4aac      	ldr	r2, [pc, #688]	@ (800708c <dcd_event_handler+0x2ec>)
 8006dda:	7813      	ldrb	r3, [r2, #0]
 8006ddc:	f023 0301 	bic.w	r3, r3, #1
 8006de0:	7013      	strb	r3, [r2, #0]
      _usbd_dev.addressed = 0;
 8006de2:	4aaa      	ldr	r2, [pc, #680]	@ (800708c <dcd_event_handler+0x2ec>)
 8006de4:	7813      	ldrb	r3, [r2, #0]
 8006de6:	f023 0302 	bic.w	r3, r3, #2
 8006dea:	7013      	strb	r3, [r2, #0]
      _usbd_dev.cfg_num = 0;
 8006dec:	4ba7      	ldr	r3, [pc, #668]	@ (800708c <dcd_event_handler+0x2ec>)
 8006dee:	2200      	movs	r2, #0
 8006df0:	705a      	strb	r2, [r3, #1]
      _usbd_dev.suspended = 0;
 8006df2:	4aa6      	ldr	r2, [pc, #664]	@ (800708c <dcd_event_handler+0x2ec>)
 8006df4:	7813      	ldrb	r3, [r2, #0]
 8006df6:	f023 0304 	bic.w	r3, r3, #4
 8006dfa:	7013      	strb	r3, [r2, #0]
      send = true;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8006e02:	e15a      	b.n	80070ba <dcd_event_handler+0x31a>
    case DCD_EVENT_SUSPEND:
      // NOTE: When plugging/unplugging device, the D+/D- state are unstable and
      // can accidentally meet the SUSPEND condition ( Bus Idle for 3ms ).
      // In addition, some MCUs such as SAMD or boards that haven no VBUS detection cannot distinguish
      // suspended vs disconnected. We will skip handling SUSPEND/RESUME event if not currently connected
      if (_usbd_dev.connected) {
 8006e04:	4ba1      	ldr	r3, [pc, #644]	@ (800708c <dcd_event_handler+0x2ec>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e0c:	b2db      	uxtb	r3, r3
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	f000 814e 	beq.w	80070b0 <dcd_event_handler+0x310>
        _usbd_dev.suspended = 1;
 8006e14:	4a9d      	ldr	r2, [pc, #628]	@ (800708c <dcd_event_handler+0x2ec>)
 8006e16:	7813      	ldrb	r3, [r2, #0]
 8006e18:	f043 0304 	orr.w	r3, r3, #4
 8006e1c:	7013      	strb	r3, [r2, #0]
        send = true;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8006e24:	e144      	b.n	80070b0 <dcd_event_handler+0x310>

    case DCD_EVENT_RESUME:
      // skip event if not connected (especially required for SAMD)
      if (_usbd_dev.connected) {
 8006e26:	4b99      	ldr	r3, [pc, #612]	@ (800708c <dcd_event_handler+0x2ec>)
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	f000 813f 	beq.w	80070b4 <dcd_event_handler+0x314>
        _usbd_dev.suspended = 0;
 8006e36:	4a95      	ldr	r2, [pc, #596]	@ (800708c <dcd_event_handler+0x2ec>)
 8006e38:	7813      	ldrb	r3, [r2, #0]
 8006e3a:	f023 0304 	bic.w	r3, r3, #4
 8006e3e:	7013      	strb	r3, [r2, #0]
        send = true;
 8006e40:	2301      	movs	r3, #1
 8006e42:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      }
      break;
 8006e46:	e135      	b.n	80070b4 <dcd_event_handler+0x314>

    case DCD_EVENT_SOF:
      // SOF driver handler in ISR context
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006e48:	2300      	movs	r3, #0
 8006e4a:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8006e4e:	e039      	b.n	8006ec4 <dcd_event_handler+0x124>
 8006e50:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006e54:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
  usbd_class_driver_t const * driver = NULL;
 8006e58:	2300      	movs	r3, #0
 8006e5a:	673b      	str	r3, [r7, #112]	@ 0x70
  if ( drvid < _app_driver_count ) {
 8006e5c:	4b8c      	ldr	r3, [pc, #560]	@ (8007090 <dcd_event_handler+0x2f0>)
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	f897 2077 	ldrb.w	r2, [r7, #119]	@ 0x77
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d207      	bcs.n	8006e78 <dcd_event_handler+0xd8>
    driver = &_app_driver[drvid];
 8006e68:	4b8a      	ldr	r3, [pc, #552]	@ (8007094 <dcd_event_handler+0x2f4>)
 8006e6a:	681a      	ldr	r2, [r3, #0]
 8006e6c:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006e70:	015b      	lsls	r3, r3, #5
 8006e72:	4413      	add	r3, r2
 8006e74:	673b      	str	r3, [r7, #112]	@ 0x70
 8006e76:	e00f      	b.n	8006e98 <dcd_event_handler+0xf8>
  } else if ( drvid < TOTAL_DRIVER_COUNT && BUILTIN_DRIVER_COUNT > 0 ){
 8006e78:	4b85      	ldr	r3, [pc, #532]	@ (8007090 <dcd_event_handler+0x2f0>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	1c5a      	adds	r2, r3, #1
 8006e7e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006e82:	429a      	cmp	r2, r3
 8006e84:	db08      	blt.n	8006e98 <dcd_event_handler+0xf8>
    driver = &_usbd_driver[drvid - _app_driver_count];
 8006e86:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8006e8a:	4a81      	ldr	r2, [pc, #516]	@ (8007090 <dcd_event_handler+0x2f0>)
 8006e8c:	7812      	ldrb	r2, [r2, #0]
 8006e8e:	1a9b      	subs	r3, r3, r2
 8006e90:	015b      	lsls	r3, r3, #5
 8006e92:	4a81      	ldr	r2, [pc, #516]	@ (8007098 <dcd_event_handler+0x2f8>)
 8006e94:	4413      	add	r3, r2
 8006e96:	673b      	str	r3, [r7, #112]	@ 0x70
  return driver;
 8006e98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
        usbd_class_driver_t const* driver = get_driver(i);
 8006e9a:	67bb      	str	r3, [r7, #120]	@ 0x78
        if (driver && driver->sof) {
 8006e9c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d00b      	beq.n	8006eba <dcd_event_handler+0x11a>
 8006ea2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d007      	beq.n	8006eba <dcd_event_handler+0x11a>
          driver->sof(event->rhport, event->sof.frame_count);
 8006eaa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006eac:	69db      	ldr	r3, [r3, #28]
 8006eae:	687a      	ldr	r2, [r7, #4]
 8006eb0:	7810      	ldrb	r0, [r2, #0]
 8006eb2:	687a      	ldr	r2, [r7, #4]
 8006eb4:	6852      	ldr	r2, [r2, #4]
 8006eb6:	4611      	mov	r1, r2
 8006eb8:	4798      	blx	r3
      for (uint8_t i = 0; i < TOTAL_DRIVER_COUNT; i++) {
 8006eba:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006ebe:	3301      	adds	r3, #1
 8006ec0:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
 8006ec4:	4b72      	ldr	r3, [pc, #456]	@ (8007090 <dcd_event_handler+0x2f0>)
 8006ec6:	781b      	ldrb	r3, [r3, #0]
 8006ec8:	1c5a      	adds	r2, r3, #1
 8006eca:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	dabe      	bge.n	8006e50 <dcd_event_handler+0xb0>
        }
      }

      // Some MCUs after running dcd_remote_wakeup() does not have way to detect the end of remote wakeup
      // which last 1-15 ms. DCD can use SOF as a clear indicator that bus is back to operational
      if (_usbd_dev.suspended) {
 8006ed2:	4b6e      	ldr	r3, [pc, #440]	@ (800708c <dcd_event_handler+0x2ec>)
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006eda:	b2db      	uxtb	r3, r3
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d05a      	beq.n	8006f96 <dcd_event_handler+0x1f6>
        _usbd_dev.suspended = 0;
 8006ee0:	4a6a      	ldr	r2, [pc, #424]	@ (800708c <dcd_event_handler+0x2ec>)
 8006ee2:	7813      	ldrb	r3, [r2, #0]
 8006ee4:	f023 0304 	bic.w	r3, r3, #4
 8006ee8:	7013      	strb	r3, [r2, #0]

        dcd_event_t const event_resume = {.rhport = event->rhport, .event_id = DCD_EVENT_RESUME};
 8006eea:	f107 0314 	add.w	r3, r7, #20
 8006eee:	2200      	movs	r2, #0
 8006ef0:	601a      	str	r2, [r3, #0]
 8006ef2:	605a      	str	r2, [r3, #4]
 8006ef4:	609a      	str	r2, [r3, #8]
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	781b      	ldrb	r3, [r3, #0]
 8006efa:	753b      	strb	r3, [r7, #20]
 8006efc:	2305      	movs	r3, #5
 8006efe:	757b      	strb	r3, [r7, #21]
 8006f00:	f107 0314 	add.w	r3, r7, #20
 8006f04:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006f06:	78fb      	ldrb	r3, [r7, #3]
 8006f08:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8006f0c:	4b63      	ldr	r3, [pc, #396]	@ (800709c <dcd_event_handler+0x2fc>)
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	667b      	str	r3, [r7, #100]	@ 0x64
 8006f12:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f14:	663b      	str	r3, [r7, #96]	@ 0x60
 8006f16:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8006f1a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
}

TU_ATTR_ALWAYS_INLINE static inline bool osal_queue_send(osal_queue_t qhdl, void const* data, bool in_isr) {
  if (!in_isr) {
 8006f1e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f22:	f083 0301 	eor.w	r3, r3, #1
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d003      	beq.n	8006f34 <dcd_event_handler+0x194>
    qhdl->interrupt_set(false);
 8006f2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	2000      	movs	r0, #0
 8006f32:	4798      	blx	r3
  }

  const bool success = tu_fifo_write(&qhdl->ff, data);
 8006f34:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f36:	3304      	adds	r3, #4
 8006f38:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	f7fe fde9 	bl	8005b12 <tu_fifo_write>
 8006f40:	4603      	mov	r3, r0
 8006f42:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e

  if (!in_isr) {
 8006f46:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8006f4a:	f083 0301 	eor.w	r3, r3, #1
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d003      	beq.n	8006f5c <dcd_event_handler+0x1bc>
    qhdl->interrupt_set(true);
 8006f54:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	2001      	movs	r0, #1
 8006f5a:	4798      	blx	r3
  }

  return success;
 8006f5c:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 8006f60:	f083 0301 	eor.w	r3, r3, #1
 8006f64:	b2db      	uxtb	r3, r3
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d009      	beq.n	8006f7e <dcd_event_handler+0x1de>
 8006f6a:	4b4d      	ldr	r3, [pc, #308]	@ (80070a0 <dcd_event_handler+0x300>)
 8006f6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006f6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0301 	and.w	r3, r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00c      	beq.n	8006f94 <dcd_event_handler+0x1f4>
 8006f7a:	be00      	bkpt	0x0000
 8006f7c:	e00a      	b.n	8006f94 <dcd_event_handler+0x1f4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 8006f7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f80:	7818      	ldrb	r0, [r3, #0]
 8006f82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006f84:	785b      	ldrb	r3, [r3, #1]
 8006f86:	4619      	mov	r1, r3
 8006f88:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8006f8c:	461a      	mov	r2, r3
 8006f8e:	f7fe fe55 	bl	8005c3c <tud_event_hook_cb>
  return true;
 8006f92:	e000      	b.n	8006f96 <dcd_event_handler+0x1f6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8006f94:	bf00      	nop
        queue_event(&event_resume, in_isr);
      }

      if (tu_bit_test(_usbd_dev.sof_consumer, SOF_CONSUMER_USER)) {
 8006f96:	4b3d      	ldr	r3, [pc, #244]	@ (800708c <dcd_event_handler+0x2ec>)
 8006f98:	78db      	ldrb	r3, [r3, #3]
 8006f9a:	b2db      	uxtb	r3, r3
 8006f9c:	657b      	str	r3, [r7, #84]	@ 0x54
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
TU_ATTR_ALWAYS_INLINE static inline bool     tu_bit_test (uint32_t value, uint8_t pos) { return (value & TU_BIT(pos)) ? true : false; }
 8006fa4:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8006fa8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006faa:	fa22 f303 	lsr.w	r3, r2, r3
 8006fae:	f003 0301 	and.w	r3, r3, #1
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	bf14      	ite	ne
 8006fb6:	2301      	movne	r3, #1
 8006fb8:	2300      	moveq	r3, #0
 8006fba:	b2db      	uxtb	r3, r3
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d07b      	beq.n	80070b8 <dcd_event_handler+0x318>
        dcd_event_t const event_sof = {.rhport = event->rhport, .event_id = DCD_EVENT_SOF, .sof.frame_count = event->sof.frame_count};
 8006fc0:	f107 0308 	add.w	r3, r7, #8
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	601a      	str	r2, [r3, #0]
 8006fc8:	605a      	str	r2, [r3, #4]
 8006fca:	609a      	str	r2, [r3, #8]
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	723b      	strb	r3, [r7, #8]
 8006fd2:	2303      	movs	r3, #3
 8006fd4:	727b      	strb	r3, [r7, #9]
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	60fb      	str	r3, [r7, #12]
 8006fdc:	f107 0308 	add.w	r3, r7, #8
 8006fe0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fe2:	78fb      	ldrb	r3, [r7, #3]
 8006fe4:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8006fe8:	4b2c      	ldr	r3, [pc, #176]	@ (800709c <dcd_event_handler+0x2fc>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	647b      	str	r3, [r7, #68]	@ 0x44
 8006fee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ff0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ff2:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8006ff6:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (!in_isr) {
 8006ffa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8006ffe:	f083 0301 	eor.w	r3, r3, #1
 8007002:	b2db      	uxtb	r3, r3
 8007004:	2b00      	cmp	r3, #0
 8007006:	d003      	beq.n	8007010 <dcd_event_handler+0x270>
    qhdl->interrupt_set(false);
 8007008:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	2000      	movs	r0, #0
 800700e:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 8007010:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007012:	3304      	adds	r3, #4
 8007014:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007016:	4618      	mov	r0, r3
 8007018:	f7fe fd7b 	bl	8005b12 <tu_fifo_write>
 800701c:	4603      	mov	r3, r0
 800701e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  if (!in_isr) {
 8007022:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8007026:	f083 0301 	eor.w	r3, r3, #1
 800702a:	b2db      	uxtb	r3, r3
 800702c:	2b00      	cmp	r3, #0
 800702e:	d003      	beq.n	8007038 <dcd_event_handler+0x298>
    qhdl->interrupt_set(true);
 8007030:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	2001      	movs	r0, #1
 8007036:	4798      	blx	r3
  return success;
 8007038:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800703c:	f083 0301 	eor.w	r3, r3, #1
 8007040:	b2db      	uxtb	r3, r3
 8007042:	2b00      	cmp	r3, #0
 8007044:	d009      	beq.n	800705a <dcd_event_handler+0x2ba>
 8007046:	4b16      	ldr	r3, [pc, #88]	@ (80070a0 <dcd_event_handler+0x300>)
 8007048:	63bb      	str	r3, [r7, #56]	@ 0x38
 800704a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	d00c      	beq.n	8007070 <dcd_event_handler+0x2d0>
 8007056:	be00      	bkpt	0x0000
 8007058:	e00a      	b.n	8007070 <dcd_event_handler+0x2d0>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 800705a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800705c:	7818      	ldrb	r0, [r3, #0]
 800705e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007060:	785b      	ldrb	r3, [r3, #1]
 8007062:	4619      	mov	r1, r3
 8007064:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8007068:	461a      	mov	r2, r3
 800706a:	f7fe fde7 	bl	8005c3c <tud_event_hook_cb>
  return true;
 800706e:	e000      	b.n	8007072 <dcd_event_handler+0x2d2>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8007070:	bf00      	nop
        queue_event(&event_sof, in_isr);
      }
      break;
 8007072:	e021      	b.n	80070b8 <dcd_event_handler+0x318>

    case DCD_EVENT_SETUP_RECEIVED:
      _usbd_queued_setup++;
 8007074:	4b0b      	ldr	r3, [pc, #44]	@ (80070a4 <dcd_event_handler+0x304>)
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	b2db      	uxtb	r3, r3
 800707a:	3301      	adds	r3, #1
 800707c:	b2da      	uxtb	r2, r3
 800707e:	4b09      	ldr	r3, [pc, #36]	@ (80070a4 <dcd_event_handler+0x304>)
 8007080:	701a      	strb	r2, [r3, #0]
      send = true;
 8007082:	2301      	movs	r3, #1
 8007084:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 8007088:	e017      	b.n	80070ba <dcd_event_handler+0x31a>
 800708a:	bf00      	nop
 800708c:	20000abc 	.word	0x20000abc
 8007090:	20000af0 	.word	0x20000af0
 8007094:	20000aec 	.word	0x20000aec
 8007098:	0800a764 	.word	0x0800a764
 800709c:	20000bb4 	.word	0x20000bb4
 80070a0:	e000edf0 	.word	0xe000edf0
 80070a4:	20000ae8 	.word	0x20000ae8

    default:
      send = true;
 80070a8:	2301      	movs	r3, #1
 80070aa:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
      break;
 80070ae:	e004      	b.n	80070ba <dcd_event_handler+0x31a>
      break;
 80070b0:	bf00      	nop
 80070b2:	e002      	b.n	80070ba <dcd_event_handler+0x31a>
      break;
 80070b4:	bf00      	nop
 80070b6:	e000      	b.n	80070ba <dcd_event_handler+0x31a>
      break;
 80070b8:	bf00      	nop
  }

  if (send) {
 80070ba:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d049      	beq.n	8007156 <dcd_event_handler+0x3b6>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80070c6:	78fb      	ldrb	r3, [r7, #3]
 80070c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 80070cc:	4b24      	ldr	r3, [pc, #144]	@ (8007160 <dcd_event_handler+0x3c0>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80070d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80070d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80070d6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80070da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (!in_isr) {
 80070de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80070e2:	f083 0301 	eor.w	r3, r3, #1
 80070e6:	b2db      	uxtb	r3, r3
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d003      	beq.n	80070f4 <dcd_event_handler+0x354>
    qhdl->interrupt_set(false);
 80070ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2000      	movs	r0, #0
 80070f2:	4798      	blx	r3
  const bool success = tu_fifo_write(&qhdl->ff, data);
 80070f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80070f6:	3304      	adds	r3, #4
 80070f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fe fd09 	bl	8005b12 <tu_fifo_write>
 8007100:	4603      	mov	r3, r0
 8007102:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  if (!in_isr) {
 8007106:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800710a:	f083 0301 	eor.w	r3, r3, #1
 800710e:	b2db      	uxtb	r3, r3
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <dcd_event_handler+0x37c>
    qhdl->interrupt_set(true);
 8007114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2001      	movs	r0, #1
 800711a:	4798      	blx	r3
  return success;
 800711c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007120:	f083 0301 	eor.w	r3, r3, #1
 8007124:	b2db      	uxtb	r3, r3
 8007126:	2b00      	cmp	r3, #0
 8007128:	d009      	beq.n	800713e <dcd_event_handler+0x39e>
 800712a:	4b0e      	ldr	r3, [pc, #56]	@ (8007164 <dcd_event_handler+0x3c4>)
 800712c:	623b      	str	r3, [r7, #32]
 800712e:	6a3b      	ldr	r3, [r7, #32]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f003 0301 	and.w	r3, r3, #1
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00c      	beq.n	8007154 <dcd_event_handler+0x3b4>
 800713a:	be00      	bkpt	0x0000
 800713c:	e00a      	b.n	8007154 <dcd_event_handler+0x3b4>
  tud_event_hook_cb(event->rhport, event->event_id, in_isr);
 800713e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007140:	7818      	ldrb	r0, [r3, #0]
 8007142:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007144:	785b      	ldrb	r3, [r3, #1]
 8007146:	4619      	mov	r1, r3
 8007148:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800714c:	461a      	mov	r2, r3
 800714e:	f7fe fd75 	bl	8005c3c <tud_event_hook_cb>
  return true;
 8007152:	e000      	b.n	8007156 <dcd_event_handler+0x3b6>
  TU_ASSERT(osal_queue_send(_usbd_q, event, in_isr));
 8007154:	bf00      	nop
    queue_event(event, in_isr);
  }
}
 8007156:	bf00      	nop
 8007158:	3780      	adds	r7, #128	@ 0x80
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}
 800715e:	bf00      	nop
 8007160:	20000bb4 	.word	0x20000bb4
 8007164:	e000edf0 	.word	0xe000edf0

08007168 <usbd_int_set>:

//--------------------------------------------------------------------+
// USBD API For Class Driver
//--------------------------------------------------------------------+

void usbd_int_set(bool enabled) {
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	4603      	mov	r3, r0
 8007170:	71fb      	strb	r3, [r7, #7]
  if (enabled) {
 8007172:	79fb      	ldrb	r3, [r7, #7]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d005      	beq.n	8007184 <usbd_int_set+0x1c>
    dcd_int_enable(_usbd_rhport);
 8007178:	4b07      	ldr	r3, [pc, #28]	@ (8007198 <usbd_int_set+0x30>)
 800717a:	781b      	ldrb	r3, [r3, #0]
 800717c:	4618      	mov	r0, r3
 800717e:	f001 f929 	bl	80083d4 <dcd_int_enable>
  } else {
    dcd_int_disable(_usbd_rhport);
  }
}
 8007182:	e004      	b.n	800718e <usbd_int_set+0x26>
    dcd_int_disable(_usbd_rhport);
 8007184:	4b04      	ldr	r3, [pc, #16]	@ (8007198 <usbd_int_set+0x30>)
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	4618      	mov	r0, r3
 800718a:	f001 f94b 	bl	8008424 <dcd_int_disable>
}
 800718e:	bf00      	nop
 8007190:	3708      	adds	r7, #8
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	2000006d 	.word	0x2000006d

0800719c <usbd_spin_lock>:

void usbd_spin_lock(bool in_isr) {
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	4603      	mov	r3, r0
 80071a4:	71fb      	strb	r3, [r7, #7]
 80071a6:	4b09      	ldr	r3, [pc, #36]	@ (80071cc <usbd_spin_lock+0x30>)
 80071a8:	60fb      	str	r3, [r7, #12]
 80071aa:	79fb      	ldrb	r3, [r7, #7]
 80071ac:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 80071ae:	7afb      	ldrb	r3, [r7, #11]
 80071b0:	f083 0301 	eor.w	r3, r3, #1
 80071b4:	b2db      	uxtb	r3, r3
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d003      	beq.n	80071c2 <usbd_spin_lock+0x26>
    ctx->interrupt_set(false);
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2000      	movs	r0, #0
 80071c0:	4798      	blx	r3
}
 80071c2:	bf00      	nop
  osal_spin_lock(&_usbd_spin, in_isr);
}
 80071c4:	bf00      	nop
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}
 80071cc:	20000070 	.word	0x20000070

080071d0 <usbd_spin_unlock>:
void usbd_spin_unlock(bool in_isr) {
 80071d0:	b580      	push	{r7, lr}
 80071d2:	b084      	sub	sp, #16
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	4603      	mov	r3, r0
 80071d8:	71fb      	strb	r3, [r7, #7]
 80071da:	4b09      	ldr	r3, [pc, #36]	@ (8007200 <usbd_spin_unlock+0x30>)
 80071dc:	60fb      	str	r3, [r7, #12]
 80071de:	79fb      	ldrb	r3, [r7, #7]
 80071e0:	72fb      	strb	r3, [r7, #11]
  if (!in_isr) {
 80071e2:	7afb      	ldrb	r3, [r7, #11]
 80071e4:	f083 0301 	eor.w	r3, r3, #1
 80071e8:	b2db      	uxtb	r3, r3
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d003      	beq.n	80071f6 <usbd_spin_unlock+0x26>
    ctx->interrupt_set(true);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	2001      	movs	r0, #1
 80071f4:	4798      	blx	r3
}
 80071f6:	bf00      	nop
  osal_spin_unlock(&_usbd_spin, in_isr);
}
 80071f8:	bf00      	nop
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}
 8007200:	20000070 	.word	0x20000070

08007204 <usbd_open_edpt_pair>:

// Parse consecutive endpoint descriptors (IN & OUT)
bool usbd_open_edpt_pair(uint8_t rhport, uint8_t const* p_desc, uint8_t ep_count, uint8_t xfer_type, uint8_t* ep_out, uint8_t* ep_in)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b08a      	sub	sp, #40	@ 0x28
 8007208:	af00      	add	r7, sp, #0
 800720a:	6039      	str	r1, [r7, #0]
 800720c:	4611      	mov	r1, r2
 800720e:	461a      	mov	r2, r3
 8007210:	4603      	mov	r3, r0
 8007212:	71fb      	strb	r3, [r7, #7]
 8007214:	460b      	mov	r3, r1
 8007216:	71bb      	strb	r3, [r7, #6]
 8007218:	4613      	mov	r3, r2
 800721a:	717b      	strb	r3, [r7, #5]
  for(int i=0; i<ep_count; i++)
 800721c:	2300      	movs	r3, #0
 800721e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007220:	e04d      	b.n	80072be <usbd_open_edpt_pair+0xba>
  {
    tusb_desc_endpoint_t const * desc_ep = (tusb_desc_endpoint_t const *) p_desc;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	623b      	str	r3, [r7, #32]

    TU_ASSERT(TUSB_DESC_ENDPOINT == desc_ep->bDescriptorType && xfer_type == desc_ep->bmAttributes.xfer);
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	785b      	ldrb	r3, [r3, #1]
 800722a:	2b05      	cmp	r3, #5
 800722c:	d108      	bne.n	8007240 <usbd_open_edpt_pair+0x3c>
 800722e:	6a3b      	ldr	r3, [r7, #32]
 8007230:	78db      	ldrb	r3, [r3, #3]
 8007232:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007236:	b2db      	uxtb	r3, r3
 8007238:	461a      	mov	r2, r3
 800723a:	797b      	ldrb	r3, [r7, #5]
 800723c:	4293      	cmp	r3, r2
 800723e:	d00a      	beq.n	8007256 <usbd_open_edpt_pair+0x52>
 8007240:	4b23      	ldr	r3, [pc, #140]	@ (80072d0 <usbd_open_edpt_pair+0xcc>)
 8007242:	61bb      	str	r3, [r7, #24]
 8007244:	69bb      	ldr	r3, [r7, #24]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	2b00      	cmp	r3, #0
 800724e:	d000      	beq.n	8007252 <usbd_open_edpt_pair+0x4e>
 8007250:	be00      	bkpt	0x0000
 8007252:	2300      	movs	r3, #0
 8007254:	e038      	b.n	80072c8 <usbd_open_edpt_pair+0xc4>
    TU_ASSERT(usbd_edpt_open(rhport, desc_ep));
 8007256:	79fb      	ldrb	r3, [r7, #7]
 8007258:	6a39      	ldr	r1, [r7, #32]
 800725a:	4618      	mov	r0, r3
 800725c:	f000 f83a 	bl	80072d4 <usbd_edpt_open>
 8007260:	4603      	mov	r3, r0
 8007262:	f083 0301 	eor.w	r3, r3, #1
 8007266:	b2db      	uxtb	r3, r3
 8007268:	2b00      	cmp	r3, #0
 800726a:	d00a      	beq.n	8007282 <usbd_open_edpt_pair+0x7e>
 800726c:	4b18      	ldr	r3, [pc, #96]	@ (80072d0 <usbd_open_edpt_pair+0xcc>)
 800726e:	61fb      	str	r3, [r7, #28]
 8007270:	69fb      	ldr	r3, [r7, #28]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	2b00      	cmp	r3, #0
 800727a:	d000      	beq.n	800727e <usbd_open_edpt_pair+0x7a>
 800727c:	be00      	bkpt	0x0000
 800727e:	2300      	movs	r3, #0
 8007280:	e022      	b.n	80072c8 <usbd_open_edpt_pair+0xc4>

    if ( tu_edpt_dir(desc_ep->bEndpointAddress) == TUSB_DIR_IN )
 8007282:	6a3b      	ldr	r3, [r7, #32]
 8007284:	789b      	ldrb	r3, [r3, #2]
 8007286:	75fb      	strb	r3, [r7, #23]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007288:	7dfb      	ldrb	r3, [r7, #23]
 800728a:	09db      	lsrs	r3, r3, #7
 800728c:	b2db      	uxtb	r3, r3
 800728e:	2b01      	cmp	r3, #1
 8007290:	d104      	bne.n	800729c <usbd_open_edpt_pair+0x98>
    {
      (*ep_in) = desc_ep->bEndpointAddress;
 8007292:	6a3b      	ldr	r3, [r7, #32]
 8007294:	789a      	ldrb	r2, [r3, #2]
 8007296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007298:	701a      	strb	r2, [r3, #0]
 800729a:	e003      	b.n	80072a4 <usbd_open_edpt_pair+0xa0>
    }else
    {
      (*ep_out) = desc_ep->bEndpointAddress;
 800729c:	6a3b      	ldr	r3, [r7, #32]
 800729e:	789a      	ldrb	r2, [r3, #2]
 80072a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a2:	701a      	strb	r2, [r3, #0]
 80072a4:	683b      	ldr	r3, [r7, #0]
 80072a6:	613b      	str	r3, [r7, #16]
  uint8_t const* desc8 = (uint8_t const*) desc;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	60fb      	str	r3, [r7, #12]
  return desc8 + desc8[DESC_OFFSET_LEN];
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	781b      	ldrb	r3, [r3, #0]
 80072b0:	461a      	mov	r2, r3
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	4413      	add	r3, r2
    }

    p_desc = tu_desc_next(p_desc);
 80072b6:	603b      	str	r3, [r7, #0]
  for(int i=0; i<ep_count; i++)
 80072b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ba:	3301      	adds	r3, #1
 80072bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80072be:	79bb      	ldrb	r3, [r7, #6]
 80072c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072c2:	429a      	cmp	r2, r3
 80072c4:	dbad      	blt.n	8007222 <usbd_open_edpt_pair+0x1e>
  }

  return true;
 80072c6:	2301      	movs	r3, #1
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3728      	adds	r7, #40	@ 0x28
 80072cc:	46bd      	mov	sp, r7
 80072ce:	bd80      	pop	{r7, pc}
 80072d0:	e000edf0 	.word	0xe000edf0

080072d4 <usbd_edpt_open>:

//--------------------------------------------------------------------+
// USBD Endpoint API
//--------------------------------------------------------------------+

bool usbd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_ep) {
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b086      	sub	sp, #24
 80072d8:	af00      	add	r7, sp, #0
 80072da:	4603      	mov	r3, r0
 80072dc:	6039      	str	r1, [r7, #0]
 80072de:	71fb      	strb	r3, [r7, #7]
  rhport = _usbd_rhport;
 80072e0:	4b1c      	ldr	r3, [pc, #112]	@ (8007354 <usbd_edpt_open+0x80>)
 80072e2:	781b      	ldrb	r3, [r3, #0]
 80072e4:	71fb      	strb	r3, [r7, #7]

  TU_ASSERT(tu_edpt_number(desc_ep->bEndpointAddress) < CFG_TUD_ENDPPOINT_MAX);
 80072e6:	683b      	ldr	r3, [r7, #0]
 80072e8:	789b      	ldrb	r3, [r3, #2]
 80072ea:	73fb      	strb	r3, [r7, #15]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
 80072ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b05      	cmp	r3, #5
 80072f6:	d90a      	bls.n	800730e <usbd_edpt_open+0x3a>
 80072f8:	4b17      	ldr	r3, [pc, #92]	@ (8007358 <usbd_edpt_open+0x84>)
 80072fa:	613b      	str	r3, [r7, #16]
 80072fc:	693b      	ldr	r3, [r7, #16]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	2b00      	cmp	r3, #0
 8007306:	d000      	beq.n	800730a <usbd_edpt_open+0x36>
 8007308:	be00      	bkpt	0x0000
 800730a:	2300      	movs	r3, #0
 800730c:	e01d      	b.n	800734a <usbd_edpt_open+0x76>
  TU_ASSERT(tu_edpt_validate(desc_ep, (tusb_speed_t) _usbd_dev.speed, false));
 800730e:	4b13      	ldr	r3, [pc, #76]	@ (800735c <usbd_edpt_open+0x88>)
 8007310:	789b      	ldrb	r3, [r3, #2]
 8007312:	2200      	movs	r2, #0
 8007314:	4619      	mov	r1, r3
 8007316:	6838      	ldr	r0, [r7, #0]
 8007318:	f002 fbae 	bl	8009a78 <tu_edpt_validate>
 800731c:	4603      	mov	r3, r0
 800731e:	f083 0301 	eor.w	r3, r3, #1
 8007322:	b2db      	uxtb	r3, r3
 8007324:	2b00      	cmp	r3, #0
 8007326:	d00a      	beq.n	800733e <usbd_edpt_open+0x6a>
 8007328:	4b0b      	ldr	r3, [pc, #44]	@ (8007358 <usbd_edpt_open+0x84>)
 800732a:	617b      	str	r3, [r7, #20]
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b00      	cmp	r3, #0
 8007336:	d000      	beq.n	800733a <usbd_edpt_open+0x66>
 8007338:	be00      	bkpt	0x0000
 800733a:	2300      	movs	r3, #0
 800733c:	e005      	b.n	800734a <usbd_edpt_open+0x76>

  return dcd_edpt_open(rhport, desc_ep);
 800733e:	79fb      	ldrb	r3, [r7, #7]
 8007340:	6839      	ldr	r1, [r7, #0]
 8007342:	4618      	mov	r0, r3
 8007344:	f001 f992 	bl	800866c <dcd_edpt_open>
 8007348:	4603      	mov	r3, r0
}
 800734a:	4618      	mov	r0, r3
 800734c:	3718      	adds	r7, #24
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	2000006d 	.word	0x2000006d
 8007358:	e000edf0 	.word	0xe000edf0
 800735c:	20000abc 	.word	0x20000abc

08007360 <usbd_edpt_claim>:

bool usbd_edpt_claim(uint8_t rhport, uint8_t ep_addr) {
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	4603      	mov	r3, r0
 8007368:	460a      	mov	r2, r1
 800736a:	71fb      	strb	r3, [r7, #7]
 800736c:	4613      	mov	r3, r2
 800736e:	71bb      	strb	r3, [r7, #6]
 8007370:	79bb      	ldrb	r3, [r7, #6]
 8007372:	73bb      	strb	r3, [r7, #14]
 8007374:	7bbb      	ldrb	r3, [r7, #14]
 8007376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800737a:	b2db      	uxtb	r3, r3
  (void) rhport;

  // TODO add this check later, also make sure we don't starve an out endpoint while suspending
  // TU_VERIFY(tud_ready());

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800737c:	75fb      	strb	r3, [r7, #23]
 800737e:	79bb      	ldrb	r3, [r7, #6]
 8007380:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007382:	7bfb      	ldrb	r3, [r7, #15]
 8007384:	09db      	lsrs	r3, r3, #7
 8007386:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8007388:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 800738a:	7dfa      	ldrb	r2, [r7, #23]
 800738c:	7dbb      	ldrb	r3, [r7, #22]
 800738e:	0052      	lsls	r2, r2, #1
 8007390:	4413      	add	r3, r2
 8007392:	3320      	adds	r3, #32
 8007394:	4a05      	ldr	r2, [pc, #20]	@ (80073ac <usbd_edpt_claim+0x4c>)
 8007396:	4413      	add	r3, r2
 8007398:	613b      	str	r3, [r7, #16]

  return tu_edpt_claim(ep_state, _usbd_mutex);
 800739a:	2100      	movs	r1, #0
 800739c:	6938      	ldr	r0, [r7, #16]
 800739e:	f002 fb07 	bl	80099b0 <tu_edpt_claim>
 80073a2:	4603      	mov	r3, r0
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	20000abc 	.word	0x20000abc

080073b0 <usbd_edpt_release>:

bool usbd_edpt_release(uint8_t rhport, uint8_t ep_addr) {
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b086      	sub	sp, #24
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	4603      	mov	r3, r0
 80073b8:	460a      	mov	r2, r1
 80073ba:	71fb      	strb	r3, [r7, #7]
 80073bc:	4613      	mov	r3, r2
 80073be:	71bb      	strb	r3, [r7, #6]
 80073c0:	79bb      	ldrb	r3, [r7, #6]
 80073c2:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80073c4:	7bbb      	ldrb	r3, [r7, #14]
 80073c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80073ca:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80073cc:	75fb      	strb	r3, [r7, #23]
 80073ce:	79bb      	ldrb	r3, [r7, #6]
 80073d0:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
 80073d4:	09db      	lsrs	r3, r3, #7
 80073d6:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80073d8:	75bb      	strb	r3, [r7, #22]
  tu_edpt_state_t* ep_state = &_usbd_dev.ep_status[epnum][dir];
 80073da:	7dfa      	ldrb	r2, [r7, #23]
 80073dc:	7dbb      	ldrb	r3, [r7, #22]
 80073de:	0052      	lsls	r2, r2, #1
 80073e0:	4413      	add	r3, r2
 80073e2:	3320      	adds	r3, #32
 80073e4:	4a05      	ldr	r2, [pc, #20]	@ (80073fc <usbd_edpt_release+0x4c>)
 80073e6:	4413      	add	r3, r2
 80073e8:	613b      	str	r3, [r7, #16]

  return tu_edpt_release(ep_state, _usbd_mutex);
 80073ea:	2100      	movs	r1, #0
 80073ec:	6938      	ldr	r0, [r7, #16]
 80073ee:	f002 fb19 	bl	8009a24 <tu_edpt_release>
 80073f2:	4603      	mov	r3, r0
}
 80073f4:	4618      	mov	r0, r3
 80073f6:	3718      	adds	r7, #24
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}
 80073fc:	20000abc 	.word	0x20000abc

08007400 <usbd_edpt_xfer>:

bool usbd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 8007400:	b580      	push	{r7, lr}
 8007402:	b086      	sub	sp, #24
 8007404:	af00      	add	r7, sp, #0
 8007406:	603a      	str	r2, [r7, #0]
 8007408:	461a      	mov	r2, r3
 800740a:	4603      	mov	r3, r0
 800740c:	71fb      	strb	r3, [r7, #7]
 800740e:	460b      	mov	r3, r1
 8007410:	71bb      	strb	r3, [r7, #6]
 8007412:	4613      	mov	r3, r2
 8007414:	80bb      	strh	r3, [r7, #4]
  rhport = _usbd_rhport;
 8007416:	4b32      	ldr	r3, [pc, #200]	@ (80074e0 <usbd_edpt_xfer+0xe0>)
 8007418:	781b      	ldrb	r3, [r3, #0]
 800741a:	71fb      	strb	r3, [r7, #7]
 800741c:	79bb      	ldrb	r3, [r7, #6]
 800741e:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007420:	7abb      	ldrb	r3, [r7, #10]
 8007422:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007426:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007428:	75fb      	strb	r3, [r7, #23]
 800742a:	79bb      	ldrb	r3, [r7, #6]
 800742c:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800742e:	7afb      	ldrb	r3, [r7, #11]
 8007430:	09db      	lsrs	r3, r3, #7
 8007432:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8007434:	75bb      	strb	r3, [r7, #22]
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, buffer, total_bytes, 2);
  }
#endif

  // Attempt to transfer on a busy endpoint, sound like an race condition !
  TU_ASSERT(_usbd_dev.ep_status[epnum][dir].busy == 0);
 8007436:	7dfa      	ldrb	r2, [r7, #23]
 8007438:	7dbb      	ldrb	r3, [r7, #22]
 800743a:	492a      	ldr	r1, [pc, #168]	@ (80074e4 <usbd_edpt_xfer+0xe4>)
 800743c:	0052      	lsls	r2, r2, #1
 800743e:	440a      	add	r2, r1
 8007440:	4413      	add	r3, r2
 8007442:	3320      	adds	r3, #32
 8007444:	781b      	ldrb	r3, [r3, #0]
 8007446:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800744a:	b2db      	uxtb	r3, r3
 800744c:	2b00      	cmp	r3, #0
 800744e:	d00a      	beq.n	8007466 <usbd_edpt_xfer+0x66>
 8007450:	4b25      	ldr	r3, [pc, #148]	@ (80074e8 <usbd_edpt_xfer+0xe8>)
 8007452:	60fb      	str	r3, [r7, #12]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f003 0301 	and.w	r3, r3, #1
 800745c:	2b00      	cmp	r3, #0
 800745e:	d000      	beq.n	8007462 <usbd_edpt_xfer+0x62>
 8007460:	be00      	bkpt	0x0000
 8007462:	2300      	movs	r3, #0
 8007464:	e038      	b.n	80074d8 <usbd_edpt_xfer+0xd8>

  // Set busy first since the actual transfer can be complete before dcd_edpt_xfer()
  // could return and USBD task can preempt and clear the busy
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 8007466:	7dfa      	ldrb	r2, [r7, #23]
 8007468:	7dbb      	ldrb	r3, [r7, #22]
 800746a:	491e      	ldr	r1, [pc, #120]	@ (80074e4 <usbd_edpt_xfer+0xe4>)
 800746c:	0052      	lsls	r2, r2, #1
 800746e:	440a      	add	r2, r1
 8007470:	4413      	add	r3, r2
 8007472:	f103 0220 	add.w	r2, r3, #32
 8007476:	7813      	ldrb	r3, [r2, #0]
 8007478:	f043 0301 	orr.w	r3, r3, #1
 800747c:	7013      	strb	r3, [r2, #0]

  if (dcd_edpt_xfer(rhport, ep_addr, buffer, total_bytes)) {
 800747e:	88bb      	ldrh	r3, [r7, #4]
 8007480:	79b9      	ldrb	r1, [r7, #6]
 8007482:	79f8      	ldrb	r0, [r7, #7]
 8007484:	683a      	ldr	r2, [r7, #0]
 8007486:	f001 f9b5 	bl	80087f4 <dcd_edpt_xfer>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d001      	beq.n	8007494 <usbd_edpt_xfer+0x94>
    return true;
 8007490:	2301      	movs	r3, #1
 8007492:	e021      	b.n	80074d8 <usbd_edpt_xfer+0xd8>
  } else {
    // DCD error, mark endpoint as ready to allow next transfer
    _usbd_dev.ep_status[epnum][dir].busy = 0;
 8007494:	7dfa      	ldrb	r2, [r7, #23]
 8007496:	7dbb      	ldrb	r3, [r7, #22]
 8007498:	4912      	ldr	r1, [pc, #72]	@ (80074e4 <usbd_edpt_xfer+0xe4>)
 800749a:	0052      	lsls	r2, r2, #1
 800749c:	440a      	add	r2, r1
 800749e:	4413      	add	r3, r2
 80074a0:	f103 0220 	add.w	r2, r3, #32
 80074a4:	7813      	ldrb	r3, [r2, #0]
 80074a6:	f023 0301 	bic.w	r3, r3, #1
 80074aa:	7013      	strb	r3, [r2, #0]
    _usbd_dev.ep_status[epnum][dir].claimed = 0;
 80074ac:	7dfa      	ldrb	r2, [r7, #23]
 80074ae:	7dbb      	ldrb	r3, [r7, #22]
 80074b0:	490c      	ldr	r1, [pc, #48]	@ (80074e4 <usbd_edpt_xfer+0xe4>)
 80074b2:	0052      	lsls	r2, r2, #1
 80074b4:	440a      	add	r2, r1
 80074b6:	4413      	add	r3, r2
 80074b8:	f103 0220 	add.w	r2, r3, #32
 80074bc:	7813      	ldrb	r3, [r2, #0]
 80074be:	f023 0304 	bic.w	r3, r3, #4
 80074c2:	7013      	strb	r3, [r2, #0]
    TU_LOG_USBD("FAILED\r\n");
    TU_BREAKPOINT();
 80074c4:	4b08      	ldr	r3, [pc, #32]	@ (80074e8 <usbd_edpt_xfer+0xe8>)
 80074c6:	613b      	str	r3, [r7, #16]
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f003 0301 	and.w	r3, r3, #1
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d000      	beq.n	80074d6 <usbd_edpt_xfer+0xd6>
 80074d4:	be00      	bkpt	0x0000
    return false;
 80074d6:	2300      	movs	r3, #0
  }
}
 80074d8:	4618      	mov	r0, r3
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	2000006d 	.word	0x2000006d
 80074e4:	20000abc 	.word	0x20000abc
 80074e8:	e000edf0 	.word	0xe000edf0

080074ec <usbd_edpt_busy>:
    TU_BREAKPOINT();
    return false;
  }
}

bool usbd_edpt_busy(uint8_t rhport, uint8_t ep_addr) {
 80074ec:	b480      	push	{r7}
 80074ee:	b085      	sub	sp, #20
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	4603      	mov	r3, r0
 80074f4:	460a      	mov	r2, r1
 80074f6:	71fb      	strb	r3, [r7, #7]
 80074f8:	4613      	mov	r3, r2
 80074fa:	71bb      	strb	r3, [r7, #6]
 80074fc:	79bb      	ldrb	r3, [r7, #6]
 80074fe:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007500:	7b3b      	ldrb	r3, [r7, #12]
 8007502:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007506:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 8007508:	73fb      	strb	r3, [r7, #15]
 800750a:	79bb      	ldrb	r3, [r7, #6]
 800750c:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800750e:	7b7b      	ldrb	r3, [r7, #13]
 8007510:	09db      	lsrs	r3, r3, #7
 8007512:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8007514:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].busy;
 8007516:	7bfa      	ldrb	r2, [r7, #15]
 8007518:	7bbb      	ldrb	r3, [r7, #14]
 800751a:	490a      	ldr	r1, [pc, #40]	@ (8007544 <usbd_edpt_busy+0x58>)
 800751c:	0052      	lsls	r2, r2, #1
 800751e:	440a      	add	r2, r1
 8007520:	4413      	add	r3, r2
 8007522:	3320      	adds	r3, #32
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800752a:	b2db      	uxtb	r3, r3
 800752c:	2b00      	cmp	r3, #0
 800752e:	bf14      	ite	ne
 8007530:	2301      	movne	r3, #1
 8007532:	2300      	moveq	r3, #0
 8007534:	b2db      	uxtb	r3, r3
}
 8007536:	4618      	mov	r0, r3
 8007538:	3714      	adds	r7, #20
 800753a:	46bd      	mov	sp, r7
 800753c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007540:	4770      	bx	lr
 8007542:	bf00      	nop
 8007544:	20000abc 	.word	0x20000abc

08007548 <usbd_edpt_stall>:

void usbd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8007548:	b580      	push	{r7, lr}
 800754a:	b084      	sub	sp, #16
 800754c:	af00      	add	r7, sp, #0
 800754e:	4603      	mov	r3, r0
 8007550:	460a      	mov	r2, r1
 8007552:	71fb      	strb	r3, [r7, #7]
 8007554:	4613      	mov	r3, r2
 8007556:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 8007558:	4b18      	ldr	r3, [pc, #96]	@ (80075bc <usbd_edpt_stall+0x74>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	71fb      	strb	r3, [r7, #7]
 800755e:	79bb      	ldrb	r3, [r7, #6]
 8007560:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007562:	7b3b      	ldrb	r3, [r7, #12]
 8007564:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007568:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800756a:	73fb      	strb	r3, [r7, #15]
 800756c:	79bb      	ldrb	r3, [r7, #6]
 800756e:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007570:	7b7b      	ldrb	r3, [r7, #13]
 8007572:	09db      	lsrs	r3, r3, #7
 8007574:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8007576:	73bb      	strb	r3, [r7, #14]

  // only stalled if currently cleared
  TU_LOG_USBD("    Stall EP %02X\r\n", ep_addr);
  dcd_edpt_stall(rhport, ep_addr);
 8007578:	79ba      	ldrb	r2, [r7, #6]
 800757a:	79fb      	ldrb	r3, [r7, #7]
 800757c:	4611      	mov	r1, r2
 800757e:	4618      	mov	r0, r3
 8007580:	f001 f988 	bl	8008894 <dcd_edpt_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 1;
 8007584:	7bfa      	ldrb	r2, [r7, #15]
 8007586:	7bbb      	ldrb	r3, [r7, #14]
 8007588:	490d      	ldr	r1, [pc, #52]	@ (80075c0 <usbd_edpt_stall+0x78>)
 800758a:	0052      	lsls	r2, r2, #1
 800758c:	440a      	add	r2, r1
 800758e:	4413      	add	r3, r2
 8007590:	f103 0220 	add.w	r2, r3, #32
 8007594:	7813      	ldrb	r3, [r2, #0]
 8007596:	f043 0302 	orr.w	r3, r3, #2
 800759a:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 1;
 800759c:	7bfa      	ldrb	r2, [r7, #15]
 800759e:	7bbb      	ldrb	r3, [r7, #14]
 80075a0:	4907      	ldr	r1, [pc, #28]	@ (80075c0 <usbd_edpt_stall+0x78>)
 80075a2:	0052      	lsls	r2, r2, #1
 80075a4:	440a      	add	r2, r1
 80075a6:	4413      	add	r3, r2
 80075a8:	f103 0220 	add.w	r2, r3, #32
 80075ac:	7813      	ldrb	r3, [r2, #0]
 80075ae:	f043 0301 	orr.w	r3, r3, #1
 80075b2:	7013      	strb	r3, [r2, #0]
}
 80075b4:	bf00      	nop
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}
 80075bc:	2000006d 	.word	0x2000006d
 80075c0:	20000abc 	.word	0x20000abc

080075c4 <usbd_edpt_clear_stall>:

void usbd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b084      	sub	sp, #16
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	4603      	mov	r3, r0
 80075cc:	460a      	mov	r2, r1
 80075ce:	71fb      	strb	r3, [r7, #7]
 80075d0:	4613      	mov	r3, r2
 80075d2:	71bb      	strb	r3, [r7, #6]
  rhport = _usbd_rhport;
 80075d4:	4b18      	ldr	r3, [pc, #96]	@ (8007638 <usbd_edpt_clear_stall+0x74>)
 80075d6:	781b      	ldrb	r3, [r3, #0]
 80075d8:	71fb      	strb	r3, [r7, #7]
 80075da:	79bb      	ldrb	r3, [r7, #6]
 80075dc:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80075de:	7b3b      	ldrb	r3, [r7, #12]
 80075e0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80075e4:	b2db      	uxtb	r3, r3

  uint8_t const epnum = tu_edpt_number(ep_addr);
 80075e6:	73fb      	strb	r3, [r7, #15]
 80075e8:	79bb      	ldrb	r3, [r7, #6]
 80075ea:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 80075ec:	7b7b      	ldrb	r3, [r7, #13]
 80075ee:	09db      	lsrs	r3, r3, #7
 80075f0:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 80075f2:	73bb      	strb	r3, [r7, #14]

  // only clear if currently stalled
  TU_LOG_USBD("    Clear Stall EP %02X\r\n", ep_addr);
  dcd_edpt_clear_stall(rhport, ep_addr);
 80075f4:	79ba      	ldrb	r2, [r7, #6]
 80075f6:	79fb      	ldrb	r3, [r7, #7]
 80075f8:	4611      	mov	r1, r2
 80075fa:	4618      	mov	r0, r3
 80075fc:	f001 f980 	bl	8008900 <dcd_edpt_clear_stall>
  _usbd_dev.ep_status[epnum][dir].stalled = 0;
 8007600:	7bfa      	ldrb	r2, [r7, #15]
 8007602:	7bbb      	ldrb	r3, [r7, #14]
 8007604:	490d      	ldr	r1, [pc, #52]	@ (800763c <usbd_edpt_clear_stall+0x78>)
 8007606:	0052      	lsls	r2, r2, #1
 8007608:	440a      	add	r2, r1
 800760a:	4413      	add	r3, r2
 800760c:	f103 0220 	add.w	r2, r3, #32
 8007610:	7813      	ldrb	r3, [r2, #0]
 8007612:	f023 0302 	bic.w	r3, r3, #2
 8007616:	7013      	strb	r3, [r2, #0]
  _usbd_dev.ep_status[epnum][dir].busy = 0;
 8007618:	7bfa      	ldrb	r2, [r7, #15]
 800761a:	7bbb      	ldrb	r3, [r7, #14]
 800761c:	4907      	ldr	r1, [pc, #28]	@ (800763c <usbd_edpt_clear_stall+0x78>)
 800761e:	0052      	lsls	r2, r2, #1
 8007620:	440a      	add	r2, r1
 8007622:	4413      	add	r3, r2
 8007624:	f103 0220 	add.w	r2, r3, #32
 8007628:	7813      	ldrb	r3, [r2, #0]
 800762a:	f023 0301 	bic.w	r3, r3, #1
 800762e:	7013      	strb	r3, [r2, #0]
}
 8007630:	bf00      	nop
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}
 8007638:	2000006d 	.word	0x2000006d
 800763c:	20000abc 	.word	0x20000abc

08007640 <usbd_edpt_stalled>:

bool usbd_edpt_stalled(uint8_t rhport, uint8_t ep_addr) {
 8007640:	b480      	push	{r7}
 8007642:	b085      	sub	sp, #20
 8007644:	af00      	add	r7, sp, #0
 8007646:	4603      	mov	r3, r0
 8007648:	460a      	mov	r2, r1
 800764a:	71fb      	strb	r3, [r7, #7]
 800764c:	4613      	mov	r3, r2
 800764e:	71bb      	strb	r3, [r7, #6]
 8007650:	79bb      	ldrb	r3, [r7, #6]
 8007652:	733b      	strb	r3, [r7, #12]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007654:	7b3b      	ldrb	r3, [r7, #12]
 8007656:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800765a:	b2db      	uxtb	r3, r3
  (void) rhport;

  uint8_t const epnum = tu_edpt_number(ep_addr);
 800765c:	73fb      	strb	r3, [r7, #15]
 800765e:	79bb      	ldrb	r3, [r7, #6]
 8007660:	737b      	strb	r3, [r7, #13]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007662:	7b7b      	ldrb	r3, [r7, #13]
 8007664:	09db      	lsrs	r3, r3, #7
 8007666:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8007668:	73bb      	strb	r3, [r7, #14]

  return _usbd_dev.ep_status[epnum][dir].stalled;
 800766a:	7bfa      	ldrb	r2, [r7, #15]
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	490a      	ldr	r1, [pc, #40]	@ (8007698 <usbd_edpt_stalled+0x58>)
 8007670:	0052      	lsls	r2, r2, #1
 8007672:	440a      	add	r2, r1
 8007674:	4413      	add	r3, r2
 8007676:	3320      	adds	r3, #32
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800767e:	b2db      	uxtb	r3, r3
 8007680:	2b00      	cmp	r3, #0
 8007682:	bf14      	ite	ne
 8007684:	2301      	movne	r3, #1
 8007686:	2300      	moveq	r3, #0
 8007688:	b2db      	uxtb	r3, r3
}
 800768a:	4618      	mov	r0, r3
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	20000abc 	.word	0x20000abc

0800769c <dcd_edpt0_status_complete>:
#include "device/usbd_pvt.h"

//--------------------------------------------------------------------+
// Callback weak stubs (called if application does not provide)
//--------------------------------------------------------------------+
TU_ATTR_WEAK void dcd_edpt0_status_complete(uint8_t rhport, const tusb_control_request_t* request) {
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	4603      	mov	r3, r0
 80076a4:	6039      	str	r1, [r7, #0]
 80076a6:	71fb      	strb	r3, [r7, #7]
  (void) rhport;
  (void) request;
}
 80076a8:	bf00      	nop
 80076aa:	370c      	adds	r7, #12
 80076ac:	46bd      	mov	sp, r7
 80076ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b2:	4770      	bx	lr

080076b4 <status_stage_xact>:
//--------------------------------------------------------------------+
// Application API
//--------------------------------------------------------------------+

// Queue ZLP status transaction
static inline bool status_stage_xact(uint8_t rhport, const tusb_control_request_t* request) {
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b084      	sub	sp, #16
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	4603      	mov	r3, r0
 80076bc:	6039      	str	r1, [r7, #0]
 80076be:	71fb      	strb	r3, [r7, #7]
  // Opposite to endpoint in Data Phase
  const uint8_t ep_addr = request->bmRequestType_bit.direction ? EDPT_CTRL_OUT : EDPT_CTRL_IN;
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d001      	beq.n	80076d2 <status_stage_xact+0x1e>
 80076ce:	2300      	movs	r3, #0
 80076d0:	e000      	b.n	80076d4 <status_stage_xact+0x20>
 80076d2:	2380      	movs	r3, #128	@ 0x80
 80076d4:	73fb      	strb	r3, [r7, #15]
  return usbd_edpt_xfer(rhport, ep_addr, NULL, 0);
 80076d6:	7bf9      	ldrb	r1, [r7, #15]
 80076d8:	79f8      	ldrb	r0, [r7, #7]
 80076da:	2300      	movs	r3, #0
 80076dc:	2200      	movs	r2, #0
 80076de:	f7ff fe8f 	bl	8007400 <usbd_edpt_xfer>
 80076e2:	4603      	mov	r3, r0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3710      	adds	r7, #16
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}

080076ec <tud_control_status>:

// Status phase
bool tud_control_status(uint8_t rhport, const tusb_control_request_t* request) {
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b082      	sub	sp, #8
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	4603      	mov	r3, r0
 80076f4:	6039      	str	r1, [r7, #0]
 80076f6:	71fb      	strb	r3, [r7, #7]
  _ctrl_xfer.request = (*request);
 80076f8:	4b0b      	ldr	r3, [pc, #44]	@ (8007728 <tud_control_status+0x3c>)
 80076fa:	683a      	ldr	r2, [r7, #0]
 80076fc:	6810      	ldr	r0, [r2, #0]
 80076fe:	6851      	ldr	r1, [r2, #4]
 8007700:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 8007702:	4b09      	ldr	r3, [pc, #36]	@ (8007728 <tud_control_status+0x3c>)
 8007704:	2200      	movs	r2, #0
 8007706:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8007708:	4b07      	ldr	r3, [pc, #28]	@ (8007728 <tud_control_status+0x3c>)
 800770a:	2200      	movs	r2, #0
 800770c:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 800770e:	4b06      	ldr	r3, [pc, #24]	@ (8007728 <tud_control_status+0x3c>)
 8007710:	2200      	movs	r2, #0
 8007712:	819a      	strh	r2, [r3, #12]

  return status_stage_xact(rhport, request);
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	6839      	ldr	r1, [r7, #0]
 8007718:	4618      	mov	r0, r3
 800771a:	f7ff ffcb 	bl	80076b4 <status_stage_xact>
 800771e:	4603      	mov	r3, r0
}
 8007720:	4618      	mov	r0, r3
 8007722:	3708      	adds	r7, #8
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}
 8007728:	20000bb8 	.word	0x20000bb8

0800772c <data_stage_xact>:

// Queue a transaction in Data Stage
// Each transaction has up to Endpoint0's max packet size.
// This function can also transfer an zero-length packet
static bool data_stage_xact(uint8_t rhport) {
 800772c:	b580      	push	{r7, lr}
 800772e:	b088      	sub	sp, #32
 8007730:	af00      	add	r7, sp, #0
 8007732:	4603      	mov	r3, r0
 8007734:	71fb      	strb	r3, [r7, #7]
  const uint16_t xact_len = tu_min16(_ctrl_xfer.data_len - _ctrl_xfer.total_xferred, CFG_TUD_ENDPOINT0_SIZE);
 8007736:	4b24      	ldr	r3, [pc, #144]	@ (80077c8 <data_stage_xact+0x9c>)
 8007738:	899a      	ldrh	r2, [r3, #12]
 800773a:	4b23      	ldr	r3, [pc, #140]	@ (80077c8 <data_stage_xact+0x9c>)
 800773c:	89db      	ldrh	r3, [r3, #14]
 800773e:	1ad3      	subs	r3, r2, r3
 8007740:	b29b      	uxth	r3, r3
 8007742:	837b      	strh	r3, [r7, #26]
 8007744:	2340      	movs	r3, #64	@ 0x40
 8007746:	833b      	strh	r3, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007748:	8b7a      	ldrh	r2, [r7, #26]
 800774a:	8b3b      	ldrh	r3, [r7, #24]
 800774c:	4293      	cmp	r3, r2
 800774e:	bf28      	it	cs
 8007750:	4613      	movcs	r3, r2
 8007752:	b29b      	uxth	r3, r3
 8007754:	83bb      	strh	r3, [r7, #28]
  uint8_t ep_addr = EDPT_CTRL_OUT;
 8007756:	2300      	movs	r3, #0
 8007758:	77fb      	strb	r3, [r7, #31]

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_IN) {
 800775a:	4b1b      	ldr	r3, [pc, #108]	@ (80077c8 <data_stage_xact+0x9c>)
 800775c:	781b      	ldrb	r3, [r3, #0]
 800775e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007762:	b2db      	uxtb	r3, r3
 8007764:	2b00      	cmp	r3, #0
 8007766:	d01e      	beq.n	80077a6 <data_stage_xact+0x7a>
    ep_addr = EDPT_CTRL_IN;
 8007768:	2380      	movs	r3, #128	@ 0x80
 800776a:	77fb      	strb	r3, [r7, #31]
    if (xact_len) {
 800776c:	8bbb      	ldrh	r3, [r7, #28]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d019      	beq.n	80077a6 <data_stage_xact+0x7a>
      TU_VERIFY(0 == tu_memcpy_s(_ctrl_epbuf.buf, CFG_TUD_ENDPOINT0_SIZE, _ctrl_xfer.buffer, xact_len));
 8007772:	4b15      	ldr	r3, [pc, #84]	@ (80077c8 <data_stage_xact+0x9c>)
 8007774:	689a      	ldr	r2, [r3, #8]
 8007776:	8bbb      	ldrh	r3, [r7, #28]
 8007778:	4914      	ldr	r1, [pc, #80]	@ (80077cc <data_stage_xact+0xa0>)
 800777a:	6179      	str	r1, [r7, #20]
 800777c:	2140      	movs	r1, #64	@ 0x40
 800777e:	6139      	str	r1, [r7, #16]
 8007780:	60fa      	str	r2, [r7, #12]
 8007782:	60bb      	str	r3, [r7, #8]
  if ( count > destsz ) {
 8007784:	693a      	ldr	r2, [r7, #16]
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	429a      	cmp	r2, r3
 800778a:	d202      	bcs.n	8007792 <data_stage_xact+0x66>
    return -1;
 800778c:	f04f 33ff 	mov.w	r3, #4294967295
 8007790:	e005      	b.n	800779e <data_stage_xact+0x72>
  memcpy(dest, src, count);
 8007792:	68ba      	ldr	r2, [r7, #8]
 8007794:	68f9      	ldr	r1, [r7, #12]
 8007796:	6978      	ldr	r0, [r7, #20]
 8007798:	f002 fab8 	bl	8009d0c <memcpy>
  return 0;
 800779c:	2300      	movs	r3, #0
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <data_stage_xact+0x7a>
 80077a2:	2300      	movs	r3, #0
 80077a4:	e00b      	b.n	80077be <data_stage_xact+0x92>
    }
  }

  return usbd_edpt_xfer(rhport, ep_addr, xact_len ? _ctrl_epbuf.buf : NULL, xact_len);
 80077a6:	8bbb      	ldrh	r3, [r7, #28]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d001      	beq.n	80077b0 <data_stage_xact+0x84>
 80077ac:	4a07      	ldr	r2, [pc, #28]	@ (80077cc <data_stage_xact+0xa0>)
 80077ae:	e000      	b.n	80077b2 <data_stage_xact+0x86>
 80077b0:	2200      	movs	r2, #0
 80077b2:	8bbb      	ldrh	r3, [r7, #28]
 80077b4:	7ff9      	ldrb	r1, [r7, #31]
 80077b6:	79f8      	ldrb	r0, [r7, #7]
 80077b8:	f7ff fe22 	bl	8007400 <usbd_edpt_xfer>
 80077bc:	4603      	mov	r3, r0
}
 80077be:	4618      	mov	r0, r3
 80077c0:	3720      	adds	r7, #32
 80077c2:	46bd      	mov	sp, r7
 80077c4:	bd80      	pop	{r7, pc}
 80077c6:	bf00      	nop
 80077c8:	20000bb8 	.word	0x20000bb8
 80077cc:	20000bcc 	.word	0x20000bcc

080077d0 <tud_control_xfer>:

// Transmit data to/from the control endpoint.
// If the request's wLength is zero, a status packet is sent instead.
bool tud_control_xfer(uint8_t rhport, const tusb_control_request_t* request, void* buffer, uint16_t len) {
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b088      	sub	sp, #32
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60b9      	str	r1, [r7, #8]
 80077d8:	607a      	str	r2, [r7, #4]
 80077da:	461a      	mov	r2, r3
 80077dc:	4603      	mov	r3, r0
 80077de:	73fb      	strb	r3, [r7, #15]
 80077e0:	4613      	mov	r3, r2
 80077e2:	81bb      	strh	r3, [r7, #12]
  _ctrl_xfer.request = (*request);
 80077e4:	4b30      	ldr	r3, [pc, #192]	@ (80078a8 <tud_control_xfer+0xd8>)
 80077e6:	68ba      	ldr	r2, [r7, #8]
 80077e8:	6810      	ldr	r0, [r2, #0]
 80077ea:	6851      	ldr	r1, [r2, #4]
 80077ec:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = (uint8_t*) buffer;
 80077ee:	4a2e      	ldr	r2, [pc, #184]	@ (80078a8 <tud_control_xfer+0xd8>)
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6093      	str	r3, [r2, #8]
  _ctrl_xfer.total_xferred = 0U;
 80077f4:	4b2c      	ldr	r3, [pc, #176]	@ (80078a8 <tud_control_xfer+0xd8>)
 80077f6:	2200      	movs	r2, #0
 80077f8:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = tu_min16(len, request->wLength);
 80077fa:	68bb      	ldr	r3, [r7, #8]
 80077fc:	88db      	ldrh	r3, [r3, #6]
 80077fe:	b29a      	uxth	r2, r3
 8007800:	89bb      	ldrh	r3, [r7, #12]
 8007802:	827b      	strh	r3, [r7, #18]
 8007804:	4613      	mov	r3, r2
 8007806:	823b      	strh	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8007808:	8a7a      	ldrh	r2, [r7, #18]
 800780a:	8a3b      	ldrh	r3, [r7, #16]
 800780c:	4293      	cmp	r3, r2
 800780e:	bf28      	it	cs
 8007810:	4613      	movcs	r3, r2
 8007812:	b29a      	uxth	r2, r3
 8007814:	4b24      	ldr	r3, [pc, #144]	@ (80078a8 <tud_control_xfer+0xd8>)
 8007816:	819a      	strh	r2, [r3, #12]

  if (request->wLength > 0U) {
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	88db      	ldrh	r3, [r3, #6]
 800781c:	b29b      	uxth	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d026      	beq.n	8007870 <tud_control_xfer+0xa0>
    if (_ctrl_xfer.data_len > 0U) {
 8007822:	4b21      	ldr	r3, [pc, #132]	@ (80078a8 <tud_control_xfer+0xd8>)
 8007824:	899b      	ldrh	r3, [r3, #12]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d00d      	beq.n	8007846 <tud_control_xfer+0x76>
      TU_ASSERT(buffer);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d10a      	bne.n	8007846 <tud_control_xfer+0x76>
 8007830:	4b1e      	ldr	r3, [pc, #120]	@ (80078ac <tud_control_xfer+0xdc>)
 8007832:	61bb      	str	r3, [r7, #24]
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f003 0301 	and.w	r3, r3, #1
 800783c:	2b00      	cmp	r3, #0
 800783e:	d000      	beq.n	8007842 <tud_control_xfer+0x72>
 8007840:	be00      	bkpt	0x0000
 8007842:	2300      	movs	r3, #0
 8007844:	e02b      	b.n	800789e <tud_control_xfer+0xce>
    }
    TU_ASSERT(data_stage_xact(rhport));
 8007846:	7bfb      	ldrb	r3, [r7, #15]
 8007848:	4618      	mov	r0, r3
 800784a:	f7ff ff6f 	bl	800772c <data_stage_xact>
 800784e:	4603      	mov	r3, r0
 8007850:	f083 0301 	eor.w	r3, r3, #1
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b00      	cmp	r3, #0
 8007858:	d020      	beq.n	800789c <tud_control_xfer+0xcc>
 800785a:	4b14      	ldr	r3, [pc, #80]	@ (80078ac <tud_control_xfer+0xdc>)
 800785c:	617b      	str	r3, [r7, #20]
 800785e:	697b      	ldr	r3, [r7, #20]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	f003 0301 	and.w	r3, r3, #1
 8007866:	2b00      	cmp	r3, #0
 8007868:	d000      	beq.n	800786c <tud_control_xfer+0x9c>
 800786a:	be00      	bkpt	0x0000
 800786c:	2300      	movs	r3, #0
 800786e:	e016      	b.n	800789e <tud_control_xfer+0xce>
  } else {
    TU_ASSERT(status_stage_xact(rhport, request));
 8007870:	7bfb      	ldrb	r3, [r7, #15]
 8007872:	68b9      	ldr	r1, [r7, #8]
 8007874:	4618      	mov	r0, r3
 8007876:	f7ff ff1d 	bl	80076b4 <status_stage_xact>
 800787a:	4603      	mov	r3, r0
 800787c:	f083 0301 	eor.w	r3, r3, #1
 8007880:	b2db      	uxtb	r3, r3
 8007882:	2b00      	cmp	r3, #0
 8007884:	d00a      	beq.n	800789c <tud_control_xfer+0xcc>
 8007886:	4b09      	ldr	r3, [pc, #36]	@ (80078ac <tud_control_xfer+0xdc>)
 8007888:	61fb      	str	r3, [r7, #28]
 800788a:	69fb      	ldr	r3, [r7, #28]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d000      	beq.n	8007898 <tud_control_xfer+0xc8>
 8007896:	be00      	bkpt	0x0000
 8007898:	2300      	movs	r3, #0
 800789a:	e000      	b.n	800789e <tud_control_xfer+0xce>
  }

  return true;
 800789c:	2301      	movs	r3, #1
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3720      	adds	r7, #32
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20000bb8 	.word	0x20000bb8
 80078ac:	e000edf0 	.word	0xe000edf0

080078b0 <usbd_control_reset>:
void usbd_control_reset(void);
void usbd_control_set_request(const tusb_control_request_t* request);
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp);
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes);

void usbd_control_reset(void) {
 80078b0:	b580      	push	{r7, lr}
 80078b2:	af00      	add	r7, sp, #0
  tu_varclr(&_ctrl_xfer);
 80078b4:	2214      	movs	r2, #20
 80078b6:	2100      	movs	r1, #0
 80078b8:	4802      	ldr	r0, [pc, #8]	@ (80078c4 <usbd_control_reset+0x14>)
 80078ba:	f002 f9f3 	bl	8009ca4 <memset>
}
 80078be:	bf00      	nop
 80078c0:	bd80      	pop	{r7, pc}
 80078c2:	bf00      	nop
 80078c4:	20000bb8 	.word	0x20000bb8

080078c8 <usbd_control_set_complete_callback>:

// Set complete callback
void usbd_control_set_complete_callback(usbd_control_xfer_cb_t fp) {
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.complete_cb = fp;
 80078d0:	4a04      	ldr	r2, [pc, #16]	@ (80078e4 <usbd_control_set_complete_callback+0x1c>)
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6113      	str	r3, [r2, #16]
}
 80078d6:	bf00      	nop
 80078d8:	370c      	adds	r7, #12
 80078da:	46bd      	mov	sp, r7
 80078dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e0:	4770      	bx	lr
 80078e2:	bf00      	nop
 80078e4:	20000bb8 	.word	0x20000bb8

080078e8 <usbd_control_set_request>:

// for dcd_set_address where DCD is responsible for status response
void usbd_control_set_request(const tusb_control_request_t* request) {
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	6078      	str	r0, [r7, #4]
  _ctrl_xfer.request = (*request);
 80078f0:	4b09      	ldr	r3, [pc, #36]	@ (8007918 <usbd_control_set_request+0x30>)
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	6810      	ldr	r0, [r2, #0]
 80078f6:	6851      	ldr	r1, [r2, #4]
 80078f8:	c303      	stmia	r3!, {r0, r1}
  _ctrl_xfer.buffer = NULL;
 80078fa:	4b07      	ldr	r3, [pc, #28]	@ (8007918 <usbd_control_set_request+0x30>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	609a      	str	r2, [r3, #8]
  _ctrl_xfer.total_xferred = 0;
 8007900:	4b05      	ldr	r3, [pc, #20]	@ (8007918 <usbd_control_set_request+0x30>)
 8007902:	2200      	movs	r2, #0
 8007904:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.data_len = 0;
 8007906:	4b04      	ldr	r3, [pc, #16]	@ (8007918 <usbd_control_set_request+0x30>)
 8007908:	2200      	movs	r2, #0
 800790a:	819a      	strh	r2, [r3, #12]
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	20000bb8 	.word	0x20000bb8

0800791c <usbd_control_xfer_cb>:

// callback when a transaction complete on
// - DATA stage of control endpoint or
// - Status stage
bool usbd_control_xfer_cb(uint8_t rhport, uint8_t ep_addr, xfer_result_t result, uint32_t xferred_bytes) {
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af00      	add	r7, sp, #0
 8007922:	603b      	str	r3, [r7, #0]
 8007924:	4603      	mov	r3, r0
 8007926:	71fb      	strb	r3, [r7, #7]
 8007928:	460b      	mov	r3, r1
 800792a:	71bb      	strb	r3, [r7, #6]
 800792c:	4613      	mov	r3, r2
 800792e:	717b      	strb	r3, [r7, #5]
 8007930:	79bb      	ldrb	r3, [r7, #6]
 8007932:	73fb      	strb	r3, [r7, #15]
 8007934:	7bfb      	ldrb	r3, [r7, #15]
 8007936:	09db      	lsrs	r3, r3, #7
 8007938:	b2db      	uxtb	r3, r3
  (void) result;

  // Endpoint Address is opposite to direction bit, this is Status Stage complete event
  if (tu_edpt_dir(ep_addr) != _ctrl_xfer.request.bmRequestType_bit.direction) {
 800793a:	4a4f      	ldr	r2, [pc, #316]	@ (8007a78 <usbd_control_xfer_cb+0x15c>)
 800793c:	7812      	ldrb	r2, [r2, #0]
 800793e:	f3c2 12c0 	ubfx	r2, r2, #7, #1
 8007942:	b2d2      	uxtb	r2, r2
 8007944:	4293      	cmp	r3, r2
 8007946:	d01e      	beq.n	8007986 <usbd_control_xfer_cb+0x6a>
    TU_ASSERT(0 == xferred_bytes);
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d00a      	beq.n	8007964 <usbd_control_xfer_cb+0x48>
 800794e:	4b4b      	ldr	r3, [pc, #300]	@ (8007a7c <usbd_control_xfer_cb+0x160>)
 8007950:	613b      	str	r3, [r7, #16]
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	f003 0301 	and.w	r3, r3, #1
 800795a:	2b00      	cmp	r3, #0
 800795c:	d000      	beq.n	8007960 <usbd_control_xfer_cb+0x44>
 800795e:	be00      	bkpt	0x0000
 8007960:	2300      	movs	r3, #0
 8007962:	e084      	b.n	8007a6e <usbd_control_xfer_cb+0x152>

    // invoke optional dcd hook if available
    dcd_edpt0_status_complete(rhport, &_ctrl_xfer.request);
 8007964:	79fb      	ldrb	r3, [r7, #7]
 8007966:	4944      	ldr	r1, [pc, #272]	@ (8007a78 <usbd_control_xfer_cb+0x15c>)
 8007968:	4618      	mov	r0, r3
 800796a:	f7ff fe97 	bl	800769c <dcd_edpt0_status_complete>

    if (_ctrl_xfer.complete_cb) {
 800796e:	4b42      	ldr	r3, [pc, #264]	@ (8007a78 <usbd_control_xfer_cb+0x15c>)
 8007970:	691b      	ldr	r3, [r3, #16]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d005      	beq.n	8007982 <usbd_control_xfer_cb+0x66>
      // TODO refactor with usbd_driver_print_control_complete_name
      _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_ACK, &_ctrl_xfer.request);
 8007976:	4b40      	ldr	r3, [pc, #256]	@ (8007a78 <usbd_control_xfer_cb+0x15c>)
 8007978:	691b      	ldr	r3, [r3, #16]
 800797a:	79f8      	ldrb	r0, [r7, #7]
 800797c:	4a3e      	ldr	r2, [pc, #248]	@ (8007a78 <usbd_control_xfer_cb+0x15c>)
 800797e:	2103      	movs	r1, #3
 8007980:	4798      	blx	r3
    }

    return true;
 8007982:	2301      	movs	r3, #1
 8007984:	e073      	b.n	8007a6e <usbd_control_xfer_cb+0x152>
  }

  if (_ctrl_xfer.request.bmRequestType_bit.direction == TUSB_DIR_OUT) {
 8007986:	4b3c      	ldr	r3, [pc, #240]	@ (8007a78 <usbd_control_xfer_cb+0x15c>)
 8007988:	781b      	ldrb	r3, [r3, #0]
 800798a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800798e:	b2db      	uxtb	r3, r3
 8007990:	2b00      	cmp	r3, #0
 8007992:	d10c      	bne.n	80079ae <usbd_control_xfer_cb+0x92>
    TU_VERIFY(_ctrl_xfer.buffer);
 8007994:	4b38      	ldr	r3, [pc, #224]	@ (8007a78 <usbd_control_xfer_cb+0x15c>)
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d101      	bne.n	80079a0 <usbd_control_xfer_cb+0x84>
 800799c:	2300      	movs	r3, #0
 800799e:	e066      	b.n	8007a6e <usbd_control_xfer_cb+0x152>
    memcpy(_ctrl_xfer.buffer, _ctrl_epbuf.buf, xferred_bytes);
 80079a0:	4b35      	ldr	r3, [pc, #212]	@ (8007a78 <usbd_control_xfer_cb+0x15c>)
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	683a      	ldr	r2, [r7, #0]
 80079a6:	4936      	ldr	r1, [pc, #216]	@ (8007a80 <usbd_control_xfer_cb+0x164>)
 80079a8:	4618      	mov	r0, r3
 80079aa:	f002 f9af 	bl	8009d0c <memcpy>
    TU_LOG_MEM(CFG_TUD_LOG_LEVEL, _ctrl_xfer.buffer, xferred_bytes, 2);
  }

  _ctrl_xfer.total_xferred += (uint16_t) xferred_bytes;
 80079ae:	4b32      	ldr	r3, [pc, #200]	@ (8007a78 <usbd_control_xfer_cb+0x15c>)
 80079b0:	89da      	ldrh	r2, [r3, #14]
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	b29b      	uxth	r3, r3
 80079b6:	4413      	add	r3, r2
 80079b8:	b29a      	uxth	r2, r3
 80079ba:	4b2f      	ldr	r3, [pc, #188]	@ (8007a78 <usbd_control_xfer_cb+0x15c>)
 80079bc:	81da      	strh	r2, [r3, #14]
  _ctrl_xfer.buffer += xferred_bytes;
 80079be:	4b2e      	ldr	r3, [pc, #184]	@ (8007a78 <usbd_control_xfer_cb+0x15c>)
 80079c0:	689a      	ldr	r2, [r3, #8]
 80079c2:	683b      	ldr	r3, [r7, #0]
 80079c4:	4413      	add	r3, r2
 80079c6:	4a2c      	ldr	r2, [pc, #176]	@ (8007a78 <usbd_control_xfer_cb+0x15c>)
 80079c8:	6093      	str	r3, [r2, #8]

  // Data Stage is complete when all request's length are transferred or
  // a short packet is sent including zero-length packet.
  if ((_ctrl_xfer.request.wLength == _ctrl_xfer.total_xferred) ||
 80079ca:	4b2b      	ldr	r3, [pc, #172]	@ (8007a78 <usbd_control_xfer_cb+0x15c>)
 80079cc:	88da      	ldrh	r2, [r3, #6]
 80079ce:	4b2a      	ldr	r3, [pc, #168]	@ (8007a78 <usbd_control_xfer_cb+0x15c>)
 80079d0:	89db      	ldrh	r3, [r3, #14]
 80079d2:	429a      	cmp	r2, r3
 80079d4:	d002      	beq.n	80079dc <usbd_control_xfer_cb+0xc0>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b3f      	cmp	r3, #63	@ 0x3f
 80079da:	d831      	bhi.n	8007a40 <usbd_control_xfer_cb+0x124>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
    // DATA stage is complete
    bool is_ok = true;
 80079dc:	2301      	movs	r3, #1
 80079de:	77fb      	strb	r3, [r7, #31]

    // invoke complete callback if set
    // callback can still stall control in status phase e.g out data does not make sense
    if (_ctrl_xfer.complete_cb) {
 80079e0:	4b25      	ldr	r3, [pc, #148]	@ (8007a78 <usbd_control_xfer_cb+0x15c>)
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d007      	beq.n	80079f8 <usbd_control_xfer_cb+0xdc>
      #if CFG_TUSB_DEBUG >= CFG_TUD_LOG_LEVEL
      usbd_driver_print_control_complete_name(_ctrl_xfer.complete_cb);
      #endif

      is_ok = _ctrl_xfer.complete_cb(rhport, CONTROL_STAGE_DATA, &_ctrl_xfer.request);
 80079e8:	4b23      	ldr	r3, [pc, #140]	@ (8007a78 <usbd_control_xfer_cb+0x15c>)
 80079ea:	691b      	ldr	r3, [r3, #16]
 80079ec:	79f8      	ldrb	r0, [r7, #7]
 80079ee:	4a22      	ldr	r2, [pc, #136]	@ (8007a78 <usbd_control_xfer_cb+0x15c>)
 80079f0:	2102      	movs	r1, #2
 80079f2:	4798      	blx	r3
 80079f4:	4603      	mov	r3, r0
 80079f6:	77fb      	strb	r3, [r7, #31]
    }

    if (is_ok) {
 80079f8:	7ffb      	ldrb	r3, [r7, #31]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d015      	beq.n	8007a2a <usbd_control_xfer_cb+0x10e>
      TU_ASSERT(status_stage_xact(rhport, &_ctrl_xfer.request));
 80079fe:	79fb      	ldrb	r3, [r7, #7]
 8007a00:	491d      	ldr	r1, [pc, #116]	@ (8007a78 <usbd_control_xfer_cb+0x15c>)
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7ff fe56 	bl	80076b4 <status_stage_xact>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	f083 0301 	eor.w	r3, r3, #1
 8007a0e:	b2db      	uxtb	r3, r3
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d02a      	beq.n	8007a6a <usbd_control_xfer_cb+0x14e>
 8007a14:	4b19      	ldr	r3, [pc, #100]	@ (8007a7c <usbd_control_xfer_cb+0x160>)
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0301 	and.w	r3, r3, #1
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d000      	beq.n	8007a26 <usbd_control_xfer_cb+0x10a>
 8007a24:	be00      	bkpt	0x0000
 8007a26:	2300      	movs	r3, #0
 8007a28:	e021      	b.n	8007a6e <usbd_control_xfer_cb+0x152>
    } else {
      // Stall both IN and OUT control endpoint
      dcd_edpt_stall(rhport, EDPT_CTRL_OUT);
 8007a2a:	79fb      	ldrb	r3, [r7, #7]
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f000 ff30 	bl	8008894 <dcd_edpt_stall>
      dcd_edpt_stall(rhport, EDPT_CTRL_IN);
 8007a34:	79fb      	ldrb	r3, [r7, #7]
 8007a36:	2180      	movs	r1, #128	@ 0x80
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f000 ff2b 	bl	8008894 <dcd_edpt_stall>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8007a3e:	e014      	b.n	8007a6a <usbd_control_xfer_cb+0x14e>
    }
  } else {
    // More data to transfer
    TU_ASSERT(data_stage_xact(rhport));
 8007a40:	79fb      	ldrb	r3, [r7, #7]
 8007a42:	4618      	mov	r0, r3
 8007a44:	f7ff fe72 	bl	800772c <data_stage_xact>
 8007a48:	4603      	mov	r3, r0
 8007a4a:	f083 0301 	eor.w	r3, r3, #1
 8007a4e:	b2db      	uxtb	r3, r3
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d00b      	beq.n	8007a6c <usbd_control_xfer_cb+0x150>
 8007a54:	4b09      	ldr	r3, [pc, #36]	@ (8007a7c <usbd_control_xfer_cb+0x160>)
 8007a56:	61bb      	str	r3, [r7, #24]
 8007a58:	69bb      	ldr	r3, [r7, #24]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d000      	beq.n	8007a66 <usbd_control_xfer_cb+0x14a>
 8007a64:	be00      	bkpt	0x0000
 8007a66:	2300      	movs	r3, #0
 8007a68:	e001      	b.n	8007a6e <usbd_control_xfer_cb+0x152>
      (xferred_bytes < CFG_TUD_ENDPOINT0_SIZE)) {
 8007a6a:	bf00      	nop
  }

  return true;
 8007a6c:	2301      	movs	r3, #1
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3720      	adds	r7, #32
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}
 8007a76:	bf00      	nop
 8007a78:	20000bb8 	.word	0x20000bb8
 8007a7c:	e000edf0 	.word	0xe000edf0
 8007a80:	20000bcc 	.word	0x20000bcc

08007a84 <__NVIC_EnableIRQ>:
{
 8007a84:	b480      	push	{r7}
 8007a86:	b083      	sub	sp, #12
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	db0b      	blt.n	8007aae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007a96:	79fb      	ldrb	r3, [r7, #7]
 8007a98:	f003 021f 	and.w	r2, r3, #31
 8007a9c:	4907      	ldr	r1, [pc, #28]	@ (8007abc <__NVIC_EnableIRQ+0x38>)
 8007a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007aa2:	095b      	lsrs	r3, r3, #5
 8007aa4:	2001      	movs	r0, #1
 8007aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8007aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007aae:	bf00      	nop
 8007ab0:	370c      	adds	r7, #12
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	e000e100 	.word	0xe000e100

08007ac0 <__NVIC_DisableIRQ>:
{
 8007ac0:	b480      	push	{r7}
 8007ac2:	b083      	sub	sp, #12
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	db12      	blt.n	8007af8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007ad2:	79fb      	ldrb	r3, [r7, #7]
 8007ad4:	f003 021f 	and.w	r2, r3, #31
 8007ad8:	490a      	ldr	r1, [pc, #40]	@ (8007b04 <__NVIC_DisableIRQ+0x44>)
 8007ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007ade:	095b      	lsrs	r3, r3, #5
 8007ae0:	2001      	movs	r0, #1
 8007ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8007ae6:	3320      	adds	r3, #32
 8007ae8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 8007aec:	f3bf 8f4f 	dsb	sy
}
 8007af0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8007af2:	f3bf 8f6f 	isb	sy
}
 8007af6:	bf00      	nop
}
 8007af8:	bf00      	nop
 8007afa:	370c      	adds	r7, #12
 8007afc:	46bd      	mov	sp, r7
 8007afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b02:	4770      	bx	lr
 8007b04:	e000e100 	.word	0xe000e100

08007b08 <dma_setup_prepare>:
  // Internal DMA only
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
}

static void dma_setup_prepare(uint8_t rhport) {
 8007b08:	b480      	push	{r7}
 8007b0a:	b085      	sub	sp, #20
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	4603      	mov	r3, r0
 8007b10:	71fb      	strb	r3, [r7, #7]
 8007b12:	79fb      	ldrb	r3, [r7, #7]
 8007b14:	72fb      	strb	r3, [r7, #11]

//--------------------------------------------------------------------+
// Core/Controller
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline dwc2_regs_t* DWC2_REG(uint8_t rhport) {
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007b16:	7afb      	ldrb	r3, [r7, #11]
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d001      	beq.n	8007b20 <dma_setup_prepare+0x18>
    // user mis-configured, ignore and use first controller
    rhport = 0;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	72fb      	strb	r3, [r7, #11]
  }
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007b20:	7afb      	ldrb	r3, [r7, #11]
 8007b22:	4a13      	ldr	r2, [pc, #76]	@ (8007b70 <dma_setup_prepare+0x68>)
 8007b24:	011b      	lsls	r3, r3, #4
 8007b26:	4413      	add	r3, r2
 8007b28:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007b2a:	60fb      	str	r3, [r7, #12]

  if (dwc2->gsnpsid >= DWC2_CORE_REV_3_00a) {
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b30:	4a10      	ldr	r2, [pc, #64]	@ (8007b74 <dma_setup_prepare+0x6c>)
 8007b32:	4293      	cmp	r3, r2
 8007b34:	d904      	bls.n	8007b40 <dma_setup_prepare+0x38>
    if(dwc2->epout[0].doepctl & DOEPCTL_EPENA) {
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	db10      	blt.n	8007b62 <dma_setup_prepare+0x5a>
      return;
    }
  }

  // Receive only 1 packet
  dwc2->epout[0].doeptsiz = (1 << DOEPTSIZ_STUPCNT_Pos) | (1 << DOEPTSIZ_PKTCNT_Pos) | (8 << DOEPTSIZ_XFRSIZ_Pos);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	4a0d      	ldr	r2, [pc, #52]	@ (8007b78 <dma_setup_prepare+0x70>)
 8007b44:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  dwc2->epout[0].doepdma = (uintptr_t) _dcd_usbbuf.setup_packet;
 8007b48:	4a0c      	ldr	r2, [pc, #48]	@ (8007b7c <dma_setup_prepare+0x74>)
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	f8c3 2b14 	str.w	r2, [r3, #2836]	@ 0xb14
  dwc2->epout[0].doepctl |= DOEPCTL_EPENA | DOEPCTL_USBAEP;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8007b56:	f043 2280 	orr.w	r2, r3, #2147516416	@ 0x80008000
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00
 8007b60:	e000      	b.n	8007b64 <dma_setup_prepare+0x5c>
      return;
 8007b62:	bf00      	nop
}
 8007b64:	3714      	adds	r7, #20
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	0800a7a4 	.word	0x0800a7a4
 8007b74:	4f543009 	.word	0x4f543009
 8007b78:	20080008 	.word	0x20080008
 8007b7c:	20000c94 	.word	0x20000c94

08007b80 <dfifo_alloc>:

TU_ATTR_ALWAYS_INLINE static inline uint16_t calc_device_grxfsiz(uint16_t largest_ep_size, uint8_t ep_count) {
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
}

static bool dfifo_alloc(uint8_t rhport, uint8_t ep_addr, uint16_t packet_size) {
 8007b80:	b480      	push	{r7}
 8007b82:	b091      	sub	sp, #68	@ 0x44
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	4603      	mov	r3, r0
 8007b88:	71fb      	strb	r3, [r7, #7]
 8007b8a:	460b      	mov	r3, r1
 8007b8c:	71bb      	strb	r3, [r7, #6]
 8007b8e:	4613      	mov	r3, r2
 8007b90:	80bb      	strh	r3, [r7, #4]
 8007b92:	79fb      	ldrb	r3, [r7, #7]
 8007b94:	767b      	strb	r3, [r7, #25]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007b96:	7e7b      	ldrb	r3, [r7, #25]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d001      	beq.n	8007ba0 <dfifo_alloc+0x20>
    rhport = 0;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	767b      	strb	r3, [r7, #25]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007ba0:	7e7b      	ldrb	r3, [r7, #25]
 8007ba2:	4a65      	ldr	r2, [pc, #404]	@ (8007d38 <dfifo_alloc+0x1b8>)
 8007ba4:	011b      	lsls	r3, r3, #4
 8007ba6:	4413      	add	r3, r2
 8007ba8:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007baa:	63bb      	str	r3, [r7, #56]	@ 0x38
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8007bac:	79fb      	ldrb	r3, [r7, #7]
 8007bae:	011b      	lsls	r3, r3, #4
 8007bb0:	4a61      	ldr	r2, [pc, #388]	@ (8007d38 <dfifo_alloc+0x1b8>)
 8007bb2:	4413      	add	r3, r2
 8007bb4:	637b      	str	r3, [r7, #52]	@ 0x34
  const uint8_t ep_count = dwc2_controller->ep_count;
 8007bb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007bb8:	7a1b      	ldrb	r3, [r3, #8]
 8007bba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8007bbe:	79bb      	ldrb	r3, [r7, #6]
 8007bc0:	76bb      	strb	r3, [r7, #26]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007bc2:	7ebb      	ldrb	r3, [r7, #26]
 8007bc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007bc8:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8007bca:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
 8007bce:	79bb      	ldrb	r3, [r7, #6]
 8007bd0:	76fb      	strb	r3, [r7, #27]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007bd2:	7efb      	ldrb	r3, [r7, #27]
 8007bd4:	09db      	lsrs	r3, r3, #7
 8007bd6:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8007bd8:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31

  TU_ASSERT(epnum < ep_count);
 8007bdc:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8007be0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d30a      	bcc.n	8007bfe <dfifo_alloc+0x7e>
 8007be8:	4b54      	ldr	r3, [pc, #336]	@ (8007d3c <dfifo_alloc+0x1bc>)
 8007bea:	61fb      	str	r3, [r7, #28]
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	f003 0301 	and.w	r3, r3, #1
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d000      	beq.n	8007bfa <dfifo_alloc+0x7a>
 8007bf8:	be00      	bkpt	0x0000
 8007bfa:	2300      	movs	r3, #0
 8007bfc:	e095      	b.n	8007d2a <dfifo_alloc+0x1aa>

  uint16_t fifo_size = tu_div_ceil(packet_size, 4);
 8007bfe:	88bb      	ldrh	r3, [r7, #4]
 8007c00:	617b      	str	r3, [r7, #20]
 8007c02:	2304      	movs	r3, #4
 8007c04:	613b      	str	r3, [r7, #16]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 8007c06:	697a      	ldr	r2, [r7, #20]
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	4413      	add	r3, r2
 8007c0c:	1e5a      	subs	r2, r3, #1
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c14:	87fb      	strh	r3, [r7, #62]	@ 0x3e
  if (dir == TUSB_DIR_OUT) {
 8007c16:	f897 3031 	ldrb.w	r3, [r7, #49]	@ 0x31
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d12a      	bne.n	8007c74 <dfifo_alloc+0xf4>
    // Calculate required size of RX FIFO
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8007c1e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007c20:	009b      	lsls	r3, r3, #2
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	81fb      	strh	r3, [r7, #14]
 8007c26:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8007c2a:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8007c2c:	89fb      	ldrh	r3, [r7, #14]
 8007c2e:	089b      	lsrs	r3, r3, #2
 8007c30:	b29b      	uxth	r3, r3
 8007c32:	f103 0208 	add.w	r2, r3, #8
 8007c36:	7b7b      	ldrb	r3, [r7, #13]
 8007c38:	4413      	add	r3, r2
 8007c3a:	b29b      	uxth	r3, r3
 8007c3c:	005b      	lsls	r3, r3, #1
 8007c3e:	b29b      	uxth	r3, r3
    const uint16_t new_sz = calc_device_grxfsiz(4 * fifo_size, ep_count);
 8007c40:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // If size_rx needs to be extended check if there is enough free space
    if (dwc2->grxfsiz < new_sz) {
 8007c42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c44:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c46:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d26d      	bcs.n	8007d28 <dfifo_alloc+0x1a8>
      TU_ASSERT(new_sz <= _dcd_data.dfifo_top);
 8007c4c:	4b3c      	ldr	r3, [pc, #240]	@ (8007d40 <dfifo_alloc+0x1c0>)
 8007c4e:	889b      	ldrh	r3, [r3, #4]
 8007c50:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d90a      	bls.n	8007c6c <dfifo_alloc+0xec>
 8007c56:	4b39      	ldr	r3, [pc, #228]	@ (8007d3c <dfifo_alloc+0x1bc>)
 8007c58:	623b      	str	r3, [r7, #32]
 8007c5a:	6a3b      	ldr	r3, [r7, #32]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d000      	beq.n	8007c68 <dfifo_alloc+0xe8>
 8007c66:	be00      	bkpt	0x0000
 8007c68:	2300      	movs	r3, #0
 8007c6a:	e05e      	b.n	8007d2a <dfifo_alloc+0x1aa>
      dwc2->grxfsiz = new_sz; // Enlarge RX FIFO
 8007c6c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007c6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c70:	625a      	str	r2, [r3, #36]	@ 0x24
 8007c72:	e059      	b.n	8007d28 <dfifo_alloc+0x1a8>
    }
  } else {
    // Check IN endpoints concurrently active limit
    if(dwc2_controller->ep_in_count) {
 8007c74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c76:	7a5b      	ldrb	r3, [r3, #9]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d016      	beq.n	8007caa <dfifo_alloc+0x12a>
      TU_ASSERT(_dcd_data.allocated_epin_count < dwc2_controller->ep_in_count);
 8007c7c:	4b30      	ldr	r3, [pc, #192]	@ (8007d40 <dfifo_alloc+0x1c0>)
 8007c7e:	799a      	ldrb	r2, [r3, #6]
 8007c80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007c82:	7a5b      	ldrb	r3, [r3, #9]
 8007c84:	429a      	cmp	r2, r3
 8007c86:	d30a      	bcc.n	8007c9e <dfifo_alloc+0x11e>
 8007c88:	4b2c      	ldr	r3, [pc, #176]	@ (8007d3c <dfifo_alloc+0x1bc>)
 8007c8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f003 0301 	and.w	r3, r3, #1
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d000      	beq.n	8007c9a <dfifo_alloc+0x11a>
 8007c98:	be00      	bkpt	0x0000
 8007c9a:	2300      	movs	r3, #0
 8007c9c:	e045      	b.n	8007d2a <dfifo_alloc+0x1aa>
      _dcd_data.allocated_epin_count++;
 8007c9e:	4b28      	ldr	r3, [pc, #160]	@ (8007d40 <dfifo_alloc+0x1c0>)
 8007ca0:	799b      	ldrb	r3, [r3, #6]
 8007ca2:	3301      	adds	r3, #1
 8007ca4:	b2da      	uxtb	r2, r3
 8007ca6:	4b26      	ldr	r3, [pc, #152]	@ (8007d40 <dfifo_alloc+0x1c0>)
 8007ca8:	719a      	strb	r2, [r3, #6]
    }

    // If The TXFELVL is configured as half empty, the fifo must be twice the max_size.
    if ((dwc2->gahbcfg & GAHBCFG_TX_FIFO_EPMTY_LVL) == 0) {
 8007caa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d102      	bne.n	8007cbc <dfifo_alloc+0x13c>
      fifo_size *= 2;
 8007cb6:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007cb8:	005b      	lsls	r3, r3, #1
 8007cba:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }

    // Check if free space is available
    TU_ASSERT(_dcd_data.dfifo_top >= fifo_size + dwc2->grxfsiz);
 8007cbc:	4b20      	ldr	r3, [pc, #128]	@ (8007d40 <dfifo_alloc+0x1c0>)
 8007cbe:	889b      	ldrh	r3, [r3, #4]
 8007cc0:	4619      	mov	r1, r3
 8007cc2:	8ffa      	ldrh	r2, [r7, #62]	@ 0x3e
 8007cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cc8:	4413      	add	r3, r2
 8007cca:	4299      	cmp	r1, r3
 8007ccc:	d20a      	bcs.n	8007ce4 <dfifo_alloc+0x164>
 8007cce:	4b1b      	ldr	r3, [pc, #108]	@ (8007d3c <dfifo_alloc+0x1bc>)
 8007cd0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f003 0301 	and.w	r3, r3, #1
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d000      	beq.n	8007ce0 <dfifo_alloc+0x160>
 8007cde:	be00      	bkpt	0x0000
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	e022      	b.n	8007d2a <dfifo_alloc+0x1aa>
    _dcd_data.dfifo_top -= fifo_size;
 8007ce4:	4b16      	ldr	r3, [pc, #88]	@ (8007d40 <dfifo_alloc+0x1c0>)
 8007ce6:	889a      	ldrh	r2, [r3, #4]
 8007ce8:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007cea:	1ad3      	subs	r3, r2, r3
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	4b14      	ldr	r3, [pc, #80]	@ (8007d40 <dfifo_alloc+0x1c0>)
 8007cf0:	809a      	strh	r2, [r3, #4]
    // TU_LOG(DWC2_DEBUG, "    TX FIFO %u: allocated %u words at offset %u\r\n", epnum, fifo_size, dfifo_top);

    // Both TXFD and TXSA are in unit of 32-bit words.
    if (epnum == 0) {
 8007cf2:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d108      	bne.n	8007d0c <dfifo_alloc+0x18c>
      dwc2->dieptxf0 = (fifo_size << DIEPTXF0_TX0FD_Pos) | _dcd_data.dfifo_top;
 8007cfa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007cfc:	041b      	lsls	r3, r3, #16
 8007cfe:	4a10      	ldr	r2, [pc, #64]	@ (8007d40 <dfifo_alloc+0x1c0>)
 8007d00:	8892      	ldrh	r2, [r2, #4]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	461a      	mov	r2, r3
 8007d06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d08:	629a      	str	r2, [r3, #40]	@ 0x28
 8007d0a:	e00d      	b.n	8007d28 <dfifo_alloc+0x1a8>
    } else {
      // DIEPTXF starts at FIFO #1.
      dwc2->dieptxf[epnum - 1] = (fifo_size << DIEPTXF_INEPTXFD_Pos) | _dcd_data.dfifo_top;
 8007d0c:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8007d0e:	041b      	lsls	r3, r3, #16
 8007d10:	4a0b      	ldr	r2, [pc, #44]	@ (8007d40 <dfifo_alloc+0x1c0>)
 8007d12:	8892      	ldrh	r2, [r2, #4]
 8007d14:	431a      	orrs	r2, r3
 8007d16:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	4611      	mov	r1, r2
 8007d1e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d20:	3340      	adds	r3, #64	@ 0x40
 8007d22:	009b      	lsls	r3, r3, #2
 8007d24:	4413      	add	r3, r2
 8007d26:	6059      	str	r1, [r3, #4]
    }
  }

  return true;
 8007d28:	2301      	movs	r3, #1
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3744      	adds	r7, #68	@ 0x44
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d34:	4770      	bx	lr
 8007d36:	bf00      	nop
 8007d38:	0800a7a4 	.word	0x0800a7a4
 8007d3c:	e000edf0 	.word	0xe000edf0
 8007d40:	20000c8c 	.word	0x20000c8c

08007d44 <dfifo_device_init>:

static void dfifo_device_init(uint8_t rhport) {
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b088      	sub	sp, #32
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	4603      	mov	r3, r0
 8007d4c:	71fb      	strb	r3, [r7, #7]
  const dwc2_controller_t* dwc2_controller = &_dwc2_controller[rhport];
 8007d4e:	79fb      	ldrb	r3, [r7, #7]
 8007d50:	011b      	lsls	r3, r3, #4
 8007d52:	4a27      	ldr	r2, [pc, #156]	@ (8007df0 <dfifo_device_init+0xac>)
 8007d54:	4413      	add	r3, r2
 8007d56:	61fb      	str	r3, [r7, #28]
 8007d58:	79fb      	ldrb	r3, [r7, #7]
 8007d5a:	733b      	strb	r3, [r7, #12]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007d5c:	7b3b      	ldrb	r3, [r7, #12]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d001      	beq.n	8007d66 <dfifo_device_init+0x22>
    rhport = 0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	733b      	strb	r3, [r7, #12]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007d66:	7b3b      	ldrb	r3, [r7, #12]
 8007d68:	4a21      	ldr	r2, [pc, #132]	@ (8007df0 <dfifo_device_init+0xac>)
 8007d6a:	011b      	lsls	r3, r3, #4
 8007d6c:	4413      	add	r3, r2
 8007d6e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007d70:	61bb      	str	r3, [r7, #24]
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8007d72:	69fb      	ldr	r3, [r7, #28]
 8007d74:	7a1b      	ldrb	r3, [r3, #8]
 8007d76:	2240      	movs	r2, #64	@ 0x40
 8007d78:	81fa      	strh	r2, [r7, #14]
 8007d7a:	737b      	strb	r3, [r7, #13]
  return 13 + 1 + 2 * ((largest_ep_size / 4) + 1) + 2 * ep_count;
 8007d7c:	89fb      	ldrh	r3, [r7, #14]
 8007d7e:	089b      	lsrs	r3, r3, #2
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	f103 0208 	add.w	r2, r3, #8
 8007d86:	7b7b      	ldrb	r3, [r7, #13]
 8007d88:	4413      	add	r3, r2
 8007d8a:	b29b      	uxth	r3, r3
 8007d8c:	005b      	lsls	r3, r3, #1
 8007d8e:	b29b      	uxth	r3, r3
  dwc2->grxfsiz = calc_device_grxfsiz(CFG_TUD_ENDPOINT0_SIZE, dwc2_controller->ep_count);
 8007d90:	461a      	mov	r2, r3
 8007d92:	69bb      	ldr	r3, [r7, #24]
 8007d94:	625a      	str	r2, [r3, #36]	@ 0x24
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d9e:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8007da0:	2300      	movs	r3, #0

  // Scatter/Gather DMA mode is not yet supported. Buffer DMA only need 1 words per endpoint direction
  const bool is_dma = dma_device_enabled(dwc2);
 8007da2:	75fb      	strb	r3, [r7, #23]
  _dcd_data.dfifo_top = dwc2_controller->ep_fifo_size/4;
 8007da4:	69fb      	ldr	r3, [r7, #28]
 8007da6:	68db      	ldr	r3, [r3, #12]
 8007da8:	089b      	lsrs	r3, r3, #2
 8007daa:	b29a      	uxth	r2, r3
 8007dac:	4b11      	ldr	r3, [pc, #68]	@ (8007df4 <dfifo_device_init+0xb0>)
 8007dae:	809a      	strh	r2, [r3, #4]
  if (is_dma) {
 8007db0:	7dfb      	ldrb	r3, [r7, #23]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d009      	beq.n	8007dca <dfifo_device_init+0x86>
    _dcd_data.dfifo_top -= 2 * dwc2_controller->ep_count;
 8007db6:	4b0f      	ldr	r3, [pc, #60]	@ (8007df4 <dfifo_device_init+0xb0>)
 8007db8:	889a      	ldrh	r2, [r3, #4]
 8007dba:	69fb      	ldr	r3, [r7, #28]
 8007dbc:	7a1b      	ldrb	r3, [r3, #8]
 8007dbe:	005b      	lsls	r3, r3, #1
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	1ad3      	subs	r3, r2, r3
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8007df4 <dfifo_device_init+0xb0>)
 8007dc8:	809a      	strh	r2, [r3, #4]
  }
  dwc2->gdfifocfg = (_dcd_data.dfifo_top << GDFIFOCFG_EPINFOBASE_SHIFT) | _dcd_data.dfifo_top;
 8007dca:	4b0a      	ldr	r3, [pc, #40]	@ (8007df4 <dfifo_device_init+0xb0>)
 8007dcc:	889b      	ldrh	r3, [r3, #4]
 8007dce:	461a      	mov	r2, r3
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	041b      	lsls	r3, r3, #16
 8007dd4:	441a      	add	r2, r3
 8007dd6:	69bb      	ldr	r3, [r7, #24]
 8007dd8:	65da      	str	r2, [r3, #92]	@ 0x5c

  // Allocate FIFO for EP0 IN
  dfifo_alloc(rhport, 0x80, CFG_TUD_ENDPOINT0_SIZE);
 8007dda:	79fb      	ldrb	r3, [r7, #7]
 8007ddc:	2240      	movs	r2, #64	@ 0x40
 8007dde:	2180      	movs	r1, #128	@ 0x80
 8007de0:	4618      	mov	r0, r3
 8007de2:	f7ff fecd 	bl	8007b80 <dfifo_alloc>
}
 8007de6:	bf00      	nop
 8007de8:	3720      	adds	r7, #32
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	0800a7a4 	.word	0x0800a7a4
 8007df4:	20000c8c 	.word	0x20000c8c

08007df8 <edpt_activate>:


//--------------------------------------------------------------------
// Endpoint
//--------------------------------------------------------------------
static void edpt_activate(uint8_t rhport, const tusb_desc_endpoint_t* p_endpoint_desc) {
 8007df8:	b480      	push	{r7}
 8007dfa:	b08b      	sub	sp, #44	@ 0x2c
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	4603      	mov	r3, r0
 8007e00:	6039      	str	r1, [r7, #0]
 8007e02:	71fb      	strb	r3, [r7, #7]
 8007e04:	79fb      	ldrb	r3, [r7, #7]
 8007e06:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007e08:	7c7b      	ldrb	r3, [r7, #17]
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d001      	beq.n	8007e12 <edpt_activate+0x1a>
    rhport = 0;
 8007e0e:	2300      	movs	r3, #0
 8007e10:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007e12:	7c7b      	ldrb	r3, [r7, #17]
 8007e14:	4a45      	ldr	r2, [pc, #276]	@ (8007f2c <edpt_activate+0x134>)
 8007e16:	011b      	lsls	r3, r3, #4
 8007e18:	4413      	add	r3, r2
 8007e1a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007e1c:	627b      	str	r3, [r7, #36]	@ 0x24
  const uint8_t epnum = tu_edpt_number(p_endpoint_desc->bEndpointAddress);
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	789b      	ldrb	r3, [r3, #2]
 8007e22:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007e24:	7cbb      	ldrb	r3, [r7, #18]
 8007e26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007e2a:	b2db      	uxtb	r3, r3
 8007e2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  const uint8_t dir = tu_edpt_dir(p_endpoint_desc->bEndpointAddress);
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	789b      	ldrb	r3, [r3, #2]
 8007e34:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007e36:	7cfb      	ldrb	r3, [r7, #19]
 8007e38:	09db      	lsrs	r3, r3, #7
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8007e40:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8007e44:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8007e48:	0052      	lsls	r2, r2, #1
 8007e4a:	4413      	add	r3, r2
 8007e4c:	011b      	lsls	r3, r3, #4
 8007e4e:	4a38      	ldr	r2, [pc, #224]	@ (8007f30 <edpt_activate+0x138>)
 8007e50:	4413      	add	r3, r2
 8007e52:	61fb      	str	r3, [r7, #28]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	617b      	str	r3, [r7, #20]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	889b      	ldrh	r3, [r3, #4]
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e62:	b29a      	uxth	r2, r3
  xfer->max_size = tu_edpt_packet_size(p_endpoint_desc);
 8007e64:	69fb      	ldr	r3, [r7, #28]
 8007e66:	815a      	strh	r2, [r3, #10]
  xfer->interval = p_endpoint_desc->bInterval;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	799a      	ldrb	r2, [r3, #6]
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	731a      	strb	r2, [r3, #12]

  // Endpoint control
  dwc2_depctl_t depctl = {.value = 0};
 8007e70:	2300      	movs	r3, #0
 8007e72:	60fb      	str	r3, [r7, #12]
  depctl.mps = xfer->max_size;
 8007e74:	69fb      	ldr	r3, [r7, #28]
 8007e76:	895b      	ldrh	r3, [r3, #10]
 8007e78:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	89bb      	ldrh	r3, [r7, #12]
 8007e80:	f362 030a 	bfi	r3, r2, #0, #11
 8007e84:	81bb      	strh	r3, [r7, #12]
  depctl.active = 1;
 8007e86:	7b7b      	ldrb	r3, [r7, #13]
 8007e88:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007e8c:	737b      	strb	r3, [r7, #13]
  depctl.type = p_endpoint_desc->bmAttributes.xfer;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	78db      	ldrb	r3, [r3, #3]
 8007e92:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	7bbb      	ldrb	r3, [r7, #14]
 8007e9a:	f362 0383 	bfi	r3, r2, #2, #2
 8007e9e:	73bb      	strb	r3, [r7, #14]
  if (p_endpoint_desc->bmAttributes.xfer != TUSB_XFER_ISOCHRONOUS) {
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	78db      	ldrb	r3, [r3, #3]
 8007ea4:	f003 0303 	and.w	r3, r3, #3
 8007ea8:	b2db      	uxtb	r3, r3
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d003      	beq.n	8007eb6 <edpt_activate+0xbe>
    depctl.set_data0_iso_even = 1;
 8007eae:	7bfb      	ldrb	r3, [r7, #15]
 8007eb0:	f043 0310 	orr.w	r3, r3, #16
 8007eb4:	73fb      	strb	r3, [r7, #15]
  }
  if (dir == TUSB_DIR_IN) {
 8007eb6:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d108      	bne.n	8007ed0 <edpt_activate+0xd8>
    depctl.tx_fifo_num = epnum;
 8007ebe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007ec2:	f003 030f 	and.w	r3, r3, #15
 8007ec6:	b2da      	uxtb	r2, r3
 8007ec8:	89fb      	ldrh	r3, [r7, #14]
 8007eca:	f362 1389 	bfi	r3, r2, #6, #4
 8007ece:	81fb      	strh	r3, [r7, #14]
  }

  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8007ed0:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	bf14      	ite	ne
 8007ed8:	2301      	movne	r3, #1
 8007eda:	2300      	moveq	r3, #0
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	461a      	mov	r2, r3
 8007ee0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007ee4:	0112      	lsls	r2, r2, #4
 8007ee6:	4413      	add	r3, r2
 8007ee8:	3348      	adds	r3, #72	@ 0x48
 8007eea:	015b      	lsls	r3, r3, #5
 8007eec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eee:	4413      	add	r3, r2
 8007ef0:	61bb      	str	r3, [r7, #24]
  dep->ctl = depctl.value;
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	601a      	str	r2, [r3, #0]
  dwc2->daintmsk |= TU_BIT(epnum + DAINT_SHIFT(dir));
 8007ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007efa:	f8d3 281c 	ldr.w	r2, [r3, #2076]	@ 0x81c
 8007efe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8007f02:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8007f06:	2901      	cmp	r1, #1
 8007f08:	d101      	bne.n	8007f0e <edpt_activate+0x116>
 8007f0a:	2100      	movs	r1, #0
 8007f0c:	e000      	b.n	8007f10 <edpt_activate+0x118>
 8007f0e:	2110      	movs	r1, #16
 8007f10:	440b      	add	r3, r1
 8007f12:	2101      	movs	r1, #1
 8007f14:	fa01 f303 	lsl.w	r3, r1, r3
 8007f18:	431a      	orrs	r2, r3
 8007f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1c:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
}
 8007f20:	bf00      	nop
 8007f22:	372c      	adds	r7, #44	@ 0x2c
 8007f24:	46bd      	mov	sp, r7
 8007f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2a:	4770      	bx	lr
 8007f2c:	0800a7a4 	.word	0x0800a7a4
 8007f30:	20000c0c 	.word	0x20000c0c

08007f34 <edpt_disable>:

static void edpt_disable(uint8_t rhport, uint8_t ep_addr, bool stall) {
 8007f34:	b480      	push	{r7}
 8007f36:	b089      	sub	sp, #36	@ 0x24
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	71fb      	strb	r3, [r7, #7]
 8007f3e:	460b      	mov	r3, r1
 8007f40:	71bb      	strb	r3, [r7, #6]
 8007f42:	4613      	mov	r3, r2
 8007f44:	717b      	strb	r3, [r7, #5]
 8007f46:	79fb      	ldrb	r3, [r7, #7]
 8007f48:	747b      	strb	r3, [r7, #17]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8007f4a:	7c7b      	ldrb	r3, [r7, #17]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d001      	beq.n	8007f54 <edpt_disable+0x20>
    rhport = 0;
 8007f50:	2300      	movs	r3, #0
 8007f52:	747b      	strb	r3, [r7, #17]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8007f54:	7c7b      	ldrb	r3, [r7, #17]
 8007f56:	4a5b      	ldr	r2, [pc, #364]	@ (80080c4 <edpt_disable+0x190>)
 8007f58:	011b      	lsls	r3, r3, #4
 8007f5a:	4413      	add	r3, r2
 8007f5c:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8007f5e:	61fb      	str	r3, [r7, #28]
 8007f60:	79bb      	ldrb	r3, [r7, #6]
 8007f62:	74bb      	strb	r3, [r7, #18]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8007f64:	7cbb      	ldrb	r3, [r7, #18]
 8007f66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f6a:	b2db      	uxtb	r3, r3
  const uint8_t epnum = tu_edpt_number(ep_addr);
 8007f6c:	76fb      	strb	r3, [r7, #27]
 8007f6e:	79bb      	ldrb	r3, [r7, #6]
 8007f70:	74fb      	strb	r3, [r7, #19]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8007f72:	7cfb      	ldrb	r3, [r7, #19]
 8007f74:	09db      	lsrs	r3, r3, #7
 8007f76:	b2db      	uxtb	r3, r3
  const uint8_t dir = tu_edpt_dir(ep_addr);
 8007f78:	76bb      	strb	r3, [r7, #26]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8007f7a:	7ebb      	ldrb	r3, [r7, #26]
 8007f7c:	2b01      	cmp	r3, #1
 8007f7e:	bf14      	ite	ne
 8007f80:	2301      	movne	r3, #1
 8007f82:	2300      	moveq	r3, #0
 8007f84:	b2db      	uxtb	r3, r3
 8007f86:	461a      	mov	r2, r3
 8007f88:	7efb      	ldrb	r3, [r7, #27]
 8007f8a:	0112      	lsls	r2, r2, #4
 8007f8c:	4413      	add	r3, r2
 8007f8e:	3348      	adds	r3, #72	@ 0x48
 8007f90:	015b      	lsls	r3, r3, #5
 8007f92:	69fa      	ldr	r2, [r7, #28]
 8007f94:	4413      	add	r3, r2
 8007f96:	617b      	str	r3, [r7, #20]

  if (dir == TUSB_DIR_IN) {
 8007f98:	7ebb      	ldrb	r3, [r7, #26]
 8007f9a:	2b01      	cmp	r3, #1
 8007f9c:	d149      	bne.n	8008032 <edpt_disable+0xfe>
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->diepctl & DIEPCTL_EPENA)) {
 8007f9e:	7efb      	ldrb	r3, [r7, #27]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d003      	beq.n	8007fac <edpt_disable+0x78>
 8007fa4:	697b      	ldr	r3, [r7, #20]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	db0d      	blt.n	8007fc8 <edpt_disable+0x94>
      dep->diepctl |= DIEPCTL_SNAK | (stall ? DIEPCTL_STALL : 0);
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	797a      	ldrb	r2, [r7, #5]
 8007fb2:	2a00      	cmp	r2, #0
 8007fb4:	d002      	beq.n	8007fbc <edpt_disable+0x88>
 8007fb6:	f04f 6202 	mov.w	r2, #136314880	@ 0x8200000
 8007fba:	e001      	b.n	8007fc0 <edpt_disable+0x8c>
 8007fbc:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007fc0:	431a      	orrs	r2, r3
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	601a      	str	r2, [r3, #0]
 8007fc6:	e022      	b.n	800800e <edpt_disable+0xda>
    } else {
      // Stop transmitting packets and NAK IN xfers.
      dep->diepctl |= DIEPCTL_SNAK;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 8007fd0:	697b      	ldr	r3, [r7, #20]
 8007fd2:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_INEPNE) == 0) {}
 8007fd4:	bf00      	nop
 8007fd6:	697b      	ldr	r3, [r7, #20]
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d0f9      	beq.n	8007fd6 <edpt_disable+0xa2>

      // Disable the endpoint.
      dep->diepctl |= DIEPCTL_EPDIS | (stall ? DIEPCTL_STALL : 0);
 8007fe2:	697b      	ldr	r3, [r7, #20]
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	797a      	ldrb	r2, [r7, #5]
 8007fe8:	2a00      	cmp	r2, #0
 8007fea:	d001      	beq.n	8007ff0 <edpt_disable+0xbc>
 8007fec:	4a36      	ldr	r2, [pc, #216]	@ (80080c8 <edpt_disable+0x194>)
 8007fee:	e001      	b.n	8007ff4 <edpt_disable+0xc0>
 8007ff0:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8007ff4:	431a      	orrs	r2, r3
 8007ff6:	697b      	ldr	r3, [r7, #20]
 8007ff8:	601a      	str	r2, [r3, #0]
      while ((dep->diepint & DIEPINT_EPDISD_Msk) == 0) {}
 8007ffa:	bf00      	nop
 8007ffc:	697b      	ldr	r3, [r7, #20]
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f003 0302 	and.w	r3, r3, #2
 8008004:	2b00      	cmp	r3, #0
 8008006:	d0f9      	beq.n	8007ffc <edpt_disable+0xc8>

      dep->diepint = DIEPINT_EPDISD;
 8008008:	697b      	ldr	r3, [r7, #20]
 800800a:	2202      	movs	r2, #2
 800800c:	609a      	str	r2, [r3, #8]
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	60fb      	str	r3, [r7, #12]
 8008012:	7efb      	ldrb	r3, [r7, #27]
 8008014:	72fb      	strb	r3, [r7, #11]
//--------------------------------------------------------------------+
// DFIFO
//--------------------------------------------------------------------+
TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_tx(dwc2_regs_t* dwc2, uint8_t fnum) {
  // flush TX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8008016:	7afb      	ldrb	r3, [r7, #11]
 8008018:	019b      	lsls	r3, r3, #6
 800801a:	f043 0220 	orr.w	r2, r3, #32
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8008022:	bf00      	nop
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	f003 0320 	and.w	r3, r3, #32
 800802c:	2b00      	cmp	r3, #0
 800802e:	d1f9      	bne.n	8008024 <edpt_disable+0xf0>
}
 8008030:	e041      	b.n	80080b6 <edpt_disable+0x182>

    // Flush the FIFO, and wait until we have confirmed it cleared.
    dfifo_flush_tx(dwc2, epnum);
  } else {
    // Only disable currently enabled non-control endpoint
    if ((epnum == 0) || !(dep->doepctl & DOEPCTL_EPENA)) {
 8008032:	7efb      	ldrb	r3, [r7, #27]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d003      	beq.n	8008040 <edpt_disable+0x10c>
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	2b00      	cmp	r3, #0
 800803e:	db0c      	blt.n	800805a <edpt_disable+0x126>
      dep->doepctl |= stall ? DOEPCTL_STALL : 0;
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	797a      	ldrb	r2, [r7, #5]
 8008046:	2a00      	cmp	r2, #0
 8008048:	d002      	beq.n	8008050 <edpt_disable+0x11c>
 800804a:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800804e:	e000      	b.n	8008052 <edpt_disable+0x11e>
 8008050:	2200      	movs	r2, #0
 8008052:	431a      	orrs	r2, r3
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	601a      	str	r2, [r3, #0]
 8008058:	e02d      	b.n	80080b6 <edpt_disable+0x182>
    } else {
      // Asserting GONAK is required to STALL an OUT endpoint.
      // Simpler to use polling here, we don't use the "B"OUTNAKEFF interrupt
      // anyway, and it can't be cleared by user code. If this while loop never
      // finishes, we have bigger problems than just the stack.
      dwc2->dctl |= DCTL_SGONAK;
 800805a:	69fb      	ldr	r3, [r7, #28]
 800805c:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8008060:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8008064:	69fb      	ldr	r3, [r7, #28]
 8008066:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
      while ((dwc2->gintsts & GINTSTS_BOUTNAKEFF_Msk) == 0) {}
 800806a:	bf00      	nop
 800806c:	69fb      	ldr	r3, [r7, #28]
 800806e:	695b      	ldr	r3, [r3, #20]
 8008070:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008074:	2b00      	cmp	r3, #0
 8008076:	d0f9      	beq.n	800806c <edpt_disable+0x138>

      // Ditto here disable the endpoint.
      dep->doepctl |= DOEPCTL_EPDIS | (stall ? DOEPCTL_STALL : 0);
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	797a      	ldrb	r2, [r7, #5]
 800807e:	2a00      	cmp	r2, #0
 8008080:	d001      	beq.n	8008086 <edpt_disable+0x152>
 8008082:	4a11      	ldr	r2, [pc, #68]	@ (80080c8 <edpt_disable+0x194>)
 8008084:	e001      	b.n	800808a <edpt_disable+0x156>
 8008086:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800808a:	431a      	orrs	r2, r3
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	601a      	str	r2, [r3, #0]
      while ((dep->doepint & DOEPINT_EPDISD_Msk) == 0) {}
 8008090:	bf00      	nop
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	689b      	ldr	r3, [r3, #8]
 8008096:	f003 0302 	and.w	r3, r3, #2
 800809a:	2b00      	cmp	r3, #0
 800809c:	d0f9      	beq.n	8008092 <edpt_disable+0x15e>

      dep->doepint = DOEPINT_EPDISD;
 800809e:	697b      	ldr	r3, [r7, #20]
 80080a0:	2202      	movs	r2, #2
 80080a2:	609a      	str	r2, [r3, #8]

      // Allow other OUT endpoints to keep receiving.
      dwc2->dctl |= DCTL_CGONAK;
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80080aa:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80080ae:	69fb      	ldr	r3, [r7, #28]
 80080b0:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
    }
  }
}
 80080b4:	bf00      	nop
 80080b6:	bf00      	nop
 80080b8:	3724      	adds	r7, #36	@ 0x24
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	0800a7a4 	.word	0x0800a7a4
 80080c8:	40200000 	.word	0x40200000

080080cc <edpt_schedule_packets>:

// Since this function returns void, it is not possible to return a boolean success message
// We must make sure that this function is not called when the EP is disabled
// Must be called from critical section
static void edpt_schedule_packets(uint8_t rhport, const uint8_t epnum, const uint8_t dir) {
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b090      	sub	sp, #64	@ 0x40
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	4603      	mov	r3, r0
 80080d4:	71fb      	strb	r3, [r7, #7]
 80080d6:	460b      	mov	r3, r1
 80080d8:	71bb      	strb	r3, [r7, #6]
 80080da:	4613      	mov	r3, r2
 80080dc:	717b      	strb	r3, [r7, #5]
 80080de:	79fb      	ldrb	r3, [r7, #7]
 80080e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80080e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d002      	beq.n	80080f2 <edpt_schedule_packets+0x26>
    rhport = 0;
 80080ec:	2300      	movs	r3, #0
 80080ee:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80080f2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80080f6:	4a65      	ldr	r2, [pc, #404]	@ (800828c <edpt_schedule_packets+0x1c0>)
 80080f8:	011b      	lsls	r3, r3, #4
 80080fa:	4413      	add	r3, r2
 80080fc:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80080fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  xfer_ctl_t* const xfer = XFER_CTL_BASE(epnum, dir);
 8008100:	79ba      	ldrb	r2, [r7, #6]
 8008102:	797b      	ldrb	r3, [r7, #5]
 8008104:	0052      	lsls	r2, r2, #1
 8008106:	4413      	add	r3, r2
 8008108:	011b      	lsls	r3, r3, #4
 800810a:	4a61      	ldr	r2, [pc, #388]	@ (8008290 <edpt_schedule_packets+0x1c4>)
 800810c:	4413      	add	r3, r2
 800810e:	637b      	str	r3, [r7, #52]	@ 0x34
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8008110:	797b      	ldrb	r3, [r7, #5]
 8008112:	2b01      	cmp	r3, #1
 8008114:	bf14      	ite	ne
 8008116:	2301      	movne	r3, #1
 8008118:	2300      	moveq	r3, #0
 800811a:	b2db      	uxtb	r3, r3
 800811c:	461a      	mov	r2, r3
 800811e:	79bb      	ldrb	r3, [r7, #6]
 8008120:	0112      	lsls	r2, r2, #4
 8008122:	4413      	add	r3, r2
 8008124:	3348      	adds	r3, #72	@ 0x48
 8008126:	015b      	lsls	r3, r3, #5
 8008128:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800812a:	4413      	add	r3, r2
 800812c:	633b      	str	r3, [r7, #48]	@ 0x30

  uint16_t num_packets;
  uint16_t total_bytes;

  // EP0 is limited to one packet per xfer
  if (epnum == 0) {
 800812e:	79bb      	ldrb	r3, [r7, #6]
 8008130:	2b00      	cmp	r3, #0
 8008132:	d11c      	bne.n	800816e <edpt_schedule_packets+0xa2>
    total_bytes = tu_min16(_dcd_data.ep0_pending[dir], xfer->max_size);
 8008134:	797b      	ldrb	r3, [r7, #5]
 8008136:	4a57      	ldr	r2, [pc, #348]	@ (8008294 <edpt_schedule_packets+0x1c8>)
 8008138:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 800813c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800813e:	895b      	ldrh	r3, [r3, #10]
 8008140:	853a      	strh	r2, [r7, #40]	@ 0x28
 8008142:	84fb      	strh	r3, [r7, #38]	@ 0x26
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008144:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8008146:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008148:	4293      	cmp	r3, r2
 800814a:	bf28      	it	cs
 800814c:	4613      	movcs	r3, r2
 800814e:	b29b      	uxth	r3, r3
 8008150:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    _dcd_data.ep0_pending[dir] -= total_bytes;
 8008152:	797b      	ldrb	r3, [r7, #5]
 8008154:	4a4f      	ldr	r2, [pc, #316]	@ (8008294 <edpt_schedule_packets+0x1c8>)
 8008156:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 800815a:	797b      	ldrb	r3, [r7, #5]
 800815c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800815e:	1a8a      	subs	r2, r1, r2
 8008160:	b291      	uxth	r1, r2
 8008162:	4a4c      	ldr	r2, [pc, #304]	@ (8008294 <edpt_schedule_packets+0x1c8>)
 8008164:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    num_packets = 1;
 8008168:	2301      	movs	r3, #1
 800816a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
 800816c:	e014      	b.n	8008198 <edpt_schedule_packets+0xcc>
  } else {
    total_bytes = xfer->total_len;
 800816e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008170:	891b      	ldrh	r3, [r3, #8]
 8008172:	87bb      	strh	r3, [r7, #60]	@ 0x3c
    num_packets = tu_div_ceil(total_bytes, xfer->max_size);
 8008174:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008176:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008178:	8952      	ldrh	r2, [r2, #10]
 800817a:	623b      	str	r3, [r7, #32]
 800817c:	61fa      	str	r2, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint32_t tu_div_ceil(uint32_t v, uint32_t d) { return TU_DIV_CEIL(v, d); }
 800817e:	6a3a      	ldr	r2, [r7, #32]
 8008180:	69fb      	ldr	r3, [r7, #28]
 8008182:	4413      	add	r3, r2
 8008184:	1e5a      	subs	r2, r3, #1
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	fbb2 f3f3 	udiv	r3, r2, r3
 800818c:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    if (num_packets == 0) {
 800818e:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 8008190:	2b00      	cmp	r3, #0
 8008192:	d101      	bne.n	8008198 <edpt_schedule_packets+0xcc>
      num_packets = 1; // zero length packet still count as 1
 8008194:	2301      	movs	r3, #1
 8008196:	87fb      	strh	r3, [r7, #62]	@ 0x3e
    }
  }

  // transfer size: A full OUT transfer (multiple packets, possibly) triggers XFRC.
  dwc2_ep_tsize_t deptsiz = {.value = 0};
 8008198:	2300      	movs	r3, #0
 800819a:	617b      	str	r3, [r7, #20]
  deptsiz.xfer_size = total_bytes;
 800819c:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 800819e:	f3c2 0212 	ubfx	r2, r2, #0, #19
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	f362 0312 	bfi	r3, r2, #0, #19
 80081a8:	617b      	str	r3, [r7, #20]
  deptsiz.packet_count = num_packets;
 80081aa:	8ffb      	ldrh	r3, [r7, #62]	@ 0x3e
 80081ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80081b0:	b29a      	uxth	r2, r3
 80081b2:	8afb      	ldrh	r3, [r7, #22]
 80081b4:	f362 03cc 	bfi	r3, r2, #3, #10
 80081b8:	82fb      	strh	r3, [r7, #22]
  dep->tsiz = deptsiz.value;
 80081ba:	697a      	ldr	r2, [r7, #20]
 80081bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081be:	611a      	str	r2, [r3, #16]

  // control
  dwc2_depctl_t depctl = {.value = dep->ctl};
 80081c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	613b      	str	r3, [r7, #16]
  depctl.clear_nak = 1;
 80081c6:	7cfb      	ldrb	r3, [r7, #19]
 80081c8:	f043 0304 	orr.w	r3, r3, #4
 80081cc:	74fb      	strb	r3, [r7, #19]
  depctl.enable = 1;
 80081ce:	7cfb      	ldrb	r3, [r7, #19]
 80081d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80081d4:	74fb      	strb	r3, [r7, #19]
  if (depctl.type == DEPCTL_EPTYPE_ISOCHRONOUS && xfer->interval == 1) {
 80081d6:	7cbb      	ldrb	r3, [r7, #18]
 80081d8:	f003 030c 	and.w	r3, r3, #12
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	2b04      	cmp	r3, #4
 80081e0:	d11a      	bne.n	8008218 <edpt_schedule_packets+0x14c>
 80081e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80081e4:	7b1b      	ldrb	r3, [r3, #12]
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d116      	bne.n	8008218 <edpt_schedule_packets+0x14c>
    const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 80081ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ec:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80081f0:	60bb      	str	r3, [r7, #8]
    const uint32_t odd_now = dsts.frame_number & 1u;
 80081f2:	68bb      	ldr	r3, [r7, #8]
 80081f4:	f3c3 230d 	ubfx	r3, r3, #8, #14
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	f003 0301 	and.w	r3, r3, #1
 80081fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (odd_now) {
 8008200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008202:	2b00      	cmp	r3, #0
 8008204:	d004      	beq.n	8008210 <edpt_schedule_packets+0x144>
      depctl.set_data0_iso_even = 1;
 8008206:	7cfb      	ldrb	r3, [r7, #19]
 8008208:	f043 0310 	orr.w	r3, r3, #16
 800820c:	74fb      	strb	r3, [r7, #19]
 800820e:	e003      	b.n	8008218 <edpt_schedule_packets+0x14c>
    } else {
      depctl.set_data1_iso_odd = 1;
 8008210:	7cfb      	ldrb	r3, [r7, #19]
 8008212:	f043 0320 	orr.w	r3, r3, #32
 8008216:	74fb      	strb	r3, [r7, #19]
 8008218:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800821a:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800821c:	69bb      	ldr	r3, [r7, #24]
 800821e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008220:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8008222:	2300      	movs	r3, #0
    }
  }

  const bool is_dma = dma_device_enabled(dwc2);
 8008224:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if(is_dma) {
 8008228:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800822c:	2b00      	cmp	r3, #0
 800822e:	d015      	beq.n	800825c <edpt_schedule_packets+0x190>
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 8008230:	797b      	ldrb	r3, [r7, #5]
 8008232:	2b01      	cmp	r3, #1
 8008234:	d109      	bne.n	800824a <edpt_schedule_packets+0x17e>
 8008236:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 8008238:	2b00      	cmp	r3, #0
 800823a:	d006      	beq.n	800824a <edpt_schedule_packets+0x17e>
      dcd_dcache_clean(xfer->buffer, total_bytes);
 800823c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8008242:	4611      	mov	r1, r2
 8008244:	4618      	mov	r0, r3
 8008246:	f7fd fd5c 	bl	8005d02 <dcd_dcache_clean>
    }
    dep->diepdma = (uintptr_t) xfer->buffer;
 800824a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	461a      	mov	r2, r3
 8008250:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008252:	615a      	str	r2, [r3, #20]
    dep->diepctl = depctl.value; // enable endpoint
 8008254:	693a      	ldr	r2, [r7, #16]
 8008256:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008258:	601a      	str	r2, [r3, #0]
    // Enable tx fifo empty interrupt only if there is data. Note must after depctl enable
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
      dwc2->diepempmsk |= (1 << epnum);
    }
  }
}
 800825a:	e013      	b.n	8008284 <edpt_schedule_packets+0x1b8>
    dep->diepctl = depctl.value; // enable endpoint
 800825c:	693a      	ldr	r2, [r7, #16]
 800825e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008260:	601a      	str	r2, [r3, #0]
    if (dir == TUSB_DIR_IN && total_bytes != 0) {
 8008262:	797b      	ldrb	r3, [r7, #5]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d10d      	bne.n	8008284 <edpt_schedule_packets+0x1b8>
 8008268:	8fbb      	ldrh	r3, [r7, #60]	@ 0x3c
 800826a:	2b00      	cmp	r3, #0
 800826c:	d00a      	beq.n	8008284 <edpt_schedule_packets+0x1b8>
      dwc2->diepempmsk |= (1 << epnum);
 800826e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008270:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8008274:	79ba      	ldrb	r2, [r7, #6]
 8008276:	2101      	movs	r1, #1
 8008278:	fa01 f202 	lsl.w	r2, r1, r2
 800827c:	431a      	orrs	r2, r3
 800827e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008280:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
}
 8008284:	bf00      	nop
 8008286:	3740      	adds	r7, #64	@ 0x40
 8008288:	46bd      	mov	sp, r7
 800828a:	bd80      	pop	{r7, pc}
 800828c:	0800a7a4 	.word	0x0800a7a4
 8008290:	20000c0c 	.word	0x20000c0c
 8008294:	20000c8c 	.word	0x20000c8c

08008298 <dcd_init>:

//--------------------------------------------------------------------
// Controller API
//--------------------------------------------------------------------
bool dcd_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 8008298:	b580      	push	{r7, lr}
 800829a:	b08c      	sub	sp, #48	@ 0x30
 800829c:	af00      	add	r7, sp, #0
 800829e:	4603      	mov	r3, r0
 80082a0:	6039      	str	r1, [r7, #0]
 80082a2:	71fb      	strb	r3, [r7, #7]
 80082a4:	79fb      	ldrb	r3, [r7, #7]
 80082a6:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80082a8:	7dfb      	ldrb	r3, [r7, #23]
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d001      	beq.n	80082b2 <dcd_init+0x1a>
    rhport = 0;
 80082ae:	2300      	movs	r3, #0
 80082b0:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80082b2:	7dfb      	ldrb	r3, [r7, #23]
 80082b4:	4a43      	ldr	r2, [pc, #268]	@ (80083c4 <dcd_init+0x12c>)
 80082b6:	011b      	lsls	r3, r3, #4
 80082b8:	4413      	add	r3, r2
 80082ba:	681b      	ldr	r3, [r3, #0]
  (void) rh_init;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80082bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  tu_memclr(&_dcd_data, sizeof(_dcd_data));
 80082be:	2208      	movs	r2, #8
 80082c0:	2100      	movs	r1, #0
 80082c2:	4841      	ldr	r0, [pc, #260]	@ (80083c8 <dcd_init+0x130>)
 80082c4:	f001 fcee 	bl	8009ca4 <memset>

  // Core Initialization
  const bool is_highspeed = dwc2_core_is_highspeed(dwc2, TUSB_ROLE_DEVICE);
 80082c8:	2101      	movs	r1, #1
 80082ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082cc:	f001 f9c6 	bl	800965c <dwc2_core_is_highspeed>
 80082d0:	4603      	mov	r3, r0
 80082d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80082d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082d8:	61bb      	str	r3, [r7, #24]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80082da:	69bb      	ldr	r3, [r7, #24]
 80082dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082de:	613b      	str	r3, [r7, #16]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 80082e0:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 80082e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
  TU_ASSERT(dwc2_core_init(rhport, is_highspeed, is_dma));
 80082e6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80082ea:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 80082ee:	79fb      	ldrb	r3, [r7, #7]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f001 f9d1 	bl	8009698 <dwc2_core_init>
 80082f6:	4603      	mov	r3, r0
 80082f8:	f083 0301 	eor.w	r3, r3, #1
 80082fc:	b2db      	uxtb	r3, r3
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00a      	beq.n	8008318 <dcd_init+0x80>
 8008302:	4b32      	ldr	r3, [pc, #200]	@ (80083cc <dcd_init+0x134>)
 8008304:	61fb      	str	r3, [r7, #28]
 8008306:	69fb      	ldr	r3, [r7, #28]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f003 0301 	and.w	r3, r3, #1
 800830e:	2b00      	cmp	r3, #0
 8008310:	d000      	beq.n	8008314 <dcd_init+0x7c>
 8008312:	be00      	bkpt	0x0000
 8008314:	2300      	movs	r3, #0
 8008316:	e050      	b.n	80083ba <dcd_init+0x122>

  //------------- 7.1 Device Initialization -------------//
  // Set device max speed
  uint32_t dcfg = dwc2->dcfg & ~DCFG_DSPD_Msk;
 8008318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800831a:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 800831e:	f023 0303 	bic.w	r3, r3, #3
 8008322:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (is_highspeed) {
 8008324:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008328:	2b00      	cmp	r3, #0
 800832a:	d00d      	beq.n	8008348 <dcd_init+0xb0>
    dcfg |= DCFG_DSPD_HS << DCFG_DSPD_Pos;

    // XCVRDLY: transceiver delay between xcvr_sel and txvalid during device chirp is required
    // when using with some PHYs such as USB334x (USB3341, USB3343, USB3346, USB3347)
    const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800832c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008330:	60fb      	str	r3, [r7, #12]
    if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 8008332:	7b3b      	ldrb	r3, [r7, #12]
 8008334:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008338:	b2db      	uxtb	r3, r3
 800833a:	2b80      	cmp	r3, #128	@ 0x80
 800833c:	d108      	bne.n	8008350 <dcd_init+0xb8>
      dcfg |= DCFG_XCVRDLY;
 800833e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008340:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008344:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008346:	e003      	b.n	8008350 <dcd_init+0xb8>
    }
  } else {
    dcfg |= DCFG_DSPD_FS << DCFG_DSPD_Pos;
 8008348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800834a:	f043 0303 	orr.w	r3, r3, #3
 800834e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  dcfg |= DCFG_NZLSOHSK; // send STALL back and discard if host send non-zlp during control status
 8008350:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008352:	f043 0304 	orr.w	r3, r3, #4
 8008356:	62fb      	str	r3, [r7, #44]	@ 0x2c
  dwc2->dcfg = dcfg;
 8008358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800835a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800835c:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  dcd_disconnect(rhport);
 8008360:	79fb      	ldrb	r3, [r7, #7]
 8008362:	4618      	mov	r0, r3
 8008364:	f000 f92a 	bl	80085bc <dcd_disconnect>

  // Force device mode
  dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_FHMOD) | GUSBCFG_FDMOD;
 8008368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800836a:	68db      	ldr	r3, [r3, #12]
 800836c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008370:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008376:	60da      	str	r2, [r3, #12]

  // Clear A override, force B Valid
  dwc2->gotgctl = (dwc2->gotgctl & ~GOTGCTL_AVALOEN) | GOTGCTL_BVALOEN | GOTGCTL_BVALOVAL;
 8008378:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f023 03d0 	bic.w	r3, r3, #208	@ 0xd0
 8008380:	f043 02c0 	orr.w	r2, r3, #192	@ 0xc0
 8008384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008386:	601a      	str	r2, [r3, #0]
  // No hardware detection of Vbus B-session is available on the STM32N6
  dwc2->stm32_gccfg |= STM32_GCCFG_VBVALOVAL;
#endif

  // Enable required interrupts
  dwc2->gintmsk |= GINTMSK_OTGINT | GINTMSK_USBSUSPM | GINTMSK_USBRST | GINTMSK_ENUMDNEM | GINTMSK_WUIM;
 8008388:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800838a:	699a      	ldr	r2, [r3, #24]
 800838c:	4b10      	ldr	r3, [pc, #64]	@ (80083d0 <dcd_init+0x138>)
 800838e:	4313      	orrs	r3, r2
 8008390:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008392:	6193      	str	r3, [r2, #24]

  // TX FIFO empty level for interrupt is complete empty
  uint32_t gahbcfg = dwc2->gahbcfg;
 8008394:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008396:	689b      	ldr	r3, [r3, #8]
 8008398:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_TX_FIFO_EPMTY_LVL;
 800839a:	6a3b      	ldr	r3, [r7, #32]
 800839c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083a0:	623b      	str	r3, [r7, #32]
  gahbcfg |= GAHBCFG_GINT; // Enable global interrupt
 80083a2:	6a3b      	ldr	r3, [r7, #32]
 80083a4:	f043 0301 	orr.w	r3, r3, #1
 80083a8:	623b      	str	r3, [r7, #32]
  dwc2->gahbcfg = gahbcfg;
 80083aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ac:	6a3a      	ldr	r2, [r7, #32]
 80083ae:	609a      	str	r2, [r3, #8]

  dcd_connect(rhport);
 80083b0:	79fb      	ldrb	r3, [r7, #7]
 80083b2:	4618      	mov	r0, r3
 80083b4:	f000 f8e0 	bl	8008578 <dcd_connect>
  return true;
 80083b8:	2301      	movs	r3, #1
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3730      	adds	r7, #48	@ 0x30
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}
 80083c2:	bf00      	nop
 80083c4:	0800a7a4 	.word	0x0800a7a4
 80083c8:	20000c8c 	.word	0x20000c8c
 80083cc:	e000edf0 	.word	0xe000edf0
 80083d0:	80003804 	.word	0x80003804

080083d4 <dcd_int_enable>:

void dcd_int_enable(uint8_t rhport) {
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b084      	sub	sp, #16
 80083d8:	af00      	add	r7, sp, #0
 80083da:	4603      	mov	r3, r0
 80083dc:	71fb      	strb	r3, [r7, #7]
 80083de:	79fb      	ldrb	r3, [r7, #7]
 80083e0:	73fb      	strb	r3, [r7, #15]
 80083e2:	2301      	movs	r3, #1
 80083e4:	73bb      	strb	r3, [r7, #14]
 80083e6:	2301      	movs	r3, #1
 80083e8:	737b      	strb	r3, [r7, #13]
// SystemCoreClock is already included by family header
// extern uint32_t SystemCoreClock;

TU_ATTR_ALWAYS_INLINE static inline void dwc2_int_set(uint8_t rhport, tusb_role_t role, bool enabled) {
  (void) role;
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 80083ea:	7bfb      	ldrb	r3, [r7, #15]
 80083ec:	4a0c      	ldr	r2, [pc, #48]	@ (8008420 <dcd_int_enable+0x4c>)
 80083ee:	011b      	lsls	r3, r3, #4
 80083f0:	4413      	add	r3, r2
 80083f2:	3304      	adds	r3, #4
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 80083f8:	7b7b      	ldrb	r3, [r7, #13]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d005      	beq.n	800840a <dcd_int_enable+0x36>
    NVIC_EnableIRQ(irqn);
 80083fe:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8008402:	4618      	mov	r0, r3
 8008404:	f7ff fb3e 	bl	8007a84 <__NVIC_EnableIRQ>
  } else {
    NVIC_DisableIRQ(irqn);
  }
}
 8008408:	e004      	b.n	8008414 <dcd_int_enable+0x40>
    NVIC_DisableIRQ(irqn);
 800840a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800840e:	4618      	mov	r0, r3
 8008410:	f7ff fb56 	bl	8007ac0 <__NVIC_DisableIRQ>
}
 8008414:	bf00      	nop
  dwc2_dcd_int_enable(rhport);
}
 8008416:	bf00      	nop
 8008418:	3710      	adds	r7, #16
 800841a:	46bd      	mov	sp, r7
 800841c:	bd80      	pop	{r7, pc}
 800841e:	bf00      	nop
 8008420:	0800a7a4 	.word	0x0800a7a4

08008424 <dcd_int_disable>:

void dcd_int_disable(uint8_t rhport) {
 8008424:	b580      	push	{r7, lr}
 8008426:	b084      	sub	sp, #16
 8008428:	af00      	add	r7, sp, #0
 800842a:	4603      	mov	r3, r0
 800842c:	71fb      	strb	r3, [r7, #7]
 800842e:	79fb      	ldrb	r3, [r7, #7]
 8008430:	73fb      	strb	r3, [r7, #15]
 8008432:	2301      	movs	r3, #1
 8008434:	73bb      	strb	r3, [r7, #14]
 8008436:	2300      	movs	r3, #0
 8008438:	737b      	strb	r3, [r7, #13]
  const IRQn_Type irqn = (IRQn_Type) _dwc2_controller[rhport].irqnum;
 800843a:	7bfb      	ldrb	r3, [r7, #15]
 800843c:	4a0c      	ldr	r2, [pc, #48]	@ (8008470 <dcd_int_disable+0x4c>)
 800843e:	011b      	lsls	r3, r3, #4
 8008440:	4413      	add	r3, r2
 8008442:	3304      	adds	r3, #4
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	733b      	strb	r3, [r7, #12]
  if (enabled) {
 8008448:	7b7b      	ldrb	r3, [r7, #13]
 800844a:	2b00      	cmp	r3, #0
 800844c:	d005      	beq.n	800845a <dcd_int_disable+0x36>
    NVIC_EnableIRQ(irqn);
 800844e:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8008452:	4618      	mov	r0, r3
 8008454:	f7ff fb16 	bl	8007a84 <__NVIC_EnableIRQ>
}
 8008458:	e004      	b.n	8008464 <dcd_int_disable+0x40>
    NVIC_DisableIRQ(irqn);
 800845a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800845e:	4618      	mov	r0, r3
 8008460:	f7ff fb2e 	bl	8007ac0 <__NVIC_DisableIRQ>
}
 8008464:	bf00      	nop
  dwc2_dcd_int_disable(rhport);
}
 8008466:	bf00      	nop
 8008468:	3710      	adds	r7, #16
 800846a:	46bd      	mov	sp, r7
 800846c:	bd80      	pop	{r7, pc}
 800846e:	bf00      	nop
 8008470:	0800a7a4 	.word	0x0800a7a4

08008474 <dcd_set_address>:

void dcd_set_address(uint8_t rhport, uint8_t dev_addr) {
 8008474:	b580      	push	{r7, lr}
 8008476:	b084      	sub	sp, #16
 8008478:	af00      	add	r7, sp, #0
 800847a:	4603      	mov	r3, r0
 800847c:	460a      	mov	r2, r1
 800847e:	71fb      	strb	r3, [r7, #7]
 8008480:	4613      	mov	r3, r2
 8008482:	71bb      	strb	r3, [r7, #6]
 8008484:	79fb      	ldrb	r3, [r7, #7]
 8008486:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008488:	7a7b      	ldrb	r3, [r7, #9]
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <dcd_set_address+0x1e>
    rhport = 0;
 800848e:	2300      	movs	r3, #0
 8008490:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008492:	7a7b      	ldrb	r3, [r7, #9]
 8008494:	4a14      	ldr	r2, [pc, #80]	@ (80084e8 <dcd_set_address+0x74>)
 8008496:	011b      	lsls	r3, r3, #4
 8008498:	4413      	add	r3, r2
 800849a:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800849c:	60fb      	str	r3, [r7, #12]
  dwc2->dcfg = (dwc2->dcfg & ~DCFG_DAD_Msk) | (dev_addr << DCFG_DAD_Pos);
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 80084a4:	f423 62fe 	bic.w	r2, r3, #2032	@ 0x7f0
 80084a8:	79bb      	ldrb	r3, [r7, #6]
 80084aa:	011b      	lsls	r3, r3, #4
 80084ac:	431a      	orrs	r2, r3
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
 80084b4:	2300      	movs	r3, #0
 80084b6:	72fb      	strb	r3, [r7, #11]
 80084b8:	2301      	movs	r3, #1
 80084ba:	72bb      	strb	r3, [r7, #10]
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
 80084bc:	7abb      	ldrb	r3, [r7, #10]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d002      	beq.n	80084c8 <dcd_set_address+0x54>
 80084c2:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 80084c6:	e000      	b.n	80084ca <dcd_set_address+0x56>
 80084c8:	2300      	movs	r3, #0
 80084ca:	f997 200b 	ldrsb.w	r2, [r7, #11]
 80084ce:	4313      	orrs	r3, r2
 80084d0:	b25b      	sxtb	r3, r3
 80084d2:	b2d9      	uxtb	r1, r3

  // Response with status after changing device address
  dcd_edpt_xfer(rhport, tu_edpt_addr(0, TUSB_DIR_IN), NULL, 0);
 80084d4:	79f8      	ldrb	r0, [r7, #7]
 80084d6:	2300      	movs	r3, #0
 80084d8:	2200      	movs	r2, #0
 80084da:	f000 f98b 	bl	80087f4 <dcd_edpt_xfer>
}
 80084de:	bf00      	nop
 80084e0:	3710      	adds	r7, #16
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}
 80084e6:	bf00      	nop
 80084e8:	0800a7a4 	.word	0x0800a7a4

080084ec <dcd_remote_wakeup>:

void dcd_remote_wakeup(uint8_t rhport) {
 80084ec:	b480      	push	{r7}
 80084ee:	b087      	sub	sp, #28
 80084f0:	af00      	add	r7, sp, #0
 80084f2:	4603      	mov	r3, r0
 80084f4:	71fb      	strb	r3, [r7, #7]
 80084f6:	79fb      	ldrb	r3, [r7, #7]
 80084f8:	73fb      	strb	r3, [r7, #15]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d001      	beq.n	8008504 <dcd_remote_wakeup+0x18>
    rhport = 0;
 8008500:	2300      	movs	r3, #0
 8008502:	73fb      	strb	r3, [r7, #15]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008504:	7bfb      	ldrb	r3, [r7, #15]
 8008506:	4a19      	ldr	r2, [pc, #100]	@ (800856c <dcd_remote_wakeup+0x80>)
 8008508:	011b      	lsls	r3, r3, #4
 800850a:	4413      	add	r3, r2
 800850c:	681b      	ldr	r3, [r3, #0]
  (void) rhport;

  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800850e:	617b      	str	r3, [r7, #20]

  // set remote wakeup
  dwc2->dctl |= DCTL_RWUSIG;
 8008510:	697b      	ldr	r3, [r7, #20]
 8008512:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8008516:	f043 0201 	orr.w	r2, r3, #1
 800851a:	697b      	ldr	r3, [r7, #20]
 800851c:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804

  // enable SOF to detect bus resume
  dwc2->gintsts = GINTSTS_SOF;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	2208      	movs	r2, #8
 8008524:	615a      	str	r2, [r3, #20]
  dwc2->gintmsk |= GINTMSK_SOFM;
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	699b      	ldr	r3, [r3, #24]
 800852a:	f043 0208 	orr.w	r2, r3, #8
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	619a      	str	r2, [r3, #24]
#define dwc2_dcd_int_disable(_rhport) dwc2_int_set(_rhport, TUSB_ROLE_DEVICE, false)


TU_ATTR_ALWAYS_INLINE static inline void dwc2_remote_wakeup_delay(void) {
  // try to delay for 1 ms
  uint32_t count = SystemCoreClock / 1000;
 8008532:	4b0f      	ldr	r3, [pc, #60]	@ (8008570 <dcd_remote_wakeup+0x84>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	4a0f      	ldr	r2, [pc, #60]	@ (8008574 <dcd_remote_wakeup+0x88>)
 8008538:	fba2 2303 	umull	r2, r3, r2, r3
 800853c:	099b      	lsrs	r3, r3, #6
 800853e:	613b      	str	r3, [r7, #16]
  while (count--) __NOP();
 8008540:	e000      	b.n	8008544 <dcd_remote_wakeup+0x58>
 8008542:	bf00      	nop
 8008544:	693b      	ldr	r3, [r7, #16]
 8008546:	1e5a      	subs	r2, r3, #1
 8008548:	613a      	str	r2, [r7, #16]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d1f9      	bne.n	8008542 <dcd_remote_wakeup+0x56>
}
 800854e:	bf00      	nop

  // Per specs: remote wakeup signal bit must be clear within 1-15ms
  dwc2_remote_wakeup_delay();

  dwc2->dctl &= ~DCTL_RWUSIG;
 8008550:	697b      	ldr	r3, [r7, #20]
 8008552:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 8008556:	f023 0201 	bic.w	r2, r3, #1
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 8008560:	bf00      	nop
 8008562:	371c      	adds	r7, #28
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr
 800856c:	0800a7a4 	.word	0x0800a7a4
 8008570:	20000048 	.word	0x20000048
 8008574:	10624dd3 	.word	0x10624dd3

08008578 <dcd_connect>:

void dcd_connect(uint8_t rhport) {
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	4603      	mov	r3, r0
 8008580:	71fb      	strb	r3, [r7, #7]
 8008582:	79fb      	ldrb	r3, [r7, #7]
 8008584:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008586:	7afb      	ldrb	r3, [r7, #11]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d001      	beq.n	8008590 <dcd_connect+0x18>
    rhport = 0;
 800858c:	2300      	movs	r3, #0
 800858e:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008590:	7afb      	ldrb	r3, [r7, #11]
 8008592:	4a09      	ldr	r2, [pc, #36]	@ (80085b8 <dcd_connect+0x40>)
 8008594:	011b      	lsls	r3, r3, #4
 8008596:	4413      	add	r3, r2
 8008598:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800859a:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 0;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl &= ~DCTL_SDIS;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80085a2:	f023 0202 	bic.w	r2, r3, #2
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 80085ac:	bf00      	nop
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	0800a7a4 	.word	0x0800a7a4

080085bc <dcd_disconnect>:

void dcd_disconnect(uint8_t rhport) {
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	4603      	mov	r3, r0
 80085c4:	71fb      	strb	r3, [r7, #7]
 80085c6:	79fb      	ldrb	r3, [r7, #7]
 80085c8:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80085ca:	7afb      	ldrb	r3, [r7, #11]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d001      	beq.n	80085d4 <dcd_disconnect+0x18>
    rhport = 0;
 80085d0:	2300      	movs	r3, #0
 80085d2:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80085d4:	7afb      	ldrb	r3, [r7, #11]
 80085d6:	4a09      	ldr	r2, [pc, #36]	@ (80085fc <dcd_disconnect+0x40>)
 80085d8:	011b      	lsls	r3, r3, #4
 80085da:	4413      	add	r3, r2
 80085dc:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80085de:	60fb      	str	r3, [r7, #12]
  conf.dm_pullup = 0;
  conf.dm_pulldown = 1;
  USB_WRAP.otg_conf = conf;
#endif

  dwc2->dctl |= DCTL_SDIS;
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	f8d3 3804 	ldr.w	r3, [r3, #2052]	@ 0x804
 80085e6:	f043 0202 	orr.w	r2, r3, #2
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	f8c3 2804 	str.w	r2, [r3, #2052]	@ 0x804
}
 80085f0:	bf00      	nop
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr
 80085fc:	0800a7a4 	.word	0x0800a7a4

08008600 <dcd_sof_enable>:

// Be advised: audio, video and possibly other iso-ep classes use dcd_sof_enable() to enable/disable its corresponding ISR on purpose!
void dcd_sof_enable(uint8_t rhport, bool en) {
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	4603      	mov	r3, r0
 8008608:	460a      	mov	r2, r1
 800860a:	71fb      	strb	r3, [r7, #7]
 800860c:	4613      	mov	r3, r2
 800860e:	71bb      	strb	r3, [r7, #6]
 8008610:	79fb      	ldrb	r3, [r7, #7]
 8008612:	72fb      	strb	r3, [r7, #11]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008614:	7afb      	ldrb	r3, [r7, #11]
 8008616:	2b00      	cmp	r3, #0
 8008618:	d001      	beq.n	800861e <dcd_sof_enable+0x1e>
    rhport = 0;
 800861a:	2300      	movs	r3, #0
 800861c:	72fb      	strb	r3, [r7, #11]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800861e:	7afb      	ldrb	r3, [r7, #11]
 8008620:	4a10      	ldr	r2, [pc, #64]	@ (8008664 <dcd_sof_enable+0x64>)
 8008622:	011b      	lsls	r3, r3, #4
 8008624:	4413      	add	r3, r2
 8008626:	681b      	ldr	r3, [r3, #0]
  (void) rhport;
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008628:	60fb      	str	r3, [r7, #12]

  _dcd_data.sof_en = en;
 800862a:	4a0f      	ldr	r2, [pc, #60]	@ (8008668 <dcd_sof_enable+0x68>)
 800862c:	79bb      	ldrb	r3, [r7, #6]
 800862e:	71d3      	strb	r3, [r2, #7]

  if (en) {
 8008630:	79bb      	ldrb	r3, [r7, #6]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d009      	beq.n	800864a <dcd_sof_enable+0x4a>
    dwc2->gintsts = GINTSTS_SOF;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	2208      	movs	r2, #8
 800863a:	615a      	str	r2, [r3, #20]
    dwc2->gintmsk |= GINTMSK_SOFM;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	699b      	ldr	r3, [r3, #24]
 8008640:	f043 0208 	orr.w	r2, r3, #8
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	619a      	str	r2, [r3, #24]
  } else {
    dwc2->gintmsk &= ~GINTMSK_SOFM;
  }
}
 8008648:	e005      	b.n	8008656 <dcd_sof_enable+0x56>
    dwc2->gintmsk &= ~GINTMSK_SOFM;
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	699b      	ldr	r3, [r3, #24]
 800864e:	f023 0208 	bic.w	r2, r3, #8
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	619a      	str	r2, [r3, #24]
}
 8008656:	bf00      	nop
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr
 8008662:	bf00      	nop
 8008664:	0800a7a4 	.word	0x0800a7a4
 8008668:	20000c8c 	.word	0x20000c8c

0800866c <dcd_edpt_open>:

/*------------------------------------------------------------------*/
/* DCD Endpoint port
 *------------------------------------------------------------------*/

bool dcd_edpt_open(uint8_t rhport, tusb_desc_endpoint_t const* desc_edpt) {
 800866c:	b580      	push	{r7, lr}
 800866e:	b084      	sub	sp, #16
 8008670:	af00      	add	r7, sp, #0
 8008672:	4603      	mov	r3, r0
 8008674:	6039      	str	r1, [r7, #0]
 8008676:	71fb      	strb	r3, [r7, #7]
  TU_ASSERT(dfifo_alloc(rhport, desc_edpt->bEndpointAddress, tu_edpt_packet_size(desc_edpt)));
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	7899      	ldrb	r1, [r3, #2]
 800867c:	683b      	ldr	r3, [r7, #0]
 800867e:	60bb      	str	r3, [r7, #8]
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	889b      	ldrh	r3, [r3, #4]
 8008684:	b29b      	uxth	r3, r3
 8008686:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800868a:	b29a      	uxth	r2, r3
 800868c:	79fb      	ldrb	r3, [r7, #7]
 800868e:	4618      	mov	r0, r3
 8008690:	f7ff fa76 	bl	8007b80 <dfifo_alloc>
 8008694:	4603      	mov	r3, r0
 8008696:	f083 0301 	eor.w	r3, r3, #1
 800869a:	b2db      	uxtb	r3, r3
 800869c:	2b00      	cmp	r3, #0
 800869e:	d00a      	beq.n	80086b6 <dcd_edpt_open+0x4a>
 80086a0:	4b0a      	ldr	r3, [pc, #40]	@ (80086cc <dcd_edpt_open+0x60>)
 80086a2:	60fb      	str	r3, [r7, #12]
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f003 0301 	and.w	r3, r3, #1
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d000      	beq.n	80086b2 <dcd_edpt_open+0x46>
 80086b0:	be00      	bkpt	0x0000
 80086b2:	2300      	movs	r3, #0
 80086b4:	e005      	b.n	80086c2 <dcd_edpt_open+0x56>
  edpt_activate(rhport, desc_edpt);
 80086b6:	79fb      	ldrb	r3, [r7, #7]
 80086b8:	6839      	ldr	r1, [r7, #0]
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7ff fb9c 	bl	8007df8 <edpt_activate>
  return true;
 80086c0:	2301      	movs	r3, #1
}
 80086c2:	4618      	mov	r0, r3
 80086c4:	3710      	adds	r7, #16
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	e000edf0 	.word	0xe000edf0

080086d0 <dcd_edpt_close_all>:

// Close all non-control endpoints, cancel all pending transfers if any.
void dcd_edpt_close_all(uint8_t rhport) {
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08a      	sub	sp, #40	@ 0x28
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	4603      	mov	r3, r0
 80086d8:	71fb      	strb	r3, [r7, #7]
 80086da:	79fb      	ldrb	r3, [r7, #7]
 80086dc:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80086de:	7dfb      	ldrb	r3, [r7, #23]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d001      	beq.n	80086e8 <dcd_edpt_close_all+0x18>
    rhport = 0;
 80086e4:	2300      	movs	r3, #0
 80086e6:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80086e8:	7dfb      	ldrb	r3, [r7, #23]
 80086ea:	4a3f      	ldr	r2, [pc, #252]	@ (80087e8 <dcd_edpt_close_all+0x118>)
 80086ec:	011b      	lsls	r3, r3, #4
 80086ee:	4413      	add	r3, r2
 80086f0:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80086f2:	623b      	str	r3, [r7, #32]
  uint8_t const ep_count = _dwc2_controller[rhport].ep_count;
 80086f4:	79fb      	ldrb	r3, [r7, #7]
 80086f6:	4a3c      	ldr	r2, [pc, #240]	@ (80087e8 <dcd_edpt_close_all+0x118>)
 80086f8:	011b      	lsls	r3, r3, #4
 80086fa:	4413      	add	r3, r2
 80086fc:	3308      	adds	r3, #8
 80086fe:	781b      	ldrb	r3, [r3, #0]
 8008700:	77fb      	strb	r3, [r7, #31]

  usbd_spin_lock(false);
 8008702:	2000      	movs	r0, #0
 8008704:	f7fe fd4a 	bl	800719c <usbd_spin_lock>

  _dcd_data.allocated_epin_count = 0;
 8008708:	4b38      	ldr	r3, [pc, #224]	@ (80087ec <dcd_edpt_close_all+0x11c>)
 800870a:	2200      	movs	r2, #0
 800870c:	719a      	strb	r2, [r3, #6]

  // Disable non-control interrupt
  dwc2->daintmsk = (1 << DAINTMSK_OEPM_Pos) | (1 << DAINTMSK_IEPM_Pos);
 800870e:	6a3b      	ldr	r3, [r7, #32]
 8008710:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8008714:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c

  for (uint8_t n = 1; n < ep_count; n++) {
 8008718:	2301      	movs	r3, #1
 800871a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800871e:	e034      	b.n	800878a <dcd_edpt_close_all+0xba>
    for (uint8_t d = 0; d < 2; d++) {
 8008720:	2300      	movs	r3, #0
 8008722:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008726:	e027      	b.n	8008778 <dcd_edpt_close_all+0xa8>
      dwc2_dep_t* dep = &dwc2->ep[d][n];
 8008728:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800872c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008730:	0112      	lsls	r2, r2, #4
 8008732:	4413      	add	r3, r2
 8008734:	3348      	adds	r3, #72	@ 0x48
 8008736:	015b      	lsls	r3, r3, #5
 8008738:	6a3a      	ldr	r2, [r7, #32]
 800873a:	4413      	add	r3, r2
 800873c:	61bb      	str	r3, [r7, #24]
      if (dep->ctl & EPCTL_EPENA) {
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	da05      	bge.n	8008752 <dcd_edpt_close_all+0x82>
        dep->ctl |= EPCTL_SNAK | EPCTL_EPDIS;
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f043 4290 	orr.w	r2, r3, #1207959552	@ 0x48000000
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	601a      	str	r2, [r3, #0]
      }
      xfer_status[n][1-d].max_size = 0;
 8008752:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8008756:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800875a:	f1c3 0301 	rsb	r3, r3, #1
 800875e:	4924      	ldr	r1, [pc, #144]	@ (80087f0 <dcd_edpt_close_all+0x120>)
 8008760:	0052      	lsls	r2, r2, #1
 8008762:	4413      	add	r3, r2
 8008764:	011b      	lsls	r3, r3, #4
 8008766:	440b      	add	r3, r1
 8008768:	330a      	adds	r3, #10
 800876a:	2200      	movs	r2, #0
 800876c:	801a      	strh	r2, [r3, #0]
    for (uint8_t d = 0; d < 2; d++) {
 800876e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008772:	3301      	adds	r3, #1
 8008774:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008778:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800877c:	2b01      	cmp	r3, #1
 800877e:	d9d3      	bls.n	8008728 <dcd_edpt_close_all+0x58>
  for (uint8_t n = 1; n < ep_count; n++) {
 8008780:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008784:	3301      	adds	r3, #1
 8008786:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800878a:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800878e:	7ffb      	ldrb	r3, [r7, #31]
 8008790:	429a      	cmp	r2, r3
 8008792:	d3c5      	bcc.n	8008720 <dcd_edpt_close_all+0x50>
 8008794:	6a3b      	ldr	r3, [r7, #32]
 8008796:	60fb      	str	r3, [r7, #12]
 8008798:	2310      	movs	r3, #16
 800879a:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 800879c:	7afb      	ldrb	r3, [r7, #11]
 800879e:	019b      	lsls	r3, r3, #6
 80087a0:	f043 0220 	orr.w	r2, r3, #32
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 80087a8:	bf00      	nop
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	f003 0320 	and.w	r3, r3, #32
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d1f9      	bne.n	80087aa <dcd_edpt_close_all+0xda>
}
 80087b6:	bf00      	nop
 80087b8:	6a3b      	ldr	r3, [r7, #32]
 80087ba:	613b      	str	r3, [r7, #16]

TU_ATTR_ALWAYS_INLINE static inline void dfifo_flush_rx(dwc2_regs_t* dwc2) {
  // flush RX fifo and wait for it cleared
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 80087bc:	693b      	ldr	r3, [r7, #16]
 80087be:	2210      	movs	r2, #16
 80087c0:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 80087c2:	bf00      	nop
 80087c4:	693b      	ldr	r3, [r7, #16]
 80087c6:	691b      	ldr	r3, [r3, #16]
 80087c8:	f003 0310 	and.w	r3, r3, #16
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d1f9      	bne.n	80087c4 <dcd_edpt_close_all+0xf4>
}
 80087d0:	bf00      	nop
    }
  }

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport); // re-init dfifo
 80087d2:	79fb      	ldrb	r3, [r7, #7]
 80087d4:	4618      	mov	r0, r3
 80087d6:	f7ff fab5 	bl	8007d44 <dfifo_device_init>

  usbd_spin_unlock(false);
 80087da:	2000      	movs	r0, #0
 80087dc:	f7fe fcf8 	bl	80071d0 <usbd_spin_unlock>
}
 80087e0:	bf00      	nop
 80087e2:	3728      	adds	r7, #40	@ 0x28
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}
 80087e8:	0800a7a4 	.word	0x0800a7a4
 80087ec:	20000c8c 	.word	0x20000c8c
 80087f0:	20000c0c 	.word	0x20000c0c

080087f4 <dcd_edpt_xfer>:
  edpt_disable(rhport, p_endpoint_desc->bEndpointAddress, false);
  edpt_activate(rhport, p_endpoint_desc);
  return true;
}

bool dcd_edpt_xfer(uint8_t rhport, uint8_t ep_addr, uint8_t* buffer, uint16_t total_bytes) {
 80087f4:	b580      	push	{r7, lr}
 80087f6:	b086      	sub	sp, #24
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	603a      	str	r2, [r7, #0]
 80087fc:	461a      	mov	r2, r3
 80087fe:	4603      	mov	r3, r0
 8008800:	71fb      	strb	r3, [r7, #7]
 8008802:	460b      	mov	r3, r1
 8008804:	71bb      	strb	r3, [r7, #6]
 8008806:	4613      	mov	r3, r2
 8008808:	80bb      	strh	r3, [r7, #4]
 800880a:	79bb      	ldrb	r3, [r7, #6]
 800880c:	73bb      	strb	r3, [r7, #14]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 800880e:	7bbb      	ldrb	r3, [r7, #14]
 8008810:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008814:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008816:	75bb      	strb	r3, [r7, #22]
 8008818:	79bb      	ldrb	r3, [r7, #6]
 800881a:	73fb      	strb	r3, [r7, #15]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800881c:	7bfb      	ldrb	r3, [r7, #15]
 800881e:	09db      	lsrs	r3, r3, #7
 8008820:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008822:	757b      	strb	r3, [r7, #21]
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, dir);
 8008824:	7dba      	ldrb	r2, [r7, #22]
 8008826:	7d7b      	ldrb	r3, [r7, #21]
 8008828:	0052      	lsls	r2, r2, #1
 800882a:	4413      	add	r3, r2
 800882c:	011b      	lsls	r3, r3, #4
 800882e:	4a17      	ldr	r2, [pc, #92]	@ (800888c <dcd_edpt_xfer+0x98>)
 8008830:	4413      	add	r3, r2
 8008832:	613b      	str	r3, [r7, #16]
  bool ret;

  usbd_spin_lock(false);
 8008834:	2000      	movs	r0, #0
 8008836:	f7fe fcb1 	bl	800719c <usbd_spin_lock>

  if (xfer->max_size == 0) {
 800883a:	693b      	ldr	r3, [r7, #16]
 800883c:	895b      	ldrh	r3, [r3, #10]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d102      	bne.n	8008848 <dcd_edpt_xfer+0x54>
    ret = false;  // Endpoint is closed
 8008842:	2300      	movs	r3, #0
 8008844:	75fb      	strb	r3, [r7, #23]
 8008846:	e018      	b.n	800887a <dcd_edpt_xfer+0x86>
  } else {
    xfer->buffer = buffer;
 8008848:	693b      	ldr	r3, [r7, #16]
 800884a:	683a      	ldr	r2, [r7, #0]
 800884c:	601a      	str	r2, [r3, #0]
    xfer->ff = NULL;
 800884e:	693b      	ldr	r3, [r7, #16]
 8008850:	2200      	movs	r2, #0
 8008852:	605a      	str	r2, [r3, #4]
    xfer->total_len = total_bytes;
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	88ba      	ldrh	r2, [r7, #4]
 8008858:	811a      	strh	r2, [r3, #8]

    // EP0 can only handle one packet
    if (epnum == 0) {
 800885a:	7dbb      	ldrb	r3, [r7, #22]
 800885c:	2b00      	cmp	r3, #0
 800885e:	d104      	bne.n	800886a <dcd_edpt_xfer+0x76>
      _dcd_data.ep0_pending[dir] = total_bytes;
 8008860:	7d7b      	ldrb	r3, [r7, #21]
 8008862:	490b      	ldr	r1, [pc, #44]	@ (8008890 <dcd_edpt_xfer+0x9c>)
 8008864:	88ba      	ldrh	r2, [r7, #4]
 8008866:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    }

    // Schedule packets to be sent within interrupt
    edpt_schedule_packets(rhport, epnum, dir);
 800886a:	7d7a      	ldrb	r2, [r7, #21]
 800886c:	7db9      	ldrb	r1, [r7, #22]
 800886e:	79fb      	ldrb	r3, [r7, #7]
 8008870:	4618      	mov	r0, r3
 8008872:	f7ff fc2b 	bl	80080cc <edpt_schedule_packets>
    ret = true;
 8008876:	2301      	movs	r3, #1
 8008878:	75fb      	strb	r3, [r7, #23]
  }

  usbd_spin_unlock(false);
 800887a:	2000      	movs	r0, #0
 800887c:	f7fe fca8 	bl	80071d0 <usbd_spin_unlock>

  return ret;
 8008880:	7dfb      	ldrb	r3, [r7, #23]
}
 8008882:	4618      	mov	r0, r3
 8008884:	3718      	adds	r7, #24
 8008886:	46bd      	mov	sp, r7
 8008888:	bd80      	pop	{r7, pc}
 800888a:	bf00      	nop
 800888c:	20000c0c 	.word	0x20000c0c
 8008890:	20000c8c 	.word	0x20000c8c

08008894 <dcd_edpt_stall>:
  usbd_spin_unlock(false);

  return ret;
}

void dcd_edpt_stall(uint8_t rhport, uint8_t ep_addr) {
 8008894:	b580      	push	{r7, lr}
 8008896:	b086      	sub	sp, #24
 8008898:	af00      	add	r7, sp, #0
 800889a:	4603      	mov	r3, r0
 800889c:	460a      	mov	r2, r1
 800889e:	71fb      	strb	r3, [r7, #7]
 80088a0:	4613      	mov	r3, r2
 80088a2:	71bb      	strb	r3, [r7, #6]
 80088a4:	79fb      	ldrb	r3, [r7, #7]
 80088a6:	74bb      	strb	r3, [r7, #18]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80088a8:	7cbb      	ldrb	r3, [r7, #18]
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d001      	beq.n	80088b2 <dcd_edpt_stall+0x1e>
    rhport = 0;
 80088ae:	2300      	movs	r3, #0
 80088b0:	74bb      	strb	r3, [r7, #18]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80088b2:	7cbb      	ldrb	r3, [r7, #18]
 80088b4:	4a11      	ldr	r2, [pc, #68]	@ (80088fc <dcd_edpt_stall+0x68>)
 80088b6:	011b      	lsls	r3, r3, #4
 80088b8:	4413      	add	r3, r2
 80088ba:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80088bc:	617b      	str	r3, [r7, #20]
  edpt_disable(rhport, ep_addr, true);
 80088be:	79b9      	ldrb	r1, [r7, #6]
 80088c0:	79fb      	ldrb	r3, [r7, #7]
 80088c2:	2201      	movs	r2, #1
 80088c4:	4618      	mov	r0, r3
 80088c6:	f7ff fb35 	bl	8007f34 <edpt_disable>
 80088ca:	79bb      	ldrb	r3, [r7, #6]
 80088cc:	74fb      	strb	r3, [r7, #19]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 80088ce:	7cfb      	ldrb	r3, [r7, #19]
 80088d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80088d4:	b2db      	uxtb	r3, r3
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d10b      	bne.n	80088f2 <dcd_edpt_stall+0x5e>
 80088da:	697b      	ldr	r3, [r7, #20]
 80088dc:	60fb      	str	r3, [r7, #12]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088e2:	60bb      	str	r3, [r7, #8]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 80088e4:	2300      	movs	r3, #0
  if((tu_edpt_number(ep_addr) == 0) && dma_device_enabled(dwc2)) {
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d003      	beq.n	80088f2 <dcd_edpt_stall+0x5e>
    dma_setup_prepare(rhport);
 80088ea:	79fb      	ldrb	r3, [r7, #7]
 80088ec:	4618      	mov	r0, r3
 80088ee:	f7ff f90b 	bl	8007b08 <dma_setup_prepare>
  }
}
 80088f2:	bf00      	nop
 80088f4:	3718      	adds	r7, #24
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
 80088fa:	bf00      	nop
 80088fc:	0800a7a4 	.word	0x0800a7a4

08008900 <dcd_edpt_clear_stall>:

void dcd_edpt_clear_stall(uint8_t rhport, uint8_t ep_addr) {
 8008900:	b480      	push	{r7}
 8008902:	b087      	sub	sp, #28
 8008904:	af00      	add	r7, sp, #0
 8008906:	4603      	mov	r3, r0
 8008908:	460a      	mov	r2, r1
 800890a:	71fb      	strb	r3, [r7, #7]
 800890c:	4613      	mov	r3, r2
 800890e:	71bb      	strb	r3, [r7, #6]
 8008910:	79fb      	ldrb	r3, [r7, #7]
 8008912:	727b      	strb	r3, [r7, #9]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008914:	7a7b      	ldrb	r3, [r7, #9]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d001      	beq.n	800891e <dcd_edpt_clear_stall+0x1e>
    rhport = 0;
 800891a:	2300      	movs	r3, #0
 800891c:	727b      	strb	r3, [r7, #9]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800891e:	7a7b      	ldrb	r3, [r7, #9]
 8008920:	4a19      	ldr	r2, [pc, #100]	@ (8008988 <dcd_edpt_clear_stall+0x88>)
 8008922:	011b      	lsls	r3, r3, #4
 8008924:	4413      	add	r3, r2
 8008926:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008928:	617b      	str	r3, [r7, #20]
 800892a:	79bb      	ldrb	r3, [r7, #6]
 800892c:	72bb      	strb	r3, [r7, #10]
 800892e:	7abb      	ldrb	r3, [r7, #10]
 8008930:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008934:	b2db      	uxtb	r3, r3
  uint8_t const epnum = tu_edpt_number(ep_addr);
 8008936:	74fb      	strb	r3, [r7, #19]
 8008938:	79bb      	ldrb	r3, [r7, #6]
 800893a:	72fb      	strb	r3, [r7, #11]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 800893c:	7afb      	ldrb	r3, [r7, #11]
 800893e:	09db      	lsrs	r3, r3, #7
 8008940:	b2db      	uxtb	r3, r3
  uint8_t const dir = tu_edpt_dir(ep_addr);
 8008942:	74bb      	strb	r3, [r7, #18]
  dwc2_dep_t* dep = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][epnum];
 8008944:	7cbb      	ldrb	r3, [r7, #18]
 8008946:	2b01      	cmp	r3, #1
 8008948:	bf14      	ite	ne
 800894a:	2301      	movne	r3, #1
 800894c:	2300      	moveq	r3, #0
 800894e:	b2db      	uxtb	r3, r3
 8008950:	461a      	mov	r2, r3
 8008952:	7cfb      	ldrb	r3, [r7, #19]
 8008954:	0112      	lsls	r2, r2, #4
 8008956:	4413      	add	r3, r2
 8008958:	3348      	adds	r3, #72	@ 0x48
 800895a:	015b      	lsls	r3, r3, #5
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	4413      	add	r3, r2
 8008960:	60fb      	str	r3, [r7, #12]

  // Clear stall and reset data toggle
  dep->ctl &= ~EPCTL_STALL;;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	601a      	str	r2, [r3, #0]
  dep->ctl |= EPCTL_SD0PID_SEVNFRM;
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	601a      	str	r2, [r3, #0]
}
 800897a:	bf00      	nop
 800897c:	371c      	adds	r7, #28
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	0800a7a4 	.word	0x0800a7a4

0800898c <handle_bus_reset>:
// Interrupt Handler
//--------------------------------------------------------------------

// 7.4.1 Initialization on USB Reset
// Must be called from critical section
static void handle_bus_reset(uint8_t rhport) {
 800898c:	b580      	push	{r7, lr}
 800898e:	b08e      	sub	sp, #56	@ 0x38
 8008990:	af00      	add	r7, sp, #0
 8008992:	4603      	mov	r3, r0
 8008994:	71fb      	strb	r3, [r7, #7]
 8008996:	79fb      	ldrb	r3, [r7, #7]
 8008998:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 800899c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d002      	beq.n	80089aa <handle_bus_reset+0x1e>
    rhport = 0;
 80089a4:	2300      	movs	r3, #0
 80089a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80089aa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80089ae:	4a6a      	ldr	r2, [pc, #424]	@ (8008b58 <handle_bus_reset+0x1cc>)
 80089b0:	011b      	lsls	r3, r3, #4
 80089b2:	4413      	add	r3, r2
 80089b4:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 80089b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80089b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80089ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 80089bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80089c0:	60bb      	str	r3, [r7, #8]
  return ghwcfg2.num_dev_ep + 1;
 80089c2:	7a7b      	ldrb	r3, [r7, #9]
 80089c4:	f3c3 0383 	ubfx	r3, r3, #2, #4
 80089c8:	b2db      	uxtb	r3, r3
 80089ca:	3301      	adds	r3, #1
 80089cc:	b2db      	uxtb	r3, r3
  const uint8_t ep_count =  dwc2_ep_count(dwc2);
 80089ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

  tu_memclr(xfer_status, sizeof(xfer_status));
 80089d2:	2280      	movs	r2, #128	@ 0x80
 80089d4:	2100      	movs	r1, #0
 80089d6:	4861      	ldr	r0, [pc, #388]	@ (8008b5c <handle_bus_reset+0x1d0>)
 80089d8:	f001 f964 	bl	8009ca4 <memset>

  _dcd_data.sof_en = false;
 80089dc:	4b60      	ldr	r3, [pc, #384]	@ (8008b60 <handle_bus_reset+0x1d4>)
 80089de:	2200      	movs	r2, #0
 80089e0:	71da      	strb	r2, [r3, #7]
  _dcd_data.allocated_epin_count = 0;
 80089e2:	4b5f      	ldr	r3, [pc, #380]	@ (8008b60 <handle_bus_reset+0x1d4>)
 80089e4:	2200      	movs	r2, #0
 80089e6:	719a      	strb	r2, [r3, #6]

  // 1. NAK for all OUT endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 80089e8:	2300      	movs	r3, #0
 80089ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80089ee:	e014      	b.n	8008a1a <handle_bus_reset+0x8e>
    dwc2->epout[n].doepctl |= DOEPCTL_SNAK;
 80089f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80089f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80089f6:	3358      	adds	r3, #88	@ 0x58
 80089f8:	015b      	lsls	r3, r3, #5
 80089fa:	4413      	add	r3, r2
 80089fc:	681a      	ldr	r2, [r3, #0]
 80089fe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008a02:	f042 6200 	orr.w	r2, r2, #134217728	@ 0x8000000
 8008a06:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a08:	3358      	adds	r3, #88	@ 0x58
 8008a0a:	015b      	lsls	r3, r3, #5
 8008a0c:	440b      	add	r3, r1
 8008a0e:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 8008a10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8008a14:	3301      	adds	r3, #1
 8008a16:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8008a1a:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8008a1e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a22:	429a      	cmp	r2, r3
 8008a24:	d3e4      	bcc.n	80089f0 <handle_bus_reset+0x64>
  }

  // Disable all IN endpoints
  for (uint8_t n = 0; n < ep_count; n++) {
 8008a26:	2300      	movs	r3, #0
 8008a28:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8008a2c:	e01d      	b.n	8008a6a <handle_bus_reset+0xde>
    if (dwc2->epin[n].diepctl & DIEPCTL_EPENA) {
 8008a2e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008a32:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a34:	3348      	adds	r3, #72	@ 0x48
 8008a36:	015b      	lsls	r3, r3, #5
 8008a38:	4413      	add	r3, r2
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	da0f      	bge.n	8008a60 <handle_bus_reset+0xd4>
      dwc2->epin[n].diepctl |= DIEPCTL_SNAK | DIEPCTL_EPDIS;
 8008a40:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008a44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008a46:	3348      	adds	r3, #72	@ 0x48
 8008a48:	015b      	lsls	r3, r3, #5
 8008a4a:	4413      	add	r3, r2
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008a52:	f042 4290 	orr.w	r2, r2, #1207959552	@ 0x48000000
 8008a56:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008a58:	3348      	adds	r3, #72	@ 0x48
 8008a5a:	015b      	lsls	r3, r3, #5
 8008a5c:	440b      	add	r3, r1
 8008a5e:	601a      	str	r2, [r3, #0]
  for (uint8_t n = 0; n < ep_count; n++) {
 8008a60:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8008a64:	3301      	adds	r3, #1
 8008a66:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
 8008a6a:	f897 2036 	ldrb.w	r2, [r7, #54]	@ 0x36
 8008a6e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008a72:	429a      	cmp	r2, r3
 8008a74:	d3db      	bcc.n	8008a2e <handle_bus_reset+0xa2>
    }
  }

  // 2. Set up interrupt mask for EP0
  dwc2->daintmsk = TU_BIT(DAINTMSK_OEPM_Pos) | TU_BIT(DAINTMSK_IEPM_Pos);
 8008a76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a78:	f04f 1201 	mov.w	r2, #65537	@ 0x10001
 8008a7c:	f8c3 281c 	str.w	r2, [r3, #2076]	@ 0x81c
  dwc2->doepmsk = DOEPMSK_STUPM | DOEPMSK_XFRCM;
 8008a80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a82:	2209      	movs	r2, #9
 8008a84:	f8c3 2814 	str.w	r2, [r3, #2068]	@ 0x814
  dwc2->diepmsk = DIEPMSK_TOM | DIEPMSK_XFRCM;
 8008a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a8a:	2209      	movs	r2, #9
 8008a8c:	f8c3 2810 	str.w	r2, [r3, #2064]	@ 0x810
 8008a90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008a92:	61bb      	str	r3, [r7, #24]
 8008a94:	2310      	movs	r3, #16
 8008a96:	75fb      	strb	r3, [r7, #23]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8008a98:	7dfb      	ldrb	r3, [r7, #23]
 8008a9a:	019b      	lsls	r3, r3, #6
 8008a9c:	f043 0220 	orr.w	r2, r3, #32
 8008aa0:	69bb      	ldr	r3, [r7, #24]
 8008aa2:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 8008aa4:	bf00      	nop
 8008aa6:	69bb      	ldr	r3, [r7, #24]
 8008aa8:	691b      	ldr	r3, [r3, #16]
 8008aaa:	f003 0320 	and.w	r3, r3, #32
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d1f9      	bne.n	8008aa6 <handle_bus_reset+0x11a>
}
 8008ab2:	bf00      	nop
 8008ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ab6:	61fb      	str	r3, [r7, #28]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8008ab8:	69fb      	ldr	r3, [r7, #28]
 8008aba:	2210      	movs	r2, #16
 8008abc:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8008abe:	bf00      	nop
 8008ac0:	69fb      	ldr	r3, [r7, #28]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	f003 0310 	and.w	r3, r3, #16
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d1f9      	bne.n	8008ac0 <handle_bus_reset+0x134>
}
 8008acc:	bf00      	nop

  // 4. Set up DFIFO
  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);
  dfifo_device_init(rhport);
 8008ace:	79fb      	ldrb	r3, [r7, #7]
 8008ad0:	4618      	mov	r0, r3
 8008ad2:	f7ff f937 	bl	8007d44 <dfifo_device_init>

  // 5. Reset device address
  dwc2_dcfg_t dcfg = {.value = dwc2->dcfg};
 8008ad6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ad8:	f8d3 3800 	ldr.w	r3, [r3, #2048]	@ 0x800
 8008adc:	613b      	str	r3, [r7, #16]
  dcfg.address = 0;
 8008ade:	8a3b      	ldrh	r3, [r7, #16]
 8008ae0:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8008ae4:	823b      	strh	r3, [r7, #16]
  dwc2->dcfg = dcfg.value;
 8008ae6:	693a      	ldr	r2, [r7, #16]
 8008ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008aea:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800

  // Fixed both control EP0 size to 64 bytes
  dwc2->epin[0].ctl &= ~(0x03 << DIEPCTL_MPSIZ_Pos);
 8008aee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008af0:	f8d3 3900 	ldr.w	r3, [r3, #2304]	@ 0x900
 8008af4:	f023 0203 	bic.w	r2, r3, #3
 8008af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008afa:	f8c3 2900 	str.w	r2, [r3, #2304]	@ 0x900
  dwc2->epout[0].ctl &= ~(0x03 << DOEPCTL_MPSIZ_Pos);
 8008afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b00:	f8d3 3b00 	ldr.w	r3, [r3, #2816]	@ 0xb00
 8008b04:	f023 0203 	bic.w	r2, r3, #3
 8008b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b0a:	f8c3 2b00 	str.w	r2, [r3, #2816]	@ 0xb00

  xfer_status[0][TUSB_DIR_OUT].max_size = 64;
 8008b0e:	4b13      	ldr	r3, [pc, #76]	@ (8008b5c <handle_bus_reset+0x1d0>)
 8008b10:	2240      	movs	r2, #64	@ 0x40
 8008b12:	815a      	strh	r2, [r3, #10]
  xfer_status[0][TUSB_DIR_IN].max_size = 64;
 8008b14:	4b11      	ldr	r3, [pc, #68]	@ (8008b5c <handle_bus_reset+0x1d0>)
 8008b16:	2240      	movs	r2, #64	@ 0x40
 8008b18:	835a      	strh	r2, [r3, #26]
 8008b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b1c:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8008b1e:	6a3b      	ldr	r3, [r7, #32]
 8008b20:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008b22:	60fb      	str	r3, [r7, #12]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8008b24:	2300      	movs	r3, #0

  if(dma_device_enabled(dwc2)) {
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d004      	beq.n	8008b34 <handle_bus_reset+0x1a8>
    dma_setup_prepare(rhport);
 8008b2a:	79fb      	ldrb	r3, [r7, #7]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f7fe ffeb 	bl	8007b08 <dma_setup_prepare>
 8008b32:	e007      	b.n	8008b44 <handle_bus_reset+0x1b8>
  } else {
    dwc2->epout[0].doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8008b34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b36:	f8d3 3b10 	ldr.w	r3, [r3, #2832]	@ 0xb10
 8008b3a:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 8008b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b40:	f8c3 2b10 	str.w	r2, [r3, #2832]	@ 0xb10
  }

  dwc2->gintmsk |= GINTMSK_OEPINT | GINTMSK_IEPINT;
 8008b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b46:	699b      	ldr	r3, [r3, #24]
 8008b48:	f443 2240 	orr.w	r2, r3, #786432	@ 0xc0000
 8008b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b4e:	619a      	str	r2, [r3, #24]
}
 8008b50:	bf00      	nop
 8008b52:	3738      	adds	r7, #56	@ 0x38
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	0800a7a4 	.word	0x0800a7a4
 8008b5c:	20000c0c 	.word	0x20000c0c
 8008b60:	20000c8c 	.word	0x20000c8c

08008b64 <handle_enum_done>:

static void handle_enum_done(uint8_t rhport) {
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b08a      	sub	sp, #40	@ 0x28
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	4603      	mov	r3, r0
 8008b6c:	71fb      	strb	r3, [r7, #7]
 8008b6e:	79fb      	ldrb	r3, [r7, #7]
 8008b70:	77fb      	strb	r3, [r7, #31]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008b72:	7ffb      	ldrb	r3, [r7, #31]
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d001      	beq.n	8008b7c <handle_enum_done+0x18>
    rhport = 0;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	77fb      	strb	r3, [r7, #31]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008b7c:	7ffb      	ldrb	r3, [r7, #31]
 8008b7e:	4a1b      	ldr	r2, [pc, #108]	@ (8008bec <handle_enum_done+0x88>)
 8008b80:	011b      	lsls	r3, r3, #4
 8008b82:	4413      	add	r3, r2
 8008b84:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t *dwc2 = DWC2_REG(rhport);
 8008b86:	623b      	str	r3, [r7, #32]
  const dwc2_dsts_t dsts = {.value = dwc2->dsts};
 8008b88:	6a3b      	ldr	r3, [r7, #32]
 8008b8a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8008b8e:	61bb      	str	r3, [r7, #24]
  tusb_speed_t speed;
  switch (dsts.enum_speed) {
 8008b90:	7e3b      	ldrb	r3, [r7, #24]
 8008b92:	f3c3 0341 	ubfx	r3, r3, #1, #2
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d002      	beq.n	8008ba2 <handle_enum_done+0x3e>
 8008b9c:	2b02      	cmp	r3, #2
 8008b9e:	d004      	beq.n	8008baa <handle_enum_done+0x46>
 8008ba0:	e007      	b.n	8008bb2 <handle_enum_done+0x4e>
    case DCFG_SPEED_HIGH:
      speed = TUSB_SPEED_HIGH;
 8008ba2:	2302      	movs	r3, #2
 8008ba4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8008ba8:	e007      	b.n	8008bba <handle_enum_done+0x56>

    case DCFG_SPEED_LOW:
      speed = TUSB_SPEED_LOW;
 8008baa:	2301      	movs	r3, #1
 8008bac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8008bb0:	e003      	b.n	8008bba <handle_enum_done+0x56>

    case DCFG_SPEED_FULL_30_60MHZ:
    case DCFG_SPEED_FULL_48MHZ:
    default:
      speed = TUSB_SPEED_FULL;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 8008bb8:	bf00      	nop
 8008bba:	79fb      	ldrb	r3, [r7, #7]
 8008bbc:	77bb      	strb	r3, [r7, #30]
 8008bbe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008bc2:	777b      	strb	r3, [r7, #29]
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	773b      	strb	r3, [r7, #28]
}

// helper to send bus reset event
TU_ATTR_ALWAYS_INLINE static inline  void dcd_event_bus_reset (uint8_t rhport, tusb_speed_t speed, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8008bc8:	7fbb      	ldrb	r3, [r7, #30]
 8008bca:	733b      	strb	r3, [r7, #12]
  event.event_id = DCD_EVENT_BUS_RESET;
 8008bcc:	2301      	movs	r3, #1
 8008bce:	737b      	strb	r3, [r7, #13]
  event.bus_reset.speed = speed;
 8008bd0:	7f7b      	ldrb	r3, [r7, #29]
 8008bd2:	743b      	strb	r3, [r7, #16]
  dcd_event_handler(&event, in_isr);
 8008bd4:	7f3a      	ldrb	r2, [r7, #28]
 8008bd6:	f107 030c 	add.w	r3, r7, #12
 8008bda:	4611      	mov	r1, r2
 8008bdc:	4618      	mov	r0, r3
 8008bde:	f7fe f8df 	bl	8006da0 <dcd_event_handler>
}
 8008be2:	bf00      	nop
  }

  // TODO must update GUSBCFG_TRDT according to link speed
  dcd_event_bus_reset(rhport, speed, true);
}
 8008be4:	bf00      	nop
 8008be6:	3728      	adds	r7, #40	@ 0x28
 8008be8:	46bd      	mov	sp, r7
 8008bea:	bd80      	pop	{r7, pc}
 8008bec:	0800a7a4 	.word	0x0800a7a4

08008bf0 <handle_rxflvl_irq>:
}
#endif

#if CFG_TUD_DWC2_SLAVE_ENABLE
// Process shared receive FIFO, this interrupt is only used in Slave mode
static void handle_rxflvl_irq(uint8_t rhport) {
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b08c      	sub	sp, #48	@ 0x30
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	4603      	mov	r3, r0
 8008bf8:	71fb      	strb	r3, [r7, #7]
 8008bfa:	79fb      	ldrb	r3, [r7, #7]
 8008bfc:	74fb      	strb	r3, [r7, #19]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008bfe:	7cfb      	ldrb	r3, [r7, #19]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d001      	beq.n	8008c08 <handle_rxflvl_irq+0x18>
    rhport = 0;
 8008c04:	2300      	movs	r3, #0
 8008c06:	74fb      	strb	r3, [r7, #19]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008c08:	7cfb      	ldrb	r3, [r7, #19]
 8008c0a:	4a49      	ldr	r2, [pc, #292]	@ (8008d30 <handle_rxflvl_irq+0x140>)
 8008c0c:	011b      	lsls	r3, r3, #4
 8008c0e:	4413      	add	r3, r2
 8008c10:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 8008c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008c1a:	62bb      	str	r3, [r7, #40]	@ 0x28

  // Pop control word off FIFO
  const dwc2_grxstsp_t grxstsp = {.value = dwc2->grxstsp};
 8008c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	60fb      	str	r3, [r7, #12]
  const uint8_t epnum = grxstsp.ep_ch_num;
 8008c22:	7b3b      	ldrb	r3, [r7, #12]
 8008c24:	f3c3 0303 	ubfx	r3, r3, #0, #4
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  dwc2_dep_t* epout = &dwc2->epout[epnum];
 8008c2e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c32:	3358      	adds	r3, #88	@ 0x58
 8008c34:	015b      	lsls	r3, r3, #5
 8008c36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008c38:	4413      	add	r3, r2
 8008c3a:	623b      	str	r3, [r7, #32]

  switch (grxstsp.packet_status) {
 8008c3c:	7bbb      	ldrb	r3, [r7, #14]
 8008c3e:	f3c3 0343 	ubfx	r3, r3, #1, #4
 8008c42:	b2db      	uxtb	r3, r3
 8008c44:	3b01      	subs	r3, #1
 8008c46:	2b05      	cmp	r3, #5
 8008c48:	d86a      	bhi.n	8008d20 <handle_rxflvl_irq+0x130>
 8008c4a:	a201      	add	r2, pc, #4	@ (adr r2, 8008c50 <handle_rxflvl_irq+0x60>)
 8008c4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c50:	08008d21 	.word	0x08008d21
 8008c54:	08008c8f 	.word	0x08008c8f
 8008c58:	08008d21 	.word	0x08008d21
 8008c5c:	08008c81 	.word	0x08008c81
 8008c60:	08008d21 	.word	0x08008d21
 8008c64:	08008c69 	.word	0x08008c69
      // Global OUT NAK: do nothing
      break;

    case GRXSTS_PKTSTS_SETUP_RX: {
      // Setup packet received
      uint32_t* setup = (uint32_t*)(uintptr_t) _dcd_usbbuf.setup_packet;
 8008c68:	4b32      	ldr	r3, [pc, #200]	@ (8008d34 <handle_rxflvl_irq+0x144>)
 8008c6a:	61fb      	str	r3, [r7, #28]
      // We can receive up to three setup packets in succession, but only the last one is valid.
      setup[0] = (*rx_fifo);
 8008c6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6e:	681a      	ldr	r2, [r3, #0]
 8008c70:	69fb      	ldr	r3, [r7, #28]
 8008c72:	601a      	str	r2, [r3, #0]
      setup[1] = (*rx_fifo);
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	3304      	adds	r3, #4
 8008c78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008c7a:	6812      	ldr	r2, [r2, #0]
 8008c7c:	601a      	str	r2, [r3, #0]
      break;
 8008c7e:	e052      	b.n	8008d26 <handle_rxflvl_irq+0x136>
    }

    case GRXSTS_PKTSTS_SETUP_DONE:
      // Setup packet done:
      // After popping this out, dwc2 asserts a DOEPINT_SETUP interrupt which is handled by handle_epout_irq()
      epout->doeptsiz |= (3 << DOEPTSIZ_STUPCNT_Pos);
 8008c80:	6a3b      	ldr	r3, [r7, #32]
 8008c82:	691b      	ldr	r3, [r3, #16]
 8008c84:	f043 42c0 	orr.w	r2, r3, #1610612736	@ 0x60000000
 8008c88:	6a3b      	ldr	r3, [r7, #32]
 8008c8a:	611a      	str	r2, [r3, #16]
      break;
 8008c8c:	e04b      	b.n	8008d26 <handle_rxflvl_irq+0x136>

    case GRXSTS_PKTSTS_RX_DATA: {
      // Out packet received
      const uint16_t byte_count = grxstsp.byte_count;
 8008c8e:	89bb      	ldrh	r3, [r7, #12]
 8008c90:	f3c3 130a 	ubfx	r3, r3, #4, #11
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	837b      	strh	r3, [r7, #26]
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8008c98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008c9c:	015b      	lsls	r3, r3, #5
 8008c9e:	4a26      	ldr	r2, [pc, #152]	@ (8008d38 <handle_rxflvl_irq+0x148>)
 8008ca0:	4413      	add	r3, r2
 8008ca2:	617b      	str	r3, [r7, #20]

      if (byte_count) {
 8008ca4:	8b7b      	ldrh	r3, [r7, #26]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d03c      	beq.n	8008d24 <handle_rxflvl_irq+0x134>
        // Read packet off RxFIFO
        if (xfer->ff) {
 8008caa:	697b      	ldr	r3, [r7, #20]
 8008cac:	685b      	ldr	r3, [r3, #4]
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d007      	beq.n	8008cc2 <handle_rxflvl_irq+0xd2>
          tu_fifo_write_n_const_addr_full_words(xfer->ff, (const void*) (uintptr_t) rx_fifo, byte_count);
 8008cb2:	697b      	ldr	r3, [r7, #20]
 8008cb4:	685b      	ldr	r3, [r3, #4]
 8008cb6:	8b7a      	ldrh	r2, [r7, #26]
 8008cb8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008cba:	4618      	mov	r0, r3
 8008cbc:	f7fc ff7e 	bl	8005bbc <tu_fifo_write_n_const_addr_full_words>
 8008cc0:	e00c      	b.n	8008cdc <handle_rxflvl_irq+0xec>
        } else {
          dfifo_read_packet(dwc2, xfer->buffer, byte_count);
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	8b7a      	ldrh	r2, [r7, #26]
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008ccc:	f000 fd70 	bl	80097b0 <dfifo_read_packet>
          xfer->buffer += byte_count;
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	8b7b      	ldrh	r3, [r7, #26]
 8008cd6:	441a      	add	r2, r3
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	601a      	str	r2, [r3, #0]
        }

        // short packet, minus remaining bytes (xfer_size)
        if (byte_count < xfer->max_size) {
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	895b      	ldrh	r3, [r3, #10]
 8008ce0:	8b7a      	ldrh	r2, [r7, #26]
 8008ce2:	429a      	cmp	r2, r3
 8008ce4:	d21e      	bcs.n	8008d24 <handle_rxflvl_irq+0x134>
          const dwc2_ep_tsize_t tsiz = {.value = epout->tsiz};
 8008ce6:	6a3b      	ldr	r3, [r7, #32]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	60bb      	str	r3, [r7, #8]
          xfer->total_len -= tsiz.xfer_size;
 8008cec:	697b      	ldr	r3, [r7, #20]
 8008cee:	891a      	ldrh	r2, [r3, #8]
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cf6:	b29b      	uxth	r3, r3
 8008cf8:	1ad3      	subs	r3, r2, r3
 8008cfa:	b29a      	uxth	r2, r3
 8008cfc:	697b      	ldr	r3, [r7, #20]
 8008cfe:	811a      	strh	r2, [r3, #8]
          if (epnum == 0) {
 8008d00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008d04:	2b00      	cmp	r3, #0
 8008d06:	d10d      	bne.n	8008d24 <handle_rxflvl_irq+0x134>
            xfer->total_len -= _dcd_data.ep0_pending[TUSB_DIR_OUT];
 8008d08:	697b      	ldr	r3, [r7, #20]
 8008d0a:	891a      	ldrh	r2, [r3, #8]
 8008d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8008d3c <handle_rxflvl_irq+0x14c>)
 8008d0e:	881b      	ldrh	r3, [r3, #0]
 8008d10:	1ad3      	subs	r3, r2, r3
 8008d12:	b29a      	uxth	r2, r3
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	811a      	strh	r2, [r3, #8]
            _dcd_data.ep0_pending[TUSB_DIR_OUT] = 0;
 8008d18:	4b08      	ldr	r3, [pc, #32]	@ (8008d3c <handle_rxflvl_irq+0x14c>)
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	801a      	strh	r2, [r3, #0]
          }
        }
      }
      break;
 8008d1e:	e001      	b.n	8008d24 <handle_rxflvl_irq+0x134>
      // Out packet done
      // After this entry is popped from the receive FIFO, dwc2 asserts a Transfer Completed interrupt on
      // the specified OUT endpoint which will be handled by handle_epout_irq()
      break;

    default: break;
 8008d20:	bf00      	nop
 8008d22:	e000      	b.n	8008d26 <handle_rxflvl_irq+0x136>
      break;
 8008d24:	bf00      	nop
  }
}
 8008d26:	bf00      	nop
 8008d28:	3730      	adds	r7, #48	@ 0x30
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}
 8008d2e:	bf00      	nop
 8008d30:	0800a7a4 	.word	0x0800a7a4
 8008d34:	20000c94 	.word	0x20000c94
 8008d38:	20000c0c 	.word	0x20000c0c
 8008d3c:	20000c8c 	.word	0x20000c8c

08008d40 <handle_epout_slave>:

static void handle_epout_slave(uint8_t rhport, uint8_t epnum, dwc2_doepint_t doepint_bm) {
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b08e      	sub	sp, #56	@ 0x38
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	4603      	mov	r3, r0
 8008d48:	603a      	str	r2, [r7, #0]
 8008d4a:	71fb      	strb	r3, [r7, #7]
 8008d4c:	460b      	mov	r3, r1
 8008d4e:	71bb      	strb	r3, [r7, #6]
  if (doepint_bm.setup_phase_done) {
 8008d50:	783b      	ldrb	r3, [r7, #0]
 8008d52:	f003 0308 	and.w	r3, r3, #8
 8008d56:	b2db      	uxtb	r3, r3
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d01c      	beq.n	8008d96 <handle_epout_slave+0x56>
 8008d5c:	79fb      	ldrb	r3, [r7, #7]
 8008d5e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 8008d62:	4b34      	ldr	r3, [pc, #208]	@ (8008e34 <handle_epout_slave+0xf4>)
 8008d64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008d66:	2301      	movs	r3, #1
 8008d68:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

// helper to send setup received
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_setup_received(uint8_t rhport, uint8_t const * setup, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8008d6c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008d70:	753b      	strb	r3, [r7, #20]
  event.event_id = DCD_EVENT_SETUP_RECEIVED;
 8008d72:	2306      	movs	r3, #6
 8008d74:	757b      	strb	r3, [r7, #21]
  memcpy(&event.setup_received, setup, sizeof(tusb_control_request_t));
 8008d76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008d78:	f107 0318 	add.w	r3, r7, #24
 8008d7c:	6810      	ldr	r0, [r2, #0]
 8008d7e:	6851      	ldr	r1, [r2, #4]
 8008d80:	c303      	stmia	r3!, {r0, r1}
  dcd_event_handler(&event, in_isr);
 8008d82:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8008d86:	f107 0314 	add.w	r3, r7, #20
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f7fe f807 	bl	8006da0 <dcd_event_handler>
}
 8008d92:	bf00      	nop
    dcd_event_setup_received(rhport, _dcd_usbbuf.setup_packet, true);
    return;
 8008d94:	e04a      	b.n	8008e2c <handle_epout_slave+0xec>
  }

  // Normal OUT transfer complete
  if (doepint_bm.xfer_complete) {
 8008d96:	783b      	ldrb	r3, [r7, #0]
 8008d98:	f003 0301 	and.w	r3, r3, #1
 8008d9c:	b2db      	uxtb	r3, r3
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d044      	beq.n	8008e2c <handle_epout_slave+0xec>
    // only handle data skip if it is setup or status related
    // Note: even though (xfer_complete + status_phase_rx) is for buffered DMA only, for STM32L47x (dwc2 v3.00a) they
    // can is set when GRXSTS_PKTSTS_SETUP_RX is popped therefore they can bet set before/together with setup_phase_done
    if (!doepint_bm.status_phase_rx && !doepint_bm.setup_packet_rx) {
 8008da2:	783b      	ldrb	r3, [r7, #0]
 8008da4:	f003 0320 	and.w	r3, r3, #32
 8008da8:	b2db      	uxtb	r3, r3
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d13e      	bne.n	8008e2c <handle_epout_slave+0xec>
 8008dae:	787b      	ldrb	r3, [r7, #1]
 8008db0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008db4:	b2db      	uxtb	r3, r3
 8008db6:	2b00      	cmp	r3, #0
 8008db8:	d138      	bne.n	8008e2c <handle_epout_slave+0xec>
      xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_OUT);
 8008dba:	79bb      	ldrb	r3, [r7, #6]
 8008dbc:	015b      	lsls	r3, r3, #5
 8008dbe:	4a1e      	ldr	r2, [pc, #120]	@ (8008e38 <handle_epout_slave+0xf8>)
 8008dc0:	4413      	add	r3, r2
 8008dc2:	637b      	str	r3, [r7, #52]	@ 0x34

      if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_OUT]) {
 8008dc4:	79bb      	ldrb	r3, [r7, #6]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d10a      	bne.n	8008de0 <handle_epout_slave+0xa0>
 8008dca:	4b1c      	ldr	r3, [pc, #112]	@ (8008e3c <handle_epout_slave+0xfc>)
 8008dcc:	881b      	ldrh	r3, [r3, #0]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d006      	beq.n	8008de0 <handle_epout_slave+0xa0>
        // EP0 can only handle one packet, Schedule another packet to be received.
        edpt_schedule_packets(rhport, epnum, TUSB_DIR_OUT);
 8008dd2:	79b9      	ldrb	r1, [r7, #6]
 8008dd4:	79fb      	ldrb	r3, [r7, #7]
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	4618      	mov	r0, r3
 8008dda:	f7ff f977 	bl	80080cc <edpt_schedule_packets>
 8008dde:	e025      	b.n	8008e2c <handle_epout_slave+0xec>
      } else {
        dcd_event_xfer_complete(rhport, epnum, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8008de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008de2:	891b      	ldrh	r3, [r3, #8]
 8008de4:	461a      	mov	r2, r3
 8008de6:	79fb      	ldrb	r3, [r7, #7]
 8008de8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008dec:	79bb      	ldrb	r3, [r7, #6]
 8008dee:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8008df2:	627a      	str	r2, [r7, #36]	@ 0x24
 8008df4:	2300      	movs	r3, #0
 8008df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22

// helper to send transfer complete event
TU_ATTR_ALWAYS_INLINE static inline void dcd_event_xfer_complete (uint8_t rhport, uint8_t ep_addr, uint32_t xferred_bytes, uint8_t result, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 8008e00:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008e04:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8008e06:	2307      	movs	r3, #7
 8008e08:	727b      	strb	r3, [r7, #9]
  event.xfer_complete.ep_addr = ep_addr;
 8008e0a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008e0e:	733b      	strb	r3, [r7, #12]
  event.xfer_complete.len     = xferred_bytes;
 8008e10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e12:	613b      	str	r3, [r7, #16]
  event.xfer_complete.result  = result;
 8008e14:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008e18:	737b      	strb	r3, [r7, #13]
  dcd_event_handler(&event, in_isr);
 8008e1a:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8008e1e:	f107 0308 	add.w	r3, r7, #8
 8008e22:	4611      	mov	r1, r2
 8008e24:	4618      	mov	r0, r3
 8008e26:	f7fd ffbb 	bl	8006da0 <dcd_event_handler>
}
 8008e2a:	bf00      	nop
      }
    }
  }
}
 8008e2c:	3738      	adds	r7, #56	@ 0x38
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop
 8008e34:	20000c94 	.word	0x20000c94
 8008e38:	20000c0c 	.word	0x20000c0c
 8008e3c:	20000c8c 	.word	0x20000c8c

08008e40 <handle_epin_slave>:

static void handle_epin_slave(uint8_t rhport, uint8_t epnum, dwc2_diepint_t diepint_bm) {
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b092      	sub	sp, #72	@ 0x48
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	4603      	mov	r3, r0
 8008e48:	603a      	str	r2, [r7, #0]
 8008e4a:	71fb      	strb	r3, [r7, #7]
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	71bb      	strb	r3, [r7, #6]
 8008e50:	79fb      	ldrb	r3, [r7, #7]
 8008e52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8008e56:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d002      	beq.n	8008e64 <handle_epin_slave+0x24>
    rhport = 0;
 8008e5e:	2300      	movs	r3, #0
 8008e60:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8008e64:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008e68:	4a64      	ldr	r2, [pc, #400]	@ (8008ffc <handle_epin_slave+0x1bc>)
 8008e6a:	011b      	lsls	r3, r3, #4
 8008e6c:	4413      	add	r3, r2
 8008e6e:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8008e70:	643b      	str	r3, [r7, #64]	@ 0x40
  dwc2_dep_t* epin = &dwc2->epin[epnum];
 8008e72:	79bb      	ldrb	r3, [r7, #6]
 8008e74:	3348      	adds	r3, #72	@ 0x48
 8008e76:	015b      	lsls	r3, r3, #5
 8008e78:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008e7a:	4413      	add	r3, r2
 8008e7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  xfer_ctl_t* xfer = XFER_CTL_BASE(epnum, TUSB_DIR_IN);
 8008e7e:	79bb      	ldrb	r3, [r7, #6]
 8008e80:	015b      	lsls	r3, r3, #5
 8008e82:	3310      	adds	r3, #16
 8008e84:	4a5e      	ldr	r2, [pc, #376]	@ (8009000 <handle_epin_slave+0x1c0>)
 8008e86:	4413      	add	r3, r2
 8008e88:	63bb      	str	r3, [r7, #56]	@ 0x38

  if (diepint_bm.xfer_complete) {
 8008e8a:	783b      	ldrb	r3, [r7, #0]
 8008e8c:	f003 0301 	and.w	r3, r3, #1
 8008e90:	b2db      	uxtb	r3, r3
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d037      	beq.n	8008f06 <handle_epin_slave+0xc6>
    if ((epnum == 0) && _dcd_data.ep0_pending[TUSB_DIR_IN]) {
 8008e96:	79bb      	ldrb	r3, [r7, #6]
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d10a      	bne.n	8008eb2 <handle_epin_slave+0x72>
 8008e9c:	4b59      	ldr	r3, [pc, #356]	@ (8009004 <handle_epin_slave+0x1c4>)
 8008e9e:	885b      	ldrh	r3, [r3, #2]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d006      	beq.n	8008eb2 <handle_epin_slave+0x72>
      // EP0 can only handle one packet. Schedule another packet to be transmitted.
      edpt_schedule_packets(rhport, epnum, TUSB_DIR_IN);
 8008ea4:	79b9      	ldrb	r1, [r7, #6]
 8008ea6:	79fb      	ldrb	r3, [r7, #7]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7ff f90e 	bl	80080cc <edpt_schedule_packets>
 8008eb0:	e029      	b.n	8008f06 <handle_epin_slave+0xc6>
    } else {
      dcd_event_xfer_complete(rhport, epnum | TUSB_DIR_IN_MASK, xfer->total_len, XFER_RESULT_SUCCESS, true);
 8008eb2:	79bb      	ldrb	r3, [r7, #6]
 8008eb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8008eb8:	b2d9      	uxtb	r1, r3
 8008eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008ebc:	891b      	ldrh	r3, [r3, #8]
 8008ebe:	461a      	mov	r2, r3
 8008ec0:	79fb      	ldrb	r3, [r7, #7]
 8008ec2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008ec6:	460b      	mov	r3, r1
 8008ec8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8008ecc:	627a      	str	r2, [r7, #36]	@ 0x24
 8008ece:	2300      	movs	r3, #0
 8008ed0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8008ed4:	2301      	movs	r3, #1
 8008ed6:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  event.rhport = rhport;
 8008eda:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008ede:	743b      	strb	r3, [r7, #16]
  event.event_id = DCD_EVENT_XFER_COMPLETE;
 8008ee0:	2307      	movs	r3, #7
 8008ee2:	747b      	strb	r3, [r7, #17]
  event.xfer_complete.ep_addr = ep_addr;
 8008ee4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008ee8:	753b      	strb	r3, [r7, #20]
  event.xfer_complete.len     = xferred_bytes;
 8008eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eec:	61bb      	str	r3, [r7, #24]
  event.xfer_complete.result  = result;
 8008eee:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008ef2:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8008ef4:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8008ef8:	f107 0310 	add.w	r3, r7, #16
 8008efc:	4611      	mov	r1, r2
 8008efe:	4618      	mov	r0, r3
 8008f00:	f7fd ff4e 	bl	8006da0 <dcd_event_handler>
}
 8008f04:	bf00      	nop
  }

  // TX FIFO empty bit is read-only. It will only be cleared by hardware when written bytes is more than
  // - 64 bytes or
  // - Half/Empty of TX FIFO size (configured by GAHBCFG.TXFELVL)
  if (diepint_bm.txfifo_empty && (dwc2->diepempmsk & (1 << epnum))) {
 8008f06:	783b      	ldrb	r3, [r7, #0]
 8008f08:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d070      	beq.n	8008ff4 <handle_epin_slave+0x1b4>
 8008f12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008f14:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8008f18:	79ba      	ldrb	r2, [r7, #6]
 8008f1a:	2101      	movs	r1, #1
 8008f1c:	fa01 f202 	lsl.w	r2, r1, r2
 8008f20:	4013      	ands	r3, r2
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d066      	beq.n	8008ff4 <handle_epin_slave+0x1b4>
    dwc2_ep_tsize_t tsiz = {.value = epin->tsiz};
 8008f26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f28:	691b      	ldr	r3, [r3, #16]
 8008f2a:	60fb      	str	r3, [r7, #12]
    const uint16_t remain_packets = tsiz.packet_count;
 8008f2c:	89fb      	ldrh	r3, [r7, #14]
 8008f2e:	f3c3 03c9 	ubfx	r3, r3, #3, #10
 8008f32:	b29b      	uxth	r3, r3
 8008f34:	86fb      	strh	r3, [r7, #54]	@ 0x36

    // Process every single packet (only whole packets can be written to fifo)
    for (uint16_t i = 0; i < remain_packets; i++) {
 8008f36:	2300      	movs	r3, #0
 8008f38:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008f3c:	e03f      	b.n	8008fbe <handle_epin_slave+0x17e>
      tsiz.value = epin->tsiz;
 8008f3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f40:	691b      	ldr	r3, [r3, #16]
 8008f42:	60fb      	str	r3, [r7, #12]
      const uint16_t remain_bytes = (uint16_t) tsiz.xfer_size;
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f4a:	86bb      	strh	r3, [r7, #52]	@ 0x34
      const uint16_t xact_bytes = tu_min16(remain_bytes, xfer->max_size);
 8008f4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f4e:	895a      	ldrh	r2, [r3, #10]
 8008f50:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8008f52:	843b      	strh	r3, [r7, #32]
 8008f54:	4613      	mov	r3, r2
 8008f56:	83fb      	strh	r3, [r7, #30]
TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_min16 (uint16_t x, uint16_t y) { return (x < y) ? x : y; }
 8008f58:	8c3a      	ldrh	r2, [r7, #32]
 8008f5a:	8bfb      	ldrh	r3, [r7, #30]
 8008f5c:	4293      	cmp	r3, r2
 8008f5e:	bf28      	it	cs
 8008f60:	4613      	movcs	r3, r2
 8008f62:	b29b      	uxth	r3, r3
 8008f64:	867b      	strh	r3, [r7, #50]	@ 0x32

      // Check if dtxfsts has enough space available
      if (xact_bytes > ((epin->dtxfsts & DTXFSTS_INEPTFSAV_Msk) << 2)) {
 8008f66:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8008f68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	0099      	lsls	r1, r3, #2
 8008f6e:	4b26      	ldr	r3, [pc, #152]	@ (8009008 <handle_epin_slave+0x1c8>)
 8008f70:	400b      	ands	r3, r1
 8008f72:	429a      	cmp	r2, r3
 8008f74:	d829      	bhi.n	8008fca <handle_epin_slave+0x18a>
        break;
      }

      // Push packet to Tx-FIFO
      if (xfer->ff) {
 8008f76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00d      	beq.n	8008f9a <handle_epin_slave+0x15a>
        volatile uint32_t* tx_fifo = dwc2->fifo[epnum];
 8008f7e:	79bb      	ldrb	r3, [r7, #6]
 8008f80:	3301      	adds	r3, #1
 8008f82:	031b      	lsls	r3, r3, #12
 8008f84:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f86:	4413      	add	r3, r2
 8008f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
        tu_fifo_read_n_const_addr_full_words(xfer->ff, (void*)(uintptr_t)tx_fifo, xact_bytes);
 8008f8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f8c:	685b      	ldr	r3, [r3, #4]
 8008f8e:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8008f90:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008f92:	4618      	mov	r0, r3
 8008f94:	f7fc fdab 	bl	8005aee <tu_fifo_read_n_const_addr_full_words>
 8008f98:	e00c      	b.n	8008fb4 <handle_epin_slave+0x174>
      } else {
        dfifo_write_packet(dwc2, epnum, xfer->buffer, xact_bytes);
 8008f9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f9c:	681a      	ldr	r2, [r3, #0]
 8008f9e:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008fa0:	79b9      	ldrb	r1, [r7, #6]
 8008fa2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8008fa4:	f000 fc55 	bl	8009852 <dfifo_write_packet>
        xfer->buffer += xact_bytes;
 8008fa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8008fae:	441a      	add	r2, r3
 8008fb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fb2:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < remain_packets; i++) {
 8008fb4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	@ 0x46
 8008fb8:	3301      	adds	r3, #1
 8008fba:	f8a7 3046 	strh.w	r3, [r7, #70]	@ 0x46
 8008fbe:	f8b7 2046 	ldrh.w	r2, [r7, #70]	@ 0x46
 8008fc2:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8008fc4:	429a      	cmp	r2, r3
 8008fc6:	d3ba      	bcc.n	8008f3e <handle_epin_slave+0xfe>
 8008fc8:	e000      	b.n	8008fcc <handle_epin_slave+0x18c>
        break;
 8008fca:	bf00      	nop
      }
    }

    // Turn off TXFE if all bytes are written.
    tsiz.value = epin->tsiz;
 8008fcc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	60fb      	str	r3, [r7, #12]
    if (tsiz.xfer_size == 0) {
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d10b      	bne.n	8008ff4 <handle_epin_slave+0x1b4>
      dwc2->diepempmsk &= ~(1 << epnum);
 8008fdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008fde:	f8d3 3834 	ldr.w	r3, [r3, #2100]	@ 0x834
 8008fe2:	79ba      	ldrb	r2, [r7, #6]
 8008fe4:	2101      	movs	r1, #1
 8008fe6:	fa01 f202 	lsl.w	r2, r1, r2
 8008fea:	43d2      	mvns	r2, r2
 8008fec:	401a      	ands	r2, r3
 8008fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008ff0:	f8c3 2834 	str.w	r2, [r3, #2100]	@ 0x834
    }
  }
}
 8008ff4:	bf00      	nop
 8008ff6:	3748      	adds	r7, #72	@ 0x48
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	0800a7a4 	.word	0x0800a7a4
 8009000:	20000c0c 	.word	0x20000c0c
 8009004:	20000c8c 	.word	0x20000c8c
 8009008:	0003fffc 	.word	0x0003fffc

0800900c <handle_ep_irq>:
    }
  }
}
#endif

static void handle_ep_irq(uint8_t rhport, uint8_t dir) {
 800900c:	b580      	push	{r7, lr}
 800900e:	b08e      	sub	sp, #56	@ 0x38
 8009010:	af00      	add	r7, sp, #0
 8009012:	4603      	mov	r3, r0
 8009014:	460a      	mov	r2, r1
 8009016:	71fb      	strb	r3, [r7, #7]
 8009018:	4613      	mov	r3, r2
 800901a:	71bb      	strb	r3, [r7, #6]
 800901c:	79fb      	ldrb	r3, [r7, #7]
 800901e:	76fb      	strb	r3, [r7, #27]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009020:	7efb      	ldrb	r3, [r7, #27]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d001      	beq.n	800902a <handle_ep_irq+0x1e>
    rhport = 0;
 8009026:	2300      	movs	r3, #0
 8009028:	76fb      	strb	r3, [r7, #27]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 800902a:	7efb      	ldrb	r3, [r7, #27]
 800902c:	4a38      	ldr	r2, [pc, #224]	@ (8009110 <handle_ep_irq+0x104>)
 800902e:	011b      	lsls	r3, r3, #4
 8009030:	4413      	add	r3, r2
 8009032:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 8009034:	633b      	str	r3, [r7, #48]	@ 0x30
 8009036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009038:	61fb      	str	r3, [r7, #28]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800903e:	617b      	str	r3, [r7, #20]
  return CFG_TUD_DWC2_DMA_ENABLE && ghwcfg2.arch == GHWCFG2_ARCH_INTERNAL_DMA;
 8009040:	2300      	movs	r3, #0
  const bool is_dma = dma_device_enabled(dwc2);
 8009042:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8009046:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009048:	623b      	str	r3, [r7, #32]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800904a:	6a3b      	ldr	r3, [r7, #32]
 800904c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800904e:	613b      	str	r3, [r7, #16]
  return ghwcfg2.num_dev_ep + 1;
 8009050:	7c7b      	ldrb	r3, [r7, #17]
 8009052:	f3c3 0383 	ubfx	r3, r3, #2, #4
 8009056:	b2db      	uxtb	r3, r3
 8009058:	3301      	adds	r3, #1
 800905a:	b2db      	uxtb	r3, r3
  const uint8_t ep_count = dwc2_ep_count(dwc2);
 800905c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
  const uint8_t daint_offset = (dir == TUSB_DIR_IN) ? DAINT_IEPINT_Pos : DAINT_OEPINT_Pos;
 8009060:	79bb      	ldrb	r3, [r7, #6]
 8009062:	2b01      	cmp	r3, #1
 8009064:	d101      	bne.n	800906a <handle_ep_irq+0x5e>
 8009066:	2300      	movs	r3, #0
 8009068:	e000      	b.n	800906c <handle_ep_irq+0x60>
 800906a:	2310      	movs	r3, #16
 800906c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dwc2_dep_t* ep_base = &dwc2->ep[dir == TUSB_DIR_IN ? 0 : 1][0];
 8009070:	79bb      	ldrb	r3, [r7, #6]
 8009072:	2b01      	cmp	r3, #1
 8009074:	bf14      	ite	ne
 8009076:	2301      	movne	r3, #1
 8009078:	2300      	moveq	r3, #0
 800907a:	b2db      	uxtb	r3, r3
 800907c:	025b      	lsls	r3, r3, #9
 800907e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009082:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009084:	4413      	add	r3, r2
 8009086:	62bb      	str	r3, [r7, #40]	@ 0x28

  // DAINT for a given EP clears when DEPINTx is cleared.
  // EPINT will be cleared when DAINT bits are cleared.
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 8009088:	2300      	movs	r3, #0
 800908a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800908e:	e034      	b.n	80090fa <handle_ep_irq+0xee>
    if (dwc2->daint & TU_BIT(daint_offset + epnum)) {
 8009090:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009092:	f8d3 2818 	ldr.w	r2, [r3, #2072]	@ 0x818
 8009096:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 800909a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800909e:	440b      	add	r3, r1
 80090a0:	fa22 f303 	lsr.w	r3, r2, r3
 80090a4:	f003 0301 	and.w	r3, r3, #1
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d021      	beq.n	80090f0 <handle_ep_irq+0xe4>
      dwc2_dep_t* epout = &ep_base[epnum];
 80090ac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80090b0:	015b      	lsls	r3, r3, #5
 80090b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80090b4:	4413      	add	r3, r2
 80090b6:	627b      	str	r3, [r7, #36]	@ 0x24
      union {
        uint32_t value;
        dwc2_diepint_t diepint_bm;
        dwc2_doepint_t doepint_bm;
      } intr;
      intr.value = epout->intr;
 80090b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	60fb      	str	r3, [r7, #12]

      epout->intr = intr.value; // Clear interrupt
 80090be:	68fa      	ldr	r2, [r7, #12]
 80090c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80090c2:	609a      	str	r2, [r3, #8]

      if (is_dma) {
 80090c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d111      	bne.n	80090f0 <handle_ep_irq+0xe4>
          handle_epout_dma(rhport, epnum, intr.doepint_bm);
        }
        #endif
      } else {
        #if CFG_TUD_DWC2_SLAVE_ENABLE
        if (dir == TUSB_DIR_IN) {
 80090cc:	79bb      	ldrb	r3, [r7, #6]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d107      	bne.n	80090e2 <handle_ep_irq+0xd6>
          handle_epin_slave(rhport, epnum, intr.diepint_bm);
 80090d2:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 80090d6:	79fb      	ldrb	r3, [r7, #7]
 80090d8:	68fa      	ldr	r2, [r7, #12]
 80090da:	4618      	mov	r0, r3
 80090dc:	f7ff feb0 	bl	8008e40 <handle_epin_slave>
 80090e0:	e006      	b.n	80090f0 <handle_ep_irq+0xe4>
        } else {
          handle_epout_slave(rhport, epnum, intr.doepint_bm);
 80090e2:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 80090e6:	79fb      	ldrb	r3, [r7, #7]
 80090e8:	68fa      	ldr	r2, [r7, #12]
 80090ea:	4618      	mov	r0, r3
 80090ec:	f7ff fe28 	bl	8008d40 <handle_epout_slave>
  for (uint8_t epnum = 0; epnum < ep_count; epnum++) {
 80090f0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80090f4:	3301      	adds	r3, #1
 80090f6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80090fa:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80090fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009102:	429a      	cmp	r2, r3
 8009104:	d3c4      	bcc.n	8009090 <handle_ep_irq+0x84>
        }
        #endif
      }
    }
  }
}
 8009106:	bf00      	nop
 8009108:	bf00      	nop
 800910a:	3738      	adds	r7, #56	@ 0x38
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}
 8009110:	0800a7a4 	.word	0x0800a7a4

08009114 <dcd_int_handler>:
     GINTSTS:    OEPInt    IEPInt | USBReset | EnumDone | USBSusp | WkUpInt | OTGInt | SOF | RXFLVL

  Note: when OTG_MULTI_PROC_INTRPT = 1, Device Each endpoint interrupt deachint/deachmsk/diepeachmsk/doepeachmsk
  are combined to generate dedicated interrupt line for each endpoint.
 */
void dcd_int_handler(uint8_t rhport) {
 8009114:	b580      	push	{r7, lr}
 8009116:	b098      	sub	sp, #96	@ 0x60
 8009118:	af00      	add	r7, sp, #0
 800911a:	4603      	mov	r3, r0
 800911c:	71fb      	strb	r3, [r7, #7]
 800911e:	79fb      	ldrb	r3, [r7, #7]
 8009120:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 8009124:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009128:	2b00      	cmp	r3, #0
 800912a:	d002      	beq.n	8009132 <dcd_int_handler+0x1e>
    rhport = 0;
 800912c:	2300      	movs	r3, #0
 800912e:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 8009132:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8009136:	4a80      	ldr	r2, [pc, #512]	@ (8009338 <dcd_int_handler+0x224>)
 8009138:	011b      	lsls	r3, r3, #4
 800913a:	4413      	add	r3, r2
 800913c:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 800913e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  const uint32_t gintmask = dwc2->gintmsk;
 8009140:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009142:	699b      	ldr	r3, [r3, #24]
 8009144:	65bb      	str	r3, [r7, #88]	@ 0x58
  const uint32_t gintsts = dwc2->gintsts & gintmask;
 8009146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009148:	695b      	ldr	r3, [r3, #20]
 800914a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800914c:	4013      	ands	r3, r2
 800914e:	657b      	str	r3, [r7, #84]	@ 0x54

  if (gintsts & GINTSTS_USBRST) {
 8009150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009152:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00d      	beq.n	8009176 <dcd_int_handler+0x62>
    // USBRST is start of reset.
    dwc2->gintsts = GINTSTS_USBRST;
 800915a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800915c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8009160:	615a      	str	r2, [r3, #20]

    usbd_spin_lock(true);
 8009162:	2001      	movs	r0, #1
 8009164:	f7fe f81a 	bl	800719c <usbd_spin_lock>
    handle_bus_reset(rhport);
 8009168:	79fb      	ldrb	r3, [r7, #7]
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff fc0e 	bl	800898c <handle_bus_reset>
    usbd_spin_unlock(true);
 8009170:	2001      	movs	r0, #1
 8009172:	f7fe f82d 	bl	80071d0 <usbd_spin_unlock>
  }

  if (gintsts & GINTSTS_ENUMDNE) {
 8009176:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009178:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800917c:	2b00      	cmp	r3, #0
 800917e:	d007      	beq.n	8009190 <dcd_int_handler+0x7c>
    // ENUMDNE is the end of reset where speed of the link is detected
    dwc2->gintsts = GINTSTS_ENUMDNE;
 8009180:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009182:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8009186:	615a      	str	r2, [r3, #20]
    handle_enum_done(rhport);
 8009188:	79fb      	ldrb	r3, [r7, #7]
 800918a:	4618      	mov	r0, r3
 800918c:	f7ff fcea 	bl	8008b64 <handle_enum_done>
  }

  if (gintsts & GINTSTS_USBSUSP) {
 8009190:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009192:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009196:	2b00      	cmp	r3, #0
 8009198:	d01d      	beq.n	80091d6 <dcd_int_handler+0xc2>
    dwc2->gintsts = GINTSTS_USBSUSP;
 800919a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800919c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80091a0:	615a      	str	r2, [r3, #20]
 80091a2:	79fb      	ldrb	r3, [r7, #7]
 80091a4:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 80091a8:	2304      	movs	r3, #4
 80091aa:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 80091ae:	2301      	movs	r3, #1
 80091b0:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
  event.rhport = rhport;
 80091b4:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80091b8:	f887 3020 	strb.w	r3, [r7, #32]
  event.event_id = eid;
 80091bc:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80091c0:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
  dcd_event_handler(&event, in_isr);
 80091c4:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 80091c8:	f107 0320 	add.w	r3, r7, #32
 80091cc:	4611      	mov	r1, r2
 80091ce:	4618      	mov	r0, r3
 80091d0:	f7fd fde6 	bl	8006da0 <dcd_event_handler>
}
 80091d4:	bf00      	nop
    dcd_event_bus_signal(rhport, DCD_EVENT_SUSPEND, true);
  }

  if (gintsts & GINTSTS_WKUINT) {
 80091d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80091d8:	2b00      	cmp	r3, #0
 80091da:	da1d      	bge.n	8009218 <dcd_int_handler+0x104>
    dwc2->gintsts = GINTSTS_WKUINT;
 80091dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80091de:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80091e2:	615a      	str	r2, [r3, #20]
 80091e4:	79fb      	ldrb	r3, [r7, #7]
 80091e6:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80091ea:	2305      	movs	r3, #5
 80091ec:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 80091f0:	2301      	movs	r3, #1
 80091f2:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  event.rhport = rhport;
 80091f6:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80091fa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
  event.event_id = eid;
 80091fe:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8009202:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
  dcd_event_handler(&event, in_isr);
 8009206:	f897 2045 	ldrb.w	r2, [r7, #69]	@ 0x45
 800920a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800920e:	4611      	mov	r1, r2
 8009210:	4618      	mov	r0, r3
 8009212:	f7fd fdc5 	bl	8006da0 <dcd_event_handler>
}
 8009216:	bf00      	nop
  }

  // TODO check GINTSTS_DISCINT for disconnect detection
  // if(int_status & GINTSTS_DISCINT)

  if (gintsts & GINTSTS_OTGINT) {
 8009218:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800921a:	f003 0304 	and.w	r3, r3, #4
 800921e:	2b00      	cmp	r3, #0
 8009220:	d022      	beq.n	8009268 <dcd_int_handler+0x154>
    // OTG INT bit is read-only
    const uint32_t otg_int = dwc2->gotgint;
 8009222:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009224:	685b      	ldr	r3, [r3, #4]
 8009226:	653b      	str	r3, [r7, #80]	@ 0x50

    if (otg_int & GOTGINT_SEDET) {
 8009228:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800922a:	f003 0304 	and.w	r3, r3, #4
 800922e:	2b00      	cmp	r3, #0
 8009230:	d017      	beq.n	8009262 <dcd_int_handler+0x14e>
 8009232:	79fb      	ldrb	r3, [r7, #7]
 8009234:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
 8009238:	2302      	movs	r3, #2
 800923a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800923e:	2301      	movs	r3, #1
 8009240:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  event.rhport = rhport;
 8009244:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8009248:	753b      	strb	r3, [r7, #20]
  event.event_id = eid;
 800924a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800924e:	757b      	strb	r3, [r7, #21]
  dcd_event_handler(&event, in_isr);
 8009250:	f897 2042 	ldrb.w	r2, [r7, #66]	@ 0x42
 8009254:	f107 0314 	add.w	r3, r7, #20
 8009258:	4611      	mov	r1, r2
 800925a:	4618      	mov	r0, r3
 800925c:	f7fd fda0 	bl	8006da0 <dcd_event_handler>
}
 8009260:	bf00      	nop
      dcd_event_bus_signal(rhport, DCD_EVENT_UNPLUGGED, true);
    }

    dwc2->gotgint = otg_int;
 8009262:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009264:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8009266:	605a      	str	r2, [r3, #4]
  }

  if(gintsts & GINTSTS_SOF) {
 8009268:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800926a:	f003 0308 	and.w	r3, r3, #8
 800926e:	2b00      	cmp	r3, #0
 8009270:	d02e      	beq.n	80092d0 <dcd_int_handler+0x1bc>
    dwc2->gintsts = GINTSTS_SOF;
 8009272:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009274:	2208      	movs	r2, #8
 8009276:	615a      	str	r2, [r3, #20]
    const uint32_t frame = (dwc2->dsts & DSTS_FNSOF) >> DSTS_FNSOF_Pos;
 8009278:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800927a:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 800927e:	0a1b      	lsrs	r3, r3, #8
 8009280:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8009284:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Disable SOF interrupt if SOF was not explicitly enabled since SOF was used for remote wakeup detection
    if (!_dcd_data.sof_en) {
 8009286:	4b2d      	ldr	r3, [pc, #180]	@ (800933c <dcd_int_handler+0x228>)
 8009288:	79db      	ldrb	r3, [r3, #7]
 800928a:	f083 0301 	eor.w	r3, r3, #1
 800928e:	b2db      	uxtb	r3, r3
 8009290:	2b00      	cmp	r3, #0
 8009292:	d005      	beq.n	80092a0 <dcd_int_handler+0x18c>
      dwc2->gintmsk &= ~GINTMSK_SOFM;
 8009294:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009296:	699b      	ldr	r3, [r3, #24]
 8009298:	f023 0208 	bic.w	r2, r3, #8
 800929c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800929e:	619a      	str	r2, [r3, #24]
 80092a0:	79fb      	ldrb	r3, [r7, #7]
 80092a2:	f887 3041 	strb.w	r3, [r7, #65]	@ 0x41
 80092a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80092a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80092aa:	2301      	movs	r3, #1
 80092ac:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b

TU_ATTR_ALWAYS_INLINE static inline void dcd_event_sof(uint8_t rhport, uint32_t frame_count, bool in_isr) {
  dcd_event_t event;
  event.rhport = rhport;
 80092b0:	f897 3041 	ldrb.w	r3, [r7, #65]	@ 0x41
 80092b4:	723b      	strb	r3, [r7, #8]
  event.event_id = DCD_EVENT_SOF;
 80092b6:	2303      	movs	r3, #3
 80092b8:	727b      	strb	r3, [r7, #9]
  event.sof.frame_count = frame_count;
 80092ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80092bc:	60fb      	str	r3, [r7, #12]
  dcd_event_handler(&event, in_isr);
 80092be:	f897 203b 	ldrb.w	r2, [r7, #59]	@ 0x3b
 80092c2:	f107 0308 	add.w	r3, r7, #8
 80092c6:	4611      	mov	r1, r2
 80092c8:	4618      	mov	r0, r3
 80092ca:	f7fd fd69 	bl	8006da0 <dcd_event_handler>
}
 80092ce:	bf00      	nop
    dcd_event_sof(rhport, frame, true);
  }

#if CFG_TUD_DWC2_SLAVE_ENABLE
  // RxFIFO non-empty interrupt handling.
  if (gintsts & GINTSTS_RXFLVL) {
 80092d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80092d2:	f003 0310 	and.w	r3, r3, #16
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d015      	beq.n	8009306 <dcd_int_handler+0x1f2>
    // RXFLVL bit is read-only
    dwc2->gintmsk &= ~GINTMSK_RXFLVLM; // disable RXFLVL interrupt while reading
 80092da:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	f023 0210 	bic.w	r2, r3, #16
 80092e2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092e4:	619a      	str	r2, [r3, #24]

    do {
      handle_rxflvl_irq(rhport); // read all packets
 80092e6:	79fb      	ldrb	r3, [r7, #7]
 80092e8:	4618      	mov	r0, r3
 80092ea:	f7ff fc81 	bl	8008bf0 <handle_rxflvl_irq>
    } while(dwc2->gintsts & GINTSTS_RXFLVL);
 80092ee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092f0:	695b      	ldr	r3, [r3, #20]
 80092f2:	f003 0310 	and.w	r3, r3, #16
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d1f5      	bne.n	80092e6 <dcd_int_handler+0x1d2>

    dwc2->gintmsk |= GINTMSK_RXFLVLM;
 80092fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80092fc:	699b      	ldr	r3, [r3, #24]
 80092fe:	f043 0210 	orr.w	r2, r3, #16
 8009302:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009304:	619a      	str	r2, [r3, #24]
  }
#endif

  // OUT endpoint interrupt handling.
  if (gintsts & GINTSTS_OEPINT) {
 8009306:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8009308:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800930c:	2b00      	cmp	r3, #0
 800930e:	d004      	beq.n	800931a <dcd_int_handler+0x206>
    // OEPINT is read-only, clear using DOEPINTn
    handle_ep_irq(rhport, TUSB_DIR_OUT);
 8009310:	79fb      	ldrb	r3, [r7, #7]
 8009312:	2100      	movs	r1, #0
 8009314:	4618      	mov	r0, r3
 8009316:	f7ff fe79 	bl	800900c <handle_ep_irq>
  }

  // IN endpoint interrupt handling.
  if (gintsts & GINTSTS_IEPINT) {
 800931a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800931c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009320:	2b00      	cmp	r3, #0
 8009322:	d004      	beq.n	800932e <dcd_int_handler+0x21a>
    // IEPINT bit read-only, clear using DIEPINTn
    handle_ep_irq(rhport, TUSB_DIR_IN);
 8009324:	79fb      	ldrb	r3, [r7, #7]
 8009326:	2101      	movs	r1, #1
 8009328:	4618      	mov	r0, r3
 800932a:	f7ff fe6f 	bl	800900c <handle_ep_irq>
  }
}
 800932e:	bf00      	nop
 8009330:	3760      	adds	r7, #96	@ 0x60
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}
 8009336:	bf00      	nop
 8009338:	0800a7a4 	.word	0x0800a7a4
 800933c:	20000c8c 	.word	0x20000c8c

08009340 <dwc2_phy_init>:

// MCU specific PHY init, called BEFORE core reset
// - dwc2 3.30a (H5) use USB_HS_PHYC
// - dwc2 4.11a (U5) use femtoPHY
static inline void dwc2_phy_init(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 8009340:	b480      	push	{r7}
 8009342:	b083      	sub	sp, #12
 8009344:	af00      	add	r7, sp, #0
 8009346:	6078      	str	r0, [r7, #4]
 8009348:	460b      	mov	r3, r1
 800934a:	70fb      	strb	r3, [r7, #3]
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 800934c:	78fb      	ldrb	r3, [r7, #3]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d106      	bne.n	8009360 <dwc2_phy_init+0x20>
    // Enable on-chip FS PHY
    dwc2->stm32_gccfg |= STM32_GCCFG_PWRDWN;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009356:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	639a      	str	r2, [r3, #56]	@ 0x38
      #else

      #endif
    }
  }
}
 800935e:	e005      	b.n	800936c <dwc2_phy_init+0x2c>
    dwc2->stm32_gccfg &= ~STM32_GCCFG_PWRDWN;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009364:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800936c:	bf00      	nop
 800936e:	370c      	adds	r7, #12
 8009370:	46bd      	mov	sp, r7
 8009372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009376:	4770      	bx	lr

08009378 <dwc2_phy_update>:

// MCU specific PHY update, it is called AFTER init() and core reset
static inline void dwc2_phy_update(dwc2_regs_t* dwc2, uint8_t hs_phy_type) {
 8009378:	b480      	push	{r7}
 800937a:	b085      	sub	sp, #20
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	70fb      	strb	r3, [r7, #3]
  // used to set turnaround time for fullspeed, nothing to do in highspeed mode
  if (hs_phy_type == GHWCFG2_HSPHY_NOT_SUPPORTED) {
 8009384:	78fb      	ldrb	r3, [r7, #3]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d152      	bne.n	8009430 <dwc2_phy_update+0xb8>
    // Turnaround timeout depends on the AHB clock dictated by STM32 Reference Manual
    uint32_t turnaround;

    if (SystemCoreClock >= 32000000u) {
 800938a:	4b2c      	ldr	r3, [pc, #176]	@ (800943c <dwc2_phy_update+0xc4>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	4a2c      	ldr	r2, [pc, #176]	@ (8009440 <dwc2_phy_update+0xc8>)
 8009390:	4293      	cmp	r3, r2
 8009392:	d302      	bcc.n	800939a <dwc2_phy_update+0x22>
      turnaround = 0x6u;
 8009394:	2306      	movs	r3, #6
 8009396:	60fb      	str	r3, [r7, #12]
 8009398:	e041      	b.n	800941e <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 27500000u) {
 800939a:	4b28      	ldr	r3, [pc, #160]	@ (800943c <dwc2_phy_update+0xc4>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a29      	ldr	r2, [pc, #164]	@ (8009444 <dwc2_phy_update+0xcc>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d902      	bls.n	80093aa <dwc2_phy_update+0x32>
      turnaround = 0x7u;
 80093a4:	2307      	movs	r3, #7
 80093a6:	60fb      	str	r3, [r7, #12]
 80093a8:	e039      	b.n	800941e <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 24000000u) {
 80093aa:	4b24      	ldr	r3, [pc, #144]	@ (800943c <dwc2_phy_update+0xc4>)
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	4a26      	ldr	r2, [pc, #152]	@ (8009448 <dwc2_phy_update+0xd0>)
 80093b0:	4293      	cmp	r3, r2
 80093b2:	d302      	bcc.n	80093ba <dwc2_phy_update+0x42>
      turnaround = 0x8u;
 80093b4:	2308      	movs	r3, #8
 80093b6:	60fb      	str	r3, [r7, #12]
 80093b8:	e031      	b.n	800941e <dwc2_phy_update+0xa6>
    } else if (SystemCoreClock >= 21800000u) {
 80093ba:	4b20      	ldr	r3, [pc, #128]	@ (800943c <dwc2_phy_update+0xc4>)
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	4a23      	ldr	r2, [pc, #140]	@ (800944c <dwc2_phy_update+0xd4>)
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d902      	bls.n	80093ca <dwc2_phy_update+0x52>
      turnaround = 0x9u;
 80093c4:	2309      	movs	r3, #9
 80093c6:	60fb      	str	r3, [r7, #12]
 80093c8:	e029      	b.n	800941e <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 20000000u) {
 80093ca:	4b1c      	ldr	r3, [pc, #112]	@ (800943c <dwc2_phy_update+0xc4>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	4a20      	ldr	r2, [pc, #128]	@ (8009450 <dwc2_phy_update+0xd8>)
 80093d0:	4293      	cmp	r3, r2
 80093d2:	d902      	bls.n	80093da <dwc2_phy_update+0x62>
      turnaround = 0xAu;
 80093d4:	230a      	movs	r3, #10
 80093d6:	60fb      	str	r3, [r7, #12]
 80093d8:	e021      	b.n	800941e <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 18500000u) {
 80093da:	4b18      	ldr	r3, [pc, #96]	@ (800943c <dwc2_phy_update+0xc4>)
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	4a1d      	ldr	r2, [pc, #116]	@ (8009454 <dwc2_phy_update+0xdc>)
 80093e0:	4293      	cmp	r3, r2
 80093e2:	d902      	bls.n	80093ea <dwc2_phy_update+0x72>
      turnaround = 0xBu;
 80093e4:	230b      	movs	r3, #11
 80093e6:	60fb      	str	r3, [r7, #12]
 80093e8:	e019      	b.n	800941e <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 17200000u) {
 80093ea:	4b14      	ldr	r3, [pc, #80]	@ (800943c <dwc2_phy_update+0xc4>)
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a1a      	ldr	r2, [pc, #104]	@ (8009458 <dwc2_phy_update+0xe0>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d302      	bcc.n	80093fa <dwc2_phy_update+0x82>
      turnaround = 0xCu;
 80093f4:	230c      	movs	r3, #12
 80093f6:	60fb      	str	r3, [r7, #12]
 80093f8:	e011      	b.n	800941e <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 16000000u) {
 80093fa:	4b10      	ldr	r3, [pc, #64]	@ (800943c <dwc2_phy_update+0xc4>)
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	4a17      	ldr	r2, [pc, #92]	@ (800945c <dwc2_phy_update+0xe4>)
 8009400:	4293      	cmp	r3, r2
 8009402:	d302      	bcc.n	800940a <dwc2_phy_update+0x92>
      turnaround = 0xDu;
 8009404:	230d      	movs	r3, #13
 8009406:	60fb      	str	r3, [r7, #12]
 8009408:	e009      	b.n	800941e <dwc2_phy_update+0xa6>
    }
    else if (SystemCoreClock >= 15000000u) {
 800940a:	4b0c      	ldr	r3, [pc, #48]	@ (800943c <dwc2_phy_update+0xc4>)
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a14      	ldr	r2, [pc, #80]	@ (8009460 <dwc2_phy_update+0xe8>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d302      	bcc.n	800941a <dwc2_phy_update+0xa2>
      turnaround = 0xEu;
 8009414:	230e      	movs	r3, #14
 8009416:	60fb      	str	r3, [r7, #12]
 8009418:	e001      	b.n	800941e <dwc2_phy_update+0xa6>
    }
    else {
      turnaround = 0xFu;
 800941a:	230f      	movs	r3, #15
 800941c:	60fb      	str	r3, [r7, #12]
    }

    dwc2->gusbcfg = (dwc2->gusbcfg & ~GUSBCFG_TRDT_Msk) | (turnaround << GUSBCFG_TRDT_Pos);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	68db      	ldr	r3, [r3, #12]
 8009422:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	029b      	lsls	r3, r3, #10
 800942a:	431a      	orrs	r2, r3
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	60da      	str	r2, [r3, #12]
  }
}
 8009430:	bf00      	nop
 8009432:	3714      	adds	r7, #20
 8009434:	46bd      	mov	sp, r7
 8009436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943a:	4770      	bx	lr
 800943c:	20000048 	.word	0x20000048
 8009440:	01e84800 	.word	0x01e84800
 8009444:	01a39ddf 	.word	0x01a39ddf
 8009448:	016e3600 	.word	0x016e3600
 800944c:	014ca43f 	.word	0x014ca43f
 8009450:	01312cff 	.word	0x01312cff
 8009454:	011a499f 	.word	0x011a499f
 8009458:	01067380 	.word	0x01067380
 800945c:	00f42400 	.word	0x00f42400
 8009460:	00e4e1c0 	.word	0x00e4e1c0

08009464 <reset_core>:
#include "dwc2_common.h"

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
static void reset_core(dwc2_regs_t* dwc2) {
 8009464:	b480      	push	{r7}
 8009466:	b083      	sub	sp, #12
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
  // reset core
  dwc2->grstctl |= GRSTCTL_CSRST;
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	691b      	ldr	r3, [r3, #16]
 8009470:	f043 0201 	orr.w	r2, r3, #1
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	611a      	str	r2, [r3, #16]

  if ((dwc2->gsnpsid & DWC2_CORE_REV_MASK) < (DWC2_CORE_REV_4_20a & DWC2_CORE_REV_MASK)) {
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800947c:	b29b      	uxth	r3, r3
 800947e:	f244 2209 	movw	r2, #16905	@ 0x4209
 8009482:	4293      	cmp	r3, r2
 8009484:	d807      	bhi.n	8009496 <reset_core+0x32>
    // prior v42.0 CSRST is self-clearing
    while (dwc2->grstctl & GRSTCTL_CSRST) {}
 8009486:	bf00      	nop
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	691b      	ldr	r3, [r3, #16]
 800948c:	f003 0301 	and.w	r3, r3, #1
 8009490:	2b00      	cmp	r3, #0
 8009492:	d1f9      	bne.n	8009488 <reset_core+0x24>
 8009494:	e010      	b.n	80094b8 <reset_core+0x54>
  } else {
    // From v4.20a CSRST bit is write only, CSRT_DONE (w1c) is introduced for checking.
    // CSRST must also be explicitly cleared
    while (!(dwc2->grstctl & GRSTCTL_CSRST_DONE)) {}
 8009496:	bf00      	nop
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	691b      	ldr	r3, [r3, #16]
 800949c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d0f9      	beq.n	8009498 <reset_core+0x34>
    dwc2->grstctl =  (dwc2->grstctl & ~GRSTCTL_CSRST) | GRSTCTL_CSRST_DONE;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	691b      	ldr	r3, [r3, #16]
 80094a8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80094ac:	f023 0301 	bic.w	r3, r3, #1
 80094b0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	611a      	str	r2, [r3, #16]
  }

  while (!(dwc2->grstctl & GRSTCTL_AHBIDL)) {} // wait for AHB master IDLE
 80094b8:	bf00      	nop
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	691b      	ldr	r3, [r3, #16]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	dafb      	bge.n	80094ba <reset_core+0x56>
}
 80094c2:	bf00      	nop
 80094c4:	bf00      	nop
 80094c6:	370c      	adds	r7, #12
 80094c8:	46bd      	mov	sp, r7
 80094ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094ce:	4770      	bx	lr

080094d0 <phy_fs_init>:

static void phy_fs_init(dwc2_regs_t* dwc2) {
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  TU_LOG(DWC2_COMMON_DEBUG, "Fullspeed PHY init\r\n");

  uint32_t gusbcfg = dwc2->gusbcfg;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	68db      	ldr	r3, [r3, #12]
 80094dc:	60fb      	str	r3, [r7, #12]

  // Select FS PHY
  gusbcfg |= GUSBCFG_PHYSEL;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80094e4:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	60da      	str	r2, [r3, #12]

  // MCU specific PHY init before reset
  dwc2_phy_init(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 80094ec:	2100      	movs	r1, #0
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7ff ff26 	bl	8009340 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f7ff ffb5 	bl	8009464 <reset_core>

  // USB turnaround time is critical for certification where long cables and 5-Hubs are used.
  // So if you need the AHB to run at less than 30 MHz, and if USB turnaround time is not critical,
  // these bits can be programmed to a larger value. Default is 5
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 8009500:	60fb      	str	r3, [r7, #12]
  gusbcfg |= 5u << GUSBCFG_TRDT_Pos;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f443 53a0 	orr.w	r3, r3, #5120	@ 0x1400
 8009508:	60fb      	str	r3, [r7, #12]
  dwc2->gusbcfg = gusbcfg;
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, GHWCFG2_HSPHY_NOT_SUPPORTED);
 8009510:	2100      	movs	r1, #0
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f7ff ff30 	bl	8009378 <dwc2_phy_update>
}
 8009518:	bf00      	nop
 800951a:	3710      	adds	r7, #16
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <phy_hs_init>:

static void phy_hs_init(dwc2_regs_t* dwc2) {
 8009520:	b580      	push	{r7, lr}
 8009522:	b086      	sub	sp, #24
 8009524:	af00      	add	r7, sp, #0
 8009526:	6078      	str	r0, [r7, #4]
  uint32_t gusbcfg = dwc2->gusbcfg;
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	68db      	ldr	r3, [r3, #12]
 800952c:	617b      	str	r3, [r7, #20]
  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009532:	613b      	str	r3, [r7, #16]
  const dwc2_ghwcfg4_t ghwcfg4 = {.value = dwc2->ghwcfg4};
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009538:	60fb      	str	r3, [r7, #12]

  // De-select FS PHY
  gusbcfg &= ~GUSBCFG_PHYSEL;
 800953a:	697b      	ldr	r3, [r7, #20]
 800953c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009540:	617b      	str	r3, [r7, #20]

  if (ghwcfg2.hs_phy_type == GHWCFG2_HSPHY_ULPI) {
 8009542:	7c3b      	ldrb	r3, [r7, #16]
 8009544:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009548:	b2db      	uxtb	r3, r3
 800954a:	2b80      	cmp	r3, #128	@ 0x80
 800954c:	d114      	bne.n	8009578 <phy_hs_init+0x58>
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed ULPI PHY init\r\n");

    // Select ULPI PHY (external)
    gusbcfg |= GUSBCFG_ULPI_UTMI_SEL;
 800954e:	697b      	ldr	r3, [r7, #20]
 8009550:	f043 0310 	orr.w	r3, r3, #16
 8009554:	617b      	str	r3, [r7, #20]

    // ULPI is always 8-bit interface
    gusbcfg &= ~GUSBCFG_PHYIF16;
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	f023 0308 	bic.w	r3, r3, #8
 800955c:	617b      	str	r3, [r7, #20]

    // ULPI select single data rate
    gusbcfg &= ~GUSBCFG_DDRSEL;
 800955e:	697b      	ldr	r3, [r7, #20]
 8009560:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009564:	617b      	str	r3, [r7, #20]

    // default internal VBUS Indicator and Drive
    gusbcfg &= ~(GUSBCFG_ULPIEVBUSD | GUSBCFG_ULPIEVBUSI);
 8009566:	697b      	ldr	r3, [r7, #20]
 8009568:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800956c:	617b      	str	r3, [r7, #20]

    // Disable FS/LS ULPI
    gusbcfg &= ~(GUSBCFG_ULPIFSLS | GUSBCFG_ULPICSM);
 800956e:	697b      	ldr	r3, [r7, #20]
 8009570:	f423 2320 	bic.w	r3, r3, #655360	@ 0xa0000
 8009574:	617b      	str	r3, [r7, #20]
 8009576:	e012      	b.n	800959e <phy_hs_init+0x7e>
  } else {
    TU_LOG(DWC2_COMMON_DEBUG, "Highspeed UTMI+ PHY init\r\n");

    // Select UTMI+ PHY (internal)
    gusbcfg &= ~GUSBCFG_ULPI_UTMI_SEL;
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	f023 0310 	bic.w	r3, r3, #16
 800957e:	617b      	str	r3, [r7, #20]

    // Set 16-bit interface if supported
    if (ghwcfg4.phy_data_width) {
 8009580:	7b7b      	ldrb	r3, [r7, #13]
 8009582:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009586:	b2db      	uxtb	r3, r3
 8009588:	2b00      	cmp	r3, #0
 800958a:	d004      	beq.n	8009596 <phy_hs_init+0x76>
      gusbcfg |= GUSBCFG_PHYIF16; // 16 bit
 800958c:	697b      	ldr	r3, [r7, #20]
 800958e:	f043 0308 	orr.w	r3, r3, #8
 8009592:	617b      	str	r3, [r7, #20]
 8009594:	e003      	b.n	800959e <phy_hs_init+0x7e>
    } else {
      gusbcfg &= ~GUSBCFG_PHYIF16; // 8 bit
 8009596:	697b      	ldr	r3, [r7, #20]
 8009598:	f023 0308 	bic.w	r3, r3, #8
 800959c:	617b      	str	r3, [r7, #20]
    }
  }

  // Apply config
  dwc2->gusbcfg = gusbcfg;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	697a      	ldr	r2, [r7, #20]
 80095a2:	60da      	str	r2, [r3, #12]

  // mcu specific phy init
  dwc2_phy_init(dwc2, ghwcfg2.hs_phy_type);
 80095a4:	7c3b      	ldrb	r3, [r7, #16]
 80095a6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	4619      	mov	r1, r3
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f7ff fec6 	bl	8009340 <dwc2_phy_init>

  // Reset core after selecting PHY
  reset_core(dwc2);
 80095b4:	6878      	ldr	r0, [r7, #4]
 80095b6:	f7ff ff55 	bl	8009464 <reset_core>

  // Set turn-around, must after core reset otherwise it will be clear
  // - 9 if using 8-bit PHY interface
  // - 5 if using 16-bit PHY interface
  gusbcfg &= ~GUSBCFG_TRDT_Msk;
 80095ba:	697b      	ldr	r3, [r7, #20]
 80095bc:	f423 5370 	bic.w	r3, r3, #15360	@ 0x3c00
 80095c0:	617b      	str	r3, [r7, #20]
  gusbcfg |= (ghwcfg4.phy_data_width ? 5u : 9u) << GUSBCFG_TRDT_Pos;
 80095c2:	7b7b      	ldrb	r3, [r7, #13]
 80095c4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d002      	beq.n	80095d4 <phy_hs_init+0xb4>
 80095ce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80095d2:	e001      	b.n	80095d8 <phy_hs_init+0xb8>
 80095d4:	f44f 5310 	mov.w	r3, #9216	@ 0x2400
 80095d8:	697a      	ldr	r2, [r7, #20]
 80095da:	4313      	orrs	r3, r2
 80095dc:	617b      	str	r3, [r7, #20]
  dwc2->gusbcfg = gusbcfg;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	697a      	ldr	r2, [r7, #20]
 80095e2:	60da      	str	r2, [r3, #12]

  // MCU specific PHY update post reset
  dwc2_phy_update(dwc2, ghwcfg2.hs_phy_type);
 80095e4:	7c3b      	ldrb	r3, [r7, #16]
 80095e6:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80095ea:	b2db      	uxtb	r3, r3
 80095ec:	4619      	mov	r1, r3
 80095ee:	6878      	ldr	r0, [r7, #4]
 80095f0:	f7ff fec2 	bl	8009378 <dwc2_phy_update>
}
 80095f4:	bf00      	nop
 80095f6:	3718      	adds	r7, #24
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}

080095fc <check_dwc2>:

static bool check_dwc2(dwc2_regs_t* dwc2) {
 80095fc:	b480      	push	{r7}
 80095fe:	b085      	sub	sp, #20
 8009600:	af00      	add	r7, sp, #0
 8009602:	6078      	str	r0, [r7, #4]

  // For some reason: GD32VF103 gsnpsid and all hwcfg register are always zero (skip it)
  (void)dwc2;
#if !TU_CHECK_MCU(OPT_MCU_GD32VF103)
  enum { GSNPSID_ID_MASK = TU_GENMASK(31, 16) };
  const uint32_t gsnpsid = dwc2->gsnpsid & GSNPSID_ID_MASK;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009608:	0c1b      	lsrs	r3, r3, #16
 800960a:	041b      	lsls	r3, r3, #16
 800960c:	60fb      	str	r3, [r7, #12]
  TU_ASSERT(gsnpsid == DWC2_OTG_ID || gsnpsid == DWC2_FS_IOT_ID || gsnpsid == DWC2_HS_IOT_ID);
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	4a0e      	ldr	r2, [pc, #56]	@ (800964c <check_dwc2+0x50>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d012      	beq.n	800963c <check_dwc2+0x40>
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	4a0d      	ldr	r2, [pc, #52]	@ (8009650 <check_dwc2+0x54>)
 800961a:	4293      	cmp	r3, r2
 800961c:	d00e      	beq.n	800963c <check_dwc2+0x40>
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	4a0c      	ldr	r2, [pc, #48]	@ (8009654 <check_dwc2+0x58>)
 8009622:	4293      	cmp	r3, r2
 8009624:	d00a      	beq.n	800963c <check_dwc2+0x40>
 8009626:	4b0c      	ldr	r3, [pc, #48]	@ (8009658 <check_dwc2+0x5c>)
 8009628:	60bb      	str	r3, [r7, #8]
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f003 0301 	and.w	r3, r3, #1
 8009632:	2b00      	cmp	r3, #0
 8009634:	d000      	beq.n	8009638 <check_dwc2+0x3c>
 8009636:	be00      	bkpt	0x0000
 8009638:	2300      	movs	r3, #0
 800963a:	e000      	b.n	800963e <check_dwc2+0x42>
#endif

  return true;
 800963c:	2301      	movs	r3, #1
}
 800963e:	4618      	mov	r0, r3
 8009640:	3714      	adds	r7, #20
 8009642:	46bd      	mov	sp, r7
 8009644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009648:	4770      	bx	lr
 800964a:	bf00      	nop
 800964c:	4f540000 	.word	0x4f540000
 8009650:	55310000 	.word	0x55310000
 8009654:	55320000 	.word	0x55320000
 8009658:	e000edf0 	.word	0xe000edf0

0800965c <dwc2_core_is_highspeed>:

//--------------------------------------------------------------------
//
//--------------------------------------------------------------------
bool dwc2_core_is_highspeed(dwc2_regs_t* dwc2, tusb_role_t role) {
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
 8009664:	460b      	mov	r3, r1
 8009666:	70fb      	strb	r3, [r7, #3]
  (void)dwc2;
#if CFG_TUD_ENABLED
  if (role == TUSB_ROLE_DEVICE && !TUD_OPT_HIGH_SPEED) {
 8009668:	78fb      	ldrb	r3, [r7, #3]
 800966a:	2b01      	cmp	r3, #1
 800966c:	d101      	bne.n	8009672 <dwc2_core_is_highspeed+0x16>
    return false;
 800966e:	2300      	movs	r3, #0
 8009670:	e00b      	b.n	800968a <dwc2_core_is_highspeed+0x2e>
  if (role == TUSB_ROLE_HOST && !TUH_OPT_HIGH_SPEED) {
    return false;
  }
#endif

  const dwc2_ghwcfg2_t ghwcfg2 = {.value = dwc2->ghwcfg2};
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009676:	60fb      	str	r3, [r7, #12]
  return ghwcfg2.hs_phy_type != GHWCFG2_HSPHY_NOT_SUPPORTED;
 8009678:	7b3b      	ldrb	r3, [r7, #12]
 800967a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800967e:	b2db      	uxtb	r3, r3
 8009680:	2b00      	cmp	r3, #0
 8009682:	bf14      	ite	ne
 8009684:	2301      	movne	r3, #1
 8009686:	2300      	moveq	r3, #0
 8009688:	b2db      	uxtb	r3, r3
}
 800968a:	4618      	mov	r0, r3
 800968c:	3714      	adds	r7, #20
 800968e:	46bd      	mov	sp, r7
 8009690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009694:	4770      	bx	lr
	...

08009698 <dwc2_core_init>:
 * - Dedicated FS PHY is internal with clock 48Mhz.
 *
 * In addition, UTMI+/ULPI can be shared to run at fullspeed mode with 48Mhz
 *
*/
bool dwc2_core_init(uint8_t rhport, bool is_highspeed, bool is_dma) {
 8009698:	b580      	push	{r7, lr}
 800969a:	b088      	sub	sp, #32
 800969c:	af00      	add	r7, sp, #0
 800969e:	4603      	mov	r3, r0
 80096a0:	71fb      	strb	r3, [r7, #7]
 80096a2:	460b      	mov	r3, r1
 80096a4:	71bb      	strb	r3, [r7, #6]
 80096a6:	4613      	mov	r3, r2
 80096a8:	717b      	strb	r3, [r7, #5]
 80096aa:	79fb      	ldrb	r3, [r7, #7]
 80096ac:	75fb      	strb	r3, [r7, #23]
  if (rhport >= DWC2_CONTROLLER_COUNT) {
 80096ae:	7dfb      	ldrb	r3, [r7, #23]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d001      	beq.n	80096b8 <dwc2_core_init+0x20>
    rhport = 0;
 80096b4:	2300      	movs	r3, #0
 80096b6:	75fb      	strb	r3, [r7, #23]
  return (dwc2_regs_t*)_dwc2_controller[rhport].reg_base;
 80096b8:	7dfb      	ldrb	r3, [r7, #23]
 80096ba:	4a3b      	ldr	r2, [pc, #236]	@ (80097a8 <dwc2_core_init+0x110>)
 80096bc:	011b      	lsls	r3, r3, #4
 80096be:	4413      	add	r3, r2
 80096c0:	681b      	ldr	r3, [r3, #0]
  dwc2_regs_t* dwc2 = DWC2_REG(rhport);
 80096c2:	61fb      	str	r3, [r7, #28]

  // Check Synopsys ID register, failed if controller clock/power is not enabled
  TU_ASSERT(check_dwc2(dwc2));
 80096c4:	69f8      	ldr	r0, [r7, #28]
 80096c6:	f7ff ff99 	bl	80095fc <check_dwc2>
 80096ca:	4603      	mov	r3, r0
 80096cc:	f083 0301 	eor.w	r3, r3, #1
 80096d0:	b2db      	uxtb	r3, r3
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00a      	beq.n	80096ec <dwc2_core_init+0x54>
 80096d6:	4b35      	ldr	r3, [pc, #212]	@ (80097ac <dwc2_core_init+0x114>)
 80096d8:	61bb      	str	r3, [r7, #24]
 80096da:	69bb      	ldr	r3, [r7, #24]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	f003 0301 	and.w	r3, r3, #1
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d000      	beq.n	80096e8 <dwc2_core_init+0x50>
 80096e6:	be00      	bkpt	0x0000
 80096e8:	2300      	movs	r3, #0
 80096ea:	e058      	b.n	800979e <dwc2_core_init+0x106>

  // disable global interrupt
  dwc2->gahbcfg &= ~GAHBCFG_GINT;
 80096ec:	69fb      	ldr	r3, [r7, #28]
 80096ee:	689b      	ldr	r3, [r3, #8]
 80096f0:	f023 0201 	bic.w	r2, r3, #1
 80096f4:	69fb      	ldr	r3, [r7, #28]
 80096f6:	609a      	str	r2, [r3, #8]

  if (is_highspeed) {
 80096f8:	79bb      	ldrb	r3, [r7, #6]
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d003      	beq.n	8009706 <dwc2_core_init+0x6e>
    phy_hs_init(dwc2);
 80096fe:	69f8      	ldr	r0, [r7, #28]
 8009700:	f7ff ff0e 	bl	8009520 <phy_hs_init>
 8009704:	e002      	b.n	800970c <dwc2_core_init+0x74>
  } else {
    phy_fs_init(dwc2);
 8009706:	69f8      	ldr	r0, [r7, #28]
 8009708:	f7ff fee2 	bl	80094d0 <phy_fs_init>
   * this field is added to the high/full speed interpacket timeout
   * duration in the core to account for any additional delays
   * introduced by the PHY. This can be required, because the delay
   * introduced by the PHY in generating the linestate condition
   * can vary from one PHY to another. */
  dwc2->gusbcfg |= (7ul << GUSBCFG_TOCAL_Pos);
 800970c:	69fb      	ldr	r3, [r7, #28]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	f043 0207 	orr.w	r2, r3, #7
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	60da      	str	r2, [r3, #12]

  // Enable PHY clock TODO stop/gate clock when suspended mode
  dwc2->pcgcctl &= ~(PCGCCTL_STOPPCLK | PCGCCTL_GATEHCLK | PCGCCTL_PWRCLMP | PCGCCTL_RSTPDWNMODULE);
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800971e:	f023 020f 	bic.w	r2, r3, #15
 8009722:	69fb      	ldr	r3, [r7, #28]
 8009724:	f8c3 2e00 	str.w	r2, [r3, #3584]	@ 0xe00
 8009728:	69fb      	ldr	r3, [r7, #28]
 800972a:	60fb      	str	r3, [r7, #12]
 800972c:	2310      	movs	r3, #16
 800972e:	72fb      	strb	r3, [r7, #11]
  dwc2->grstctl = GRSTCTL_TXFFLSH | (fnum << GRSTCTL_TXFNUM_Pos);
 8009730:	7afb      	ldrb	r3, [r7, #11]
 8009732:	019b      	lsls	r3, r3, #6
 8009734:	f043 0220 	orr.w	r2, r3, #32
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_TXFFLSH_Msk) {}
 800973c:	bf00      	nop
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	f003 0320 	and.w	r3, r3, #32
 8009746:	2b00      	cmp	r3, #0
 8009748:	d1f9      	bne.n	800973e <dwc2_core_init+0xa6>
}
 800974a:	bf00      	nop
 800974c:	69fb      	ldr	r3, [r7, #28]
 800974e:	613b      	str	r3, [r7, #16]
  dwc2->grstctl = GRSTCTL_RXFFLSH;
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	2210      	movs	r2, #16
 8009754:	611a      	str	r2, [r3, #16]
  while (dwc2->grstctl & GRSTCTL_RXFFLSH_Msk) {}
 8009756:	bf00      	nop
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	691b      	ldr	r3, [r3, #16]
 800975c:	f003 0310 	and.w	r3, r3, #16
 8009760:	2b00      	cmp	r3, #0
 8009762:	d1f9      	bne.n	8009758 <dwc2_core_init+0xc0>
}
 8009764:	bf00      	nop

  dfifo_flush_tx(dwc2, 0x10); // all tx fifo
  dfifo_flush_rx(dwc2);

  // Clear pending and disable all interrupts
  dwc2->gintsts = 0xFFFFFFFFU;
 8009766:	69fb      	ldr	r3, [r7, #28]
 8009768:	f04f 32ff 	mov.w	r2, #4294967295
 800976c:	615a      	str	r2, [r3, #20]
  dwc2->gotgint = 0xFFFFFFFFU;
 800976e:	69fb      	ldr	r3, [r7, #28]
 8009770:	f04f 32ff 	mov.w	r2, #4294967295
 8009774:	605a      	str	r2, [r3, #4]
  dwc2->gintmsk = 0;
 8009776:	69fb      	ldr	r3, [r7, #28]
 8009778:	2200      	movs	r2, #0
 800977a:	619a      	str	r2, [r3, #24]

  TU_LOG(DWC2_COMMON_DEBUG, "DMA = %u\r\n", is_dma);

  if (is_dma) {
 800977c:	797b      	ldrb	r3, [r7, #5]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d006      	beq.n	8009790 <dwc2_core_init+0xf8>
    // DMA seems to be only settable after a core reset, and not possible to switch on-the-fly
    dwc2->gahbcfg |= GAHBCFG_DMAEN | GAHBCFG_HBSTLEN_2;
 8009782:	69fb      	ldr	r3, [r7, #28]
 8009784:	689b      	ldr	r3, [r3, #8]
 8009786:	f043 0226 	orr.w	r2, r3, #38	@ 0x26
 800978a:	69fb      	ldr	r3, [r7, #28]
 800978c:	609a      	str	r2, [r3, #8]
 800978e:	e005      	b.n	800979c <dwc2_core_init+0x104>
  } else {
    dwc2->gintmsk |= GINTSTS_RXFLVL;
 8009790:	69fb      	ldr	r3, [r7, #28]
 8009792:	699b      	ldr	r3, [r3, #24]
 8009794:	f043 0210 	orr.w	r2, r3, #16
 8009798:	69fb      	ldr	r3, [r7, #28]
 800979a:	619a      	str	r2, [r3, #24]
  }

  return true;
 800979c:	2301      	movs	r3, #1
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3720      	adds	r7, #32
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}
 80097a6:	bf00      	nop
 80097a8:	0800a7b4 	.word	0x0800a7b4
 80097ac:	e000edf0 	.word	0xe000edf0

080097b0 <dfifo_read_packet>:

//--------------------------------------------------------------------
// DFIFO
//--------------------------------------------------------------------
// Read a single data packet from receive DFIFO
void dfifo_read_packet(dwc2_regs_t* dwc2, uint8_t* dst, uint16_t len) {
 80097b0:	b480      	push	{r7}
 80097b2:	b08f      	sub	sp, #60	@ 0x3c
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	4613      	mov	r3, r2
 80097bc:	80fb      	strh	r3, [r7, #6]
  const volatile uint32_t* rx_fifo = dwc2->fifo[0];
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80097c4:	633b      	str	r3, [r7, #48]	@ 0x30

  // Reading full available 32 bit words from fifo
  uint16_t word_count = len >> 2;
 80097c6:	88fb      	ldrh	r3, [r7, #6]
 80097c8:	089b      	lsrs	r3, r3, #2
 80097ca:	86fb      	strh	r3, [r7, #54]	@ 0x36
  while (word_count--) {
 80097cc:	e00b      	b.n	80097e6 <dfifo_read_packet+0x36>
    tu_unaligned_write32(dst, *rx_fifo);
 80097ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68ba      	ldr	r2, [r7, #8]
 80097d4:	627a      	str	r2, [r7, #36]	@ 0x24
 80097d6:	623b      	str	r3, [r7, #32]
  *((uint32_t *) mem) = value;
 80097d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097da:	6a3a      	ldr	r2, [r7, #32]
 80097dc:	601a      	str	r2, [r3, #0]
}
 80097de:	bf00      	nop
    dst += 4;
 80097e0:	68bb      	ldr	r3, [r7, #8]
 80097e2:	3304      	adds	r3, #4
 80097e4:	60bb      	str	r3, [r7, #8]
  while (word_count--) {
 80097e6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80097e8:	1e5a      	subs	r2, r3, #1
 80097ea:	86fa      	strh	r2, [r7, #54]	@ 0x36
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d1ee      	bne.n	80097ce <dfifo_read_packet+0x1e>
  }

  // Read the remaining 1-3 bytes from fifo
  const uint8_t bytes_rem = len & 0x03;
 80097f0:	88fb      	ldrh	r3, [r7, #6]
 80097f2:	b2db      	uxtb	r3, r3
 80097f4:	f003 0303 	and.w	r3, r3, #3
 80097f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (bytes_rem != 0) {
 80097fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009800:	2b00      	cmp	r3, #0
 8009802:	d020      	beq.n	8009846 <dfifo_read_packet+0x96>
    const uint32_t tmp = *rx_fifo;
 8009804:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	62bb      	str	r3, [r7, #40]	@ 0x28
 800980a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800980c:	61fb      	str	r3, [r7, #28]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte0(uint32_t ui32) { return TU_U32_BYTE0(ui32); }
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	b2da      	uxtb	r2, r3
    dst[0] = tu_u32_byte0(tmp);
 8009812:	68bb      	ldr	r3, [r7, #8]
 8009814:	701a      	strb	r2, [r3, #0]
    if (bytes_rem > 1) {
 8009816:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800981a:	2b01      	cmp	r3, #1
 800981c:	d907      	bls.n	800982e <dfifo_read_packet+0x7e>
      dst[1] = tu_u32_byte1(tmp);
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	3301      	adds	r3, #1
 8009822:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009824:	61ba      	str	r2, [r7, #24]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte1(uint32_t ui32) { return TU_U32_BYTE1(ui32); }
 8009826:	69ba      	ldr	r2, [r7, #24]
 8009828:	0a12      	lsrs	r2, r2, #8
 800982a:	b2d2      	uxtb	r2, r2
 800982c:	701a      	strb	r2, [r3, #0]
    }
    if (bytes_rem > 2) {
 800982e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8009832:	2b02      	cmp	r3, #2
 8009834:	d907      	bls.n	8009846 <dfifo_read_packet+0x96>
      dst[2] = tu_u32_byte2(tmp);
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	3302      	adds	r3, #2
 800983a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800983c:	617a      	str	r2, [r7, #20]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_u32_byte2(uint32_t ui32) { return TU_U32_BYTE2(ui32); }
 800983e:	697a      	ldr	r2, [r7, #20]
 8009840:	0c12      	lsrs	r2, r2, #16
 8009842:	b2d2      	uxtb	r2, r2
 8009844:	701a      	strb	r2, [r3, #0]
    }
  }
}
 8009846:	bf00      	nop
 8009848:	373c      	adds	r7, #60	@ 0x3c
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr

08009852 <dfifo_write_packet>:

// Write a single data packet to DFIFO
void dfifo_write_packet(dwc2_regs_t* dwc2, uint8_t fifo_num, const uint8_t* src, uint16_t len) {
 8009852:	b480      	push	{r7}
 8009854:	b08b      	sub	sp, #44	@ 0x2c
 8009856:	af00      	add	r7, sp, #0
 8009858:	60f8      	str	r0, [r7, #12]
 800985a:	607a      	str	r2, [r7, #4]
 800985c:	461a      	mov	r2, r3
 800985e:	460b      	mov	r3, r1
 8009860:	72fb      	strb	r3, [r7, #11]
 8009862:	4613      	mov	r3, r2
 8009864:	813b      	strh	r3, [r7, #8]
  volatile uint32_t* tx_fifo = dwc2->fifo[fifo_num];
 8009866:	7afb      	ldrb	r3, [r7, #11]
 8009868:	3301      	adds	r3, #1
 800986a:	031b      	lsls	r3, r3, #12
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	4413      	add	r3, r2
 8009870:	61fb      	str	r3, [r7, #28]

  // Pushing full available 32 bit words to fifo
  uint16_t word_count = len >> 2;
 8009872:	893b      	ldrh	r3, [r7, #8]
 8009874:	089b      	lsrs	r3, r3, #2
 8009876:	84fb      	strh	r3, [r7, #38]	@ 0x26
  while (word_count--) {
 8009878:	e008      	b.n	800988c <dfifo_write_packet+0x3a>
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	617b      	str	r3, [r7, #20]
  return *((uint32_t const *) mem);
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	681a      	ldr	r2, [r3, #0]
    *tx_fifo = tu_unaligned_read32(src);
 8009882:	69fb      	ldr	r3, [r7, #28]
 8009884:	601a      	str	r2, [r3, #0]
    src += 4;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	3304      	adds	r3, #4
 800988a:	607b      	str	r3, [r7, #4]
  while (word_count--) {
 800988c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800988e:	1e5a      	subs	r2, r3, #1
 8009890:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1f1      	bne.n	800987a <dfifo_write_packet+0x28>
  }

  // Write the remaining 1-3 bytes into fifo
  const uint8_t bytes_rem = len & 0x03;
 8009896:	893b      	ldrh	r3, [r7, #8]
 8009898:	b2db      	uxtb	r3, r3
 800989a:	f003 0303 	and.w	r3, r3, #3
 800989e:	76fb      	strb	r3, [r7, #27]
  if (bytes_rem) {
 80098a0:	7efb      	ldrb	r3, [r7, #27]
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d019      	beq.n	80098da <dfifo_write_packet+0x88>
    uint32_t tmp_word = src[0];
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	623b      	str	r3, [r7, #32]
    if (bytes_rem > 1) {
 80098ac:	7efb      	ldrb	r3, [r7, #27]
 80098ae:	2b01      	cmp	r3, #1
 80098b0:	d906      	bls.n	80098c0 <dfifo_write_packet+0x6e>
      tmp_word |= (src[1] << 8);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	3301      	adds	r3, #1
 80098b6:	781b      	ldrb	r3, [r3, #0]
 80098b8:	021b      	lsls	r3, r3, #8
 80098ba:	6a3a      	ldr	r2, [r7, #32]
 80098bc:	4313      	orrs	r3, r2
 80098be:	623b      	str	r3, [r7, #32]
    }
    if (bytes_rem > 2) {
 80098c0:	7efb      	ldrb	r3, [r7, #27]
 80098c2:	2b02      	cmp	r3, #2
 80098c4:	d906      	bls.n	80098d4 <dfifo_write_packet+0x82>
      tmp_word |= (src[2] << 16);
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	3302      	adds	r3, #2
 80098ca:	781b      	ldrb	r3, [r3, #0]
 80098cc:	041b      	lsls	r3, r3, #16
 80098ce:	6a3a      	ldr	r2, [r7, #32]
 80098d0:	4313      	orrs	r3, r2
 80098d2:	623b      	str	r3, [r7, #32]
    }

    *tx_fifo = tmp_word;
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	6a3a      	ldr	r2, [r7, #32]
 80098d8:	601a      	str	r2, [r3, #0]
  }
}
 80098da:	bf00      	nop
 80098dc:	372c      	adds	r7, #44	@ 0x2c
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
	...

080098e8 <tusb_rhport_init>:
}

//--------------------------------------------------------------------+
// Public API
//--------------------------------------------------------------------+
bool tusb_rhport_init(uint8_t rhport, const tusb_rhport_init_t* rh_init) {
 80098e8:	b580      	push	{r7, lr}
 80098ea:	b086      	sub	sp, #24
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	4603      	mov	r3, r0
 80098f0:	6039      	str	r1, [r7, #0]
 80098f2:	71fb      	strb	r3, [r7, #7]
  //  backward compatible called with tusb_init(void)
  #if defined(TUD_OPT_RHPORT) || defined(TUH_OPT_RHPORT)
  if (rh_init == NULL) {
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d11f      	bne.n	800993a <tusb_rhport_init+0x52>
    #if CFG_TUD_ENABLED && defined(TUD_OPT_RHPORT)
    // init device stack CFG_TUSB_RHPORTx_MODE must be defined
    const tusb_rhport_init_t dev_init = {
 80098fa:	2301      	movs	r3, #1
 80098fc:	723b      	strb	r3, [r7, #8]
 80098fe:	2300      	movs	r3, #0
 8009900:	727b      	strb	r3, [r7, #9]
      .role = TUSB_ROLE_DEVICE,
      .speed = TUD_OPT_HIGH_SPEED ? TUSB_SPEED_HIGH : TUSB_SPEED_FULL
    };
    TU_ASSERT ( tud_rhport_init(TUD_OPT_RHPORT, &dev_init) );
 8009902:	f107 0308 	add.w	r3, r7, #8
 8009906:	4619      	mov	r1, r3
 8009908:	2000      	movs	r0, #0
 800990a:	f7fc fa63 	bl	8005dd4 <tud_rhport_init>
 800990e:	4603      	mov	r3, r0
 8009910:	f083 0301 	eor.w	r3, r3, #1
 8009914:	b2db      	uxtb	r3, r3
 8009916:	2b00      	cmp	r3, #0
 8009918:	d00a      	beq.n	8009930 <tusb_rhport_init+0x48>
 800991a:	4b23      	ldr	r3, [pc, #140]	@ (80099a8 <tusb_rhport_init+0xc0>)
 800991c:	60fb      	str	r3, [r7, #12]
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f003 0301 	and.w	r3, r3, #1
 8009926:	2b00      	cmp	r3, #0
 8009928:	d000      	beq.n	800992c <tusb_rhport_init+0x44>
 800992a:	be00      	bkpt	0x0000
 800992c:	2300      	movs	r3, #0
 800992e:	e036      	b.n	800999e <tusb_rhport_init+0xb6>
    _tusb_rhport_role[TUD_OPT_RHPORT] = TUSB_ROLE_DEVICE;
 8009930:	4b1e      	ldr	r3, [pc, #120]	@ (80099ac <tusb_rhport_init+0xc4>)
 8009932:	2201      	movs	r2, #1
 8009934:	701a      	strb	r2, [r3, #0]
    };
    TU_ASSERT( tuh_rhport_init(TUH_OPT_RHPORT, &host_init) );
    _tusb_rhport_role[TUH_OPT_RHPORT] = TUSB_ROLE_HOST;
    #endif

    return true;
 8009936:	2301      	movs	r3, #1
 8009938:	e031      	b.n	800999e <tusb_rhport_init+0xb6>
  }
  #endif

  // new API with explicit rhport and role
  TU_ASSERT(rhport < TUP_USBIP_CONTROLLER_NUM && rh_init->role != TUSB_ROLE_INVALID);
 800993a:	79fb      	ldrb	r3, [r7, #7]
 800993c:	2b01      	cmp	r3, #1
 800993e:	d803      	bhi.n	8009948 <tusb_rhport_init+0x60>
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10a      	bne.n	800995e <tusb_rhport_init+0x76>
 8009948:	4b17      	ldr	r3, [pc, #92]	@ (80099a8 <tusb_rhport_init+0xc0>)
 800994a:	613b      	str	r3, [r7, #16]
 800994c:	693b      	ldr	r3, [r7, #16]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	f003 0301 	and.w	r3, r3, #1
 8009954:	2b00      	cmp	r3, #0
 8009956:	d000      	beq.n	800995a <tusb_rhport_init+0x72>
 8009958:	be00      	bkpt	0x0000
 800995a:	2300      	movs	r3, #0
 800995c:	e01f      	b.n	800999e <tusb_rhport_init+0xb6>
  _tusb_rhport_role[rhport] = rh_init->role;
 800995e:	79fb      	ldrb	r3, [r7, #7]
 8009960:	683a      	ldr	r2, [r7, #0]
 8009962:	7811      	ldrb	r1, [r2, #0]
 8009964:	4a11      	ldr	r2, [pc, #68]	@ (80099ac <tusb_rhport_init+0xc4>)
 8009966:	54d1      	strb	r1, [r2, r3]

  #if CFG_TUD_ENABLED
  if (rh_init->role == TUSB_ROLE_DEVICE) {
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	781b      	ldrb	r3, [r3, #0]
 800996c:	2b01      	cmp	r3, #1
 800996e:	d115      	bne.n	800999c <tusb_rhport_init+0xb4>
    TU_ASSERT(tud_rhport_init(rhport, rh_init));
 8009970:	79fb      	ldrb	r3, [r7, #7]
 8009972:	6839      	ldr	r1, [r7, #0]
 8009974:	4618      	mov	r0, r3
 8009976:	f7fc fa2d 	bl	8005dd4 <tud_rhport_init>
 800997a:	4603      	mov	r3, r0
 800997c:	f083 0301 	eor.w	r3, r3, #1
 8009980:	b2db      	uxtb	r3, r3
 8009982:	2b00      	cmp	r3, #0
 8009984:	d00a      	beq.n	800999c <tusb_rhport_init+0xb4>
 8009986:	4b08      	ldr	r3, [pc, #32]	@ (80099a8 <tusb_rhport_init+0xc0>)
 8009988:	617b      	str	r3, [r7, #20]
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f003 0301 	and.w	r3, r3, #1
 8009992:	2b00      	cmp	r3, #0
 8009994:	d000      	beq.n	8009998 <tusb_rhport_init+0xb0>
 8009996:	be00      	bkpt	0x0000
 8009998:	2300      	movs	r3, #0
 800999a:	e000      	b.n	800999e <tusb_rhport_init+0xb6>
  if (rh_init->role == TUSB_ROLE_HOST) {
    TU_ASSERT(tuh_rhport_init(rhport, rh_init));
  }
  #endif

  return true;
 800999c:	2301      	movs	r3, #1
}
 800999e:	4618      	mov	r0, r3
 80099a0:	3718      	adds	r7, #24
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	e000edf0 	.word	0xe000edf0
 80099ac:	20000c9c 	.word	0x20000c9c

080099b0 <tu_edpt_claim>:

//--------------------------------------------------------------------+
// Endpoint Helper for both Host and Device stack
//--------------------------------------------------------------------+

bool tu_edpt_claim(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  (void) mutex;

  // pre-check to help reducing mutex lock
  TU_VERIFY((ep_state->busy == 0) && (ep_state->claimed == 0));
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	781b      	ldrb	r3, [r3, #0]
 80099be:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80099c2:	b2db      	uxtb	r3, r3
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d106      	bne.n	80099d6 <tu_edpt_claim+0x26>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80099d0:	b2db      	uxtb	r3, r3
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d001      	beq.n	80099da <tu_edpt_claim+0x2a>
 80099d6:	2300      	movs	r3, #0
 80099d8:	e01e      	b.n	8009a18 <tu_edpt_claim+0x68>
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only claim the endpoint if it is not busy and not claimed yet.
  bool const available = (ep_state->busy == 0) && (ep_state->claimed == 0);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80099e2:	b2db      	uxtb	r3, r3
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d108      	bne.n	80099fa <tu_edpt_claim+0x4a>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	781b      	ldrb	r3, [r3, #0]
 80099ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80099f0:	b2db      	uxtb	r3, r3
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d101      	bne.n	80099fa <tu_edpt_claim+0x4a>
 80099f6:	2301      	movs	r3, #1
 80099f8:	e000      	b.n	80099fc <tu_edpt_claim+0x4c>
 80099fa:	2300      	movs	r3, #0
 80099fc:	73fb      	strb	r3, [r7, #15]
 80099fe:	7bfb      	ldrb	r3, [r7, #15]
 8009a00:	f003 0301 	and.w	r3, r3, #1
 8009a04:	73fb      	strb	r3, [r7, #15]
  if (available) {
 8009a06:	7bfb      	ldrb	r3, [r7, #15]
 8009a08:	2b00      	cmp	r3, #0
 8009a0a:	d004      	beq.n	8009a16 <tu_edpt_claim+0x66>
    ep_state->claimed = 1;
 8009a0c:	687a      	ldr	r2, [r7, #4]
 8009a0e:	7813      	ldrb	r3, [r2, #0]
 8009a10:	f043 0304 	orr.w	r3, r3, #4
 8009a14:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return available;
 8009a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3714      	adds	r7, #20
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a22:	4770      	bx	lr

08009a24 <tu_edpt_release>:

bool tu_edpt_release(tu_edpt_state_t* ep_state, osal_mutex_t mutex) {
 8009a24:	b480      	push	{r7}
 8009a26:	b085      	sub	sp, #20
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  (void) mutex;
  (void) osal_mutex_lock(mutex, OSAL_TIMEOUT_WAIT_FOREVER);

  // can only release the endpoint if it is claimed and not busy
  bool const ret = (ep_state->claimed == 1) && (ep_state->busy == 0);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	781b      	ldrb	r3, [r3, #0]
 8009a32:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	2b01      	cmp	r3, #1
 8009a3a:	d108      	bne.n	8009a4e <tu_edpt_release+0x2a>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	781b      	ldrb	r3, [r3, #0]
 8009a40:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d101      	bne.n	8009a4e <tu_edpt_release+0x2a>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e000      	b.n	8009a50 <tu_edpt_release+0x2c>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	73fb      	strb	r3, [r7, #15]
 8009a52:	7bfb      	ldrb	r3, [r7, #15]
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	73fb      	strb	r3, [r7, #15]
  if (ret) {
 8009a5a:	7bfb      	ldrb	r3, [r7, #15]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d004      	beq.n	8009a6a <tu_edpt_release+0x46>
    ep_state->claimed = 0;
 8009a60:	687a      	ldr	r2, [r7, #4]
 8009a62:	7813      	ldrb	r3, [r2, #0]
 8009a64:	f023 0304 	bic.w	r3, r3, #4
 8009a68:	7013      	strb	r3, [r2, #0]
  }

  (void) osal_mutex_unlock(mutex);
  return ret;
 8009a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a6c:	4618      	mov	r0, r3
 8009a6e:	3714      	adds	r7, #20
 8009a70:	46bd      	mov	sp, r7
 8009a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a76:	4770      	bx	lr

08009a78 <tu_edpt_validate>:

bool tu_edpt_validate(tusb_desc_endpoint_t const* desc_ep, tusb_speed_t speed, bool is_host) {
 8009a78:	b480      	push	{r7}
 8009a7a:	b08b      	sub	sp, #44	@ 0x2c
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	6078      	str	r0, [r7, #4]
 8009a80:	460b      	mov	r3, r1
 8009a82:	70fb      	strb	r3, [r7, #3]
 8009a84:	4613      	mov	r3, r2
 8009a86:	70bb      	strb	r3, [r7, #2]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	60bb      	str	r3, [r7, #8]
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_edpt_addr(uint8_t num, uint8_t dir) {
  return (uint8_t)(num | (dir ? TUSB_DIR_IN_MASK : 0));
}

TU_ATTR_ALWAYS_INLINE static inline uint16_t tu_edpt_packet_size(tusb_desc_endpoint_t const* desc_ep) {
  return tu_le16toh(desc_ep->wMaxPacketSize) & 0x7FF;
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	889b      	ldrh	r3, [r3, #4]
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8009a96:	b29b      	uxth	r3, r3
  uint16_t const max_packet_size = tu_edpt_packet_size(desc_ep);
 8009a98:	84fb      	strh	r3, [r7, #38]	@ 0x26
  TU_LOG2("  Open EP %02X with Size = %u\r\n", desc_ep->bEndpointAddress, max_packet_size);

  switch (desc_ep->bmAttributes.xfer) {
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	78db      	ldrb	r3, [r3, #3]
 8009a9e:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8009aa2:	b2db      	uxtb	r3, r3
 8009aa4:	2b03      	cmp	r3, #3
 8009aa6:	d059      	beq.n	8009b5c <tu_edpt_validate+0xe4>
 8009aa8:	2b03      	cmp	r3, #3
 8009aaa:	dc6e      	bgt.n	8009b8a <tu_edpt_validate+0x112>
 8009aac:	2b01      	cmp	r3, #1
 8009aae:	d002      	beq.n	8009ab6 <tu_edpt_validate+0x3e>
 8009ab0:	2b02      	cmp	r3, #2
 8009ab2:	d018      	beq.n	8009ae6 <tu_edpt_validate+0x6e>
 8009ab4:	e069      	b.n	8009b8a <tu_edpt_validate+0x112>
    case TUSB_XFER_ISOCHRONOUS: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 1023);
 8009ab6:	78fb      	ldrb	r3, [r7, #3]
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d102      	bne.n	8009ac2 <tu_edpt_validate+0x4a>
 8009abc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009ac0:	e001      	b.n	8009ac6 <tu_edpt_validate+0x4e>
 8009ac2:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8009ac6:	827b      	strh	r3, [r7, #18]
      TU_ASSERT(max_packet_size <= spec_size);
 8009ac8:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009aca:	8a7b      	ldrh	r3, [r7, #18]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d95e      	bls.n	8009b8e <tu_edpt_validate+0x116>
 8009ad0:	4b35      	ldr	r3, [pc, #212]	@ (8009ba8 <tu_edpt_validate+0x130>)
 8009ad2:	60fb      	str	r3, [r7, #12]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f003 0301 	and.w	r3, r3, #1
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d000      	beq.n	8009ae2 <tu_edpt_validate+0x6a>
 8009ae0:	be00      	bkpt	0x0000
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	e059      	b.n	8009b9a <tu_edpt_validate+0x122>
      break;
    }

    case TUSB_XFER_BULK:
      if (speed == TUSB_SPEED_HIGH) {
 8009ae6:	78fb      	ldrb	r3, [r7, #3]
 8009ae8:	2b02      	cmp	r3, #2
 8009aea:	d10e      	bne.n	8009b0a <tu_edpt_validate+0x92>
        // Bulk highspeed must be EXACTLY 512
        TU_ASSERT(max_packet_size == 512);
 8009aec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009aee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009af2:	d04e      	beq.n	8009b92 <tu_edpt_validate+0x11a>
 8009af4:	4b2c      	ldr	r3, [pc, #176]	@ (8009ba8 <tu_edpt_validate+0x130>)
 8009af6:	617b      	str	r3, [r7, #20]
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d000      	beq.n	8009b06 <tu_edpt_validate+0x8e>
 8009b04:	be00      	bkpt	0x0000
 8009b06:	2300      	movs	r3, #0
 8009b08:	e047      	b.n	8009b9a <tu_edpt_validate+0x122>
      } else {
        // Bulk fullspeed can only be 8, 16, 32, 64
        if (is_host && max_packet_size == 512) {
 8009b0a:	78bb      	ldrb	r3, [r7, #2]
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00e      	beq.n	8009b2e <tu_edpt_validate+0xb6>
 8009b10:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009b12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009b16:	d10a      	bne.n	8009b2e <tu_edpt_validate+0xb6>
          // HACK: while in host mode, some device incorrectly always report 512 regardless of link speed
          // overwrite descriptor to force 64
          TU_LOG1("  WARN: EP max packet size is 512 in fullspeed, force to 64\r\n");
          tusb_desc_endpoint_t* hacked_ep = (tusb_desc_endpoint_t*) (uintptr_t) desc_ep;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	61fb      	str	r3, [r7, #28]
          hacked_ep->wMaxPacketSize = tu_htole16(64);
 8009b1c:	69fb      	ldr	r3, [r7, #28]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b24:	711a      	strb	r2, [r3, #4]
 8009b26:	2200      	movs	r2, #0
 8009b28:	715a      	strb	r2, [r3, #5]
        if (is_host && max_packet_size == 512) {
 8009b2a:	bf00      	nop
        } else {
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
                    max_packet_size == 32 || max_packet_size == 64);
        }
      }
      break;
 8009b2c:	e031      	b.n	8009b92 <tu_edpt_validate+0x11a>
          TU_ASSERT(max_packet_size == 8  || max_packet_size == 16 ||
 8009b2e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009b30:	2b08      	cmp	r3, #8
 8009b32:	d02e      	beq.n	8009b92 <tu_edpt_validate+0x11a>
 8009b34:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009b36:	2b10      	cmp	r3, #16
 8009b38:	d02b      	beq.n	8009b92 <tu_edpt_validate+0x11a>
 8009b3a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009b3c:	2b20      	cmp	r3, #32
 8009b3e:	d028      	beq.n	8009b92 <tu_edpt_validate+0x11a>
 8009b40:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8009b42:	2b40      	cmp	r3, #64	@ 0x40
 8009b44:	d025      	beq.n	8009b92 <tu_edpt_validate+0x11a>
 8009b46:	4b18      	ldr	r3, [pc, #96]	@ (8009ba8 <tu_edpt_validate+0x130>)
 8009b48:	61bb      	str	r3, [r7, #24]
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	f003 0301 	and.w	r3, r3, #1
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	d000      	beq.n	8009b58 <tu_edpt_validate+0xe0>
 8009b56:	be00      	bkpt	0x0000
 8009b58:	2300      	movs	r3, #0
 8009b5a:	e01e      	b.n	8009b9a <tu_edpt_validate+0x122>

    case TUSB_XFER_INTERRUPT: {
      uint16_t const spec_size = (speed == TUSB_SPEED_HIGH ? 1024 : 64);
 8009b5c:	78fb      	ldrb	r3, [r7, #3]
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d102      	bne.n	8009b68 <tu_edpt_validate+0xf0>
 8009b62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009b66:	e000      	b.n	8009b6a <tu_edpt_validate+0xf2>
 8009b68:	2340      	movs	r3, #64	@ 0x40
 8009b6a:	84bb      	strh	r3, [r7, #36]	@ 0x24
      TU_ASSERT(max_packet_size <= spec_size);
 8009b6c:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8009b6e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8009b70:	429a      	cmp	r2, r3
 8009b72:	d910      	bls.n	8009b96 <tu_edpt_validate+0x11e>
 8009b74:	4b0c      	ldr	r3, [pc, #48]	@ (8009ba8 <tu_edpt_validate+0x130>)
 8009b76:	623b      	str	r3, [r7, #32]
 8009b78:	6a3b      	ldr	r3, [r7, #32]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f003 0301 	and.w	r3, r3, #1
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d000      	beq.n	8009b86 <tu_edpt_validate+0x10e>
 8009b84:	be00      	bkpt	0x0000
 8009b86:	2300      	movs	r3, #0
 8009b88:	e007      	b.n	8009b9a <tu_edpt_validate+0x122>
      break;
    }

    default:
      return false;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	e005      	b.n	8009b9a <tu_edpt_validate+0x122>
      break;
 8009b8e:	bf00      	nop
 8009b90:	e002      	b.n	8009b98 <tu_edpt_validate+0x120>
      break;
 8009b92:	bf00      	nop
 8009b94:	e000      	b.n	8009b98 <tu_edpt_validate+0x120>
      break;
 8009b96:	bf00      	nop
  }

  return true;
 8009b98:	2301      	movs	r3, #1
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	372c      	adds	r7, #44	@ 0x2c
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	e000edf0 	.word	0xe000edf0

08009bac <tu_edpt_bind_driver>:

void tu_edpt_bind_driver(uint8_t ep2drv[][2], tusb_desc_interface_t const* desc_itf, uint16_t desc_len,
                         uint8_t driver_id) {
 8009bac:	b480      	push	{r7}
 8009bae:	b08d      	sub	sp, #52	@ 0x34
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	60f8      	str	r0, [r7, #12]
 8009bb4:	60b9      	str	r1, [r7, #8]
 8009bb6:	4611      	mov	r1, r2
 8009bb8:	461a      	mov	r2, r3
 8009bba:	460b      	mov	r3, r1
 8009bbc:	80fb      	strh	r3, [r7, #6]
 8009bbe:	4613      	mov	r3, r2
 8009bc0:	717b      	strb	r3, [r7, #5]
  uint8_t const* p_desc = (uint8_t const*) desc_itf;
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint8_t const* desc_end = p_desc + desc_len;
 8009bc6:	88fb      	ldrh	r3, [r7, #6]
 8009bc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009bca:	4413      	add	r3, r2
 8009bcc:	62bb      	str	r3, [r7, #40]	@ 0x28

  while (p_desc < desc_end) {
 8009bce:	e027      	b.n	8009c20 <tu_edpt_bind_driver+0x74>
 8009bd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009bd2:	623b      	str	r3, [r7, #32]
  return ((uint8_t const*) desc)[DESC_OFFSET_LEN];
}

// get descriptor type
TU_ATTR_ALWAYS_INLINE static inline uint8_t tu_desc_type(void const* desc) {
  return ((uint8_t const*) desc)[DESC_OFFSET_TYPE];
 8009bd4:	6a3b      	ldr	r3, [r7, #32]
 8009bd6:	3301      	adds	r3, #1
 8009bd8:	781b      	ldrb	r3, [r3, #0]
    if (TUSB_DESC_ENDPOINT == tu_desc_type(p_desc)) {
 8009bda:	2b05      	cmp	r3, #5
 8009bdc:	d116      	bne.n	8009c0c <tu_edpt_bind_driver+0x60>
      uint8_t const ep_addr = ((tusb_desc_endpoint_t const*) p_desc)->bEndpointAddress;
 8009bde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009be0:	789b      	ldrb	r3, [r3, #2]
 8009be2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009be6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009bea:	77bb      	strb	r3, [r7, #30]
  return (uint8_t)(addr & (~TUSB_DIR_IN_MASK));
 8009bec:	7fbb      	ldrb	r3, [r7, #30]
 8009bee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009bf2:	b2db      	uxtb	r3, r3
      TU_LOG(2, "  Bind EP %02x to driver id %u\r\n", ep_addr, driver_id);
      ep2drv[tu_edpt_number(ep_addr)][tu_edpt_dir(ep_addr)] = driver_id;
 8009bf4:	005b      	lsls	r3, r3, #1
 8009bf6:	68fa      	ldr	r2, [r7, #12]
 8009bf8:	4413      	add	r3, r2
 8009bfa:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009bfe:	77fa      	strb	r2, [r7, #31]
  return (addr & TUSB_DIR_IN_MASK) ? TUSB_DIR_IN : TUSB_DIR_OUT;
 8009c00:	7ffa      	ldrb	r2, [r7, #31]
 8009c02:	09d2      	lsrs	r2, r2, #7
 8009c04:	b2d2      	uxtb	r2, r2
 8009c06:	4611      	mov	r1, r2
 8009c08:	797a      	ldrb	r2, [r7, #5]
 8009c0a:	545a      	strb	r2, [r3, r1]
 8009c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009c0e:	61bb      	str	r3, [r7, #24]
  uint8_t const* desc8 = (uint8_t const*) desc;
 8009c10:	69bb      	ldr	r3, [r7, #24]
 8009c12:	617b      	str	r3, [r7, #20]
  return desc8 + desc8[DESC_OFFSET_LEN];
 8009c14:	697b      	ldr	r3, [r7, #20]
 8009c16:	781b      	ldrb	r3, [r3, #0]
 8009c18:	461a      	mov	r2, r3
 8009c1a:	697b      	ldr	r3, [r7, #20]
 8009c1c:	4413      	add	r3, r2
    }
    p_desc = tu_desc_next(p_desc);
 8009c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while (p_desc < desc_end) {
 8009c20:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c24:	429a      	cmp	r2, r3
 8009c26:	d3d3      	bcc.n	8009bd0 <tu_edpt_bind_driver+0x24>
  }
}
 8009c28:	bf00      	nop
 8009c2a:	bf00      	nop
 8009c2c:	3734      	adds	r7, #52	@ 0x34
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c34:	4770      	bx	lr
	...

08009c38 <sniprintf>:
 8009c38:	b40c      	push	{r2, r3}
 8009c3a:	b530      	push	{r4, r5, lr}
 8009c3c:	4b18      	ldr	r3, [pc, #96]	@ (8009ca0 <sniprintf+0x68>)
 8009c3e:	1e0c      	subs	r4, r1, #0
 8009c40:	681d      	ldr	r5, [r3, #0]
 8009c42:	b09d      	sub	sp, #116	@ 0x74
 8009c44:	da08      	bge.n	8009c58 <sniprintf+0x20>
 8009c46:	238b      	movs	r3, #139	@ 0x8b
 8009c48:	602b      	str	r3, [r5, #0]
 8009c4a:	f04f 30ff 	mov.w	r0, #4294967295
 8009c4e:	b01d      	add	sp, #116	@ 0x74
 8009c50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009c54:	b002      	add	sp, #8
 8009c56:	4770      	bx	lr
 8009c58:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8009c5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009c60:	f04f 0300 	mov.w	r3, #0
 8009c64:	931b      	str	r3, [sp, #108]	@ 0x6c
 8009c66:	bf14      	ite	ne
 8009c68:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009c6c:	4623      	moveq	r3, r4
 8009c6e:	9304      	str	r3, [sp, #16]
 8009c70:	9307      	str	r3, [sp, #28]
 8009c72:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8009c76:	9002      	str	r0, [sp, #8]
 8009c78:	9006      	str	r0, [sp, #24]
 8009c7a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009c7e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8009c80:	ab21      	add	r3, sp, #132	@ 0x84
 8009c82:	a902      	add	r1, sp, #8
 8009c84:	4628      	mov	r0, r5
 8009c86:	9301      	str	r3, [sp, #4]
 8009c88:	f000 f9a2 	bl	8009fd0 <_svfiprintf_r>
 8009c8c:	1c43      	adds	r3, r0, #1
 8009c8e:	bfbc      	itt	lt
 8009c90:	238b      	movlt	r3, #139	@ 0x8b
 8009c92:	602b      	strlt	r3, [r5, #0]
 8009c94:	2c00      	cmp	r4, #0
 8009c96:	d0da      	beq.n	8009c4e <sniprintf+0x16>
 8009c98:	9b02      	ldr	r3, [sp, #8]
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	701a      	strb	r2, [r3, #0]
 8009c9e:	e7d6      	b.n	8009c4e <sniprintf+0x16>
 8009ca0:	20000084 	.word	0x20000084

08009ca4 <memset>:
 8009ca4:	4402      	add	r2, r0
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d100      	bne.n	8009cae <memset+0xa>
 8009cac:	4770      	bx	lr
 8009cae:	f803 1b01 	strb.w	r1, [r3], #1
 8009cb2:	e7f9      	b.n	8009ca8 <memset+0x4>

08009cb4 <__errno>:
 8009cb4:	4b01      	ldr	r3, [pc, #4]	@ (8009cbc <__errno+0x8>)
 8009cb6:	6818      	ldr	r0, [r3, #0]
 8009cb8:	4770      	bx	lr
 8009cba:	bf00      	nop
 8009cbc:	20000084 	.word	0x20000084

08009cc0 <__libc_init_array>:
 8009cc0:	b570      	push	{r4, r5, r6, lr}
 8009cc2:	4d0d      	ldr	r5, [pc, #52]	@ (8009cf8 <__libc_init_array+0x38>)
 8009cc4:	4c0d      	ldr	r4, [pc, #52]	@ (8009cfc <__libc_init_array+0x3c>)
 8009cc6:	1b64      	subs	r4, r4, r5
 8009cc8:	10a4      	asrs	r4, r4, #2
 8009cca:	2600      	movs	r6, #0
 8009ccc:	42a6      	cmp	r6, r4
 8009cce:	d109      	bne.n	8009ce4 <__libc_init_array+0x24>
 8009cd0:	4d0b      	ldr	r5, [pc, #44]	@ (8009d00 <__libc_init_array+0x40>)
 8009cd2:	4c0c      	ldr	r4, [pc, #48]	@ (8009d04 <__libc_init_array+0x44>)
 8009cd4:	f000 fc64 	bl	800a5a0 <_init>
 8009cd8:	1b64      	subs	r4, r4, r5
 8009cda:	10a4      	asrs	r4, r4, #2
 8009cdc:	2600      	movs	r6, #0
 8009cde:	42a6      	cmp	r6, r4
 8009ce0:	d105      	bne.n	8009cee <__libc_init_array+0x2e>
 8009ce2:	bd70      	pop	{r4, r5, r6, pc}
 8009ce4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ce8:	4798      	blx	r3
 8009cea:	3601      	adds	r6, #1
 8009cec:	e7ee      	b.n	8009ccc <__libc_init_array+0xc>
 8009cee:	f855 3b04 	ldr.w	r3, [r5], #4
 8009cf2:	4798      	blx	r3
 8009cf4:	3601      	adds	r6, #1
 8009cf6:	e7f2      	b.n	8009cde <__libc_init_array+0x1e>
 8009cf8:	0800a800 	.word	0x0800a800
 8009cfc:	0800a800 	.word	0x0800a800
 8009d00:	0800a800 	.word	0x0800a800
 8009d04:	0800a804 	.word	0x0800a804

08009d08 <__retarget_lock_acquire_recursive>:
 8009d08:	4770      	bx	lr

08009d0a <__retarget_lock_release_recursive>:
 8009d0a:	4770      	bx	lr

08009d0c <memcpy>:
 8009d0c:	440a      	add	r2, r1
 8009d0e:	4291      	cmp	r1, r2
 8009d10:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d14:	d100      	bne.n	8009d18 <memcpy+0xc>
 8009d16:	4770      	bx	lr
 8009d18:	b510      	push	{r4, lr}
 8009d1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d22:	4291      	cmp	r1, r2
 8009d24:	d1f9      	bne.n	8009d1a <memcpy+0xe>
 8009d26:	bd10      	pop	{r4, pc}

08009d28 <_free_r>:
 8009d28:	b538      	push	{r3, r4, r5, lr}
 8009d2a:	4605      	mov	r5, r0
 8009d2c:	2900      	cmp	r1, #0
 8009d2e:	d041      	beq.n	8009db4 <_free_r+0x8c>
 8009d30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009d34:	1f0c      	subs	r4, r1, #4
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	bfb8      	it	lt
 8009d3a:	18e4      	addlt	r4, r4, r3
 8009d3c:	f000 f8e0 	bl	8009f00 <__malloc_lock>
 8009d40:	4a1d      	ldr	r2, [pc, #116]	@ (8009db8 <_free_r+0x90>)
 8009d42:	6813      	ldr	r3, [r2, #0]
 8009d44:	b933      	cbnz	r3, 8009d54 <_free_r+0x2c>
 8009d46:	6063      	str	r3, [r4, #4]
 8009d48:	6014      	str	r4, [r2, #0]
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009d50:	f000 b8dc 	b.w	8009f0c <__malloc_unlock>
 8009d54:	42a3      	cmp	r3, r4
 8009d56:	d908      	bls.n	8009d6a <_free_r+0x42>
 8009d58:	6820      	ldr	r0, [r4, #0]
 8009d5a:	1821      	adds	r1, r4, r0
 8009d5c:	428b      	cmp	r3, r1
 8009d5e:	bf01      	itttt	eq
 8009d60:	6819      	ldreq	r1, [r3, #0]
 8009d62:	685b      	ldreq	r3, [r3, #4]
 8009d64:	1809      	addeq	r1, r1, r0
 8009d66:	6021      	streq	r1, [r4, #0]
 8009d68:	e7ed      	b.n	8009d46 <_free_r+0x1e>
 8009d6a:	461a      	mov	r2, r3
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	b10b      	cbz	r3, 8009d74 <_free_r+0x4c>
 8009d70:	42a3      	cmp	r3, r4
 8009d72:	d9fa      	bls.n	8009d6a <_free_r+0x42>
 8009d74:	6811      	ldr	r1, [r2, #0]
 8009d76:	1850      	adds	r0, r2, r1
 8009d78:	42a0      	cmp	r0, r4
 8009d7a:	d10b      	bne.n	8009d94 <_free_r+0x6c>
 8009d7c:	6820      	ldr	r0, [r4, #0]
 8009d7e:	4401      	add	r1, r0
 8009d80:	1850      	adds	r0, r2, r1
 8009d82:	4283      	cmp	r3, r0
 8009d84:	6011      	str	r1, [r2, #0]
 8009d86:	d1e0      	bne.n	8009d4a <_free_r+0x22>
 8009d88:	6818      	ldr	r0, [r3, #0]
 8009d8a:	685b      	ldr	r3, [r3, #4]
 8009d8c:	6053      	str	r3, [r2, #4]
 8009d8e:	4408      	add	r0, r1
 8009d90:	6010      	str	r0, [r2, #0]
 8009d92:	e7da      	b.n	8009d4a <_free_r+0x22>
 8009d94:	d902      	bls.n	8009d9c <_free_r+0x74>
 8009d96:	230c      	movs	r3, #12
 8009d98:	602b      	str	r3, [r5, #0]
 8009d9a:	e7d6      	b.n	8009d4a <_free_r+0x22>
 8009d9c:	6820      	ldr	r0, [r4, #0]
 8009d9e:	1821      	adds	r1, r4, r0
 8009da0:	428b      	cmp	r3, r1
 8009da2:	bf04      	itt	eq
 8009da4:	6819      	ldreq	r1, [r3, #0]
 8009da6:	685b      	ldreq	r3, [r3, #4]
 8009da8:	6063      	str	r3, [r4, #4]
 8009daa:	bf04      	itt	eq
 8009dac:	1809      	addeq	r1, r1, r0
 8009dae:	6021      	streq	r1, [r4, #0]
 8009db0:	6054      	str	r4, [r2, #4]
 8009db2:	e7ca      	b.n	8009d4a <_free_r+0x22>
 8009db4:	bd38      	pop	{r3, r4, r5, pc}
 8009db6:	bf00      	nop
 8009db8:	20000de4 	.word	0x20000de4

08009dbc <sbrk_aligned>:
 8009dbc:	b570      	push	{r4, r5, r6, lr}
 8009dbe:	4e0f      	ldr	r6, [pc, #60]	@ (8009dfc <sbrk_aligned+0x40>)
 8009dc0:	460c      	mov	r4, r1
 8009dc2:	6831      	ldr	r1, [r6, #0]
 8009dc4:	4605      	mov	r5, r0
 8009dc6:	b911      	cbnz	r1, 8009dce <sbrk_aligned+0x12>
 8009dc8:	f000 fba4 	bl	800a514 <_sbrk_r>
 8009dcc:	6030      	str	r0, [r6, #0]
 8009dce:	4621      	mov	r1, r4
 8009dd0:	4628      	mov	r0, r5
 8009dd2:	f000 fb9f 	bl	800a514 <_sbrk_r>
 8009dd6:	1c43      	adds	r3, r0, #1
 8009dd8:	d103      	bne.n	8009de2 <sbrk_aligned+0x26>
 8009dda:	f04f 34ff 	mov.w	r4, #4294967295
 8009dde:	4620      	mov	r0, r4
 8009de0:	bd70      	pop	{r4, r5, r6, pc}
 8009de2:	1cc4      	adds	r4, r0, #3
 8009de4:	f024 0403 	bic.w	r4, r4, #3
 8009de8:	42a0      	cmp	r0, r4
 8009dea:	d0f8      	beq.n	8009dde <sbrk_aligned+0x22>
 8009dec:	1a21      	subs	r1, r4, r0
 8009dee:	4628      	mov	r0, r5
 8009df0:	f000 fb90 	bl	800a514 <_sbrk_r>
 8009df4:	3001      	adds	r0, #1
 8009df6:	d1f2      	bne.n	8009dde <sbrk_aligned+0x22>
 8009df8:	e7ef      	b.n	8009dda <sbrk_aligned+0x1e>
 8009dfa:	bf00      	nop
 8009dfc:	20000de0 	.word	0x20000de0

08009e00 <_malloc_r>:
 8009e00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009e04:	1ccd      	adds	r5, r1, #3
 8009e06:	f025 0503 	bic.w	r5, r5, #3
 8009e0a:	3508      	adds	r5, #8
 8009e0c:	2d0c      	cmp	r5, #12
 8009e0e:	bf38      	it	cc
 8009e10:	250c      	movcc	r5, #12
 8009e12:	2d00      	cmp	r5, #0
 8009e14:	4606      	mov	r6, r0
 8009e16:	db01      	blt.n	8009e1c <_malloc_r+0x1c>
 8009e18:	42a9      	cmp	r1, r5
 8009e1a:	d904      	bls.n	8009e26 <_malloc_r+0x26>
 8009e1c:	230c      	movs	r3, #12
 8009e1e:	6033      	str	r3, [r6, #0]
 8009e20:	2000      	movs	r0, #0
 8009e22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009efc <_malloc_r+0xfc>
 8009e2a:	f000 f869 	bl	8009f00 <__malloc_lock>
 8009e2e:	f8d8 3000 	ldr.w	r3, [r8]
 8009e32:	461c      	mov	r4, r3
 8009e34:	bb44      	cbnz	r4, 8009e88 <_malloc_r+0x88>
 8009e36:	4629      	mov	r1, r5
 8009e38:	4630      	mov	r0, r6
 8009e3a:	f7ff ffbf 	bl	8009dbc <sbrk_aligned>
 8009e3e:	1c43      	adds	r3, r0, #1
 8009e40:	4604      	mov	r4, r0
 8009e42:	d158      	bne.n	8009ef6 <_malloc_r+0xf6>
 8009e44:	f8d8 4000 	ldr.w	r4, [r8]
 8009e48:	4627      	mov	r7, r4
 8009e4a:	2f00      	cmp	r7, #0
 8009e4c:	d143      	bne.n	8009ed6 <_malloc_r+0xd6>
 8009e4e:	2c00      	cmp	r4, #0
 8009e50:	d04b      	beq.n	8009eea <_malloc_r+0xea>
 8009e52:	6823      	ldr	r3, [r4, #0]
 8009e54:	4639      	mov	r1, r7
 8009e56:	4630      	mov	r0, r6
 8009e58:	eb04 0903 	add.w	r9, r4, r3
 8009e5c:	f000 fb5a 	bl	800a514 <_sbrk_r>
 8009e60:	4581      	cmp	r9, r0
 8009e62:	d142      	bne.n	8009eea <_malloc_r+0xea>
 8009e64:	6821      	ldr	r1, [r4, #0]
 8009e66:	1a6d      	subs	r5, r5, r1
 8009e68:	4629      	mov	r1, r5
 8009e6a:	4630      	mov	r0, r6
 8009e6c:	f7ff ffa6 	bl	8009dbc <sbrk_aligned>
 8009e70:	3001      	adds	r0, #1
 8009e72:	d03a      	beq.n	8009eea <_malloc_r+0xea>
 8009e74:	6823      	ldr	r3, [r4, #0]
 8009e76:	442b      	add	r3, r5
 8009e78:	6023      	str	r3, [r4, #0]
 8009e7a:	f8d8 3000 	ldr.w	r3, [r8]
 8009e7e:	685a      	ldr	r2, [r3, #4]
 8009e80:	bb62      	cbnz	r2, 8009edc <_malloc_r+0xdc>
 8009e82:	f8c8 7000 	str.w	r7, [r8]
 8009e86:	e00f      	b.n	8009ea8 <_malloc_r+0xa8>
 8009e88:	6822      	ldr	r2, [r4, #0]
 8009e8a:	1b52      	subs	r2, r2, r5
 8009e8c:	d420      	bmi.n	8009ed0 <_malloc_r+0xd0>
 8009e8e:	2a0b      	cmp	r2, #11
 8009e90:	d917      	bls.n	8009ec2 <_malloc_r+0xc2>
 8009e92:	1961      	adds	r1, r4, r5
 8009e94:	42a3      	cmp	r3, r4
 8009e96:	6025      	str	r5, [r4, #0]
 8009e98:	bf18      	it	ne
 8009e9a:	6059      	strne	r1, [r3, #4]
 8009e9c:	6863      	ldr	r3, [r4, #4]
 8009e9e:	bf08      	it	eq
 8009ea0:	f8c8 1000 	streq.w	r1, [r8]
 8009ea4:	5162      	str	r2, [r4, r5]
 8009ea6:	604b      	str	r3, [r1, #4]
 8009ea8:	4630      	mov	r0, r6
 8009eaa:	f000 f82f 	bl	8009f0c <__malloc_unlock>
 8009eae:	f104 000b 	add.w	r0, r4, #11
 8009eb2:	1d23      	adds	r3, r4, #4
 8009eb4:	f020 0007 	bic.w	r0, r0, #7
 8009eb8:	1ac2      	subs	r2, r0, r3
 8009eba:	bf1c      	itt	ne
 8009ebc:	1a1b      	subne	r3, r3, r0
 8009ebe:	50a3      	strne	r3, [r4, r2]
 8009ec0:	e7af      	b.n	8009e22 <_malloc_r+0x22>
 8009ec2:	6862      	ldr	r2, [r4, #4]
 8009ec4:	42a3      	cmp	r3, r4
 8009ec6:	bf0c      	ite	eq
 8009ec8:	f8c8 2000 	streq.w	r2, [r8]
 8009ecc:	605a      	strne	r2, [r3, #4]
 8009ece:	e7eb      	b.n	8009ea8 <_malloc_r+0xa8>
 8009ed0:	4623      	mov	r3, r4
 8009ed2:	6864      	ldr	r4, [r4, #4]
 8009ed4:	e7ae      	b.n	8009e34 <_malloc_r+0x34>
 8009ed6:	463c      	mov	r4, r7
 8009ed8:	687f      	ldr	r7, [r7, #4]
 8009eda:	e7b6      	b.n	8009e4a <_malloc_r+0x4a>
 8009edc:	461a      	mov	r2, r3
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	42a3      	cmp	r3, r4
 8009ee2:	d1fb      	bne.n	8009edc <_malloc_r+0xdc>
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	6053      	str	r3, [r2, #4]
 8009ee8:	e7de      	b.n	8009ea8 <_malloc_r+0xa8>
 8009eea:	230c      	movs	r3, #12
 8009eec:	6033      	str	r3, [r6, #0]
 8009eee:	4630      	mov	r0, r6
 8009ef0:	f000 f80c 	bl	8009f0c <__malloc_unlock>
 8009ef4:	e794      	b.n	8009e20 <_malloc_r+0x20>
 8009ef6:	6005      	str	r5, [r0, #0]
 8009ef8:	e7d6      	b.n	8009ea8 <_malloc_r+0xa8>
 8009efa:	bf00      	nop
 8009efc:	20000de4 	.word	0x20000de4

08009f00 <__malloc_lock>:
 8009f00:	4801      	ldr	r0, [pc, #4]	@ (8009f08 <__malloc_lock+0x8>)
 8009f02:	f7ff bf01 	b.w	8009d08 <__retarget_lock_acquire_recursive>
 8009f06:	bf00      	nop
 8009f08:	20000ddc 	.word	0x20000ddc

08009f0c <__malloc_unlock>:
 8009f0c:	4801      	ldr	r0, [pc, #4]	@ (8009f14 <__malloc_unlock+0x8>)
 8009f0e:	f7ff befc 	b.w	8009d0a <__retarget_lock_release_recursive>
 8009f12:	bf00      	nop
 8009f14:	20000ddc 	.word	0x20000ddc

08009f18 <__ssputs_r>:
 8009f18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f1c:	688e      	ldr	r6, [r1, #8]
 8009f1e:	461f      	mov	r7, r3
 8009f20:	42be      	cmp	r6, r7
 8009f22:	680b      	ldr	r3, [r1, #0]
 8009f24:	4682      	mov	sl, r0
 8009f26:	460c      	mov	r4, r1
 8009f28:	4690      	mov	r8, r2
 8009f2a:	d82d      	bhi.n	8009f88 <__ssputs_r+0x70>
 8009f2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f30:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009f34:	d026      	beq.n	8009f84 <__ssputs_r+0x6c>
 8009f36:	6965      	ldr	r5, [r4, #20]
 8009f38:	6909      	ldr	r1, [r1, #16]
 8009f3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009f3e:	eba3 0901 	sub.w	r9, r3, r1
 8009f42:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009f46:	1c7b      	adds	r3, r7, #1
 8009f48:	444b      	add	r3, r9
 8009f4a:	106d      	asrs	r5, r5, #1
 8009f4c:	429d      	cmp	r5, r3
 8009f4e:	bf38      	it	cc
 8009f50:	461d      	movcc	r5, r3
 8009f52:	0553      	lsls	r3, r2, #21
 8009f54:	d527      	bpl.n	8009fa6 <__ssputs_r+0x8e>
 8009f56:	4629      	mov	r1, r5
 8009f58:	f7ff ff52 	bl	8009e00 <_malloc_r>
 8009f5c:	4606      	mov	r6, r0
 8009f5e:	b360      	cbz	r0, 8009fba <__ssputs_r+0xa2>
 8009f60:	6921      	ldr	r1, [r4, #16]
 8009f62:	464a      	mov	r2, r9
 8009f64:	f7ff fed2 	bl	8009d0c <memcpy>
 8009f68:	89a3      	ldrh	r3, [r4, #12]
 8009f6a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009f6e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009f72:	81a3      	strh	r3, [r4, #12]
 8009f74:	6126      	str	r6, [r4, #16]
 8009f76:	6165      	str	r5, [r4, #20]
 8009f78:	444e      	add	r6, r9
 8009f7a:	eba5 0509 	sub.w	r5, r5, r9
 8009f7e:	6026      	str	r6, [r4, #0]
 8009f80:	60a5      	str	r5, [r4, #8]
 8009f82:	463e      	mov	r6, r7
 8009f84:	42be      	cmp	r6, r7
 8009f86:	d900      	bls.n	8009f8a <__ssputs_r+0x72>
 8009f88:	463e      	mov	r6, r7
 8009f8a:	6820      	ldr	r0, [r4, #0]
 8009f8c:	4632      	mov	r2, r6
 8009f8e:	4641      	mov	r1, r8
 8009f90:	f000 faa6 	bl	800a4e0 <memmove>
 8009f94:	68a3      	ldr	r3, [r4, #8]
 8009f96:	1b9b      	subs	r3, r3, r6
 8009f98:	60a3      	str	r3, [r4, #8]
 8009f9a:	6823      	ldr	r3, [r4, #0]
 8009f9c:	4433      	add	r3, r6
 8009f9e:	6023      	str	r3, [r4, #0]
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa6:	462a      	mov	r2, r5
 8009fa8:	f000 fac4 	bl	800a534 <_realloc_r>
 8009fac:	4606      	mov	r6, r0
 8009fae:	2800      	cmp	r0, #0
 8009fb0:	d1e0      	bne.n	8009f74 <__ssputs_r+0x5c>
 8009fb2:	6921      	ldr	r1, [r4, #16]
 8009fb4:	4650      	mov	r0, sl
 8009fb6:	f7ff feb7 	bl	8009d28 <_free_r>
 8009fba:	230c      	movs	r3, #12
 8009fbc:	f8ca 3000 	str.w	r3, [sl]
 8009fc0:	89a3      	ldrh	r3, [r4, #12]
 8009fc2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009fc6:	81a3      	strh	r3, [r4, #12]
 8009fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8009fcc:	e7e9      	b.n	8009fa2 <__ssputs_r+0x8a>
	...

08009fd0 <_svfiprintf_r>:
 8009fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd4:	4698      	mov	r8, r3
 8009fd6:	898b      	ldrh	r3, [r1, #12]
 8009fd8:	061b      	lsls	r3, r3, #24
 8009fda:	b09d      	sub	sp, #116	@ 0x74
 8009fdc:	4607      	mov	r7, r0
 8009fde:	460d      	mov	r5, r1
 8009fe0:	4614      	mov	r4, r2
 8009fe2:	d510      	bpl.n	800a006 <_svfiprintf_r+0x36>
 8009fe4:	690b      	ldr	r3, [r1, #16]
 8009fe6:	b973      	cbnz	r3, 800a006 <_svfiprintf_r+0x36>
 8009fe8:	2140      	movs	r1, #64	@ 0x40
 8009fea:	f7ff ff09 	bl	8009e00 <_malloc_r>
 8009fee:	6028      	str	r0, [r5, #0]
 8009ff0:	6128      	str	r0, [r5, #16]
 8009ff2:	b930      	cbnz	r0, 800a002 <_svfiprintf_r+0x32>
 8009ff4:	230c      	movs	r3, #12
 8009ff6:	603b      	str	r3, [r7, #0]
 8009ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8009ffc:	b01d      	add	sp, #116	@ 0x74
 8009ffe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a002:	2340      	movs	r3, #64	@ 0x40
 800a004:	616b      	str	r3, [r5, #20]
 800a006:	2300      	movs	r3, #0
 800a008:	9309      	str	r3, [sp, #36]	@ 0x24
 800a00a:	2320      	movs	r3, #32
 800a00c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a010:	f8cd 800c 	str.w	r8, [sp, #12]
 800a014:	2330      	movs	r3, #48	@ 0x30
 800a016:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a1b4 <_svfiprintf_r+0x1e4>
 800a01a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a01e:	f04f 0901 	mov.w	r9, #1
 800a022:	4623      	mov	r3, r4
 800a024:	469a      	mov	sl, r3
 800a026:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a02a:	b10a      	cbz	r2, 800a030 <_svfiprintf_r+0x60>
 800a02c:	2a25      	cmp	r2, #37	@ 0x25
 800a02e:	d1f9      	bne.n	800a024 <_svfiprintf_r+0x54>
 800a030:	ebba 0b04 	subs.w	fp, sl, r4
 800a034:	d00b      	beq.n	800a04e <_svfiprintf_r+0x7e>
 800a036:	465b      	mov	r3, fp
 800a038:	4622      	mov	r2, r4
 800a03a:	4629      	mov	r1, r5
 800a03c:	4638      	mov	r0, r7
 800a03e:	f7ff ff6b 	bl	8009f18 <__ssputs_r>
 800a042:	3001      	adds	r0, #1
 800a044:	f000 80a7 	beq.w	800a196 <_svfiprintf_r+0x1c6>
 800a048:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a04a:	445a      	add	r2, fp
 800a04c:	9209      	str	r2, [sp, #36]	@ 0x24
 800a04e:	f89a 3000 	ldrb.w	r3, [sl]
 800a052:	2b00      	cmp	r3, #0
 800a054:	f000 809f 	beq.w	800a196 <_svfiprintf_r+0x1c6>
 800a058:	2300      	movs	r3, #0
 800a05a:	f04f 32ff 	mov.w	r2, #4294967295
 800a05e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a062:	f10a 0a01 	add.w	sl, sl, #1
 800a066:	9304      	str	r3, [sp, #16]
 800a068:	9307      	str	r3, [sp, #28]
 800a06a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a06e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a070:	4654      	mov	r4, sl
 800a072:	2205      	movs	r2, #5
 800a074:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a078:	484e      	ldr	r0, [pc, #312]	@ (800a1b4 <_svfiprintf_r+0x1e4>)
 800a07a:	f7f6 f8b9 	bl	80001f0 <memchr>
 800a07e:	9a04      	ldr	r2, [sp, #16]
 800a080:	b9d8      	cbnz	r0, 800a0ba <_svfiprintf_r+0xea>
 800a082:	06d0      	lsls	r0, r2, #27
 800a084:	bf44      	itt	mi
 800a086:	2320      	movmi	r3, #32
 800a088:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a08c:	0711      	lsls	r1, r2, #28
 800a08e:	bf44      	itt	mi
 800a090:	232b      	movmi	r3, #43	@ 0x2b
 800a092:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a096:	f89a 3000 	ldrb.w	r3, [sl]
 800a09a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a09c:	d015      	beq.n	800a0ca <_svfiprintf_r+0xfa>
 800a09e:	9a07      	ldr	r2, [sp, #28]
 800a0a0:	4654      	mov	r4, sl
 800a0a2:	2000      	movs	r0, #0
 800a0a4:	f04f 0c0a 	mov.w	ip, #10
 800a0a8:	4621      	mov	r1, r4
 800a0aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0ae:	3b30      	subs	r3, #48	@ 0x30
 800a0b0:	2b09      	cmp	r3, #9
 800a0b2:	d94b      	bls.n	800a14c <_svfiprintf_r+0x17c>
 800a0b4:	b1b0      	cbz	r0, 800a0e4 <_svfiprintf_r+0x114>
 800a0b6:	9207      	str	r2, [sp, #28]
 800a0b8:	e014      	b.n	800a0e4 <_svfiprintf_r+0x114>
 800a0ba:	eba0 0308 	sub.w	r3, r0, r8
 800a0be:	fa09 f303 	lsl.w	r3, r9, r3
 800a0c2:	4313      	orrs	r3, r2
 800a0c4:	9304      	str	r3, [sp, #16]
 800a0c6:	46a2      	mov	sl, r4
 800a0c8:	e7d2      	b.n	800a070 <_svfiprintf_r+0xa0>
 800a0ca:	9b03      	ldr	r3, [sp, #12]
 800a0cc:	1d19      	adds	r1, r3, #4
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	9103      	str	r1, [sp, #12]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	bfbb      	ittet	lt
 800a0d6:	425b      	neglt	r3, r3
 800a0d8:	f042 0202 	orrlt.w	r2, r2, #2
 800a0dc:	9307      	strge	r3, [sp, #28]
 800a0de:	9307      	strlt	r3, [sp, #28]
 800a0e0:	bfb8      	it	lt
 800a0e2:	9204      	strlt	r2, [sp, #16]
 800a0e4:	7823      	ldrb	r3, [r4, #0]
 800a0e6:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0e8:	d10a      	bne.n	800a100 <_svfiprintf_r+0x130>
 800a0ea:	7863      	ldrb	r3, [r4, #1]
 800a0ec:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0ee:	d132      	bne.n	800a156 <_svfiprintf_r+0x186>
 800a0f0:	9b03      	ldr	r3, [sp, #12]
 800a0f2:	1d1a      	adds	r2, r3, #4
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	9203      	str	r2, [sp, #12]
 800a0f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0fc:	3402      	adds	r4, #2
 800a0fe:	9305      	str	r3, [sp, #20]
 800a100:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a1c4 <_svfiprintf_r+0x1f4>
 800a104:	7821      	ldrb	r1, [r4, #0]
 800a106:	2203      	movs	r2, #3
 800a108:	4650      	mov	r0, sl
 800a10a:	f7f6 f871 	bl	80001f0 <memchr>
 800a10e:	b138      	cbz	r0, 800a120 <_svfiprintf_r+0x150>
 800a110:	9b04      	ldr	r3, [sp, #16]
 800a112:	eba0 000a 	sub.w	r0, r0, sl
 800a116:	2240      	movs	r2, #64	@ 0x40
 800a118:	4082      	lsls	r2, r0
 800a11a:	4313      	orrs	r3, r2
 800a11c:	3401      	adds	r4, #1
 800a11e:	9304      	str	r3, [sp, #16]
 800a120:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a124:	4824      	ldr	r0, [pc, #144]	@ (800a1b8 <_svfiprintf_r+0x1e8>)
 800a126:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a12a:	2206      	movs	r2, #6
 800a12c:	f7f6 f860 	bl	80001f0 <memchr>
 800a130:	2800      	cmp	r0, #0
 800a132:	d036      	beq.n	800a1a2 <_svfiprintf_r+0x1d2>
 800a134:	4b21      	ldr	r3, [pc, #132]	@ (800a1bc <_svfiprintf_r+0x1ec>)
 800a136:	bb1b      	cbnz	r3, 800a180 <_svfiprintf_r+0x1b0>
 800a138:	9b03      	ldr	r3, [sp, #12]
 800a13a:	3307      	adds	r3, #7
 800a13c:	f023 0307 	bic.w	r3, r3, #7
 800a140:	3308      	adds	r3, #8
 800a142:	9303      	str	r3, [sp, #12]
 800a144:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a146:	4433      	add	r3, r6
 800a148:	9309      	str	r3, [sp, #36]	@ 0x24
 800a14a:	e76a      	b.n	800a022 <_svfiprintf_r+0x52>
 800a14c:	fb0c 3202 	mla	r2, ip, r2, r3
 800a150:	460c      	mov	r4, r1
 800a152:	2001      	movs	r0, #1
 800a154:	e7a8      	b.n	800a0a8 <_svfiprintf_r+0xd8>
 800a156:	2300      	movs	r3, #0
 800a158:	3401      	adds	r4, #1
 800a15a:	9305      	str	r3, [sp, #20]
 800a15c:	4619      	mov	r1, r3
 800a15e:	f04f 0c0a 	mov.w	ip, #10
 800a162:	4620      	mov	r0, r4
 800a164:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a168:	3a30      	subs	r2, #48	@ 0x30
 800a16a:	2a09      	cmp	r2, #9
 800a16c:	d903      	bls.n	800a176 <_svfiprintf_r+0x1a6>
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d0c6      	beq.n	800a100 <_svfiprintf_r+0x130>
 800a172:	9105      	str	r1, [sp, #20]
 800a174:	e7c4      	b.n	800a100 <_svfiprintf_r+0x130>
 800a176:	fb0c 2101 	mla	r1, ip, r1, r2
 800a17a:	4604      	mov	r4, r0
 800a17c:	2301      	movs	r3, #1
 800a17e:	e7f0      	b.n	800a162 <_svfiprintf_r+0x192>
 800a180:	ab03      	add	r3, sp, #12
 800a182:	9300      	str	r3, [sp, #0]
 800a184:	462a      	mov	r2, r5
 800a186:	4b0e      	ldr	r3, [pc, #56]	@ (800a1c0 <_svfiprintf_r+0x1f0>)
 800a188:	a904      	add	r1, sp, #16
 800a18a:	4638      	mov	r0, r7
 800a18c:	f3af 8000 	nop.w
 800a190:	1c42      	adds	r2, r0, #1
 800a192:	4606      	mov	r6, r0
 800a194:	d1d6      	bne.n	800a144 <_svfiprintf_r+0x174>
 800a196:	89ab      	ldrh	r3, [r5, #12]
 800a198:	065b      	lsls	r3, r3, #25
 800a19a:	f53f af2d 	bmi.w	8009ff8 <_svfiprintf_r+0x28>
 800a19e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1a0:	e72c      	b.n	8009ffc <_svfiprintf_r+0x2c>
 800a1a2:	ab03      	add	r3, sp, #12
 800a1a4:	9300      	str	r3, [sp, #0]
 800a1a6:	462a      	mov	r2, r5
 800a1a8:	4b05      	ldr	r3, [pc, #20]	@ (800a1c0 <_svfiprintf_r+0x1f0>)
 800a1aa:	a904      	add	r1, sp, #16
 800a1ac:	4638      	mov	r0, r7
 800a1ae:	f000 f879 	bl	800a2a4 <_printf_i>
 800a1b2:	e7ed      	b.n	800a190 <_svfiprintf_r+0x1c0>
 800a1b4:	0800a7c4 	.word	0x0800a7c4
 800a1b8:	0800a7ce 	.word	0x0800a7ce
 800a1bc:	00000000 	.word	0x00000000
 800a1c0:	08009f19 	.word	0x08009f19
 800a1c4:	0800a7ca 	.word	0x0800a7ca

0800a1c8 <_printf_common>:
 800a1c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1cc:	4616      	mov	r6, r2
 800a1ce:	4698      	mov	r8, r3
 800a1d0:	688a      	ldr	r2, [r1, #8]
 800a1d2:	690b      	ldr	r3, [r1, #16]
 800a1d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a1d8:	4293      	cmp	r3, r2
 800a1da:	bfb8      	it	lt
 800a1dc:	4613      	movlt	r3, r2
 800a1de:	6033      	str	r3, [r6, #0]
 800a1e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a1e4:	4607      	mov	r7, r0
 800a1e6:	460c      	mov	r4, r1
 800a1e8:	b10a      	cbz	r2, 800a1ee <_printf_common+0x26>
 800a1ea:	3301      	adds	r3, #1
 800a1ec:	6033      	str	r3, [r6, #0]
 800a1ee:	6823      	ldr	r3, [r4, #0]
 800a1f0:	0699      	lsls	r1, r3, #26
 800a1f2:	bf42      	ittt	mi
 800a1f4:	6833      	ldrmi	r3, [r6, #0]
 800a1f6:	3302      	addmi	r3, #2
 800a1f8:	6033      	strmi	r3, [r6, #0]
 800a1fa:	6825      	ldr	r5, [r4, #0]
 800a1fc:	f015 0506 	ands.w	r5, r5, #6
 800a200:	d106      	bne.n	800a210 <_printf_common+0x48>
 800a202:	f104 0a19 	add.w	sl, r4, #25
 800a206:	68e3      	ldr	r3, [r4, #12]
 800a208:	6832      	ldr	r2, [r6, #0]
 800a20a:	1a9b      	subs	r3, r3, r2
 800a20c:	42ab      	cmp	r3, r5
 800a20e:	dc26      	bgt.n	800a25e <_printf_common+0x96>
 800a210:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a214:	6822      	ldr	r2, [r4, #0]
 800a216:	3b00      	subs	r3, #0
 800a218:	bf18      	it	ne
 800a21a:	2301      	movne	r3, #1
 800a21c:	0692      	lsls	r2, r2, #26
 800a21e:	d42b      	bmi.n	800a278 <_printf_common+0xb0>
 800a220:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a224:	4641      	mov	r1, r8
 800a226:	4638      	mov	r0, r7
 800a228:	47c8      	blx	r9
 800a22a:	3001      	adds	r0, #1
 800a22c:	d01e      	beq.n	800a26c <_printf_common+0xa4>
 800a22e:	6823      	ldr	r3, [r4, #0]
 800a230:	6922      	ldr	r2, [r4, #16]
 800a232:	f003 0306 	and.w	r3, r3, #6
 800a236:	2b04      	cmp	r3, #4
 800a238:	bf02      	ittt	eq
 800a23a:	68e5      	ldreq	r5, [r4, #12]
 800a23c:	6833      	ldreq	r3, [r6, #0]
 800a23e:	1aed      	subeq	r5, r5, r3
 800a240:	68a3      	ldr	r3, [r4, #8]
 800a242:	bf0c      	ite	eq
 800a244:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a248:	2500      	movne	r5, #0
 800a24a:	4293      	cmp	r3, r2
 800a24c:	bfc4      	itt	gt
 800a24e:	1a9b      	subgt	r3, r3, r2
 800a250:	18ed      	addgt	r5, r5, r3
 800a252:	2600      	movs	r6, #0
 800a254:	341a      	adds	r4, #26
 800a256:	42b5      	cmp	r5, r6
 800a258:	d11a      	bne.n	800a290 <_printf_common+0xc8>
 800a25a:	2000      	movs	r0, #0
 800a25c:	e008      	b.n	800a270 <_printf_common+0xa8>
 800a25e:	2301      	movs	r3, #1
 800a260:	4652      	mov	r2, sl
 800a262:	4641      	mov	r1, r8
 800a264:	4638      	mov	r0, r7
 800a266:	47c8      	blx	r9
 800a268:	3001      	adds	r0, #1
 800a26a:	d103      	bne.n	800a274 <_printf_common+0xac>
 800a26c:	f04f 30ff 	mov.w	r0, #4294967295
 800a270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a274:	3501      	adds	r5, #1
 800a276:	e7c6      	b.n	800a206 <_printf_common+0x3e>
 800a278:	18e1      	adds	r1, r4, r3
 800a27a:	1c5a      	adds	r2, r3, #1
 800a27c:	2030      	movs	r0, #48	@ 0x30
 800a27e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a282:	4422      	add	r2, r4
 800a284:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a288:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a28c:	3302      	adds	r3, #2
 800a28e:	e7c7      	b.n	800a220 <_printf_common+0x58>
 800a290:	2301      	movs	r3, #1
 800a292:	4622      	mov	r2, r4
 800a294:	4641      	mov	r1, r8
 800a296:	4638      	mov	r0, r7
 800a298:	47c8      	blx	r9
 800a29a:	3001      	adds	r0, #1
 800a29c:	d0e6      	beq.n	800a26c <_printf_common+0xa4>
 800a29e:	3601      	adds	r6, #1
 800a2a0:	e7d9      	b.n	800a256 <_printf_common+0x8e>
	...

0800a2a4 <_printf_i>:
 800a2a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2a8:	7e0f      	ldrb	r7, [r1, #24]
 800a2aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a2ac:	2f78      	cmp	r7, #120	@ 0x78
 800a2ae:	4691      	mov	r9, r2
 800a2b0:	4680      	mov	r8, r0
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	469a      	mov	sl, r3
 800a2b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a2ba:	d807      	bhi.n	800a2cc <_printf_i+0x28>
 800a2bc:	2f62      	cmp	r7, #98	@ 0x62
 800a2be:	d80a      	bhi.n	800a2d6 <_printf_i+0x32>
 800a2c0:	2f00      	cmp	r7, #0
 800a2c2:	f000 80d1 	beq.w	800a468 <_printf_i+0x1c4>
 800a2c6:	2f58      	cmp	r7, #88	@ 0x58
 800a2c8:	f000 80b8 	beq.w	800a43c <_printf_i+0x198>
 800a2cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a2d4:	e03a      	b.n	800a34c <_printf_i+0xa8>
 800a2d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a2da:	2b15      	cmp	r3, #21
 800a2dc:	d8f6      	bhi.n	800a2cc <_printf_i+0x28>
 800a2de:	a101      	add	r1, pc, #4	@ (adr r1, 800a2e4 <_printf_i+0x40>)
 800a2e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a2e4:	0800a33d 	.word	0x0800a33d
 800a2e8:	0800a351 	.word	0x0800a351
 800a2ec:	0800a2cd 	.word	0x0800a2cd
 800a2f0:	0800a2cd 	.word	0x0800a2cd
 800a2f4:	0800a2cd 	.word	0x0800a2cd
 800a2f8:	0800a2cd 	.word	0x0800a2cd
 800a2fc:	0800a351 	.word	0x0800a351
 800a300:	0800a2cd 	.word	0x0800a2cd
 800a304:	0800a2cd 	.word	0x0800a2cd
 800a308:	0800a2cd 	.word	0x0800a2cd
 800a30c:	0800a2cd 	.word	0x0800a2cd
 800a310:	0800a44f 	.word	0x0800a44f
 800a314:	0800a37b 	.word	0x0800a37b
 800a318:	0800a409 	.word	0x0800a409
 800a31c:	0800a2cd 	.word	0x0800a2cd
 800a320:	0800a2cd 	.word	0x0800a2cd
 800a324:	0800a471 	.word	0x0800a471
 800a328:	0800a2cd 	.word	0x0800a2cd
 800a32c:	0800a37b 	.word	0x0800a37b
 800a330:	0800a2cd 	.word	0x0800a2cd
 800a334:	0800a2cd 	.word	0x0800a2cd
 800a338:	0800a411 	.word	0x0800a411
 800a33c:	6833      	ldr	r3, [r6, #0]
 800a33e:	1d1a      	adds	r2, r3, #4
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	6032      	str	r2, [r6, #0]
 800a344:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a348:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a34c:	2301      	movs	r3, #1
 800a34e:	e09c      	b.n	800a48a <_printf_i+0x1e6>
 800a350:	6833      	ldr	r3, [r6, #0]
 800a352:	6820      	ldr	r0, [r4, #0]
 800a354:	1d19      	adds	r1, r3, #4
 800a356:	6031      	str	r1, [r6, #0]
 800a358:	0606      	lsls	r6, r0, #24
 800a35a:	d501      	bpl.n	800a360 <_printf_i+0xbc>
 800a35c:	681d      	ldr	r5, [r3, #0]
 800a35e:	e003      	b.n	800a368 <_printf_i+0xc4>
 800a360:	0645      	lsls	r5, r0, #25
 800a362:	d5fb      	bpl.n	800a35c <_printf_i+0xb8>
 800a364:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a368:	2d00      	cmp	r5, #0
 800a36a:	da03      	bge.n	800a374 <_printf_i+0xd0>
 800a36c:	232d      	movs	r3, #45	@ 0x2d
 800a36e:	426d      	negs	r5, r5
 800a370:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a374:	4858      	ldr	r0, [pc, #352]	@ (800a4d8 <_printf_i+0x234>)
 800a376:	230a      	movs	r3, #10
 800a378:	e011      	b.n	800a39e <_printf_i+0xfa>
 800a37a:	6821      	ldr	r1, [r4, #0]
 800a37c:	6833      	ldr	r3, [r6, #0]
 800a37e:	0608      	lsls	r0, r1, #24
 800a380:	f853 5b04 	ldr.w	r5, [r3], #4
 800a384:	d402      	bmi.n	800a38c <_printf_i+0xe8>
 800a386:	0649      	lsls	r1, r1, #25
 800a388:	bf48      	it	mi
 800a38a:	b2ad      	uxthmi	r5, r5
 800a38c:	2f6f      	cmp	r7, #111	@ 0x6f
 800a38e:	4852      	ldr	r0, [pc, #328]	@ (800a4d8 <_printf_i+0x234>)
 800a390:	6033      	str	r3, [r6, #0]
 800a392:	bf14      	ite	ne
 800a394:	230a      	movne	r3, #10
 800a396:	2308      	moveq	r3, #8
 800a398:	2100      	movs	r1, #0
 800a39a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a39e:	6866      	ldr	r6, [r4, #4]
 800a3a0:	60a6      	str	r6, [r4, #8]
 800a3a2:	2e00      	cmp	r6, #0
 800a3a4:	db05      	blt.n	800a3b2 <_printf_i+0x10e>
 800a3a6:	6821      	ldr	r1, [r4, #0]
 800a3a8:	432e      	orrs	r6, r5
 800a3aa:	f021 0104 	bic.w	r1, r1, #4
 800a3ae:	6021      	str	r1, [r4, #0]
 800a3b0:	d04b      	beq.n	800a44a <_printf_i+0x1a6>
 800a3b2:	4616      	mov	r6, r2
 800a3b4:	fbb5 f1f3 	udiv	r1, r5, r3
 800a3b8:	fb03 5711 	mls	r7, r3, r1, r5
 800a3bc:	5dc7      	ldrb	r7, [r0, r7]
 800a3be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a3c2:	462f      	mov	r7, r5
 800a3c4:	42bb      	cmp	r3, r7
 800a3c6:	460d      	mov	r5, r1
 800a3c8:	d9f4      	bls.n	800a3b4 <_printf_i+0x110>
 800a3ca:	2b08      	cmp	r3, #8
 800a3cc:	d10b      	bne.n	800a3e6 <_printf_i+0x142>
 800a3ce:	6823      	ldr	r3, [r4, #0]
 800a3d0:	07df      	lsls	r7, r3, #31
 800a3d2:	d508      	bpl.n	800a3e6 <_printf_i+0x142>
 800a3d4:	6923      	ldr	r3, [r4, #16]
 800a3d6:	6861      	ldr	r1, [r4, #4]
 800a3d8:	4299      	cmp	r1, r3
 800a3da:	bfde      	ittt	le
 800a3dc:	2330      	movle	r3, #48	@ 0x30
 800a3de:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a3e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a3e6:	1b92      	subs	r2, r2, r6
 800a3e8:	6122      	str	r2, [r4, #16]
 800a3ea:	f8cd a000 	str.w	sl, [sp]
 800a3ee:	464b      	mov	r3, r9
 800a3f0:	aa03      	add	r2, sp, #12
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	4640      	mov	r0, r8
 800a3f6:	f7ff fee7 	bl	800a1c8 <_printf_common>
 800a3fa:	3001      	adds	r0, #1
 800a3fc:	d14a      	bne.n	800a494 <_printf_i+0x1f0>
 800a3fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a402:	b004      	add	sp, #16
 800a404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a408:	6823      	ldr	r3, [r4, #0]
 800a40a:	f043 0320 	orr.w	r3, r3, #32
 800a40e:	6023      	str	r3, [r4, #0]
 800a410:	4832      	ldr	r0, [pc, #200]	@ (800a4dc <_printf_i+0x238>)
 800a412:	2778      	movs	r7, #120	@ 0x78
 800a414:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a418:	6823      	ldr	r3, [r4, #0]
 800a41a:	6831      	ldr	r1, [r6, #0]
 800a41c:	061f      	lsls	r7, r3, #24
 800a41e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a422:	d402      	bmi.n	800a42a <_printf_i+0x186>
 800a424:	065f      	lsls	r7, r3, #25
 800a426:	bf48      	it	mi
 800a428:	b2ad      	uxthmi	r5, r5
 800a42a:	6031      	str	r1, [r6, #0]
 800a42c:	07d9      	lsls	r1, r3, #31
 800a42e:	bf44      	itt	mi
 800a430:	f043 0320 	orrmi.w	r3, r3, #32
 800a434:	6023      	strmi	r3, [r4, #0]
 800a436:	b11d      	cbz	r5, 800a440 <_printf_i+0x19c>
 800a438:	2310      	movs	r3, #16
 800a43a:	e7ad      	b.n	800a398 <_printf_i+0xf4>
 800a43c:	4826      	ldr	r0, [pc, #152]	@ (800a4d8 <_printf_i+0x234>)
 800a43e:	e7e9      	b.n	800a414 <_printf_i+0x170>
 800a440:	6823      	ldr	r3, [r4, #0]
 800a442:	f023 0320 	bic.w	r3, r3, #32
 800a446:	6023      	str	r3, [r4, #0]
 800a448:	e7f6      	b.n	800a438 <_printf_i+0x194>
 800a44a:	4616      	mov	r6, r2
 800a44c:	e7bd      	b.n	800a3ca <_printf_i+0x126>
 800a44e:	6833      	ldr	r3, [r6, #0]
 800a450:	6825      	ldr	r5, [r4, #0]
 800a452:	6961      	ldr	r1, [r4, #20]
 800a454:	1d18      	adds	r0, r3, #4
 800a456:	6030      	str	r0, [r6, #0]
 800a458:	062e      	lsls	r6, r5, #24
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	d501      	bpl.n	800a462 <_printf_i+0x1be>
 800a45e:	6019      	str	r1, [r3, #0]
 800a460:	e002      	b.n	800a468 <_printf_i+0x1c4>
 800a462:	0668      	lsls	r0, r5, #25
 800a464:	d5fb      	bpl.n	800a45e <_printf_i+0x1ba>
 800a466:	8019      	strh	r1, [r3, #0]
 800a468:	2300      	movs	r3, #0
 800a46a:	6123      	str	r3, [r4, #16]
 800a46c:	4616      	mov	r6, r2
 800a46e:	e7bc      	b.n	800a3ea <_printf_i+0x146>
 800a470:	6833      	ldr	r3, [r6, #0]
 800a472:	1d1a      	adds	r2, r3, #4
 800a474:	6032      	str	r2, [r6, #0]
 800a476:	681e      	ldr	r6, [r3, #0]
 800a478:	6862      	ldr	r2, [r4, #4]
 800a47a:	2100      	movs	r1, #0
 800a47c:	4630      	mov	r0, r6
 800a47e:	f7f5 feb7 	bl	80001f0 <memchr>
 800a482:	b108      	cbz	r0, 800a488 <_printf_i+0x1e4>
 800a484:	1b80      	subs	r0, r0, r6
 800a486:	6060      	str	r0, [r4, #4]
 800a488:	6863      	ldr	r3, [r4, #4]
 800a48a:	6123      	str	r3, [r4, #16]
 800a48c:	2300      	movs	r3, #0
 800a48e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a492:	e7aa      	b.n	800a3ea <_printf_i+0x146>
 800a494:	6923      	ldr	r3, [r4, #16]
 800a496:	4632      	mov	r2, r6
 800a498:	4649      	mov	r1, r9
 800a49a:	4640      	mov	r0, r8
 800a49c:	47d0      	blx	sl
 800a49e:	3001      	adds	r0, #1
 800a4a0:	d0ad      	beq.n	800a3fe <_printf_i+0x15a>
 800a4a2:	6823      	ldr	r3, [r4, #0]
 800a4a4:	079b      	lsls	r3, r3, #30
 800a4a6:	d413      	bmi.n	800a4d0 <_printf_i+0x22c>
 800a4a8:	68e0      	ldr	r0, [r4, #12]
 800a4aa:	9b03      	ldr	r3, [sp, #12]
 800a4ac:	4298      	cmp	r0, r3
 800a4ae:	bfb8      	it	lt
 800a4b0:	4618      	movlt	r0, r3
 800a4b2:	e7a6      	b.n	800a402 <_printf_i+0x15e>
 800a4b4:	2301      	movs	r3, #1
 800a4b6:	4632      	mov	r2, r6
 800a4b8:	4649      	mov	r1, r9
 800a4ba:	4640      	mov	r0, r8
 800a4bc:	47d0      	blx	sl
 800a4be:	3001      	adds	r0, #1
 800a4c0:	d09d      	beq.n	800a3fe <_printf_i+0x15a>
 800a4c2:	3501      	adds	r5, #1
 800a4c4:	68e3      	ldr	r3, [r4, #12]
 800a4c6:	9903      	ldr	r1, [sp, #12]
 800a4c8:	1a5b      	subs	r3, r3, r1
 800a4ca:	42ab      	cmp	r3, r5
 800a4cc:	dcf2      	bgt.n	800a4b4 <_printf_i+0x210>
 800a4ce:	e7eb      	b.n	800a4a8 <_printf_i+0x204>
 800a4d0:	2500      	movs	r5, #0
 800a4d2:	f104 0619 	add.w	r6, r4, #25
 800a4d6:	e7f5      	b.n	800a4c4 <_printf_i+0x220>
 800a4d8:	0800a7d5 	.word	0x0800a7d5
 800a4dc:	0800a7e6 	.word	0x0800a7e6

0800a4e0 <memmove>:
 800a4e0:	4288      	cmp	r0, r1
 800a4e2:	b510      	push	{r4, lr}
 800a4e4:	eb01 0402 	add.w	r4, r1, r2
 800a4e8:	d902      	bls.n	800a4f0 <memmove+0x10>
 800a4ea:	4284      	cmp	r4, r0
 800a4ec:	4623      	mov	r3, r4
 800a4ee:	d807      	bhi.n	800a500 <memmove+0x20>
 800a4f0:	1e43      	subs	r3, r0, #1
 800a4f2:	42a1      	cmp	r1, r4
 800a4f4:	d008      	beq.n	800a508 <memmove+0x28>
 800a4f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4fa:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4fe:	e7f8      	b.n	800a4f2 <memmove+0x12>
 800a500:	4402      	add	r2, r0
 800a502:	4601      	mov	r1, r0
 800a504:	428a      	cmp	r2, r1
 800a506:	d100      	bne.n	800a50a <memmove+0x2a>
 800a508:	bd10      	pop	{r4, pc}
 800a50a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a50e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a512:	e7f7      	b.n	800a504 <memmove+0x24>

0800a514 <_sbrk_r>:
 800a514:	b538      	push	{r3, r4, r5, lr}
 800a516:	4d06      	ldr	r5, [pc, #24]	@ (800a530 <_sbrk_r+0x1c>)
 800a518:	2300      	movs	r3, #0
 800a51a:	4604      	mov	r4, r0
 800a51c:	4608      	mov	r0, r1
 800a51e:	602b      	str	r3, [r5, #0]
 800a520:	f7f7 f9f6 	bl	8001910 <_sbrk>
 800a524:	1c43      	adds	r3, r0, #1
 800a526:	d102      	bne.n	800a52e <_sbrk_r+0x1a>
 800a528:	682b      	ldr	r3, [r5, #0]
 800a52a:	b103      	cbz	r3, 800a52e <_sbrk_r+0x1a>
 800a52c:	6023      	str	r3, [r4, #0]
 800a52e:	bd38      	pop	{r3, r4, r5, pc}
 800a530:	20000dd8 	.word	0x20000dd8

0800a534 <_realloc_r>:
 800a534:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a538:	4607      	mov	r7, r0
 800a53a:	4614      	mov	r4, r2
 800a53c:	460d      	mov	r5, r1
 800a53e:	b921      	cbnz	r1, 800a54a <_realloc_r+0x16>
 800a540:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a544:	4611      	mov	r1, r2
 800a546:	f7ff bc5b 	b.w	8009e00 <_malloc_r>
 800a54a:	b92a      	cbnz	r2, 800a558 <_realloc_r+0x24>
 800a54c:	f7ff fbec 	bl	8009d28 <_free_r>
 800a550:	4625      	mov	r5, r4
 800a552:	4628      	mov	r0, r5
 800a554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a558:	f000 f81a 	bl	800a590 <_malloc_usable_size_r>
 800a55c:	4284      	cmp	r4, r0
 800a55e:	4606      	mov	r6, r0
 800a560:	d802      	bhi.n	800a568 <_realloc_r+0x34>
 800a562:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a566:	d8f4      	bhi.n	800a552 <_realloc_r+0x1e>
 800a568:	4621      	mov	r1, r4
 800a56a:	4638      	mov	r0, r7
 800a56c:	f7ff fc48 	bl	8009e00 <_malloc_r>
 800a570:	4680      	mov	r8, r0
 800a572:	b908      	cbnz	r0, 800a578 <_realloc_r+0x44>
 800a574:	4645      	mov	r5, r8
 800a576:	e7ec      	b.n	800a552 <_realloc_r+0x1e>
 800a578:	42b4      	cmp	r4, r6
 800a57a:	4622      	mov	r2, r4
 800a57c:	4629      	mov	r1, r5
 800a57e:	bf28      	it	cs
 800a580:	4632      	movcs	r2, r6
 800a582:	f7ff fbc3 	bl	8009d0c <memcpy>
 800a586:	4629      	mov	r1, r5
 800a588:	4638      	mov	r0, r7
 800a58a:	f7ff fbcd 	bl	8009d28 <_free_r>
 800a58e:	e7f1      	b.n	800a574 <_realloc_r+0x40>

0800a590 <_malloc_usable_size_r>:
 800a590:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a594:	1f18      	subs	r0, r3, #4
 800a596:	2b00      	cmp	r3, #0
 800a598:	bfbc      	itt	lt
 800a59a:	580b      	ldrlt	r3, [r1, r0]
 800a59c:	18c0      	addlt	r0, r0, r3
 800a59e:	4770      	bx	lr

0800a5a0 <_init>:
 800a5a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a2:	bf00      	nop
 800a5a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5a6:	bc08      	pop	{r3}
 800a5a8:	469e      	mov	lr, r3
 800a5aa:	4770      	bx	lr

0800a5ac <_fini>:
 800a5ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5ae:	bf00      	nop
 800a5b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a5b2:	bc08      	pop	{r3}
 800a5b4:	469e      	mov	lr, r3
 800a5b6:	4770      	bx	lr
