
Keyboard_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074b4  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007648  08007648  00008648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076a8  080076a8  00009110  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080076a8  080076a8  000086a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080076b0  080076b0  00009110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076b0  080076b0  000086b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080076b4  080076b4  000086b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000110  20000000  080076b8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a90  20000110  080077c8  00009110  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ba0  080077c8  00009ba0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001175b  00000000  00000000  00009140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002e2c  00000000  00000000  0001a89b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e28  00000000  00000000  0001d6c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ab9  00000000  00000000  0001e4f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019112  00000000  00000000  0001efa9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000128d2  00000000  00000000  000380bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000947a5  00000000  00000000  0004a98d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000df132  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a00  00000000  00000000  000df178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  000e2b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000110 	.word	0x20000110
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007630 	.word	0x08007630

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000114 	.word	0x20000114
 80001d0:	08007630 	.word	0x08007630

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <set_mux_channel>:
#define S2_PIN GPIO_PIN_7
#define S3_PIN GPIO_PIN_6
#define S_GPIO_PORT GPIOB
char uart_buf[64];
extern USBD_HandleTypeDef hUsbDeviceFS;
void set_mux_channel(uint8_t channel) {
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	4603      	mov	r3, r0
 8000508:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(S_GPIO_PORT, S0_PIN, (channel & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800050a:	79fb      	ldrb	r3, [r7, #7]
 800050c:	f003 0301 	and.w	r3, r3, #1
 8000510:	b2db      	uxtb	r3, r3
 8000512:	461a      	mov	r2, r3
 8000514:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000518:	4815      	ldr	r0, [pc, #84]	@ (8000570 <set_mux_channel+0x70>)
 800051a:	f001 fa19 	bl	8001950 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(S_GPIO_PORT, S1_PIN, (channel & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800051e:	79fb      	ldrb	r3, [r7, #7]
 8000520:	105b      	asrs	r3, r3, #1
 8000522:	b2db      	uxtb	r3, r3
 8000524:	f003 0301 	and.w	r3, r3, #1
 8000528:	b2db      	uxtb	r3, r3
 800052a:	461a      	mov	r2, r3
 800052c:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000530:	480f      	ldr	r0, [pc, #60]	@ (8000570 <set_mux_channel+0x70>)
 8000532:	f001 fa0d 	bl	8001950 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(S_GPIO_PORT, S2_PIN, (channel & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	109b      	asrs	r3, r3, #2
 800053a:	b2db      	uxtb	r3, r3
 800053c:	f003 0301 	and.w	r3, r3, #1
 8000540:	b2db      	uxtb	r3, r3
 8000542:	461a      	mov	r2, r3
 8000544:	2180      	movs	r1, #128	@ 0x80
 8000546:	480a      	ldr	r0, [pc, #40]	@ (8000570 <set_mux_channel+0x70>)
 8000548:	f001 fa02 	bl	8001950 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(S_GPIO_PORT, S3_PIN, (channel & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800054c:	79fb      	ldrb	r3, [r7, #7]
 800054e:	10db      	asrs	r3, r3, #3
 8000550:	b2db      	uxtb	r3, r3
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	b2db      	uxtb	r3, r3
 8000558:	461a      	mov	r2, r3
 800055a:	2140      	movs	r1, #64	@ 0x40
 800055c:	4804      	ldr	r0, [pc, #16]	@ (8000570 <set_mux_channel+0x70>)
 800055e:	f001 f9f7 	bl	8001950 <HAL_GPIO_WritePin>
    HAL_Delay(1); // Short delay for settling
 8000562:	2001      	movs	r0, #1
 8000564:	f000 fb8c 	bl	8000c80 <HAL_Delay>
}
 8000568:	bf00      	nop
 800056a:	3708      	adds	r7, #8
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40020400 	.word	0x40020400

08000574 <read_adc_value>:

// Function to read ADC value
uint32_t read_adc_value() {
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8000578:	4806      	ldr	r0, [pc, #24]	@ (8000594 <read_adc_value+0x20>)
 800057a:	f000 fbe9 	bl	8000d50 <HAL_ADC_Start>
    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 800057e:	f04f 31ff 	mov.w	r1, #4294967295
 8000582:	4804      	ldr	r0, [pc, #16]	@ (8000594 <read_adc_value+0x20>)
 8000584:	f000 fc98 	bl	8000eb8 <HAL_ADC_PollForConversion>
    return HAL_ADC_GetValue(&hadc1);
 8000588:	4802      	ldr	r0, [pc, #8]	@ (8000594 <read_adc_value+0x20>)
 800058a:	f000 fd20 	bl	8000fce <HAL_ADC_GetValue>
 800058e:	4603      	mov	r3, r0
}
 8000590:	4618      	mov	r0, r3
 8000592:	bd80      	pop	{r7, pc}
 8000594:	2000012c 	.word	0x2000012c

08000598 <keyPressRelease>:

	}

}

void keyPressRelease(uint8_t MODIFIER, uint8_t KEYCODE){
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	460a      	mov	r2, r1
 80005a2:	71fb      	strb	r3, [r7, #7]
 80005a4:	4613      	mov	r3, r2
 80005a6:	71bb      	strb	r3, [r7, #6]

	 keyBoardHIDsub.KEYCODE1=KEYCODE;
 80005a8:	4a0b      	ldr	r2, [pc, #44]	@ (80005d8 <keyPressRelease+0x40>)
 80005aa:	79bb      	ldrb	r3, [r7, #6]
 80005ac:	7093      	strb	r3, [r2, #2]

	 USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 80005ae:	2208      	movs	r2, #8
 80005b0:	4909      	ldr	r1, [pc, #36]	@ (80005d8 <keyPressRelease+0x40>)
 80005b2:	480a      	ldr	r0, [pc, #40]	@ (80005dc <keyPressRelease+0x44>)
 80005b4:	f005 f840 	bl	8005638 <USBD_HID_SendReport>
	 HAL_Delay(15);
 80005b8:	200f      	movs	r0, #15
 80005ba:	f000 fb61 	bl	8000c80 <HAL_Delay>
	 keyBoardHIDsub.KEYCODE1=0x00;
 80005be:	4b06      	ldr	r3, [pc, #24]	@ (80005d8 <keyPressRelease+0x40>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	709a      	strb	r2, [r3, #2]
	 USBD_HID_SendReport(&hUsbDeviceFS,&keyBoardHIDsub,sizeof(keyBoardHIDsub));
 80005c4:	2208      	movs	r2, #8
 80005c6:	4904      	ldr	r1, [pc, #16]	@ (80005d8 <keyPressRelease+0x40>)
 80005c8:	4804      	ldr	r0, [pc, #16]	@ (80005dc <keyPressRelease+0x44>)
 80005ca:	f005 f835 	bl	8005638 <USBD_HID_SendReport>




}
 80005ce:	bf00      	nop
 80005d0:	3708      	adds	r7, #8
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	200001bc 	.word	0x200001bc
 80005dc:	200001cc 	.word	0x200001cc

080005e0 <send_adc_data_frame>:


// Format: "2345,3456,...,1023\n"
void send_adc_data_frame(void) {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
//    char uart_buf[128];
//    char *p = uart_buf;
    for (uint8_t i = 0; i < 16; i++) {
 80005e6:	2300      	movs	r3, #0
 80005e8:	71fb      	strb	r3, [r7, #7]
 80005ea:	e021      	b.n	8000630 <send_adc_data_frame+0x50>
        set_mux_channel(i);
 80005ec:	79fb      	ldrb	r3, [r7, #7]
 80005ee:	4618      	mov	r0, r3
 80005f0:	f7ff ff86 	bl	8000500 <set_mux_channel>
        uint32_t value = read_adc_value();
 80005f4:	f7ff ffbe 	bl	8000574 <read_adc_value>
 80005f8:	6038      	str	r0, [r7, #0]
        if ((i==2) && (value < 2045)){
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d108      	bne.n	8000612 <send_adc_data_frame+0x32>
 8000600:	683b      	ldr	r3, [r7, #0]
 8000602:	f240 72fc 	movw	r2, #2044	@ 0x7fc
 8000606:	4293      	cmp	r3, r2
 8000608:	d803      	bhi.n	8000612 <send_adc_data_frame+0x32>

        	keyPressRelease(0x00,0x04);
 800060a:	2104      	movs	r1, #4
 800060c:	2000      	movs	r0, #0
 800060e:	f7ff ffc3 	bl	8000598 <keyPressRelease>
        }
        if ((i==8) && (value < 1900)){
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2b08      	cmp	r3, #8
 8000616:	d108      	bne.n	800062a <send_adc_data_frame+0x4a>
 8000618:	683b      	ldr	r3, [r7, #0]
 800061a:	f240 726b 	movw	r2, #1899	@ 0x76b
 800061e:	4293      	cmp	r3, r2
 8000620:	d803      	bhi.n	800062a <send_adc_data_frame+0x4a>

        	keyPressRelease(0x00,0x05);
 8000622:	2105      	movs	r1, #5
 8000624:	2000      	movs	r0, #0
 8000626:	f7ff ffb7 	bl	8000598 <keyPressRelease>
    for (uint8_t i = 0; i < 16; i++) {
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	3301      	adds	r3, #1
 800062e:	71fb      	strb	r3, [r7, #7]
 8000630:	79fb      	ldrb	r3, [r7, #7]
 8000632:	2b0f      	cmp	r3, #15
 8000634:	d9da      	bls.n	80005ec <send_adc_data_frame+0xc>

//        p += sprintf(p, "%lu,", value);
    }
//    *(p - 1) = '\n';  // replace last comma with newline
//    CDC_Transmit_FS((uint8_t*)uart_buf, strlen(uart_buf));
}
 8000636:	bf00      	nop
 8000638:	bf00      	nop
 800063a:	3708      	adds	r7, #8
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}

08000640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000644:	f000 faaa 	bl	8000b9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000648:	f000 f818 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064c:	f000 f8fe 	bl	800084c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000650:	f006 fb94 	bl	8006d7c <MX_USB_DEVICE_Init>
  MX_ADC1_Init();
 8000654:	f000 f87e 	bl	8000754 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000658:	f000 f8ce 	bl	80007f8 <MX_USART2_UART_Init>
//	              uint32_t value = read_adc_value();
//	              snprintf(uart_buf, sizeof(uart_buf), "Channel %2d: %4lu\r\n", i, value);
//	              CDC_Transmit_FS((uint8_t*)uart_buf, strlen(uart_buf));
//
//	          }
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 800065c:	2201      	movs	r2, #1
 800065e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000662:	4805      	ldr	r0, [pc, #20]	@ (8000678 <main+0x38>)
 8000664:	f001 f974 	bl	8001950 <HAL_GPIO_WritePin>

	  send_adc_data_frame();
 8000668:	f7ff ffba 	bl	80005e0 <send_adc_data_frame>
	  HAL_Delay(1);
 800066c:	2001      	movs	r0, #1
 800066e:	f000 fb07 	bl	8000c80 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8000672:	bf00      	nop
 8000674:	e7f2      	b.n	800065c <main+0x1c>
 8000676:	bf00      	nop
 8000678:	40020800 	.word	0x40020800

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	@ 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	@ 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f006 ffa4 	bl	80075d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b29      	ldr	r3, [pc, #164]	@ (800074c <SystemClock_Config+0xd0>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a8:	4a28      	ldr	r2, [pc, #160]	@ (800074c <SystemClock_Config+0xd0>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b0:	4b26      	ldr	r3, [pc, #152]	@ (800074c <SystemClock_Config+0xd0>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b23      	ldr	r3, [pc, #140]	@ (8000750 <SystemClock_Config+0xd4>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80006c8:	4a21      	ldr	r2, [pc, #132]	@ (8000750 <SystemClock_Config+0xd4>)
 80006ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80006ce:	6013      	str	r3, [r2, #0]
 80006d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000750 <SystemClock_Config+0xd4>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d8:	607b      	str	r3, [r7, #4]
 80006da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006dc:	2301      	movs	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80006e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e6:	2302      	movs	r3, #2
 80006e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80006f0:	2319      	movs	r3, #25
 80006f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80006f8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006fa:	2304      	movs	r3, #4
 80006fc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006fe:	2307      	movs	r3, #7
 8000700:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 0320 	add.w	r3, r7, #32
 8000706:	4618      	mov	r0, r3
 8000708:	f002 fb76 	bl	8002df8 <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000712:	f000 f913 	bl	800093c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2302      	movs	r3, #2
 800071c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000726:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072c:	f107 030c 	add.w	r3, r7, #12
 8000730:	2102      	movs	r1, #2
 8000732:	4618      	mov	r0, r3
 8000734:	f002 fdd8 	bl	80032e8 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800073e:	f000 f8fd 	bl	800093c <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	@ 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075a:	463b      	mov	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000766:	4b21      	ldr	r3, [pc, #132]	@ (80007ec <MX_ADC1_Init+0x98>)
 8000768:	4a21      	ldr	r2, [pc, #132]	@ (80007f0 <MX_ADC1_Init+0x9c>)
 800076a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800076c:	4b1f      	ldr	r3, [pc, #124]	@ (80007ec <MX_ADC1_Init+0x98>)
 800076e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8000772:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000774:	4b1d      	ldr	r3, [pc, #116]	@ (80007ec <MX_ADC1_Init+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800077a:	4b1c      	ldr	r3, [pc, #112]	@ (80007ec <MX_ADC1_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000780:	4b1a      	ldr	r3, [pc, #104]	@ (80007ec <MX_ADC1_Init+0x98>)
 8000782:	2200      	movs	r2, #0
 8000784:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000786:	4b19      	ldr	r3, [pc, #100]	@ (80007ec <MX_ADC1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800078e:	4b17      	ldr	r3, [pc, #92]	@ (80007ec <MX_ADC1_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000794:	4b15      	ldr	r3, [pc, #84]	@ (80007ec <MX_ADC1_Init+0x98>)
 8000796:	4a17      	ldr	r2, [pc, #92]	@ (80007f4 <MX_ADC1_Init+0xa0>)
 8000798:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079a:	4b14      	ldr	r3, [pc, #80]	@ (80007ec <MX_ADC1_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007a0:	4b12      	ldr	r3, [pc, #72]	@ (80007ec <MX_ADC1_Init+0x98>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007a6:	4b11      	ldr	r3, [pc, #68]	@ (80007ec <MX_ADC1_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ae:	4b0f      	ldr	r3, [pc, #60]	@ (80007ec <MX_ADC1_Init+0x98>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007b4:	480d      	ldr	r0, [pc, #52]	@ (80007ec <MX_ADC1_Init+0x98>)
 80007b6:	f000 fa87 	bl	8000cc8 <HAL_ADC_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007c0:	f000 f8bc 	bl	800093c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80007c4:	2305      	movs	r3, #5
 80007c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007c8:	2301      	movs	r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007cc:	2300      	movs	r3, #0
 80007ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d0:	463b      	mov	r3, r7
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	@ (80007ec <MX_ADC1_Init+0x98>)
 80007d6:	f000 fc07 	bl	8000fe8 <HAL_ADC_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007e0:	f000 f8ac 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000012c 	.word	0x2000012c
 80007f0:	40012000 	.word	0x40012000
 80007f4:	0f000001 	.word	0x0f000001

080007f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007fc:	4b11      	ldr	r3, [pc, #68]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 80007fe:	4a12      	ldr	r2, [pc, #72]	@ (8000848 <MX_USART2_UART_Init+0x50>)
 8000800:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000802:	4b10      	ldr	r3, [pc, #64]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 8000804:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000808:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800080a:	4b0e      	ldr	r3, [pc, #56]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000810:	4b0c      	ldr	r3, [pc, #48]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000816:	4b0b      	ldr	r3, [pc, #44]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800081c:	4b09      	ldr	r3, [pc, #36]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 800081e:	220c      	movs	r2, #12
 8000820:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000822:	4b08      	ldr	r3, [pc, #32]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 8000824:	2200      	movs	r2, #0
 8000826:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000828:	4b06      	ldr	r3, [pc, #24]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 800082a:	2200      	movs	r2, #0
 800082c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082e:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_USART2_UART_Init+0x4c>)
 8000830:	f002 ff3a 	bl	80036a8 <HAL_UART_Init>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800083a:	f000 f87f 	bl	800093c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083e:	bf00      	nop
 8000840:	bd80      	pop	{r7, pc}
 8000842:	bf00      	nop
 8000844:	20000174 	.word	0x20000174
 8000848:	40004400 	.word	0x40004400

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	@ 0x28
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b32      	ldr	r3, [pc, #200]	@ (8000930 <MX_GPIO_Init+0xe4>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a31      	ldr	r2, [pc, #196]	@ (8000930 <MX_GPIO_Init+0xe4>)
 800086c:	f043 0304 	orr.w	r3, r3, #4
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b2f      	ldr	r3, [pc, #188]	@ (8000930 <MX_GPIO_Init+0xe4>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0304 	and.w	r3, r3, #4
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b2b      	ldr	r3, [pc, #172]	@ (8000930 <MX_GPIO_Init+0xe4>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a2a      	ldr	r2, [pc, #168]	@ (8000930 <MX_GPIO_Init+0xe4>)
 8000888:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b28      	ldr	r3, [pc, #160]	@ (8000930 <MX_GPIO_Init+0xe4>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b24      	ldr	r3, [pc, #144]	@ (8000930 <MX_GPIO_Init+0xe4>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	4a23      	ldr	r2, [pc, #140]	@ (8000930 <MX_GPIO_Init+0xe4>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008aa:	4b21      	ldr	r3, [pc, #132]	@ (8000930 <MX_GPIO_Init+0xe4>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b1d      	ldr	r3, [pc, #116]	@ (8000930 <MX_GPIO_Init+0xe4>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	4a1c      	ldr	r2, [pc, #112]	@ (8000930 <MX_GPIO_Init+0xe4>)
 80008c0:	f043 0302 	orr.w	r3, r3, #2
 80008c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000930 <MX_GPIO_Init+0xe4>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ca:	f003 0302 	and.w	r3, r3, #2
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008d8:	4816      	ldr	r0, [pc, #88]	@ (8000934 <MX_GPIO_Init+0xe8>)
 80008da:	f001 f839 	bl	8001950 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 80008de:	2200      	movs	r2, #0
 80008e0:	f24f 31c0 	movw	r1, #62400	@ 0xf3c0
 80008e4:	4814      	ldr	r0, [pc, #80]	@ (8000938 <MX_GPIO_Init+0xec>)
 80008e6:	f001 f833 	bl	8001950 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008ea:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008fc:	f107 0314 	add.w	r3, r7, #20
 8000900:	4619      	mov	r1, r3
 8000902:	480c      	ldr	r0, [pc, #48]	@ (8000934 <MX_GPIO_Init+0xe8>)
 8000904:	f000 fea0 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 8000908:	f24f 33c0 	movw	r3, #62400	@ 0xf3c0
 800090c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800090e:	2301      	movs	r3, #1
 8000910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000916:	2300      	movs	r3, #0
 8000918:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091a:	f107 0314 	add.w	r3, r7, #20
 800091e:	4619      	mov	r1, r3
 8000920:	4805      	ldr	r0, [pc, #20]	@ (8000938 <MX_GPIO_Init+0xec>)
 8000922:	f000 fe91 	bl	8001648 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000926:	bf00      	nop
 8000928:	3728      	adds	r7, #40	@ 0x28
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40020800 	.word	0x40020800
 8000938:	40020400 	.word	0x40020400

0800093c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000940:	b672      	cpsid	i
}
 8000942:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000944:	bf00      	nop
 8000946:	e7fd      	b.n	8000944 <Error_Handler+0x8>

08000948 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000948:	b480      	push	{r7}
 800094a:	b083      	sub	sp, #12
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	607b      	str	r3, [r7, #4]
 8000952:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <HAL_MspInit+0x4c>)
 8000954:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000956:	4a0f      	ldr	r2, [pc, #60]	@ (8000994 <HAL_MspInit+0x4c>)
 8000958:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800095c:	6453      	str	r3, [r2, #68]	@ 0x44
 800095e:	4b0d      	ldr	r3, [pc, #52]	@ (8000994 <HAL_MspInit+0x4c>)
 8000960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000962:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000966:	607b      	str	r3, [r7, #4]
 8000968:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	603b      	str	r3, [r7, #0]
 800096e:	4b09      	ldr	r3, [pc, #36]	@ (8000994 <HAL_MspInit+0x4c>)
 8000970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000972:	4a08      	ldr	r2, [pc, #32]	@ (8000994 <HAL_MspInit+0x4c>)
 8000974:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000978:	6413      	str	r3, [r2, #64]	@ 0x40
 800097a:	4b06      	ldr	r3, [pc, #24]	@ (8000994 <HAL_MspInit+0x4c>)
 800097c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800097e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000982:	603b      	str	r3, [r7, #0]
 8000984:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr
 8000992:	bf00      	nop
 8000994:	40023800 	.word	0x40023800

08000998 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	@ 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a17      	ldr	r2, [pc, #92]	@ (8000a14 <HAL_ADC_MspInit+0x7c>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d127      	bne.n	8000a0a <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b16      	ldr	r3, [pc, #88]	@ (8000a18 <HAL_ADC_MspInit+0x80>)
 80009c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c2:	4a15      	ldr	r2, [pc, #84]	@ (8000a18 <HAL_ADC_MspInit+0x80>)
 80009c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ca:	4b13      	ldr	r3, [pc, #76]	@ (8000a18 <HAL_ADC_MspInit+0x80>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <HAL_ADC_MspInit+0x80>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a0e      	ldr	r2, [pc, #56]	@ (8000a18 <HAL_ADC_MspInit+0x80>)
 80009e0:	f043 0301 	orr.w	r3, r3, #1
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <HAL_ADC_MspInit+0x80>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0301 	and.w	r3, r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80009f2:	2320      	movs	r3, #32
 80009f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80009f6:	2303      	movs	r3, #3
 80009f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009fe:	f107 0314 	add.w	r3, r7, #20
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <HAL_ADC_MspInit+0x84>)
 8000a06:	f000 fe1f 	bl	8001648 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000a0a:	bf00      	nop
 8000a0c:	3728      	adds	r7, #40	@ 0x28
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40012000 	.word	0x40012000
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020000 	.word	0x40020000

08000a20 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b08a      	sub	sp, #40	@ 0x28
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a28:	f107 0314 	add.w	r3, r7, #20
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	601a      	str	r2, [r3, #0]
 8000a30:	605a      	str	r2, [r3, #4]
 8000a32:	609a      	str	r2, [r3, #8]
 8000a34:	60da      	str	r2, [r3, #12]
 8000a36:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a19      	ldr	r2, [pc, #100]	@ (8000aa4 <HAL_UART_MspInit+0x84>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d12b      	bne.n	8000a9a <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	613b      	str	r3, [r7, #16]
 8000a46:	4b18      	ldr	r3, [pc, #96]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4a:	4a17      	ldr	r2, [pc, #92]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a50:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a52:	4b15      	ldr	r3, [pc, #84]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000a5a:	613b      	str	r3, [r7, #16]
 8000a5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	60fb      	str	r3, [r7, #12]
 8000a62:	4b11      	ldr	r3, [pc, #68]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a66:	4a10      	ldr	r2, [pc, #64]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a68:	f043 0301 	orr.w	r3, r3, #1
 8000a6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000aa8 <HAL_UART_MspInit+0x88>)
 8000a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a72:	f003 0301 	and.w	r3, r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
 8000a78:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000a7a:	230c      	movs	r3, #12
 8000a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a8a:	2307      	movs	r3, #7
 8000a8c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	@ (8000aac <HAL_UART_MspInit+0x8c>)
 8000a96:	f000 fdd7 	bl	8001648 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	@ 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40004400 	.word	0x40004400
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020000 	.word	0x40020000

08000ab0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab4:	bf00      	nop
 8000ab6:	e7fd      	b.n	8000ab4 <NMI_Handler+0x4>

08000ab8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abc:	bf00      	nop
 8000abe:	e7fd      	b.n	8000abc <HardFault_Handler+0x4>

08000ac0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ac4:	bf00      	nop
 8000ac6:	e7fd      	b.n	8000ac4 <MemManage_Handler+0x4>

08000ac8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <BusFault_Handler+0x4>

08000ad0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <UsageFault_Handler+0x4>

08000ad8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr

08000b02 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b06:	f000 f89b 	bl	8000c40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
	...

08000b10 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b14:	4802      	ldr	r0, [pc, #8]	@ (8000b20 <OTG_FS_IRQHandler+0x10>)
 8000b16:	f001 f878 	bl	8001c0a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b1a:	bf00      	nop
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	200006a8 	.word	0x200006a8

08000b24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <SystemInit+0x20>)
 8000b2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b2e:	4a05      	ldr	r2, [pc, #20]	@ (8000b44 <SystemInit+0x20>)
 8000b30:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b34:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b38:	bf00      	nop
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b48:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b80 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b4c:	f7ff ffea 	bl	8000b24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b50:	480c      	ldr	r0, [pc, #48]	@ (8000b84 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b52:	490d      	ldr	r1, [pc, #52]	@ (8000b88 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b54:	4a0d      	ldr	r2, [pc, #52]	@ (8000b8c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a0a      	ldr	r2, [pc, #40]	@ (8000b90 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b68:	4c0a      	ldr	r4, [pc, #40]	@ (8000b94 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b76:	f006 fd37 	bl	80075e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b7a:	f7ff fd61 	bl	8000640 <main>
  bx  lr    
 8000b7e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b80:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000b84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b88:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8000b8c:	080076b8 	.word	0x080076b8
  ldr r2, =_sbss
 8000b90:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 8000b94:	20000ba0 	.word	0x20000ba0

08000b98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b98:	e7fe      	b.n	8000b98 <ADC_IRQHandler>
	...

08000b9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ba0:	4b0e      	ldr	r3, [pc, #56]	@ (8000bdc <HAL_Init+0x40>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	@ (8000bdc <HAL_Init+0x40>)
 8000ba6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000baa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bac:	4b0b      	ldr	r3, [pc, #44]	@ (8000bdc <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bdc <HAL_Init+0x40>)
 8000bb2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bb8:	4b08      	ldr	r3, [pc, #32]	@ (8000bdc <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a07      	ldr	r2, [pc, #28]	@ (8000bdc <HAL_Init+0x40>)
 8000bbe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bc4:	2003      	movs	r0, #3
 8000bc6:	f000 fcfd 	bl	80015c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bca:	200f      	movs	r0, #15
 8000bcc:	f000 f808 	bl	8000be0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bd0:	f7ff feba 	bl	8000948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bd4:	2300      	movs	r3, #0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023c00 	.word	0x40023c00

08000be0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000be8:	4b12      	ldr	r3, [pc, #72]	@ (8000c34 <HAL_InitTick+0x54>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b12      	ldr	r3, [pc, #72]	@ (8000c38 <HAL_InitTick+0x58>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bf6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f000 fd15 	bl	800162e <HAL_SYSTICK_Config>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c0a:	2301      	movs	r3, #1
 8000c0c:	e00e      	b.n	8000c2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2b0f      	cmp	r3, #15
 8000c12:	d80a      	bhi.n	8000c2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c14:	2200      	movs	r2, #0
 8000c16:	6879      	ldr	r1, [r7, #4]
 8000c18:	f04f 30ff 	mov.w	r0, #4294967295
 8000c1c:	f000 fcdd 	bl	80015da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c20:	4a06      	ldr	r2, [pc, #24]	@ (8000c3c <HAL_InitTick+0x5c>)
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c26:	2300      	movs	r3, #0
 8000c28:	e000      	b.n	8000c2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c2a:	2301      	movs	r3, #1
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	3708      	adds	r7, #8
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	20000000 	.word	0x20000000
 8000c38:	20000008 	.word	0x20000008
 8000c3c:	20000004 	.word	0x20000004

08000c40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c44:	4b06      	ldr	r3, [pc, #24]	@ (8000c60 <HAL_IncTick+0x20>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_IncTick+0x24>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	4a04      	ldr	r2, [pc, #16]	@ (8000c64 <HAL_IncTick+0x24>)
 8000c52:	6013      	str	r3, [r2, #0]
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	20000008 	.word	0x20000008
 8000c64:	200001c4 	.word	0x200001c4

08000c68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c6c:	4b03      	ldr	r3, [pc, #12]	@ (8000c7c <HAL_GetTick+0x14>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	200001c4 	.word	0x200001c4

08000c80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b084      	sub	sp, #16
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c88:	f7ff ffee 	bl	8000c68 <HAL_GetTick>
 8000c8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c98:	d005      	beq.n	8000ca6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8000cc4 <HAL_Delay+0x44>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000ca6:	bf00      	nop
 8000ca8:	f7ff ffde 	bl	8000c68 <HAL_GetTick>
 8000cac:	4602      	mov	r2, r0
 8000cae:	68bb      	ldr	r3, [r7, #8]
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	68fa      	ldr	r2, [r7, #12]
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d8f7      	bhi.n	8000ca8 <HAL_Delay+0x28>
  {
  }
}
 8000cb8:	bf00      	nop
 8000cba:	bf00      	nop
 8000cbc:	3710      	adds	r7, #16
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008

08000cc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b084      	sub	sp, #16
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d101      	bne.n	8000cde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	e033      	b.n	8000d46 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d109      	bne.n	8000cfa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ce6:	6878      	ldr	r0, [r7, #4]
 8000ce8:	f7ff fe56 	bl	8000998 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	2200      	movs	r2, #0
 8000cf0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cfe:	f003 0310 	and.w	r3, r3, #16
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d118      	bne.n	8000d38 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d0e:	f023 0302 	bic.w	r3, r3, #2
 8000d12:	f043 0202 	orr.w	r2, r3, #2
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f000 fa86 	bl	800122c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2200      	movs	r2, #0
 8000d24:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d2a:	f023 0303 	bic.w	r3, r3, #3
 8000d2e:	f043 0201 	orr.w	r2, r3, #1
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d36:	e001      	b.n	8000d3c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	2200      	movs	r2, #0
 8000d40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d44:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	3710      	adds	r7, #16
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
	...

08000d50 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d101      	bne.n	8000d6a <HAL_ADC_Start+0x1a>
 8000d66:	2302      	movs	r3, #2
 8000d68:	e097      	b.n	8000e9a <HAL_ADC_Start+0x14a>
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	689b      	ldr	r3, [r3, #8]
 8000d78:	f003 0301 	and.w	r3, r3, #1
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d018      	beq.n	8000db2 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	689a      	ldr	r2, [r3, #8]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f042 0201 	orr.w	r2, r2, #1
 8000d8e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000d90:	4b45      	ldr	r3, [pc, #276]	@ (8000ea8 <HAL_ADC_Start+0x158>)
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a45      	ldr	r2, [pc, #276]	@ (8000eac <HAL_ADC_Start+0x15c>)
 8000d96:	fba2 2303 	umull	r2, r3, r2, r3
 8000d9a:	0c9a      	lsrs	r2, r3, #18
 8000d9c:	4613      	mov	r3, r2
 8000d9e:	005b      	lsls	r3, r3, #1
 8000da0:	4413      	add	r3, r2
 8000da2:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000da4:	e002      	b.n	8000dac <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000da6:	68bb      	ldr	r3, [r7, #8]
 8000da8:	3b01      	subs	r3, #1
 8000daa:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d1f9      	bne.n	8000da6 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	f003 0301 	and.w	r3, r3, #1
 8000dbc:	2b01      	cmp	r3, #1
 8000dbe:	d15f      	bne.n	8000e80 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc4:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000dc8:	f023 0301 	bic.w	r3, r3, #1
 8000dcc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d007      	beq.n	8000df2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000dea:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000df6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000dfa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000dfe:	d106      	bne.n	8000e0e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e04:	f023 0206 	bic.w	r2, r3, #6
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	645a      	str	r2, [r3, #68]	@ 0x44
 8000e0c:	e002      	b.n	8000e14 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	2200      	movs	r2, #0
 8000e12:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e1c:	4b24      	ldr	r3, [pc, #144]	@ (8000eb0 <HAL_ADC_Start+0x160>)
 8000e1e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000e28:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	f003 031f 	and.w	r3, r3, #31
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d10f      	bne.n	8000e56 <HAL_ADC_Start+0x106>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	689b      	ldr	r3, [r3, #8]
 8000e3c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d129      	bne.n	8000e98 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	689a      	ldr	r2, [r3, #8]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	e020      	b.n	8000e98 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4a16      	ldr	r2, [pc, #88]	@ (8000eb4 <HAL_ADC_Start+0x164>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d11b      	bne.n	8000e98 <HAL_ADC_Start+0x148>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d114      	bne.n	8000e98 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	689a      	ldr	r2, [r3, #8]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000e7c:	609a      	str	r2, [r3, #8]
 8000e7e:	e00b      	b.n	8000e98 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e84:	f043 0210 	orr.w	r2, r3, #16
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e90:	f043 0201 	orr.w	r2, r3, #1
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3714      	adds	r7, #20
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	431bde83 	.word	0x431bde83
 8000eb0:	40012300 	.word	0x40012300
 8000eb4:	40012000 	.word	0x40012000

08000eb8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
 8000ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	689b      	ldr	r3, [r3, #8]
 8000ecc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ed0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ed4:	d113      	bne.n	8000efe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	689b      	ldr	r3, [r3, #8]
 8000edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000ee0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ee4:	d10b      	bne.n	8000efe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eea:	f043 0220 	orr.w	r2, r3, #32
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8000efa:	2301      	movs	r3, #1
 8000efc:	e063      	b.n	8000fc6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8000efe:	f7ff feb3 	bl	8000c68 <HAL_GetTick>
 8000f02:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f04:	e021      	b.n	8000f4a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f0c:	d01d      	beq.n	8000f4a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d007      	beq.n	8000f24 <HAL_ADC_PollForConversion+0x6c>
 8000f14:	f7ff fea8 	bl	8000c68 <HAL_GetTick>
 8000f18:	4602      	mov	r2, r0
 8000f1a:	68fb      	ldr	r3, [r7, #12]
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	683a      	ldr	r2, [r7, #0]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	d212      	bcs.n	8000f4a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f003 0302 	and.w	r3, r3, #2
 8000f2e:	2b02      	cmp	r3, #2
 8000f30:	d00b      	beq.n	8000f4a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f36:	f043 0204 	orr.w	r2, r3, #4
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	2200      	movs	r2, #0
 8000f42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8000f46:	2303      	movs	r3, #3
 8000f48:	e03d      	b.n	8000fc6 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f003 0302 	and.w	r3, r3, #2
 8000f54:	2b02      	cmp	r3, #2
 8000f56:	d1d6      	bne.n	8000f06 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f06f 0212 	mvn.w	r2, #18
 8000f60:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f66:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	689b      	ldr	r3, [r3, #8]
 8000f74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d123      	bne.n	8000fc4 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d11f      	bne.n	8000fc4 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f8a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d006      	beq.n	8000fa0 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d111      	bne.n	8000fc4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d105      	bne.n	8000fc4 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbc:	f043 0201 	orr.w	r2, r3, #1
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3710      	adds	r7, #16
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}

08000fce <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8000fce:	b480      	push	{r7}
 8000fd0:	b083      	sub	sp, #12
 8000fd2:	af00      	add	r7, sp, #0
 8000fd4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	370c      	adds	r7, #12
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe6:	4770      	bx	lr

08000fe8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000ffc:	2b01      	cmp	r3, #1
 8000ffe:	d101      	bne.n	8001004 <HAL_ADC_ConfigChannel+0x1c>
 8001000:	2302      	movs	r3, #2
 8001002:	e105      	b.n	8001210 <HAL_ADC_ConfigChannel+0x228>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	2201      	movs	r2, #1
 8001008:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	2b09      	cmp	r3, #9
 8001012:	d925      	bls.n	8001060 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	68d9      	ldr	r1, [r3, #12]
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	b29b      	uxth	r3, r3
 8001020:	461a      	mov	r2, r3
 8001022:	4613      	mov	r3, r2
 8001024:	005b      	lsls	r3, r3, #1
 8001026:	4413      	add	r3, r2
 8001028:	3b1e      	subs	r3, #30
 800102a:	2207      	movs	r2, #7
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43da      	mvns	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	400a      	ands	r2, r1
 8001038:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	68d9      	ldr	r1, [r3, #12]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	689a      	ldr	r2, [r3, #8]
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	b29b      	uxth	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	4603      	mov	r3, r0
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	4403      	add	r3, r0
 8001052:	3b1e      	subs	r3, #30
 8001054:	409a      	lsls	r2, r3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	430a      	orrs	r2, r1
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	e022      	b.n	80010a6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6919      	ldr	r1, [r3, #16]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	b29b      	uxth	r3, r3
 800106c:	461a      	mov	r2, r3
 800106e:	4613      	mov	r3, r2
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	4413      	add	r3, r2
 8001074:	2207      	movs	r2, #7
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43da      	mvns	r2, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	400a      	ands	r2, r1
 8001082:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	6919      	ldr	r1, [r3, #16]
 800108a:	683b      	ldr	r3, [r7, #0]
 800108c:	689a      	ldr	r2, [r3, #8]
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	b29b      	uxth	r3, r3
 8001094:	4618      	mov	r0, r3
 8001096:	4603      	mov	r3, r0
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	4403      	add	r3, r0
 800109c:	409a      	lsls	r2, r3
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	430a      	orrs	r2, r1
 80010a4:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	2b06      	cmp	r3, #6
 80010ac:	d824      	bhi.n	80010f8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685a      	ldr	r2, [r3, #4]
 80010b8:	4613      	mov	r3, r2
 80010ba:	009b      	lsls	r3, r3, #2
 80010bc:	4413      	add	r3, r2
 80010be:	3b05      	subs	r3, #5
 80010c0:	221f      	movs	r2, #31
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	43da      	mvns	r2, r3
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	400a      	ands	r2, r1
 80010ce:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	b29b      	uxth	r3, r3
 80010dc:	4618      	mov	r0, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	4613      	mov	r3, r2
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	4413      	add	r3, r2
 80010e8:	3b05      	subs	r3, #5
 80010ea:	fa00 f203 	lsl.w	r2, r0, r3
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	430a      	orrs	r2, r1
 80010f4:	635a      	str	r2, [r3, #52]	@ 0x34
 80010f6:	e04c      	b.n	8001192 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b0c      	cmp	r3, #12
 80010fe:	d824      	bhi.n	800114a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	685a      	ldr	r2, [r3, #4]
 800110a:	4613      	mov	r3, r2
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	4413      	add	r3, r2
 8001110:	3b23      	subs	r3, #35	@ 0x23
 8001112:	221f      	movs	r2, #31
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43da      	mvns	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	400a      	ands	r2, r1
 8001120:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	b29b      	uxth	r3, r3
 800112e:	4618      	mov	r0, r3
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685a      	ldr	r2, [r3, #4]
 8001134:	4613      	mov	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	4413      	add	r3, r2
 800113a:	3b23      	subs	r3, #35	@ 0x23
 800113c:	fa00 f203 	lsl.w	r2, r0, r3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	430a      	orrs	r2, r1
 8001146:	631a      	str	r2, [r3, #48]	@ 0x30
 8001148:	e023      	b.n	8001192 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	4613      	mov	r3, r2
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	3b41      	subs	r3, #65	@ 0x41
 800115c:	221f      	movs	r2, #31
 800115e:	fa02 f303 	lsl.w	r3, r2, r3
 8001162:	43da      	mvns	r2, r3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	400a      	ands	r2, r1
 800116a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	b29b      	uxth	r3, r3
 8001178:	4618      	mov	r0, r3
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	685a      	ldr	r2, [r3, #4]
 800117e:	4613      	mov	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	4413      	add	r3, r2
 8001184:	3b41      	subs	r3, #65	@ 0x41
 8001186:	fa00 f203 	lsl.w	r2, r0, r3
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	430a      	orrs	r2, r1
 8001190:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001192:	4b22      	ldr	r3, [pc, #136]	@ (800121c <HAL_ADC_ConfigChannel+0x234>)
 8001194:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a21      	ldr	r2, [pc, #132]	@ (8001220 <HAL_ADC_ConfigChannel+0x238>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d109      	bne.n	80011b4 <HAL_ADC_ConfigChannel+0x1cc>
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2b12      	cmp	r3, #18
 80011a6:	d105      	bne.n	80011b4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a19      	ldr	r2, [pc, #100]	@ (8001220 <HAL_ADC_ConfigChannel+0x238>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d123      	bne.n	8001206 <HAL_ADC_ConfigChannel+0x21e>
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	2b10      	cmp	r3, #16
 80011c4:	d003      	beq.n	80011ce <HAL_ADC_ConfigChannel+0x1e6>
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b11      	cmp	r3, #17
 80011cc:	d11b      	bne.n	8001206 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b10      	cmp	r3, #16
 80011e0:	d111      	bne.n	8001206 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011e2:	4b10      	ldr	r3, [pc, #64]	@ (8001224 <HAL_ADC_ConfigChannel+0x23c>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a10      	ldr	r2, [pc, #64]	@ (8001228 <HAL_ADC_ConfigChannel+0x240>)
 80011e8:	fba2 2303 	umull	r2, r3, r2, r3
 80011ec:	0c9a      	lsrs	r2, r3, #18
 80011ee:	4613      	mov	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80011f8:	e002      	b.n	8001200 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	3b01      	subs	r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d1f9      	bne.n	80011fa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2200      	movs	r2, #0
 800120a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	40012300 	.word	0x40012300
 8001220:	40012000 	.word	0x40012000
 8001224:	20000000 	.word	0x20000000
 8001228:	431bde83 	.word	0x431bde83

0800122c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001234:	4b79      	ldr	r3, [pc, #484]	@ (800141c <ADC_Init+0x1f0>)
 8001236:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	685a      	ldr	r2, [r3, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	431a      	orrs	r2, r3
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	685a      	ldr	r2, [r3, #4]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001260:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6859      	ldr	r1, [r3, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
 800126c:	021a      	lsls	r2, r3, #8
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001284:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6859      	ldr	r1, [r3, #4]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	430a      	orrs	r2, r1
 8001296:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80012a6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	6899      	ldr	r1, [r3, #8]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	68da      	ldr	r2, [r3, #12]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	430a      	orrs	r2, r1
 80012b8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012be:	4a58      	ldr	r2, [pc, #352]	@ (8001420 <ADC_Init+0x1f4>)
 80012c0:	4293      	cmp	r3, r2
 80012c2:	d022      	beq.n	800130a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80012d2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	6899      	ldr	r1, [r3, #8]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	430a      	orrs	r2, r1
 80012e4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	689a      	ldr	r2, [r3, #8]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80012f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	6899      	ldr	r1, [r3, #8]
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	430a      	orrs	r2, r1
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	e00f      	b.n	800132a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001318:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	689a      	ldr	r2, [r3, #8]
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001328:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	689a      	ldr	r2, [r3, #8]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f022 0202 	bic.w	r2, r2, #2
 8001338:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6899      	ldr	r1, [r3, #8]
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	7e1b      	ldrb	r3, [r3, #24]
 8001344:	005a      	lsls	r2, r3, #1
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d01b      	beq.n	8001390 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	685a      	ldr	r2, [r3, #4]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001366:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001376:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	6859      	ldr	r1, [r3, #4]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001382:	3b01      	subs	r3, #1
 8001384:	035a      	lsls	r2, r3, #13
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	430a      	orrs	r2, r1
 800138c:	605a      	str	r2, [r3, #4]
 800138e:	e007      	b.n	80013a0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	685a      	ldr	r2, [r3, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800139e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80013ae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	69db      	ldr	r3, [r3, #28]
 80013ba:	3b01      	subs	r3, #1
 80013bc:	051a      	lsls	r2, r3, #20
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	430a      	orrs	r2, r1
 80013c4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689a      	ldr	r2, [r3, #8]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80013d4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	6899      	ldr	r1, [r3, #8]
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80013e2:	025a      	lsls	r2, r3, #9
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	430a      	orrs	r2, r1
 80013ea:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80013fa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	6899      	ldr	r1, [r3, #8]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	029a      	lsls	r2, r3, #10
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	430a      	orrs	r2, r1
 800140e:	609a      	str	r2, [r3, #8]
}
 8001410:	bf00      	nop
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr
 800141c:	40012300 	.word	0x40012300
 8001420:	0f000001 	.word	0x0f000001

08001424 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001434:	4b0c      	ldr	r3, [pc, #48]	@ (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001440:	4013      	ands	r3, r2
 8001442:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800144c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001450:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001454:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001456:	4a04      	ldr	r2, [pc, #16]	@ (8001468 <__NVIC_SetPriorityGrouping+0x44>)
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	60d3      	str	r3, [r2, #12]
}
 800145c:	bf00      	nop
 800145e:	3714      	adds	r7, #20
 8001460:	46bd      	mov	sp, r7
 8001462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001466:	4770      	bx	lr
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001470:	4b04      	ldr	r3, [pc, #16]	@ (8001484 <__NVIC_GetPriorityGrouping+0x18>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	0a1b      	lsrs	r3, r3, #8
 8001476:	f003 0307 	and.w	r3, r3, #7
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	e000ed00 	.word	0xe000ed00

08001488 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001492:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001496:	2b00      	cmp	r3, #0
 8001498:	db0b      	blt.n	80014b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800149a:	79fb      	ldrb	r3, [r7, #7]
 800149c:	f003 021f 	and.w	r2, r3, #31
 80014a0:	4907      	ldr	r1, [pc, #28]	@ (80014c0 <__NVIC_EnableIRQ+0x38>)
 80014a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a6:	095b      	lsrs	r3, r3, #5
 80014a8:	2001      	movs	r0, #1
 80014aa:	fa00 f202 	lsl.w	r2, r0, r2
 80014ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014b2:	bf00      	nop
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	e000e100 	.word	0xe000e100

080014c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	6039      	str	r1, [r7, #0]
 80014ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	db0a      	blt.n	80014ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	b2da      	uxtb	r2, r3
 80014dc:	490c      	ldr	r1, [pc, #48]	@ (8001510 <__NVIC_SetPriority+0x4c>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	0112      	lsls	r2, r2, #4
 80014e4:	b2d2      	uxtb	r2, r2
 80014e6:	440b      	add	r3, r1
 80014e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014ec:	e00a      	b.n	8001504 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4908      	ldr	r1, [pc, #32]	@ (8001514 <__NVIC_SetPriority+0x50>)
 80014f4:	79fb      	ldrb	r3, [r7, #7]
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	3b04      	subs	r3, #4
 80014fc:	0112      	lsls	r2, r2, #4
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	440b      	add	r3, r1
 8001502:	761a      	strb	r2, [r3, #24]
}
 8001504:	bf00      	nop
 8001506:	370c      	adds	r7, #12
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000e100 	.word	0xe000e100
 8001514:	e000ed00 	.word	0xe000ed00

08001518 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001518:	b480      	push	{r7}
 800151a:	b089      	sub	sp, #36	@ 0x24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f003 0307 	and.w	r3, r3, #7
 800152a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800152c:	69fb      	ldr	r3, [r7, #28]
 800152e:	f1c3 0307 	rsb	r3, r3, #7
 8001532:	2b04      	cmp	r3, #4
 8001534:	bf28      	it	cs
 8001536:	2304      	movcs	r3, #4
 8001538:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3304      	adds	r3, #4
 800153e:	2b06      	cmp	r3, #6
 8001540:	d902      	bls.n	8001548 <NVIC_EncodePriority+0x30>
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	3b03      	subs	r3, #3
 8001546:	e000      	b.n	800154a <NVIC_EncodePriority+0x32>
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800154c:	f04f 32ff 	mov.w	r2, #4294967295
 8001550:	69bb      	ldr	r3, [r7, #24]
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	68bb      	ldr	r3, [r7, #8]
 800155a:	401a      	ands	r2, r3
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001560:	f04f 31ff 	mov.w	r1, #4294967295
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	fa01 f303 	lsl.w	r3, r1, r3
 800156a:	43d9      	mvns	r1, r3
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001570:	4313      	orrs	r3, r2
         );
}
 8001572:	4618      	mov	r0, r3
 8001574:	3724      	adds	r7, #36	@ 0x24
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
	...

08001580 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3b01      	subs	r3, #1
 800158c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001590:	d301      	bcc.n	8001596 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001592:	2301      	movs	r3, #1
 8001594:	e00f      	b.n	80015b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001596:	4a0a      	ldr	r2, [pc, #40]	@ (80015c0 <SysTick_Config+0x40>)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800159e:	210f      	movs	r1, #15
 80015a0:	f04f 30ff 	mov.w	r0, #4294967295
 80015a4:	f7ff ff8e 	bl	80014c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015a8:	4b05      	ldr	r3, [pc, #20]	@ (80015c0 <SysTick_Config+0x40>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ae:	4b04      	ldr	r3, [pc, #16]	@ (80015c0 <SysTick_Config+0x40>)
 80015b0:	2207      	movs	r2, #7
 80015b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015b4:	2300      	movs	r3, #0
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3708      	adds	r7, #8
 80015ba:	46bd      	mov	sp, r7
 80015bc:	bd80      	pop	{r7, pc}
 80015be:	bf00      	nop
 80015c0:	e000e010 	.word	0xe000e010

080015c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f7ff ff29 	bl	8001424 <__NVIC_SetPriorityGrouping>
}
 80015d2:	bf00      	nop
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015da:	b580      	push	{r7, lr}
 80015dc:	b086      	sub	sp, #24
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	60b9      	str	r1, [r7, #8]
 80015e4:	607a      	str	r2, [r7, #4]
 80015e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ec:	f7ff ff3e 	bl	800146c <__NVIC_GetPriorityGrouping>
 80015f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f2:	687a      	ldr	r2, [r7, #4]
 80015f4:	68b9      	ldr	r1, [r7, #8]
 80015f6:	6978      	ldr	r0, [r7, #20]
 80015f8:	f7ff ff8e 	bl	8001518 <NVIC_EncodePriority>
 80015fc:	4602      	mov	r2, r0
 80015fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff ff5d 	bl	80014c4 <__NVIC_SetPriority>
}
 800160a:	bf00      	nop
 800160c:	3718      	adds	r7, #24
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}

08001612 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001612:	b580      	push	{r7, lr}
 8001614:	b082      	sub	sp, #8
 8001616:	af00      	add	r7, sp, #0
 8001618:	4603      	mov	r3, r0
 800161a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800161c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001620:	4618      	mov	r0, r3
 8001622:	f7ff ff31 	bl	8001488 <__NVIC_EnableIRQ>
}
 8001626:	bf00      	nop
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b082      	sub	sp, #8
 8001632:	af00      	add	r7, sp, #0
 8001634:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001636:	6878      	ldr	r0, [r7, #4]
 8001638:	f7ff ffa2 	bl	8001580 <SysTick_Config>
 800163c:	4603      	mov	r3, r0
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
	...

08001648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	@ 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
 8001662:	e159      	b.n	8001918 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001664:	2201      	movs	r2, #1
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	429a      	cmp	r2, r3
 800167e:	f040 8148 	bne.w	8001912 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	2b01      	cmp	r3, #1
 800168c:	d005      	beq.n	800169a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001696:	2b02      	cmp	r3, #2
 8001698:	d130      	bne.n	80016fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	2203      	movs	r2, #3
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016d0:	2201      	movs	r2, #1
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 0201 	and.w	r2, r3, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b03      	cmp	r3, #3
 8001706:	d017      	beq.n	8001738 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d123      	bne.n	800178c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	08da      	lsrs	r2, r3, #3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3208      	adds	r2, #8
 800174c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	220f      	movs	r2, #15
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	08da      	lsrs	r2, r3, #3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3208      	adds	r2, #8
 8001786:	69b9      	ldr	r1, [r7, #24]
 8001788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0203 	and.w	r2, r3, #3
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 80a2 	beq.w	8001912 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b57      	ldr	r3, [pc, #348]	@ (8001930 <HAL_GPIO_Init+0x2e8>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d6:	4a56      	ldr	r2, [pc, #344]	@ (8001930 <HAL_GPIO_Init+0x2e8>)
 80017d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017de:	4b54      	ldr	r3, [pc, #336]	@ (8001930 <HAL_GPIO_Init+0x2e8>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ea:	4a52      	ldr	r2, [pc, #328]	@ (8001934 <HAL_GPIO_Init+0x2ec>)
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	3302      	adds	r3, #2
 80017f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	220f      	movs	r2, #15
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a49      	ldr	r2, [pc, #292]	@ (8001938 <HAL_GPIO_Init+0x2f0>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d019      	beq.n	800184a <HAL_GPIO_Init+0x202>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a48      	ldr	r2, [pc, #288]	@ (800193c <HAL_GPIO_Init+0x2f4>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d013      	beq.n	8001846 <HAL_GPIO_Init+0x1fe>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a47      	ldr	r2, [pc, #284]	@ (8001940 <HAL_GPIO_Init+0x2f8>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d00d      	beq.n	8001842 <HAL_GPIO_Init+0x1fa>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a46      	ldr	r2, [pc, #280]	@ (8001944 <HAL_GPIO_Init+0x2fc>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d007      	beq.n	800183e <HAL_GPIO_Init+0x1f6>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a45      	ldr	r2, [pc, #276]	@ (8001948 <HAL_GPIO_Init+0x300>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d101      	bne.n	800183a <HAL_GPIO_Init+0x1f2>
 8001836:	2304      	movs	r3, #4
 8001838:	e008      	b.n	800184c <HAL_GPIO_Init+0x204>
 800183a:	2307      	movs	r3, #7
 800183c:	e006      	b.n	800184c <HAL_GPIO_Init+0x204>
 800183e:	2303      	movs	r3, #3
 8001840:	e004      	b.n	800184c <HAL_GPIO_Init+0x204>
 8001842:	2302      	movs	r3, #2
 8001844:	e002      	b.n	800184c <HAL_GPIO_Init+0x204>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <HAL_GPIO_Init+0x204>
 800184a:	2300      	movs	r3, #0
 800184c:	69fa      	ldr	r2, [r7, #28]
 800184e:	f002 0203 	and.w	r2, r2, #3
 8001852:	0092      	lsls	r2, r2, #2
 8001854:	4093      	lsls	r3, r2
 8001856:	69ba      	ldr	r2, [r7, #24]
 8001858:	4313      	orrs	r3, r2
 800185a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800185c:	4935      	ldr	r1, [pc, #212]	@ (8001934 <HAL_GPIO_Init+0x2ec>)
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3302      	adds	r3, #2
 8001864:	69ba      	ldr	r2, [r7, #24]
 8001866:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800186a:	4b38      	ldr	r3, [pc, #224]	@ (800194c <HAL_GPIO_Init+0x304>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	43db      	mvns	r3, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4013      	ands	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d003      	beq.n	800188e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001886:	69ba      	ldr	r2, [r7, #24]
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4313      	orrs	r3, r2
 800188c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800188e:	4a2f      	ldr	r2, [pc, #188]	@ (800194c <HAL_GPIO_Init+0x304>)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001894:	4b2d      	ldr	r3, [pc, #180]	@ (800194c <HAL_GPIO_Init+0x304>)
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	43db      	mvns	r3, r3
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	4013      	ands	r3, r2
 80018a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018a4:	683b      	ldr	r3, [r7, #0]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018b0:	69ba      	ldr	r2, [r7, #24]
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018b8:	4a24      	ldr	r2, [pc, #144]	@ (800194c <HAL_GPIO_Init+0x304>)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018be:	4b23      	ldr	r3, [pc, #140]	@ (800194c <HAL_GPIO_Init+0x304>)
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d003      	beq.n	80018e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80018da:	69ba      	ldr	r2, [r7, #24]
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018e2:	4a1a      	ldr	r2, [pc, #104]	@ (800194c <HAL_GPIO_Init+0x304>)
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018e8:	4b18      	ldr	r3, [pc, #96]	@ (800194c <HAL_GPIO_Init+0x304>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	43db      	mvns	r3, r3
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	4013      	ands	r3, r2
 80018f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001900:	2b00      	cmp	r3, #0
 8001902:	d003      	beq.n	800190c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001904:	69ba      	ldr	r2, [r7, #24]
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800190c:	4a0f      	ldr	r2, [pc, #60]	@ (800194c <HAL_GPIO_Init+0x304>)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3301      	adds	r3, #1
 8001916:	61fb      	str	r3, [r7, #28]
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	2b0f      	cmp	r3, #15
 800191c:	f67f aea2 	bls.w	8001664 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	3724      	adds	r7, #36	@ 0x24
 8001926:	46bd      	mov	sp, r7
 8001928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192c:	4770      	bx	lr
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	40013800 	.word	0x40013800
 8001938:	40020000 	.word	0x40020000
 800193c:	40020400 	.word	0x40020400
 8001940:	40020800 	.word	0x40020800
 8001944:	40020c00 	.word	0x40020c00
 8001948:	40021000 	.word	0x40021000
 800194c:	40013c00 	.word	0x40013c00

08001950 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
 8001958:	460b      	mov	r3, r1
 800195a:	807b      	strh	r3, [r7, #2]
 800195c:	4613      	mov	r3, r2
 800195e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001960:	787b      	ldrb	r3, [r7, #1]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001966:	887a      	ldrh	r2, [r7, #2]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800196c:	e003      	b.n	8001976 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800196e:	887b      	ldrh	r3, [r7, #2]
 8001970:	041a      	lsls	r2, r3, #16
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	619a      	str	r2, [r3, #24]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af02      	add	r7, sp, #8
 8001988:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2b00      	cmp	r3, #0
 800198e:	d101      	bne.n	8001994 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001990:	2301      	movs	r3, #1
 8001992:	e101      	b.n	8001b98 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d106      	bne.n	80019b4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f005 fb1a 	bl	8006fe8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2203      	movs	r2, #3
 80019b8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80019c2:	d102      	bne.n	80019ca <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f002 fa45 	bl	8003e5e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6818      	ldr	r0, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	7c1a      	ldrb	r2, [r3, #16]
 80019dc:	f88d 2000 	strb.w	r2, [sp]
 80019e0:	3304      	adds	r3, #4
 80019e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019e4:	f002 f924 	bl	8003c30 <USB_CoreInit>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d005      	beq.n	80019fa <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	2202      	movs	r2, #2
 80019f2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e0ce      	b.n	8001b98 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	2100      	movs	r1, #0
 8001a00:	4618      	mov	r0, r3
 8001a02:	f002 fa3d 	bl	8003e80 <USB_SetCurrentMode>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d005      	beq.n	8001a18 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2202      	movs	r2, #2
 8001a10:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0bf      	b.n	8001b98 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a18:	2300      	movs	r3, #0
 8001a1a:	73fb      	strb	r3, [r7, #15]
 8001a1c:	e04a      	b.n	8001ab4 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001a1e:	7bfa      	ldrb	r2, [r7, #15]
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	4613      	mov	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	4413      	add	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	440b      	add	r3, r1
 8001a2c:	3315      	adds	r3, #21
 8001a2e:	2201      	movs	r2, #1
 8001a30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001a32:	7bfa      	ldrb	r2, [r7, #15]
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	4613      	mov	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	440b      	add	r3, r1
 8001a40:	3314      	adds	r3, #20
 8001a42:	7bfa      	ldrb	r2, [r7, #15]
 8001a44:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001a46:	7bfa      	ldrb	r2, [r7, #15]
 8001a48:	7bfb      	ldrb	r3, [r7, #15]
 8001a4a:	b298      	uxth	r0, r3
 8001a4c:	6879      	ldr	r1, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	4413      	add	r3, r2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	440b      	add	r3, r1
 8001a58:	332e      	adds	r3, #46	@ 0x2e
 8001a5a:	4602      	mov	r2, r0
 8001a5c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001a5e:	7bfa      	ldrb	r2, [r7, #15]
 8001a60:	6879      	ldr	r1, [r7, #4]
 8001a62:	4613      	mov	r3, r2
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4413      	add	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	440b      	add	r3, r1
 8001a6c:	3318      	adds	r3, #24
 8001a6e:	2200      	movs	r2, #0
 8001a70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001a72:	7bfa      	ldrb	r2, [r7, #15]
 8001a74:	6879      	ldr	r1, [r7, #4]
 8001a76:	4613      	mov	r3, r2
 8001a78:	00db      	lsls	r3, r3, #3
 8001a7a:	4413      	add	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	440b      	add	r3, r1
 8001a80:	331c      	adds	r3, #28
 8001a82:	2200      	movs	r2, #0
 8001a84:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001a86:	7bfa      	ldrb	r2, [r7, #15]
 8001a88:	6879      	ldr	r1, [r7, #4]
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	3320      	adds	r3, #32
 8001a96:	2200      	movs	r2, #0
 8001a98:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001a9a:	7bfa      	ldrb	r2, [r7, #15]
 8001a9c:	6879      	ldr	r1, [r7, #4]
 8001a9e:	4613      	mov	r3, r2
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4413      	add	r3, r2
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	3324      	adds	r3, #36	@ 0x24
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aae:	7bfb      	ldrb	r3, [r7, #15]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	73fb      	strb	r3, [r7, #15]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	791b      	ldrb	r3, [r3, #4]
 8001ab8:	7bfa      	ldrb	r2, [r7, #15]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d3af      	bcc.n	8001a1e <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001abe:	2300      	movs	r3, #0
 8001ac0:	73fb      	strb	r3, [r7, #15]
 8001ac2:	e044      	b.n	8001b4e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ac4:	7bfa      	ldrb	r2, [r7, #15]
 8001ac6:	6879      	ldr	r1, [r7, #4]
 8001ac8:	4613      	mov	r3, r2
 8001aca:	00db      	lsls	r3, r3, #3
 8001acc:	4413      	add	r3, r2
 8001ace:	009b      	lsls	r3, r3, #2
 8001ad0:	440b      	add	r3, r1
 8001ad2:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001ada:	7bfa      	ldrb	r2, [r7, #15]
 8001adc:	6879      	ldr	r1, [r7, #4]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	00db      	lsls	r3, r3, #3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	440b      	add	r3, r1
 8001ae8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001aec:	7bfa      	ldrb	r2, [r7, #15]
 8001aee:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001af0:	7bfa      	ldrb	r2, [r7, #15]
 8001af2:	6879      	ldr	r1, [r7, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	4413      	add	r3, r2
 8001afa:	009b      	lsls	r3, r3, #2
 8001afc:	440b      	add	r3, r1
 8001afe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001b06:	7bfa      	ldrb	r2, [r7, #15]
 8001b08:	6879      	ldr	r1, [r7, #4]
 8001b0a:	4613      	mov	r3, r2
 8001b0c:	00db      	lsls	r3, r3, #3
 8001b0e:	4413      	add	r3, r2
 8001b10:	009b      	lsls	r3, r3, #2
 8001b12:	440b      	add	r3, r1
 8001b14:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001b1c:	7bfa      	ldrb	r2, [r7, #15]
 8001b1e:	6879      	ldr	r1, [r7, #4]
 8001b20:	4613      	mov	r3, r2
 8001b22:	00db      	lsls	r3, r3, #3
 8001b24:	4413      	add	r3, r2
 8001b26:	009b      	lsls	r3, r3, #2
 8001b28:	440b      	add	r3, r1
 8001b2a:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001b32:	7bfa      	ldrb	r2, [r7, #15]
 8001b34:	6879      	ldr	r1, [r7, #4]
 8001b36:	4613      	mov	r3, r2
 8001b38:	00db      	lsls	r3, r3, #3
 8001b3a:	4413      	add	r3, r2
 8001b3c:	009b      	lsls	r3, r3, #2
 8001b3e:	440b      	add	r3, r1
 8001b40:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	73fb      	strb	r3, [r7, #15]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	791b      	ldrb	r3, [r3, #4]
 8001b52:	7bfa      	ldrb	r2, [r7, #15]
 8001b54:	429a      	cmp	r2, r3
 8001b56:	d3b5      	bcc.n	8001ac4 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6818      	ldr	r0, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7c1a      	ldrb	r2, [r3, #16]
 8001b60:	f88d 2000 	strb.w	r2, [sp]
 8001b64:	3304      	adds	r3, #4
 8001b66:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b68:	f002 f9d6 	bl	8003f18 <USB_DevInit>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d005      	beq.n	8001b7e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2202      	movs	r2, #2
 8001b76:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e00c      	b.n	8001b98 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f003 fa20 	bl	8004fd6 <USB_DevDisconnect>

  return HAL_OK;
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}

08001ba0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <HAL_PCD_Start+0x1c>
 8001bb8:	2302      	movs	r3, #2
 8001bba:	e022      	b.n	8001c02 <HAL_PCD_Start+0x62>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	68db      	ldr	r3, [r3, #12]
 8001bc8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d009      	beq.n	8001be4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d105      	bne.n	8001be4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bdc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f002 f927 	bl	8003e3c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 f9ce 	bl	8004f94 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3710      	adds	r7, #16
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}

08001c0a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001c0a:	b590      	push	{r4, r7, lr}
 8001c0c:	b08d      	sub	sp, #52	@ 0x34
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001c18:	6a3b      	ldr	r3, [r7, #32]
 8001c1a:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	4618      	mov	r0, r3
 8001c22:	f003 fa8c 	bl	800513e <USB_GetMode>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	f040 848c 	bne.w	8002546 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f003 f9f0 	bl	8005018 <USB_ReadInterrupts>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	f000 8482 	beq.w	8002544 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f003 f9dd 	bl	8005018 <USB_ReadInterrupts>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	f003 0302 	and.w	r3, r3, #2
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d107      	bne.n	8001c78 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	695a      	ldr	r2, [r3, #20]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f002 0202 	and.w	r2, r2, #2
 8001c76:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f003 f9cb 	bl	8005018 <USB_ReadInterrupts>
 8001c82:	4603      	mov	r3, r0
 8001c84:	f003 0310 	and.w	r3, r3, #16
 8001c88:	2b10      	cmp	r3, #16
 8001c8a:	d161      	bne.n	8001d50 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	699a      	ldr	r2, [r3, #24]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 0210 	bic.w	r2, r2, #16
 8001c9a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001c9c:	6a3b      	ldr	r3, [r7, #32]
 8001c9e:	6a1b      	ldr	r3, [r3, #32]
 8001ca0:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001ca2:	69bb      	ldr	r3, [r7, #24]
 8001ca4:	f003 020f 	and.w	r2, r3, #15
 8001ca8:	4613      	mov	r3, r2
 8001caa:	00db      	lsls	r3, r3, #3
 8001cac:	4413      	add	r3, r2
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001cb4:	687a      	ldr	r2, [r7, #4]
 8001cb6:	4413      	add	r3, r2
 8001cb8:	3304      	adds	r3, #4
 8001cba:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001cc2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001cc6:	d124      	bne.n	8001d12 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001cc8:	69ba      	ldr	r2, [r7, #24]
 8001cca:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d035      	beq.n	8001d40 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	091b      	lsrs	r3, r3, #4
 8001cdc:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001cde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ce2:	b29b      	uxth	r3, r3
 8001ce4:	461a      	mov	r2, r3
 8001ce6:	6a38      	ldr	r0, [r7, #32]
 8001ce8:	f003 f802 	bl	8004cf0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	68da      	ldr	r2, [r3, #12]
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cf8:	441a      	add	r2, r3
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	695a      	ldr	r2, [r3, #20]
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d0a:	441a      	add	r2, r3
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	615a      	str	r2, [r3, #20]
 8001d10:	e016      	b.n	8001d40 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001d12:	69bb      	ldr	r3, [r7, #24]
 8001d14:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8001d18:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001d1c:	d110      	bne.n	8001d40 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001d24:	2208      	movs	r2, #8
 8001d26:	4619      	mov	r1, r3
 8001d28:	6a38      	ldr	r0, [r7, #32]
 8001d2a:	f002 ffe1 	bl	8004cf0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	695a      	ldr	r2, [r3, #20]
 8001d32:	69bb      	ldr	r3, [r7, #24]
 8001d34:	091b      	lsrs	r3, r3, #4
 8001d36:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001d3a:	441a      	add	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	699a      	ldr	r2, [r3, #24]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0210 	orr.w	r2, r2, #16
 8001d4e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4618      	mov	r0, r3
 8001d56:	f003 f95f 	bl	8005018 <USB_ReadInterrupts>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d60:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001d64:	f040 80a7 	bne.w	8001eb6 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f003 f964 	bl	800503e <USB_ReadDevAllOutEpInterrupt>
 8001d76:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001d78:	e099      	b.n	8001eae <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001d7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d7c:	f003 0301 	and.w	r3, r3, #1
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	f000 808e 	beq.w	8001ea2 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d8c:	b2d2      	uxtb	r2, r2
 8001d8e:	4611      	mov	r1, r2
 8001d90:	4618      	mov	r0, r3
 8001d92:	f003 f988 	bl	80050a6 <USB_ReadDevOutEPInterrupt>
 8001d96:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d00c      	beq.n	8001dbc <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da4:	015a      	lsls	r2, r3, #5
 8001da6:	69fb      	ldr	r3, [r7, #28]
 8001da8:	4413      	add	r3, r2
 8001daa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dae:	461a      	mov	r2, r3
 8001db0:	2301      	movs	r3, #1
 8001db2:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001db4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f000 fe8c 	bl	8002ad4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	f003 0308 	and.w	r3, r3, #8
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d00c      	beq.n	8001de0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2308      	movs	r3, #8
 8001dd6:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001dd8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001dda:	6878      	ldr	r0, [r7, #4]
 8001ddc:	f000 ff62 	bl	8002ca4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	f003 0310 	and.w	r3, r3, #16
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d008      	beq.n	8001dfc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dec:	015a      	lsls	r2, r3, #5
 8001dee:	69fb      	ldr	r3, [r7, #28]
 8001df0:	4413      	add	r3, r2
 8001df2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001df6:	461a      	mov	r2, r3
 8001df8:	2310      	movs	r3, #16
 8001dfa:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	f003 0302 	and.w	r3, r3, #2
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d030      	beq.n	8001e68 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001e06:	6a3b      	ldr	r3, [r7, #32]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e0e:	2b80      	cmp	r3, #128	@ 0x80
 8001e10:	d109      	bne.n	8001e26 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	69fa      	ldr	r2, [r7, #28]
 8001e1c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001e20:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e24:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001e26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e28:	4613      	mov	r3, r2
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4413      	add	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001e34:	687a      	ldr	r2, [r7, #4]
 8001e36:	4413      	add	r3, r2
 8001e38:	3304      	adds	r3, #4
 8001e3a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	78db      	ldrb	r3, [r3, #3]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d108      	bne.n	8001e56 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2200      	movs	r2, #0
 8001e48:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	4619      	mov	r1, r3
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f005 f9c5 	bl	80071e0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e58:	015a      	lsls	r2, r3, #5
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e62:	461a      	mov	r2, r3
 8001e64:	2302      	movs	r3, #2
 8001e66:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	f003 0320 	and.w	r3, r3, #32
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d008      	beq.n	8001e84 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001e72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e74:	015a      	lsls	r2, r3, #5
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	4413      	add	r3, r2
 8001e7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e7e:	461a      	mov	r2, r3
 8001e80:	2320      	movs	r3, #32
 8001e82:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d009      	beq.n	8001ea2 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e90:	015a      	lsls	r2, r3, #5
 8001e92:	69fb      	ldr	r3, [r7, #28]
 8001e94:	4413      	add	r3, r2
 8001e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001ea0:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea4:	3301      	adds	r3, #1
 8001ea6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001ea8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eaa:	085b      	lsrs	r3, r3, #1
 8001eac:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f47f af62 	bne.w	8001d7a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f003 f8ac 	bl	8005018 <USB_ReadInterrupts>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001ec6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001eca:	f040 80db 	bne.w	8002084 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f003 f8cd 	bl	8005072 <USB_ReadDevAllInEpInterrupt>
 8001ed8:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001eda:	2300      	movs	r3, #0
 8001edc:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001ede:	e0cd      	b.n	800207c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001ee2:	f003 0301 	and.w	r3, r3, #1
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	f000 80c2 	beq.w	8002070 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ef2:	b2d2      	uxtb	r2, r2
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f003 f8f3 	bl	80050e2 <USB_ReadDevInEPInterrupt>
 8001efc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d057      	beq.n	8001fb8 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0a:	f003 030f 	and.w	r3, r3, #15
 8001f0e:	2201      	movs	r2, #1
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	43db      	mvns	r3, r3
 8001f22:	69f9      	ldr	r1, [r7, #28]
 8001f24:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001f28:	4013      	ands	r3, r2
 8001f2a:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	015a      	lsls	r2, r3, #5
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	4413      	add	r3, r2
 8001f34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	799b      	ldrb	r3, [r3, #6]
 8001f42:	2b01      	cmp	r3, #1
 8001f44:	d132      	bne.n	8001fac <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f4a:	4613      	mov	r3, r2
 8001f4c:	00db      	lsls	r3, r3, #3
 8001f4e:	4413      	add	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	440b      	add	r3, r1
 8001f54:	3320      	adds	r3, #32
 8001f56:	6819      	ldr	r1, [r3, #0]
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4413      	add	r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	4403      	add	r3, r0
 8001f66:	331c      	adds	r3, #28
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4419      	add	r1, r3
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f70:	4613      	mov	r3, r2
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4403      	add	r3, r0
 8001f7a:	3320      	adds	r3, #32
 8001f7c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d113      	bne.n	8001fac <HAL_PCD_IRQHandler+0x3a2>
 8001f84:	6879      	ldr	r1, [r7, #4]
 8001f86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	3324      	adds	r3, #36	@ 0x24
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d108      	bne.n	8001fac <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6818      	ldr	r0, [r3, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001fa4:	461a      	mov	r2, r3
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	f003 f8fa 	bl	80051a0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001fac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fae:	b2db      	uxtb	r3, r3
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	6878      	ldr	r0, [r7, #4]
 8001fb4:	f005 f899 	bl	80070ea <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	f003 0308 	and.w	r3, r3, #8
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d008      	beq.n	8001fd4 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc4:	015a      	lsls	r2, r3, #5
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fce:	461a      	mov	r2, r3
 8001fd0:	2308      	movs	r3, #8
 8001fd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	f003 0310 	and.w	r3, r3, #16
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d008      	beq.n	8001ff0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe0:	015a      	lsls	r2, r3, #5
 8001fe2:	69fb      	ldr	r3, [r7, #28]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001fea:	461a      	mov	r2, r3
 8001fec:	2310      	movs	r3, #16
 8001fee:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d008      	beq.n	800200c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffc:	015a      	lsls	r2, r3, #5
 8001ffe:	69fb      	ldr	r3, [r7, #28]
 8002000:	4413      	add	r3, r2
 8002002:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002006:	461a      	mov	r2, r3
 8002008:	2340      	movs	r3, #64	@ 0x40
 800200a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	f003 0302 	and.w	r3, r3, #2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d023      	beq.n	800205e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002016:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002018:	6a38      	ldr	r0, [r7, #32]
 800201a:	f002 f8e1 	bl	80041e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800201e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002020:	4613      	mov	r3, r2
 8002022:	00db      	lsls	r3, r3, #3
 8002024:	4413      	add	r3, r2
 8002026:	009b      	lsls	r3, r3, #2
 8002028:	3310      	adds	r3, #16
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	4413      	add	r3, r2
 800202e:	3304      	adds	r3, #4
 8002030:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002032:	697b      	ldr	r3, [r7, #20]
 8002034:	78db      	ldrb	r3, [r3, #3]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d108      	bne.n	800204c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2200      	movs	r2, #0
 800203e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002042:	b2db      	uxtb	r3, r3
 8002044:	4619      	mov	r1, r3
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f005 f8dc 	bl	8007204 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800204c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204e:	015a      	lsls	r2, r3, #5
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	4413      	add	r3, r2
 8002054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002058:	461a      	mov	r2, r3
 800205a:	2302      	movs	r3, #2
 800205c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002068:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f000 fca5 	bl	80029ba <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002072:	3301      	adds	r3, #1
 8002074:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002078:	085b      	lsrs	r3, r3, #1
 800207a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800207c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800207e:	2b00      	cmp	r3, #0
 8002080:	f47f af2e 	bne.w	8001ee0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4618      	mov	r0, r3
 800208a:	f002 ffc5 	bl	8005018 <USB_ReadInterrupts>
 800208e:	4603      	mov	r3, r0
 8002090:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002094:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002098:	d122      	bne.n	80020e0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800209a:	69fb      	ldr	r3, [r7, #28]
 800209c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	69fa      	ldr	r2, [r7, #28]
 80020a4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80020a8:	f023 0301 	bic.w	r3, r3, #1
 80020ac:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d108      	bne.n	80020ca <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80020c0:	2100      	movs	r1, #0
 80020c2:	6878      	ldr	r0, [r7, #4]
 80020c4:	f000 fe8c 	bl	8002de0 <HAL_PCDEx_LPM_Callback>
 80020c8:	e002      	b.n	80020d0 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f005 f87a 	bl	80071c4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	695a      	ldr	r2, [r3, #20]
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80020de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4618      	mov	r0, r3
 80020e6:	f002 ff97 	bl	8005018 <USB_ReadInterrupts>
 80020ea:	4603      	mov	r3, r0
 80020ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80020f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80020f4:	d112      	bne.n	800211c <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80020f6:	69fb      	ldr	r3, [r7, #28]
 80020f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	2b01      	cmp	r3, #1
 8002104:	d102      	bne.n	800210c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002106:	6878      	ldr	r0, [r7, #4]
 8002108:	f005 f836 	bl	8007178 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	695a      	ldr	r2, [r3, #20]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800211a:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f002 ff79 	bl	8005018 <USB_ReadInterrupts>
 8002126:	4603      	mov	r3, r0
 8002128:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800212c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002130:	f040 80b7 	bne.w	80022a2 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	69fa      	ldr	r2, [r7, #28]
 800213e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002142:	f023 0301 	bic.w	r3, r3, #1
 8002146:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	2110      	movs	r1, #16
 800214e:	4618      	mov	r0, r3
 8002150:	f002 f846 	bl	80041e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002154:	2300      	movs	r3, #0
 8002156:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002158:	e046      	b.n	80021e8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800215a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800215c:	015a      	lsls	r2, r3, #5
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	4413      	add	r3, r2
 8002162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002166:	461a      	mov	r2, r3
 8002168:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800216c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800216e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002170:	015a      	lsls	r2, r3, #5
 8002172:	69fb      	ldr	r3, [r7, #28]
 8002174:	4413      	add	r3, r2
 8002176:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800217e:	0151      	lsls	r1, r2, #5
 8002180:	69fa      	ldr	r2, [r7, #28]
 8002182:	440a      	add	r2, r1
 8002184:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002188:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800218c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800218e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002190:	015a      	lsls	r2, r3, #5
 8002192:	69fb      	ldr	r3, [r7, #28]
 8002194:	4413      	add	r3, r2
 8002196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800219a:	461a      	mov	r2, r3
 800219c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80021a0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80021a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021a4:	015a      	lsls	r2, r3, #5
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	4413      	add	r3, r2
 80021aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021b2:	0151      	lsls	r1, r2, #5
 80021b4:	69fa      	ldr	r2, [r7, #28]
 80021b6:	440a      	add	r2, r1
 80021b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80021bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80021c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80021c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021c4:	015a      	lsls	r2, r3, #5
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	4413      	add	r3, r2
 80021ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80021d2:	0151      	lsls	r1, r2, #5
 80021d4:	69fa      	ldr	r2, [r7, #28]
 80021d6:	440a      	add	r2, r1
 80021d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80021dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80021e0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021e4:	3301      	adds	r3, #1
 80021e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	791b      	ldrb	r3, [r3, #4]
 80021ec:	461a      	mov	r2, r3
 80021ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d3b2      	bcc.n	800215a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80021f4:	69fb      	ldr	r3, [r7, #28]
 80021f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80021fa:	69db      	ldr	r3, [r3, #28]
 80021fc:	69fa      	ldr	r2, [r7, #28]
 80021fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002202:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8002206:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	7bdb      	ldrb	r3, [r3, #15]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d016      	beq.n	800223e <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002216:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800221a:	69fa      	ldr	r2, [r7, #28]
 800221c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002220:	f043 030b 	orr.w	r3, r3, #11
 8002224:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800222e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002230:	69fa      	ldr	r2, [r7, #28]
 8002232:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002236:	f043 030b 	orr.w	r3, r3, #11
 800223a:	6453      	str	r3, [r2, #68]	@ 0x44
 800223c:	e015      	b.n	800226a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	69fa      	ldr	r2, [r7, #28]
 8002248:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800224c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002250:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8002254:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800225c:	691b      	ldr	r3, [r3, #16]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002264:	f043 030b 	orr.w	r3, r3, #11
 8002268:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800226a:	69fb      	ldr	r3, [r7, #28]
 800226c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	69fa      	ldr	r2, [r7, #28]
 8002274:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002278:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800227c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6818      	ldr	r0, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800228c:	461a      	mov	r2, r3
 800228e:	f002 ff87 	bl	80051a0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80022a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f002 feb6 	bl	8005018 <USB_ReadInterrupts>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80022b6:	d123      	bne.n	8002300 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4618      	mov	r0, r3
 80022be:	f002 ff4c 	bl	800515a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f002 f803 	bl	80042d2 <USB_GetDevSpeed>
 80022cc:	4603      	mov	r3, r0
 80022ce:	461a      	mov	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681c      	ldr	r4, [r3, #0]
 80022d8:	f001 f9b2 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 80022dc:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80022e2:	461a      	mov	r2, r3
 80022e4:	4620      	mov	r0, r4
 80022e6:	f001 fd07 	bl	8003cf8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f004 ff25 	bl	800713a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	695a      	ldr	r2, [r3, #20]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80022fe:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f002 fe87 	bl	8005018 <USB_ReadInterrupts>
 800230a:	4603      	mov	r3, r0
 800230c:	f003 0308 	and.w	r3, r3, #8
 8002310:	2b08      	cmp	r3, #8
 8002312:	d10a      	bne.n	800232a <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	f004 ff02 	bl	800711e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695a      	ldr	r2, [r3, #20]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f002 0208 	and.w	r2, r2, #8
 8002328:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f002 fe72 	bl	8005018 <USB_ReadInterrupts>
 8002334:	4603      	mov	r3, r0
 8002336:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800233a:	2b80      	cmp	r3, #128	@ 0x80
 800233c:	d123      	bne.n	8002386 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	699b      	ldr	r3, [r3, #24]
 8002342:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002346:	6a3b      	ldr	r3, [r7, #32]
 8002348:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800234a:	2301      	movs	r3, #1
 800234c:	627b      	str	r3, [r7, #36]	@ 0x24
 800234e:	e014      	b.n	800237a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002350:	6879      	ldr	r1, [r7, #4]
 8002352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002354:	4613      	mov	r3, r2
 8002356:	00db      	lsls	r3, r3, #3
 8002358:	4413      	add	r3, r2
 800235a:	009b      	lsls	r3, r3, #2
 800235c:	440b      	add	r3, r1
 800235e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002362:	781b      	ldrb	r3, [r3, #0]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d105      	bne.n	8002374 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236a:	b2db      	uxtb	r3, r3
 800236c:	4619      	mov	r1, r3
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f000 faf2 	bl	8002958 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002376:	3301      	adds	r3, #1
 8002378:	627b      	str	r3, [r7, #36]	@ 0x24
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	791b      	ldrb	r3, [r3, #4]
 800237e:	461a      	mov	r2, r3
 8002380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002382:	4293      	cmp	r3, r2
 8002384:	d3e4      	bcc.n	8002350 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f002 fe44 	bl	8005018 <USB_ReadInterrupts>
 8002390:	4603      	mov	r3, r0
 8002392:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002396:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800239a:	d13c      	bne.n	8002416 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800239c:	2301      	movs	r3, #1
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
 80023a0:	e02b      	b.n	80023fa <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80023a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a4:	015a      	lsls	r2, r3, #5
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	4413      	add	r3, r2
 80023aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4413      	add	r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	440b      	add	r3, r1
 80023c0:	3318      	adds	r3, #24
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d115      	bne.n	80023f4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80023c8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	da12      	bge.n	80023f4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80023ce:	6879      	ldr	r1, [r7, #4]
 80023d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023d2:	4613      	mov	r3, r2
 80023d4:	00db      	lsls	r3, r3, #3
 80023d6:	4413      	add	r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	3317      	adds	r3, #23
 80023de:	2201      	movs	r2, #1
 80023e0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80023e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	4619      	mov	r1, r3
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f000 fab2 	bl	8002958 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f6:	3301      	adds	r3, #1
 80023f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	791b      	ldrb	r3, [r3, #4]
 80023fe:	461a      	mov	r2, r3
 8002400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002402:	4293      	cmp	r3, r2
 8002404:	d3cd      	bcc.n	80023a2 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	695a      	ldr	r2, [r3, #20]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8002414:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4618      	mov	r0, r3
 800241c:	f002 fdfc 	bl	8005018 <USB_ReadInterrupts>
 8002420:	4603      	mov	r3, r0
 8002422:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002426:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800242a:	d156      	bne.n	80024da <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800242c:	2301      	movs	r3, #1
 800242e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002430:	e045      	b.n	80024be <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002432:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002434:	015a      	lsls	r2, r3, #5
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	4413      	add	r3, r2
 800243a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002446:	4613      	mov	r3, r2
 8002448:	00db      	lsls	r3, r3, #3
 800244a:	4413      	add	r3, r2
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	440b      	add	r3, r1
 8002450:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d12e      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800245a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800245c:	2b00      	cmp	r3, #0
 800245e:	da2b      	bge.n	80024b8 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8002460:	69bb      	ldr	r3, [r7, #24]
 8002462:	0c1a      	lsrs	r2, r3, #16
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800246a:	4053      	eors	r3, r2
 800246c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002470:	2b00      	cmp	r3, #0
 8002472:	d121      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002478:	4613      	mov	r3, r2
 800247a:	00db      	lsls	r3, r3, #3
 800247c:	4413      	add	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002486:	2201      	movs	r2, #1
 8002488:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800248a:	6a3b      	ldr	r3, [r7, #32]
 800248c:	699b      	ldr	r3, [r3, #24]
 800248e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002496:	6a3b      	ldr	r3, [r7, #32]
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d10a      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80024a8:	685b      	ldr	r3, [r3, #4]
 80024aa:	69fa      	ldr	r2, [r7, #28]
 80024ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80024b0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024b4:	6053      	str	r3, [r2, #4]
            break;
 80024b6:	e008      	b.n	80024ca <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ba:	3301      	adds	r3, #1
 80024bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	791b      	ldrb	r3, [r3, #4]
 80024c2:	461a      	mov	r2, r3
 80024c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d3b3      	bcc.n	8002432 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695a      	ldr	r2, [r3, #20]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80024d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f002 fd9a 	bl	8005018 <USB_ReadInterrupts>
 80024e4:	4603      	mov	r3, r0
 80024e6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80024ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ee:	d10a      	bne.n	8002506 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80024f0:	6878      	ldr	r0, [r7, #4]
 80024f2:	f004 fe99 	bl	8007228 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	695a      	ldr	r2, [r3, #20]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8002504:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f002 fd84 	bl	8005018 <USB_ReadInterrupts>
 8002510:	4603      	mov	r3, r0
 8002512:	f003 0304 	and.w	r3, r3, #4
 8002516:	2b04      	cmp	r3, #4
 8002518:	d115      	bne.n	8002546 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d002      	beq.n	8002532 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f004 fe89 	bl	8007244 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6859      	ldr	r1, [r3, #4]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	430a      	orrs	r2, r1
 8002540:	605a      	str	r2, [r3, #4]
 8002542:	e000      	b.n	8002546 <HAL_PCD_IRQHandler+0x93c>
      return;
 8002544:	bf00      	nop
    }
  }
}
 8002546:	3734      	adds	r7, #52	@ 0x34
 8002548:	46bd      	mov	sp, r7
 800254a:	bd90      	pop	{r4, r7, pc}

0800254c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800255e:	2b01      	cmp	r3, #1
 8002560:	d101      	bne.n	8002566 <HAL_PCD_SetAddress+0x1a>
 8002562:	2302      	movs	r3, #2
 8002564:	e012      	b.n	800258c <HAL_PCD_SetAddress+0x40>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2201      	movs	r2, #1
 800256a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	78fa      	ldrb	r2, [r7, #3]
 8002572:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	78fa      	ldrb	r2, [r7, #3]
 800257a:	4611      	mov	r1, r2
 800257c:	4618      	mov	r0, r3
 800257e:	f002 fce3 	bl	8004f48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800258a:	2300      	movs	r3, #0
}
 800258c:	4618      	mov	r0, r3
 800258e:	3708      	adds	r7, #8
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	4608      	mov	r0, r1
 800259e:	4611      	mov	r1, r2
 80025a0:	461a      	mov	r2, r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	70fb      	strb	r3, [r7, #3]
 80025a6:	460b      	mov	r3, r1
 80025a8:	803b      	strh	r3, [r7, #0]
 80025aa:	4613      	mov	r3, r2
 80025ac:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 80025ae:	2300      	movs	r3, #0
 80025b0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025b2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	da0f      	bge.n	80025da <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025ba:	78fb      	ldrb	r3, [r7, #3]
 80025bc:	f003 020f 	and.w	r2, r3, #15
 80025c0:	4613      	mov	r3, r2
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4413      	add	r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	3310      	adds	r3, #16
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	4413      	add	r3, r2
 80025ce:	3304      	adds	r3, #4
 80025d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2201      	movs	r2, #1
 80025d6:	705a      	strb	r2, [r3, #1]
 80025d8:	e00f      	b.n	80025fa <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025da:	78fb      	ldrb	r3, [r7, #3]
 80025dc:	f003 020f 	and.w	r2, r3, #15
 80025e0:	4613      	mov	r3, r2
 80025e2:	00db      	lsls	r3, r3, #3
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	4413      	add	r3, r2
 80025f0:	3304      	adds	r3, #4
 80025f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	2200      	movs	r2, #0
 80025f8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80025fa:	78fb      	ldrb	r3, [r7, #3]
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	b2da      	uxtb	r2, r3
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8002606:	883b      	ldrh	r3, [r7, #0]
 8002608:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	78ba      	ldrb	r2, [r7, #2]
 8002614:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	785b      	ldrb	r3, [r3, #1]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d004      	beq.n	8002628 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	461a      	mov	r2, r3
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002628:	78bb      	ldrb	r3, [r7, #2]
 800262a:	2b02      	cmp	r3, #2
 800262c:	d102      	bne.n	8002634 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	2200      	movs	r2, #0
 8002632:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800263a:	2b01      	cmp	r3, #1
 800263c:	d101      	bne.n	8002642 <HAL_PCD_EP_Open+0xae>
 800263e:	2302      	movs	r3, #2
 8002640:	e00e      	b.n	8002660 <HAL_PCD_EP_Open+0xcc>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2201      	movs	r2, #1
 8002646:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	68f9      	ldr	r1, [r7, #12]
 8002650:	4618      	mov	r0, r3
 8002652:	f001 fe63 	bl	800431c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2200      	movs	r2, #0
 800265a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800265e:	7afb      	ldrb	r3, [r7, #11]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b084      	sub	sp, #16
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
 8002670:	460b      	mov	r3, r1
 8002672:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002674:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002678:	2b00      	cmp	r3, #0
 800267a:	da0f      	bge.n	800269c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800267c:	78fb      	ldrb	r3, [r7, #3]
 800267e:	f003 020f 	and.w	r2, r3, #15
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	3310      	adds	r3, #16
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	4413      	add	r3, r2
 8002690:	3304      	adds	r3, #4
 8002692:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2201      	movs	r2, #1
 8002698:	705a      	strb	r2, [r3, #1]
 800269a:	e00f      	b.n	80026bc <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800269c:	78fb      	ldrb	r3, [r7, #3]
 800269e:	f003 020f 	and.w	r2, r3, #15
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	4413      	add	r3, r2
 80026b2:	3304      	adds	r3, #4
 80026b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2200      	movs	r2, #0
 80026ba:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80026bc:	78fb      	ldrb	r3, [r7, #3]
 80026be:	f003 030f 	and.w	r3, r3, #15
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80026ce:	2b01      	cmp	r3, #1
 80026d0:	d101      	bne.n	80026d6 <HAL_PCD_EP_Close+0x6e>
 80026d2:	2302      	movs	r3, #2
 80026d4:	e00e      	b.n	80026f4 <HAL_PCD_EP_Close+0x8c>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2201      	movs	r2, #1
 80026da:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	68f9      	ldr	r1, [r7, #12]
 80026e4:	4618      	mov	r0, r3
 80026e6:	f001 fea1 	bl	800442c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	2200      	movs	r2, #0
 80026ee:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3710      	adds	r7, #16
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b086      	sub	sp, #24
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	603b      	str	r3, [r7, #0]
 8002708:	460b      	mov	r3, r1
 800270a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800270c:	7afb      	ldrb	r3, [r7, #11]
 800270e:	f003 020f 	and.w	r2, r3, #15
 8002712:	4613      	mov	r3, r2
 8002714:	00db      	lsls	r3, r3, #3
 8002716:	4413      	add	r3, r2
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800271e:	68fa      	ldr	r2, [r7, #12]
 8002720:	4413      	add	r3, r2
 8002722:	3304      	adds	r3, #4
 8002724:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800272c:	697b      	ldr	r3, [r7, #20]
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002732:	697b      	ldr	r3, [r7, #20]
 8002734:	2200      	movs	r2, #0
 8002736:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8002738:	697b      	ldr	r3, [r7, #20]
 800273a:	2200      	movs	r2, #0
 800273c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800273e:	7afb      	ldrb	r3, [r7, #11]
 8002740:	f003 030f 	and.w	r3, r3, #15
 8002744:	b2da      	uxtb	r2, r3
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	799b      	ldrb	r3, [r3, #6]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d102      	bne.n	8002758 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	697b      	ldr	r3, [r7, #20]
 8002756:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	799b      	ldrb	r3, [r3, #6]
 8002760:	461a      	mov	r2, r3
 8002762:	6979      	ldr	r1, [r7, #20]
 8002764:	f001 ff3e 	bl	80045e4 <USB_EPStartXfer>

  return HAL_OK;
 8002768:	2300      	movs	r3, #0
}
 800276a:	4618      	mov	r0, r3
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002772:	b580      	push	{r7, lr}
 8002774:	b086      	sub	sp, #24
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	607a      	str	r2, [r7, #4]
 800277c:	603b      	str	r3, [r7, #0]
 800277e:	460b      	mov	r3, r1
 8002780:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002782:	7afb      	ldrb	r3, [r7, #11]
 8002784:	f003 020f 	and.w	r2, r3, #15
 8002788:	4613      	mov	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	3310      	adds	r3, #16
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	4413      	add	r3, r2
 8002796:	3304      	adds	r3, #4
 8002798:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	683a      	ldr	r2, [r7, #0]
 80027a4:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2200      	movs	r2, #0
 80027aa:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	2201      	movs	r2, #1
 80027b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027b2:	7afb      	ldrb	r3, [r7, #11]
 80027b4:	f003 030f 	and.w	r3, r3, #15
 80027b8:	b2da      	uxtb	r2, r3
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	799b      	ldrb	r3, [r3, #6]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d102      	bne.n	80027cc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80027c6:	687a      	ldr	r2, [r7, #4]
 80027c8:	697b      	ldr	r3, [r7, #20]
 80027ca:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	6818      	ldr	r0, [r3, #0]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	799b      	ldrb	r3, [r3, #6]
 80027d4:	461a      	mov	r2, r3
 80027d6:	6979      	ldr	r1, [r7, #20]
 80027d8:	f001 ff04 	bl	80045e4 <USB_EPStartXfer>

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3718      	adds	r7, #24
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	460b      	mov	r3, r1
 80027f0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027f2:	78fb      	ldrb	r3, [r7, #3]
 80027f4:	f003 030f 	and.w	r3, r3, #15
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	7912      	ldrb	r2, [r2, #4]
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d901      	bls.n	8002804 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e04f      	b.n	80028a4 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002804:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002808:	2b00      	cmp	r3, #0
 800280a:	da0f      	bge.n	800282c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	f003 020f 	and.w	r2, r3, #15
 8002812:	4613      	mov	r3, r2
 8002814:	00db      	lsls	r3, r3, #3
 8002816:	4413      	add	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	3310      	adds	r3, #16
 800281c:	687a      	ldr	r2, [r7, #4]
 800281e:	4413      	add	r3, r2
 8002820:	3304      	adds	r3, #4
 8002822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	2201      	movs	r2, #1
 8002828:	705a      	strb	r2, [r3, #1]
 800282a:	e00d      	b.n	8002848 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	4613      	mov	r3, r2
 8002830:	00db      	lsls	r3, r3, #3
 8002832:	4413      	add	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	4413      	add	r3, r2
 800283e:	3304      	adds	r3, #4
 8002840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	2200      	movs	r2, #0
 8002846:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	2201      	movs	r2, #1
 800284c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	b2da      	uxtb	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_PCD_EP_SetStall+0x82>
 8002864:	2302      	movs	r3, #2
 8002866:	e01d      	b.n	80028a4 <HAL_PCD_EP_SetStall+0xbe>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	68f9      	ldr	r1, [r7, #12]
 8002876:	4618      	mov	r0, r3
 8002878:	f002 fa92 	bl	8004da0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	f003 030f 	and.w	r3, r3, #15
 8002882:	2b00      	cmp	r3, #0
 8002884:	d109      	bne.n	800289a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6818      	ldr	r0, [r3, #0]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	7999      	ldrb	r1, [r3, #6]
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002894:	461a      	mov	r2, r3
 8002896:	f002 fc83 	bl	80051a0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80028a2:	2300      	movs	r3, #0
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3710      	adds	r7, #16
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}

080028ac <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	460b      	mov	r3, r1
 80028b6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80028b8:	78fb      	ldrb	r3, [r7, #3]
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	687a      	ldr	r2, [r7, #4]
 80028c0:	7912      	ldrb	r2, [r2, #4]
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e042      	b.n	8002950 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028ca:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	da0f      	bge.n	80028f2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028d2:	78fb      	ldrb	r3, [r7, #3]
 80028d4:	f003 020f 	and.w	r2, r3, #15
 80028d8:	4613      	mov	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	4413      	add	r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	3310      	adds	r3, #16
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	4413      	add	r3, r2
 80028e6:	3304      	adds	r3, #4
 80028e8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2201      	movs	r2, #1
 80028ee:	705a      	strb	r2, [r3, #1]
 80028f0:	e00f      	b.n	8002912 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028f2:	78fb      	ldrb	r3, [r7, #3]
 80028f4:	f003 020f 	and.w	r2, r3, #15
 80028f8:	4613      	mov	r3, r2
 80028fa:	00db      	lsls	r3, r3, #3
 80028fc:	4413      	add	r3, r2
 80028fe:	009b      	lsls	r3, r3, #2
 8002900:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002904:	687a      	ldr	r2, [r7, #4]
 8002906:	4413      	add	r3, r2
 8002908:	3304      	adds	r3, #4
 800290a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	2200      	movs	r2, #0
 8002910:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2200      	movs	r2, #0
 8002916:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	b2da      	uxtb	r2, r3
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800292a:	2b01      	cmp	r3, #1
 800292c:	d101      	bne.n	8002932 <HAL_PCD_EP_ClrStall+0x86>
 800292e:	2302      	movs	r3, #2
 8002930:	e00e      	b.n	8002950 <HAL_PCD_EP_ClrStall+0xa4>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2201      	movs	r2, #1
 8002936:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	68f9      	ldr	r1, [r7, #12]
 8002940:	4618      	mov	r0, r3
 8002942:	f002 fa9b 	bl	8004e7c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800294e:	2300      	movs	r3, #0
}
 8002950:	4618      	mov	r0, r3
 8002952:	3710      	adds	r7, #16
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}

08002958 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	460b      	mov	r3, r1
 8002962:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002964:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002968:	2b00      	cmp	r3, #0
 800296a:	da0c      	bge.n	8002986 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800296c:	78fb      	ldrb	r3, [r7, #3]
 800296e:	f003 020f 	and.w	r2, r3, #15
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	3310      	adds	r3, #16
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	4413      	add	r3, r2
 8002980:	3304      	adds	r3, #4
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	e00c      	b.n	80029a0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	f003 020f 	and.w	r2, r3, #15
 800298c:	4613      	mov	r3, r2
 800298e:	00db      	lsls	r3, r3, #3
 8002990:	4413      	add	r3, r2
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	4413      	add	r3, r2
 800299c:	3304      	adds	r3, #4
 800299e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68f9      	ldr	r1, [r7, #12]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f002 f8ba 	bl	8004b20 <USB_EPStopXfer>
 80029ac:	4603      	mov	r3, r0
 80029ae:	72fb      	strb	r3, [r7, #11]

  return ret;
 80029b0:	7afb      	ldrb	r3, [r7, #11]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80029ba:	b580      	push	{r7, lr}
 80029bc:	b08a      	sub	sp, #40	@ 0x28
 80029be:	af02      	add	r7, sp, #8
 80029c0:	6078      	str	r0, [r7, #4]
 80029c2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	4613      	mov	r3, r2
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	3310      	adds	r3, #16
 80029da:	687a      	ldr	r2, [r7, #4]
 80029dc:	4413      	add	r3, r2
 80029de:	3304      	adds	r3, #4
 80029e0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	695a      	ldr	r2, [r3, #20]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d901      	bls.n	80029f2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e06b      	b.n	8002aca <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	691a      	ldr	r2, [r3, #16]
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	1ad3      	subs	r3, r2, r3
 80029fc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	69fa      	ldr	r2, [r7, #28]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d902      	bls.n	8002a0e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3303      	adds	r3, #3
 8002a12:	089b      	lsrs	r3, r3, #2
 8002a14:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a16:	e02a      	b.n	8002a6e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	691a      	ldr	r2, [r3, #16]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	695b      	ldr	r3, [r3, #20]
 8002a20:	1ad3      	subs	r3, r2, r3
 8002a22:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	69fa      	ldr	r2, [r7, #28]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d902      	bls.n	8002a34 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	689b      	ldr	r3, [r3, #8]
 8002a32:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a34:	69fb      	ldr	r3, [r7, #28]
 8002a36:	3303      	adds	r3, #3
 8002a38:	089b      	lsrs	r3, r3, #2
 8002a3a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	68d9      	ldr	r1, [r3, #12]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	4603      	mov	r3, r0
 8002a50:	6978      	ldr	r0, [r7, #20]
 8002a52:	f002 f90f 	bl	8004c74 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	68da      	ldr	r2, [r3, #12]
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	441a      	add	r2, r3
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	695a      	ldr	r2, [r3, #20]
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	441a      	add	r2, r3
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	015a      	lsls	r2, r3, #5
 8002a72:	693b      	ldr	r3, [r7, #16]
 8002a74:	4413      	add	r3, r2
 8002a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002a7a:	699b      	ldr	r3, [r3, #24]
 8002a7c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a7e:	69ba      	ldr	r2, [r7, #24]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d809      	bhi.n	8002a98 <PCD_WriteEmptyTxFifo+0xde>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	695a      	ldr	r2, [r3, #20]
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d203      	bcs.n	8002a98 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	691b      	ldr	r3, [r3, #16]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d1bf      	bne.n	8002a18 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	691a      	ldr	r2, [r3, #16]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d811      	bhi.n	8002ac8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	2201      	movs	r2, #1
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002ab8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	43db      	mvns	r3, r3
 8002abe:	6939      	ldr	r1, [r7, #16]
 8002ac0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002ac8:	2300      	movs	r3, #0
}
 8002aca:	4618      	mov	r0, r3
 8002acc:	3720      	adds	r7, #32
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bd80      	pop	{r7, pc}
	...

08002ad4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b088      	sub	sp, #32
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002ae8:	69fb      	ldr	r3, [r7, #28]
 8002aea:	333c      	adds	r3, #60	@ 0x3c
 8002aec:	3304      	adds	r3, #4
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	799b      	ldrb	r3, [r3, #6]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d17b      	bne.n	8002c02 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f003 0308 	and.w	r3, r3, #8
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d015      	beq.n	8002b40 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b14:	697b      	ldr	r3, [r7, #20]
 8002b16:	4a61      	ldr	r2, [pc, #388]	@ (8002c9c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	f240 80b9 	bls.w	8002c90 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b1e:	693b      	ldr	r3, [r7, #16]
 8002b20:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	f000 80b3 	beq.w	8002c90 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	015a      	lsls	r2, r3, #5
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	4413      	add	r3, r2
 8002b32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b36:	461a      	mov	r2, r3
 8002b38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b3c:	6093      	str	r3, [r2, #8]
 8002b3e:	e0a7      	b.n	8002c90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b40:	693b      	ldr	r3, [r7, #16]
 8002b42:	f003 0320 	and.w	r3, r3, #32
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d009      	beq.n	8002b5e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	015a      	lsls	r2, r3, #5
 8002b4e:	69bb      	ldr	r3, [r7, #24]
 8002b50:	4413      	add	r3, r2
 8002b52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b56:	461a      	mov	r2, r3
 8002b58:	2320      	movs	r3, #32
 8002b5a:	6093      	str	r3, [r2, #8]
 8002b5c:	e098      	b.n	8002c90 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	f040 8093 	bne.w	8002c90 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	4a4b      	ldr	r2, [pc, #300]	@ (8002c9c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d90f      	bls.n	8002b92 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002b88:	461a      	mov	r2, r3
 8002b8a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b8e:	6093      	str	r3, [r2, #8]
 8002b90:	e07e      	b.n	8002c90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	4613      	mov	r3, r2
 8002b96:	00db      	lsls	r3, r3, #3
 8002b98:	4413      	add	r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002ba0:	687a      	ldr	r2, [r7, #4]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	6a1a      	ldr	r2, [r3, #32]
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	0159      	lsls	r1, r3, #5
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bbe:	1ad2      	subs	r2, r2, r3
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d114      	bne.n	8002bf4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d109      	bne.n	8002be6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6818      	ldr	r0, [r3, #0]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002bdc:	461a      	mov	r2, r3
 8002bde:	2101      	movs	r1, #1
 8002be0:	f002 fade 	bl	80051a0 <USB_EP0_OutStart>
 8002be4:	e006      	b.n	8002bf4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	68da      	ldr	r2, [r3, #12]
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	695b      	ldr	r3, [r3, #20]
 8002bee:	441a      	add	r2, r3
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f004 fa5a 	bl	80070b4 <HAL_PCD_DataOutStageCallback>
 8002c00:	e046      	b.n	8002c90 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	4a26      	ldr	r2, [pc, #152]	@ (8002ca0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d124      	bne.n	8002c54 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	015a      	lsls	r2, r3, #5
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	4413      	add	r3, r2
 8002c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c20:	461a      	mov	r2, r3
 8002c22:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c26:	6093      	str	r3, [r2, #8]
 8002c28:	e032      	b.n	8002c90 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c2a:	693b      	ldr	r3, [r7, #16]
 8002c2c:	f003 0320 	and.w	r3, r3, #32
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d008      	beq.n	8002c46 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	015a      	lsls	r2, r3, #5
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	4413      	add	r3, r2
 8002c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002c40:	461a      	mov	r2, r3
 8002c42:	2320      	movs	r3, #32
 8002c44:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	4619      	mov	r1, r3
 8002c4c:	6878      	ldr	r0, [r7, #4]
 8002c4e:	f004 fa31 	bl	80070b4 <HAL_PCD_DataOutStageCallback>
 8002c52:	e01d      	b.n	8002c90 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d114      	bne.n	8002c84 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002c5a:	6879      	ldr	r1, [r7, #4]
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	00db      	lsls	r3, r3, #3
 8002c62:	4413      	add	r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d108      	bne.n	8002c84 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6818      	ldr	r0, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	2100      	movs	r1, #0
 8002c80:	f002 fa8e 	bl	80051a0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	b2db      	uxtb	r3, r3
 8002c88:	4619      	mov	r1, r3
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f004 fa12 	bl	80070b4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3720      	adds	r7, #32
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	4f54300a 	.word	0x4f54300a
 8002ca0:	4f54310a 	.word	0x4f54310a

08002ca4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b086      	sub	sp, #24
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	333c      	adds	r3, #60	@ 0x3c
 8002cbc:	3304      	adds	r3, #4
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	015a      	lsls	r2, r3, #5
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4413      	add	r3, r2
 8002cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a15      	ldr	r2, [pc, #84]	@ (8002d2c <PCD_EP_OutSetupPacket_int+0x88>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d90e      	bls.n	8002cf8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d009      	beq.n	8002cf8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002cf6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f004 f9c9 	bl	8007090 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	4a0a      	ldr	r2, [pc, #40]	@ (8002d2c <PCD_EP_OutSetupPacket_int+0x88>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d90c      	bls.n	8002d20 <PCD_EP_OutSetupPacket_int+0x7c>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	799b      	ldrb	r3, [r3, #6]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d108      	bne.n	8002d20 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6818      	ldr	r0, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002d18:	461a      	mov	r2, r3
 8002d1a:	2101      	movs	r1, #1
 8002d1c:	f002 fa40 	bl	80051a0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	4f54300a 	.word	0x4f54300a

08002d30 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b085      	sub	sp, #20
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	70fb      	strb	r3, [r7, #3]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d46:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d48:	78fb      	ldrb	r3, [r7, #3]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d107      	bne.n	8002d5e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d4e:	883b      	ldrh	r3, [r7, #0]
 8002d50:	0419      	lsls	r1, r3, #16
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68ba      	ldr	r2, [r7, #8]
 8002d58:	430a      	orrs	r2, r1
 8002d5a:	629a      	str	r2, [r3, #40]	@ 0x28
 8002d5c:	e028      	b.n	8002db0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d64:	0c1b      	lsrs	r3, r3, #16
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	4413      	add	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	73fb      	strb	r3, [r7, #15]
 8002d70:	e00d      	b.n	8002d8e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	7bfb      	ldrb	r3, [r7, #15]
 8002d78:	3340      	adds	r3, #64	@ 0x40
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4413      	add	r3, r2
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	0c1b      	lsrs	r3, r3, #16
 8002d82:	68ba      	ldr	r2, [r7, #8]
 8002d84:	4413      	add	r3, r2
 8002d86:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d88:	7bfb      	ldrb	r3, [r7, #15]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	73fb      	strb	r3, [r7, #15]
 8002d8e:	7bfa      	ldrb	r2, [r7, #15]
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	3b01      	subs	r3, #1
 8002d94:	429a      	cmp	r2, r3
 8002d96:	d3ec      	bcc.n	8002d72 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d98:	883b      	ldrh	r3, [r7, #0]
 8002d9a:	0418      	lsls	r0, r3, #16
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6819      	ldr	r1, [r3, #0]
 8002da0:	78fb      	ldrb	r3, [r7, #3]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	68ba      	ldr	r2, [r7, #8]
 8002da6:	4302      	orrs	r2, r0
 8002da8:	3340      	adds	r3, #64	@ 0x40
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	440b      	add	r3, r1
 8002dae:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3714      	adds	r7, #20
 8002db6:	46bd      	mov	sp, r7
 8002db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbc:	4770      	bx	lr

08002dbe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002dbe:	b480      	push	{r7}
 8002dc0:	b083      	sub	sp, #12
 8002dc2:	af00      	add	r7, sp, #0
 8002dc4:	6078      	str	r0, [r7, #4]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	887a      	ldrh	r2, [r7, #2]
 8002dd0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	370c      	adds	r7, #12
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dde:	4770      	bx	lr

08002de0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
 8002de8:	460b      	mov	r3, r1
 8002dea:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002dec:	bf00      	nop
 8002dee:	370c      	adds	r7, #12
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b086      	sub	sp, #24
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d101      	bne.n	8002e0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e06:	2301      	movs	r3, #1
 8002e08:	e267      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f003 0301 	and.w	r3, r3, #1
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d075      	beq.n	8002f02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e16:	4b88      	ldr	r3, [pc, #544]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d00c      	beq.n	8002e3c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e22:	4b85      	ldr	r3, [pc, #532]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e24:	689b      	ldr	r3, [r3, #8]
 8002e26:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e2a:	2b08      	cmp	r3, #8
 8002e2c:	d112      	bne.n	8002e54 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e2e:	4b82      	ldr	r3, [pc, #520]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e36:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e3a:	d10b      	bne.n	8002e54 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e3c:	4b7e      	ldr	r3, [pc, #504]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d05b      	beq.n	8002f00 <HAL_RCC_OscConfig+0x108>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d157      	bne.n	8002f00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e242      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e5c:	d106      	bne.n	8002e6c <HAL_RCC_OscConfig+0x74>
 8002e5e:	4b76      	ldr	r3, [pc, #472]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a75      	ldr	r2, [pc, #468]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e68:	6013      	str	r3, [r2, #0]
 8002e6a:	e01d      	b.n	8002ea8 <HAL_RCC_OscConfig+0xb0>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e74:	d10c      	bne.n	8002e90 <HAL_RCC_OscConfig+0x98>
 8002e76:	4b70      	ldr	r3, [pc, #448]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a6f      	ldr	r2, [pc, #444]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e80:	6013      	str	r3, [r2, #0]
 8002e82:	4b6d      	ldr	r3, [pc, #436]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a6c      	ldr	r2, [pc, #432]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e8c:	6013      	str	r3, [r2, #0]
 8002e8e:	e00b      	b.n	8002ea8 <HAL_RCC_OscConfig+0xb0>
 8002e90:	4b69      	ldr	r3, [pc, #420]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a68      	ldr	r2, [pc, #416]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e96:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e9a:	6013      	str	r3, [r2, #0]
 8002e9c:	4b66      	ldr	r3, [pc, #408]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a65      	ldr	r2, [pc, #404]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002ea2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ea6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d013      	beq.n	8002ed8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fd feda 	bl	8000c68 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb8:	f7fd fed6 	bl	8000c68 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	@ 0x64
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e207      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eca:	4b5b      	ldr	r3, [pc, #364]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0f0      	beq.n	8002eb8 <HAL_RCC_OscConfig+0xc0>
 8002ed6:	e014      	b.n	8002f02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7fd fec6 	bl	8000c68 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee0:	f7fd fec2 	bl	8000c68 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b64      	cmp	r3, #100	@ 0x64
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e1f3      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ef2:	4b51      	ldr	r3, [pc, #324]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d1f0      	bne.n	8002ee0 <HAL_RCC_OscConfig+0xe8>
 8002efe:	e000      	b.n	8002f02 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d063      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f0e:	4b4a      	ldr	r3, [pc, #296]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	f003 030c 	and.w	r3, r3, #12
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d00b      	beq.n	8002f32 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f1a:	4b47      	ldr	r3, [pc, #284]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f22:	2b08      	cmp	r3, #8
 8002f24:	d11c      	bne.n	8002f60 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f26:	4b44      	ldr	r3, [pc, #272]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d116      	bne.n	8002f60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f32:	4b41      	ldr	r3, [pc, #260]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0302 	and.w	r3, r3, #2
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d005      	beq.n	8002f4a <HAL_RCC_OscConfig+0x152>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d001      	beq.n	8002f4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	e1c7      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f4a:	4b3b      	ldr	r3, [pc, #236]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4937      	ldr	r1, [pc, #220]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5e:	e03a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	68db      	ldr	r3, [r3, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d020      	beq.n	8002faa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f68:	4b34      	ldr	r3, [pc, #208]	@ (800303c <HAL_RCC_OscConfig+0x244>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f6e:	f7fd fe7b 	bl	8000c68 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f74:	e008      	b.n	8002f88 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f76:	f7fd fe77 	bl	8000c68 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	2b02      	cmp	r3, #2
 8002f82:	d901      	bls.n	8002f88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f84:	2303      	movs	r3, #3
 8002f86:	e1a8      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f88:	4b2b      	ldr	r3, [pc, #172]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f003 0302 	and.w	r3, r3, #2
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d0f0      	beq.n	8002f76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f94:	4b28      	ldr	r3, [pc, #160]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	691b      	ldr	r3, [r3, #16]
 8002fa0:	00db      	lsls	r3, r3, #3
 8002fa2:	4925      	ldr	r1, [pc, #148]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	600b      	str	r3, [r1, #0]
 8002fa8:	e015      	b.n	8002fd6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002faa:	4b24      	ldr	r3, [pc, #144]	@ (800303c <HAL_RCC_OscConfig+0x244>)
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb0:	f7fd fe5a 	bl	8000c68 <HAL_GetTick>
 8002fb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fb6:	e008      	b.n	8002fca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fb8:	f7fd fe56 	bl	8000c68 <HAL_GetTick>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	1ad3      	subs	r3, r2, r3
 8002fc2:	2b02      	cmp	r3, #2
 8002fc4:	d901      	bls.n	8002fca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	e187      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fca:	4b1b      	ldr	r3, [pc, #108]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d1f0      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f003 0308 	and.w	r3, r3, #8
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d036      	beq.n	8003050 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	695b      	ldr	r3, [r3, #20]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d016      	beq.n	8003018 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fea:	4b15      	ldr	r3, [pc, #84]	@ (8003040 <HAL_RCC_OscConfig+0x248>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff0:	f7fd fe3a 	bl	8000c68 <HAL_GetTick>
 8002ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ff6:	e008      	b.n	800300a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ff8:	f7fd fe36 	bl	8000c68 <HAL_GetTick>
 8002ffc:	4602      	mov	r2, r0
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	1ad3      	subs	r3, r2, r3
 8003002:	2b02      	cmp	r3, #2
 8003004:	d901      	bls.n	800300a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003006:	2303      	movs	r3, #3
 8003008:	e167      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800300a:	4b0b      	ldr	r3, [pc, #44]	@ (8003038 <HAL_RCC_OscConfig+0x240>)
 800300c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800300e:	f003 0302 	and.w	r3, r3, #2
 8003012:	2b00      	cmp	r3, #0
 8003014:	d0f0      	beq.n	8002ff8 <HAL_RCC_OscConfig+0x200>
 8003016:	e01b      	b.n	8003050 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003018:	4b09      	ldr	r3, [pc, #36]	@ (8003040 <HAL_RCC_OscConfig+0x248>)
 800301a:	2200      	movs	r2, #0
 800301c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800301e:	f7fd fe23 	bl	8000c68 <HAL_GetTick>
 8003022:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003024:	e00e      	b.n	8003044 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003026:	f7fd fe1f 	bl	8000c68 <HAL_GetTick>
 800302a:	4602      	mov	r2, r0
 800302c:	693b      	ldr	r3, [r7, #16]
 800302e:	1ad3      	subs	r3, r2, r3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d907      	bls.n	8003044 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e150      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
 8003038:	40023800 	.word	0x40023800
 800303c:	42470000 	.word	0x42470000
 8003040:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003044:	4b88      	ldr	r3, [pc, #544]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 8003046:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1ea      	bne.n	8003026 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0304 	and.w	r3, r3, #4
 8003058:	2b00      	cmp	r3, #0
 800305a:	f000 8097 	beq.w	800318c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800305e:	2300      	movs	r3, #0
 8003060:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003062:	4b81      	ldr	r3, [pc, #516]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003066:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d10f      	bne.n	800308e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800306e:	2300      	movs	r3, #0
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	4b7d      	ldr	r3, [pc, #500]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003076:	4a7c      	ldr	r2, [pc, #496]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 8003078:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800307c:	6413      	str	r3, [r2, #64]	@ 0x40
 800307e:	4b7a      	ldr	r3, [pc, #488]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003086:	60bb      	str	r3, [r7, #8]
 8003088:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800308a:	2301      	movs	r3, #1
 800308c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800308e:	4b77      	ldr	r3, [pc, #476]	@ (800326c <HAL_RCC_OscConfig+0x474>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003096:	2b00      	cmp	r3, #0
 8003098:	d118      	bne.n	80030cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800309a:	4b74      	ldr	r3, [pc, #464]	@ (800326c <HAL_RCC_OscConfig+0x474>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	4a73      	ldr	r2, [pc, #460]	@ (800326c <HAL_RCC_OscConfig+0x474>)
 80030a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030a6:	f7fd fddf 	bl	8000c68 <HAL_GetTick>
 80030aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ac:	e008      	b.n	80030c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030ae:	f7fd fddb 	bl	8000c68 <HAL_GetTick>
 80030b2:	4602      	mov	r2, r0
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	1ad3      	subs	r3, r2, r3
 80030b8:	2b02      	cmp	r3, #2
 80030ba:	d901      	bls.n	80030c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e10c      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030c0:	4b6a      	ldr	r3, [pc, #424]	@ (800326c <HAL_RCC_OscConfig+0x474>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f0      	beq.n	80030ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d106      	bne.n	80030e2 <HAL_RCC_OscConfig+0x2ea>
 80030d4:	4b64      	ldr	r3, [pc, #400]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 80030d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d8:	4a63      	ldr	r2, [pc, #396]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 80030da:	f043 0301 	orr.w	r3, r3, #1
 80030de:	6713      	str	r3, [r2, #112]	@ 0x70
 80030e0:	e01c      	b.n	800311c <HAL_RCC_OscConfig+0x324>
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	2b05      	cmp	r3, #5
 80030e8:	d10c      	bne.n	8003104 <HAL_RCC_OscConfig+0x30c>
 80030ea:	4b5f      	ldr	r3, [pc, #380]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 80030ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ee:	4a5e      	ldr	r2, [pc, #376]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 80030f0:	f043 0304 	orr.w	r3, r3, #4
 80030f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80030f6:	4b5c      	ldr	r3, [pc, #368]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 80030f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030fa:	4a5b      	ldr	r2, [pc, #364]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 80030fc:	f043 0301 	orr.w	r3, r3, #1
 8003100:	6713      	str	r3, [r2, #112]	@ 0x70
 8003102:	e00b      	b.n	800311c <HAL_RCC_OscConfig+0x324>
 8003104:	4b58      	ldr	r3, [pc, #352]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 8003106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003108:	4a57      	ldr	r2, [pc, #348]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 800310a:	f023 0301 	bic.w	r3, r3, #1
 800310e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003110:	4b55      	ldr	r3, [pc, #340]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 8003112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003114:	4a54      	ldr	r2, [pc, #336]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 8003116:	f023 0304 	bic.w	r3, r3, #4
 800311a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	2b00      	cmp	r3, #0
 8003122:	d015      	beq.n	8003150 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003124:	f7fd fda0 	bl	8000c68 <HAL_GetTick>
 8003128:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800312a:	e00a      	b.n	8003142 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800312c:	f7fd fd9c 	bl	8000c68 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	693b      	ldr	r3, [r7, #16]
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800313a:	4293      	cmp	r3, r2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e0cb      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003142:	4b49      	ldr	r3, [pc, #292]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 8003144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0ee      	beq.n	800312c <HAL_RCC_OscConfig+0x334>
 800314e:	e014      	b.n	800317a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003150:	f7fd fd8a 	bl	8000c68 <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003156:	e00a      	b.n	800316e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003158:	f7fd fd86 	bl	8000c68 <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e0b5      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800316e:	4b3e      	ldr	r3, [pc, #248]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d1ee      	bne.n	8003158 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800317a:	7dfb      	ldrb	r3, [r7, #23]
 800317c:	2b01      	cmp	r3, #1
 800317e:	d105      	bne.n	800318c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003180:	4b39      	ldr	r3, [pc, #228]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 8003182:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003184:	4a38      	ldr	r2, [pc, #224]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 8003186:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800318a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	699b      	ldr	r3, [r3, #24]
 8003190:	2b00      	cmp	r3, #0
 8003192:	f000 80a1 	beq.w	80032d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003196:	4b34      	ldr	r3, [pc, #208]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f003 030c 	and.w	r3, r3, #12
 800319e:	2b08      	cmp	r3, #8
 80031a0:	d05c      	beq.n	800325c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	699b      	ldr	r3, [r3, #24]
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d141      	bne.n	800322e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031aa:	4b31      	ldr	r3, [pc, #196]	@ (8003270 <HAL_RCC_OscConfig+0x478>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031b0:	f7fd fd5a 	bl	8000c68 <HAL_GetTick>
 80031b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b6:	e008      	b.n	80031ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031b8:	f7fd fd56 	bl	8000c68 <HAL_GetTick>
 80031bc:	4602      	mov	r2, r0
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	1ad3      	subs	r3, r2, r3
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d901      	bls.n	80031ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031c6:	2303      	movs	r3, #3
 80031c8:	e087      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ca:	4b27      	ldr	r3, [pc, #156]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f0      	bne.n	80031b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69da      	ldr	r2, [r3, #28]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	431a      	orrs	r2, r3
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e4:	019b      	lsls	r3, r3, #6
 80031e6:	431a      	orrs	r2, r3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ec:	085b      	lsrs	r3, r3, #1
 80031ee:	3b01      	subs	r3, #1
 80031f0:	041b      	lsls	r3, r3, #16
 80031f2:	431a      	orrs	r2, r3
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031f8:	061b      	lsls	r3, r3, #24
 80031fa:	491b      	ldr	r1, [pc, #108]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 80031fc:	4313      	orrs	r3, r2
 80031fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003200:	4b1b      	ldr	r3, [pc, #108]	@ (8003270 <HAL_RCC_OscConfig+0x478>)
 8003202:	2201      	movs	r2, #1
 8003204:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003206:	f7fd fd2f 	bl	8000c68 <HAL_GetTick>
 800320a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800320c:	e008      	b.n	8003220 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800320e:	f7fd fd2b 	bl	8000c68 <HAL_GetTick>
 8003212:	4602      	mov	r2, r0
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	1ad3      	subs	r3, r2, r3
 8003218:	2b02      	cmp	r3, #2
 800321a:	d901      	bls.n	8003220 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800321c:	2303      	movs	r3, #3
 800321e:	e05c      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003220:	4b11      	ldr	r3, [pc, #68]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d0f0      	beq.n	800320e <HAL_RCC_OscConfig+0x416>
 800322c:	e054      	b.n	80032d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800322e:	4b10      	ldr	r3, [pc, #64]	@ (8003270 <HAL_RCC_OscConfig+0x478>)
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003234:	f7fd fd18 	bl	8000c68 <HAL_GetTick>
 8003238:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323a:	e008      	b.n	800324e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800323c:	f7fd fd14 	bl	8000c68 <HAL_GetTick>
 8003240:	4602      	mov	r2, r0
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	1ad3      	subs	r3, r2, r3
 8003246:	2b02      	cmp	r3, #2
 8003248:	d901      	bls.n	800324e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800324a:	2303      	movs	r3, #3
 800324c:	e045      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800324e:	4b06      	ldr	r3, [pc, #24]	@ (8003268 <HAL_RCC_OscConfig+0x470>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003256:	2b00      	cmp	r3, #0
 8003258:	d1f0      	bne.n	800323c <HAL_RCC_OscConfig+0x444>
 800325a:	e03d      	b.n	80032d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d107      	bne.n	8003274 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003264:	2301      	movs	r3, #1
 8003266:	e038      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
 8003268:	40023800 	.word	0x40023800
 800326c:	40007000 	.word	0x40007000
 8003270:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003274:	4b1b      	ldr	r3, [pc, #108]	@ (80032e4 <HAL_RCC_OscConfig+0x4ec>)
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	2b01      	cmp	r3, #1
 8003280:	d028      	beq.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800328c:	429a      	cmp	r2, r3
 800328e:	d121      	bne.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800329a:	429a      	cmp	r2, r3
 800329c:	d11a      	bne.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032a4:	4013      	ands	r3, r2
 80032a6:	687a      	ldr	r2, [r7, #4]
 80032a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d111      	bne.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032ba:	085b      	lsrs	r3, r3, #1
 80032bc:	3b01      	subs	r3, #1
 80032be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032c0:	429a      	cmp	r2, r3
 80032c2:	d107      	bne.n	80032d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d001      	beq.n	80032d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80032d4:	2301      	movs	r3, #1
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3718      	adds	r7, #24
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800

080032e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b084      	sub	sp, #16
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
 80032f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d101      	bne.n	80032fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0cc      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032fc:	4b68      	ldr	r3, [pc, #416]	@ (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0307 	and.w	r3, r3, #7
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	429a      	cmp	r2, r3
 8003308:	d90c      	bls.n	8003324 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330a:	4b65      	ldr	r3, [pc, #404]	@ (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 800330c:	683a      	ldr	r2, [r7, #0]
 800330e:	b2d2      	uxtb	r2, r2
 8003310:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003312:	4b63      	ldr	r3, [pc, #396]	@ (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0307 	and.w	r3, r3, #7
 800331a:	683a      	ldr	r2, [r7, #0]
 800331c:	429a      	cmp	r2, r3
 800331e:	d001      	beq.n	8003324 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0b8      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0302 	and.w	r3, r3, #2
 800332c:	2b00      	cmp	r3, #0
 800332e:	d020      	beq.n	8003372 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b00      	cmp	r3, #0
 800333a:	d005      	beq.n	8003348 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800333c:	4b59      	ldr	r3, [pc, #356]	@ (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	4a58      	ldr	r2, [pc, #352]	@ (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003346:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0308 	and.w	r3, r3, #8
 8003350:	2b00      	cmp	r3, #0
 8003352:	d005      	beq.n	8003360 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003354:	4b53      	ldr	r3, [pc, #332]	@ (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003356:	689b      	ldr	r3, [r3, #8]
 8003358:	4a52      	ldr	r2, [pc, #328]	@ (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800335a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800335e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003360:	4b50      	ldr	r3, [pc, #320]	@ (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	494d      	ldr	r1, [pc, #308]	@ (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	4313      	orrs	r3, r2
 8003370:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f003 0301 	and.w	r3, r3, #1
 800337a:	2b00      	cmp	r3, #0
 800337c:	d044      	beq.n	8003408 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d107      	bne.n	8003396 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003386:	4b47      	ldr	r3, [pc, #284]	@ (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d119      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e07f      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	685b      	ldr	r3, [r3, #4]
 800339a:	2b02      	cmp	r3, #2
 800339c:	d003      	beq.n	80033a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d107      	bne.n	80033b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a6:	4b3f      	ldr	r3, [pc, #252]	@ (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d109      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e06f      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b6:	4b3b      	ldr	r3, [pc, #236]	@ (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f003 0302 	and.w	r3, r3, #2
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e067      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033c6:	4b37      	ldr	r3, [pc, #220]	@ (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f023 0203 	bic.w	r2, r3, #3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	4934      	ldr	r1, [pc, #208]	@ (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	4313      	orrs	r3, r2
 80033d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033d8:	f7fd fc46 	bl	8000c68 <HAL_GetTick>
 80033dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033de:	e00a      	b.n	80033f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033e0:	f7fd fc42 	bl	8000c68 <HAL_GetTick>
 80033e4:	4602      	mov	r2, r0
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	1ad3      	subs	r3, r2, r3
 80033ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d901      	bls.n	80033f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033f2:	2303      	movs	r3, #3
 80033f4:	e04f      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f6:	4b2b      	ldr	r3, [pc, #172]	@ (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 020c 	and.w	r2, r3, #12
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	429a      	cmp	r2, r3
 8003406:	d1eb      	bne.n	80033e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003408:	4b25      	ldr	r3, [pc, #148]	@ (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0307 	and.w	r3, r3, #7
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d20c      	bcs.n	8003430 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003416:	4b22      	ldr	r3, [pc, #136]	@ (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003418:	683a      	ldr	r2, [r7, #0]
 800341a:	b2d2      	uxtb	r2, r2
 800341c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800341e:	4b20      	ldr	r3, [pc, #128]	@ (80034a0 <HAL_RCC_ClockConfig+0x1b8>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d001      	beq.n	8003430 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e032      	b.n	8003496 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d008      	beq.n	800344e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800343c:	4b19      	ldr	r3, [pc, #100]	@ (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	4916      	ldr	r1, [pc, #88]	@ (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800344a:	4313      	orrs	r3, r2
 800344c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f003 0308 	and.w	r3, r3, #8
 8003456:	2b00      	cmp	r3, #0
 8003458:	d009      	beq.n	800346e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800345a:	4b12      	ldr	r3, [pc, #72]	@ (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	490e      	ldr	r1, [pc, #56]	@ (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	4313      	orrs	r3, r2
 800346c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800346e:	f000 f821 	bl	80034b4 <HAL_RCC_GetSysClockFreq>
 8003472:	4602      	mov	r2, r0
 8003474:	4b0b      	ldr	r3, [pc, #44]	@ (80034a4 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	091b      	lsrs	r3, r3, #4
 800347a:	f003 030f 	and.w	r3, r3, #15
 800347e:	490a      	ldr	r1, [pc, #40]	@ (80034a8 <HAL_RCC_ClockConfig+0x1c0>)
 8003480:	5ccb      	ldrb	r3, [r1, r3]
 8003482:	fa22 f303 	lsr.w	r3, r2, r3
 8003486:	4a09      	ldr	r2, [pc, #36]	@ (80034ac <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800348a:	4b09      	ldr	r3, [pc, #36]	@ (80034b0 <HAL_RCC_ClockConfig+0x1c8>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7fd fba6 	bl	8000be0 <HAL_InitTick>

  return HAL_OK;
 8003494:	2300      	movs	r3, #0
}
 8003496:	4618      	mov	r0, r3
 8003498:	3710      	adds	r7, #16
 800349a:	46bd      	mov	sp, r7
 800349c:	bd80      	pop	{r7, pc}
 800349e:	bf00      	nop
 80034a0:	40023c00 	.word	0x40023c00
 80034a4:	40023800 	.word	0x40023800
 80034a8:	08007690 	.word	0x08007690
 80034ac:	20000000 	.word	0x20000000
 80034b0:	20000004 	.word	0x20000004

080034b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034b8:	b090      	sub	sp, #64	@ 0x40
 80034ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034bc:	2300      	movs	r3, #0
 80034be:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80034c0:	2300      	movs	r3, #0
 80034c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80034c4:	2300      	movs	r3, #0
 80034c6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80034c8:	2300      	movs	r3, #0
 80034ca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034cc:	4b59      	ldr	r3, [pc, #356]	@ (8003634 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d00d      	beq.n	80034f4 <HAL_RCC_GetSysClockFreq+0x40>
 80034d8:	2b08      	cmp	r3, #8
 80034da:	f200 80a1 	bhi.w	8003620 <HAL_RCC_GetSysClockFreq+0x16c>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d002      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0x34>
 80034e2:	2b04      	cmp	r3, #4
 80034e4:	d003      	beq.n	80034ee <HAL_RCC_GetSysClockFreq+0x3a>
 80034e6:	e09b      	b.n	8003620 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034e8:	4b53      	ldr	r3, [pc, #332]	@ (8003638 <HAL_RCC_GetSysClockFreq+0x184>)
 80034ea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034ec:	e09b      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034ee:	4b53      	ldr	r3, [pc, #332]	@ (800363c <HAL_RCC_GetSysClockFreq+0x188>)
 80034f0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034f2:	e098      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034f4:	4b4f      	ldr	r3, [pc, #316]	@ (8003634 <HAL_RCC_GetSysClockFreq+0x180>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034fc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034fe:	4b4d      	ldr	r3, [pc, #308]	@ (8003634 <HAL_RCC_GetSysClockFreq+0x180>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d028      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800350a:	4b4a      	ldr	r3, [pc, #296]	@ (8003634 <HAL_RCC_GetSysClockFreq+0x180>)
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	099b      	lsrs	r3, r3, #6
 8003510:	2200      	movs	r2, #0
 8003512:	623b      	str	r3, [r7, #32]
 8003514:	627a      	str	r2, [r7, #36]	@ 0x24
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800351c:	2100      	movs	r1, #0
 800351e:	4b47      	ldr	r3, [pc, #284]	@ (800363c <HAL_RCC_GetSysClockFreq+0x188>)
 8003520:	fb03 f201 	mul.w	r2, r3, r1
 8003524:	2300      	movs	r3, #0
 8003526:	fb00 f303 	mul.w	r3, r0, r3
 800352a:	4413      	add	r3, r2
 800352c:	4a43      	ldr	r2, [pc, #268]	@ (800363c <HAL_RCC_GetSysClockFreq+0x188>)
 800352e:	fba0 1202 	umull	r1, r2, r0, r2
 8003532:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003534:	460a      	mov	r2, r1
 8003536:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003538:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800353a:	4413      	add	r3, r2
 800353c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800353e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003540:	2200      	movs	r2, #0
 8003542:	61bb      	str	r3, [r7, #24]
 8003544:	61fa      	str	r2, [r7, #28]
 8003546:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800354a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800354e:	f7fc fe41 	bl	80001d4 <__aeabi_uldivmod>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	4613      	mov	r3, r2
 8003558:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800355a:	e053      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800355c:	4b35      	ldr	r3, [pc, #212]	@ (8003634 <HAL_RCC_GetSysClockFreq+0x180>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	2200      	movs	r2, #0
 8003564:	613b      	str	r3, [r7, #16]
 8003566:	617a      	str	r2, [r7, #20]
 8003568:	693b      	ldr	r3, [r7, #16]
 800356a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800356e:	f04f 0b00 	mov.w	fp, #0
 8003572:	4652      	mov	r2, sl
 8003574:	465b      	mov	r3, fp
 8003576:	f04f 0000 	mov.w	r0, #0
 800357a:	f04f 0100 	mov.w	r1, #0
 800357e:	0159      	lsls	r1, r3, #5
 8003580:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003584:	0150      	lsls	r0, r2, #5
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	ebb2 080a 	subs.w	r8, r2, sl
 800358e:	eb63 090b 	sbc.w	r9, r3, fp
 8003592:	f04f 0200 	mov.w	r2, #0
 8003596:	f04f 0300 	mov.w	r3, #0
 800359a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800359e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035a6:	ebb2 0408 	subs.w	r4, r2, r8
 80035aa:	eb63 0509 	sbc.w	r5, r3, r9
 80035ae:	f04f 0200 	mov.w	r2, #0
 80035b2:	f04f 0300 	mov.w	r3, #0
 80035b6:	00eb      	lsls	r3, r5, #3
 80035b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035bc:	00e2      	lsls	r2, r4, #3
 80035be:	4614      	mov	r4, r2
 80035c0:	461d      	mov	r5, r3
 80035c2:	eb14 030a 	adds.w	r3, r4, sl
 80035c6:	603b      	str	r3, [r7, #0]
 80035c8:	eb45 030b 	adc.w	r3, r5, fp
 80035cc:	607b      	str	r3, [r7, #4]
 80035ce:	f04f 0200 	mov.w	r2, #0
 80035d2:	f04f 0300 	mov.w	r3, #0
 80035d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035da:	4629      	mov	r1, r5
 80035dc:	028b      	lsls	r3, r1, #10
 80035de:	4621      	mov	r1, r4
 80035e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035e4:	4621      	mov	r1, r4
 80035e6:	028a      	lsls	r2, r1, #10
 80035e8:	4610      	mov	r0, r2
 80035ea:	4619      	mov	r1, r3
 80035ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035ee:	2200      	movs	r2, #0
 80035f0:	60bb      	str	r3, [r7, #8]
 80035f2:	60fa      	str	r2, [r7, #12]
 80035f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035f8:	f7fc fdec 	bl	80001d4 <__aeabi_uldivmod>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4613      	mov	r3, r2
 8003602:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003604:	4b0b      	ldr	r3, [pc, #44]	@ (8003634 <HAL_RCC_GetSysClockFreq+0x180>)
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	0c1b      	lsrs	r3, r3, #16
 800360a:	f003 0303 	and.w	r3, r3, #3
 800360e:	3301      	adds	r3, #1
 8003610:	005b      	lsls	r3, r3, #1
 8003612:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003614:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003618:	fbb2 f3f3 	udiv	r3, r2, r3
 800361c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800361e:	e002      	b.n	8003626 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003620:	4b05      	ldr	r3, [pc, #20]	@ (8003638 <HAL_RCC_GetSysClockFreq+0x184>)
 8003622:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003624:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003628:	4618      	mov	r0, r3
 800362a:	3740      	adds	r7, #64	@ 0x40
 800362c:	46bd      	mov	sp, r7
 800362e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003632:	bf00      	nop
 8003634:	40023800 	.word	0x40023800
 8003638:	00f42400 	.word	0x00f42400
 800363c:	017d7840 	.word	0x017d7840

08003640 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003644:	4b03      	ldr	r3, [pc, #12]	@ (8003654 <HAL_RCC_GetHCLKFreq+0x14>)
 8003646:	681b      	ldr	r3, [r3, #0]
}
 8003648:	4618      	mov	r0, r3
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	20000000 	.word	0x20000000

08003658 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800365c:	f7ff fff0 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 8003660:	4602      	mov	r2, r0
 8003662:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	0a9b      	lsrs	r3, r3, #10
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	4903      	ldr	r1, [pc, #12]	@ (800367c <HAL_RCC_GetPCLK1Freq+0x24>)
 800366e:	5ccb      	ldrb	r3, [r1, r3]
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40023800 	.word	0x40023800
 800367c:	080076a0 	.word	0x080076a0

08003680 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003684:	f7ff ffdc 	bl	8003640 <HAL_RCC_GetHCLKFreq>
 8003688:	4602      	mov	r2, r0
 800368a:	4b05      	ldr	r3, [pc, #20]	@ (80036a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	0b5b      	lsrs	r3, r3, #13
 8003690:	f003 0307 	and.w	r3, r3, #7
 8003694:	4903      	ldr	r1, [pc, #12]	@ (80036a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003696:	5ccb      	ldrb	r3, [r1, r3]
 8003698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800369c:	4618      	mov	r0, r3
 800369e:	bd80      	pop	{r7, pc}
 80036a0:	40023800 	.word	0x40023800
 80036a4:	080076a0 	.word	0x080076a0

080036a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d101      	bne.n	80036ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036b6:	2301      	movs	r3, #1
 80036b8:	e042      	b.n	8003740 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d106      	bne.n	80036d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f7fd f9a6 	bl	8000a20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2224      	movs	r2, #36	@ 0x24
 80036d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68da      	ldr	r2, [r3, #12]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80036ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f000 f82b 	bl	8003748 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	691a      	ldr	r2, [r3, #16]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003700:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	695a      	ldr	r2, [r3, #20]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003710:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003720:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2220      	movs	r2, #32
 8003734:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2200      	movs	r2, #0
 800373c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800373e:	2300      	movs	r3, #0
}
 8003740:	4618      	mov	r0, r3
 8003742:	3708      	adds	r7, #8
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003748:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800374c:	b0c0      	sub	sp, #256	@ 0x100
 800374e:	af00      	add	r7, sp, #0
 8003750:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003754:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003760:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003764:	68d9      	ldr	r1, [r3, #12]
 8003766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800376a:	681a      	ldr	r2, [r3, #0]
 800376c:	ea40 0301 	orr.w	r3, r0, r1
 8003770:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	431a      	orrs	r2, r3
 8003780:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003784:	695b      	ldr	r3, [r3, #20]
 8003786:	431a      	orrs	r2, r3
 8003788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80037a0:	f021 010c 	bic.w	r1, r1, #12
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80037ae:	430b      	orrs	r3, r1
 80037b0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80037b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80037be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c2:	6999      	ldr	r1, [r3, #24]
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	ea40 0301 	orr.w	r3, r0, r1
 80037ce:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80037d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	4b8f      	ldr	r3, [pc, #572]	@ (8003a14 <UART_SetConfig+0x2cc>)
 80037d8:	429a      	cmp	r2, r3
 80037da:	d005      	beq.n	80037e8 <UART_SetConfig+0xa0>
 80037dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	4b8d      	ldr	r3, [pc, #564]	@ (8003a18 <UART_SetConfig+0x2d0>)
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d104      	bne.n	80037f2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037e8:	f7ff ff4a 	bl	8003680 <HAL_RCC_GetPCLK2Freq>
 80037ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80037f0:	e003      	b.n	80037fa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037f2:	f7ff ff31 	bl	8003658 <HAL_RCC_GetPCLK1Freq>
 80037f6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037fe:	69db      	ldr	r3, [r3, #28]
 8003800:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003804:	f040 810c 	bne.w	8003a20 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800380c:	2200      	movs	r2, #0
 800380e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003812:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003816:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800381a:	4622      	mov	r2, r4
 800381c:	462b      	mov	r3, r5
 800381e:	1891      	adds	r1, r2, r2
 8003820:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003822:	415b      	adcs	r3, r3
 8003824:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003826:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800382a:	4621      	mov	r1, r4
 800382c:	eb12 0801 	adds.w	r8, r2, r1
 8003830:	4629      	mov	r1, r5
 8003832:	eb43 0901 	adc.w	r9, r3, r1
 8003836:	f04f 0200 	mov.w	r2, #0
 800383a:	f04f 0300 	mov.w	r3, #0
 800383e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003842:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003846:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800384a:	4690      	mov	r8, r2
 800384c:	4699      	mov	r9, r3
 800384e:	4623      	mov	r3, r4
 8003850:	eb18 0303 	adds.w	r3, r8, r3
 8003854:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003858:	462b      	mov	r3, r5
 800385a:	eb49 0303 	adc.w	r3, r9, r3
 800385e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800386e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003872:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003876:	460b      	mov	r3, r1
 8003878:	18db      	adds	r3, r3, r3
 800387a:	653b      	str	r3, [r7, #80]	@ 0x50
 800387c:	4613      	mov	r3, r2
 800387e:	eb42 0303 	adc.w	r3, r2, r3
 8003882:	657b      	str	r3, [r7, #84]	@ 0x54
 8003884:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003888:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800388c:	f7fc fca2 	bl	80001d4 <__aeabi_uldivmod>
 8003890:	4602      	mov	r2, r0
 8003892:	460b      	mov	r3, r1
 8003894:	4b61      	ldr	r3, [pc, #388]	@ (8003a1c <UART_SetConfig+0x2d4>)
 8003896:	fba3 2302 	umull	r2, r3, r3, r2
 800389a:	095b      	lsrs	r3, r3, #5
 800389c:	011c      	lsls	r4, r3, #4
 800389e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80038a2:	2200      	movs	r2, #0
 80038a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80038a8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80038ac:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80038b0:	4642      	mov	r2, r8
 80038b2:	464b      	mov	r3, r9
 80038b4:	1891      	adds	r1, r2, r2
 80038b6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80038b8:	415b      	adcs	r3, r3
 80038ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80038bc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80038c0:	4641      	mov	r1, r8
 80038c2:	eb12 0a01 	adds.w	sl, r2, r1
 80038c6:	4649      	mov	r1, r9
 80038c8:	eb43 0b01 	adc.w	fp, r3, r1
 80038cc:	f04f 0200 	mov.w	r2, #0
 80038d0:	f04f 0300 	mov.w	r3, #0
 80038d4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038d8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038dc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038e0:	4692      	mov	sl, r2
 80038e2:	469b      	mov	fp, r3
 80038e4:	4643      	mov	r3, r8
 80038e6:	eb1a 0303 	adds.w	r3, sl, r3
 80038ea:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038ee:	464b      	mov	r3, r9
 80038f0:	eb4b 0303 	adc.w	r3, fp, r3
 80038f4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003904:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003908:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800390c:	460b      	mov	r3, r1
 800390e:	18db      	adds	r3, r3, r3
 8003910:	643b      	str	r3, [r7, #64]	@ 0x40
 8003912:	4613      	mov	r3, r2
 8003914:	eb42 0303 	adc.w	r3, r2, r3
 8003918:	647b      	str	r3, [r7, #68]	@ 0x44
 800391a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800391e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003922:	f7fc fc57 	bl	80001d4 <__aeabi_uldivmod>
 8003926:	4602      	mov	r2, r0
 8003928:	460b      	mov	r3, r1
 800392a:	4611      	mov	r1, r2
 800392c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a1c <UART_SetConfig+0x2d4>)
 800392e:	fba3 2301 	umull	r2, r3, r3, r1
 8003932:	095b      	lsrs	r3, r3, #5
 8003934:	2264      	movs	r2, #100	@ 0x64
 8003936:	fb02 f303 	mul.w	r3, r2, r3
 800393a:	1acb      	subs	r3, r1, r3
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003942:	4b36      	ldr	r3, [pc, #216]	@ (8003a1c <UART_SetConfig+0x2d4>)
 8003944:	fba3 2302 	umull	r2, r3, r3, r2
 8003948:	095b      	lsrs	r3, r3, #5
 800394a:	005b      	lsls	r3, r3, #1
 800394c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003950:	441c      	add	r4, r3
 8003952:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003956:	2200      	movs	r2, #0
 8003958:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800395c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003960:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003964:	4642      	mov	r2, r8
 8003966:	464b      	mov	r3, r9
 8003968:	1891      	adds	r1, r2, r2
 800396a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800396c:	415b      	adcs	r3, r3
 800396e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003970:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003974:	4641      	mov	r1, r8
 8003976:	1851      	adds	r1, r2, r1
 8003978:	6339      	str	r1, [r7, #48]	@ 0x30
 800397a:	4649      	mov	r1, r9
 800397c:	414b      	adcs	r3, r1
 800397e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003980:	f04f 0200 	mov.w	r2, #0
 8003984:	f04f 0300 	mov.w	r3, #0
 8003988:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800398c:	4659      	mov	r1, fp
 800398e:	00cb      	lsls	r3, r1, #3
 8003990:	4651      	mov	r1, sl
 8003992:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003996:	4651      	mov	r1, sl
 8003998:	00ca      	lsls	r2, r1, #3
 800399a:	4610      	mov	r0, r2
 800399c:	4619      	mov	r1, r3
 800399e:	4603      	mov	r3, r0
 80039a0:	4642      	mov	r2, r8
 80039a2:	189b      	adds	r3, r3, r2
 80039a4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039a8:	464b      	mov	r3, r9
 80039aa:	460a      	mov	r2, r1
 80039ac:	eb42 0303 	adc.w	r3, r2, r3
 80039b0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80039c0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80039c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80039c8:	460b      	mov	r3, r1
 80039ca:	18db      	adds	r3, r3, r3
 80039cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039ce:	4613      	mov	r3, r2
 80039d0:	eb42 0303 	adc.w	r3, r2, r3
 80039d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80039d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039da:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80039de:	f7fc fbf9 	bl	80001d4 <__aeabi_uldivmod>
 80039e2:	4602      	mov	r2, r0
 80039e4:	460b      	mov	r3, r1
 80039e6:	4b0d      	ldr	r3, [pc, #52]	@ (8003a1c <UART_SetConfig+0x2d4>)
 80039e8:	fba3 1302 	umull	r1, r3, r3, r2
 80039ec:	095b      	lsrs	r3, r3, #5
 80039ee:	2164      	movs	r1, #100	@ 0x64
 80039f0:	fb01 f303 	mul.w	r3, r1, r3
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	00db      	lsls	r3, r3, #3
 80039f8:	3332      	adds	r3, #50	@ 0x32
 80039fa:	4a08      	ldr	r2, [pc, #32]	@ (8003a1c <UART_SetConfig+0x2d4>)
 80039fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003a00:	095b      	lsrs	r3, r3, #5
 8003a02:	f003 0207 	and.w	r2, r3, #7
 8003a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4422      	add	r2, r4
 8003a0e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003a10:	e106      	b.n	8003c20 <UART_SetConfig+0x4d8>
 8003a12:	bf00      	nop
 8003a14:	40011000 	.word	0x40011000
 8003a18:	40011400 	.word	0x40011400
 8003a1c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a24:	2200      	movs	r2, #0
 8003a26:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003a2a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003a2e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003a32:	4642      	mov	r2, r8
 8003a34:	464b      	mov	r3, r9
 8003a36:	1891      	adds	r1, r2, r2
 8003a38:	6239      	str	r1, [r7, #32]
 8003a3a:	415b      	adcs	r3, r3
 8003a3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a3e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a42:	4641      	mov	r1, r8
 8003a44:	1854      	adds	r4, r2, r1
 8003a46:	4649      	mov	r1, r9
 8003a48:	eb43 0501 	adc.w	r5, r3, r1
 8003a4c:	f04f 0200 	mov.w	r2, #0
 8003a50:	f04f 0300 	mov.w	r3, #0
 8003a54:	00eb      	lsls	r3, r5, #3
 8003a56:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a5a:	00e2      	lsls	r2, r4, #3
 8003a5c:	4614      	mov	r4, r2
 8003a5e:	461d      	mov	r5, r3
 8003a60:	4643      	mov	r3, r8
 8003a62:	18e3      	adds	r3, r4, r3
 8003a64:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a68:	464b      	mov	r3, r9
 8003a6a:	eb45 0303 	adc.w	r3, r5, r3
 8003a6e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2200      	movs	r2, #0
 8003a7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a7e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a82:	f04f 0200 	mov.w	r2, #0
 8003a86:	f04f 0300 	mov.w	r3, #0
 8003a8a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a8e:	4629      	mov	r1, r5
 8003a90:	008b      	lsls	r3, r1, #2
 8003a92:	4621      	mov	r1, r4
 8003a94:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a98:	4621      	mov	r1, r4
 8003a9a:	008a      	lsls	r2, r1, #2
 8003a9c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003aa0:	f7fc fb98 	bl	80001d4 <__aeabi_uldivmod>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	460b      	mov	r3, r1
 8003aa8:	4b60      	ldr	r3, [pc, #384]	@ (8003c2c <UART_SetConfig+0x4e4>)
 8003aaa:	fba3 2302 	umull	r2, r3, r3, r2
 8003aae:	095b      	lsrs	r3, r3, #5
 8003ab0:	011c      	lsls	r4, r3, #4
 8003ab2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003abc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003ac0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003ac4:	4642      	mov	r2, r8
 8003ac6:	464b      	mov	r3, r9
 8003ac8:	1891      	adds	r1, r2, r2
 8003aca:	61b9      	str	r1, [r7, #24]
 8003acc:	415b      	adcs	r3, r3
 8003ace:	61fb      	str	r3, [r7, #28]
 8003ad0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ad4:	4641      	mov	r1, r8
 8003ad6:	1851      	adds	r1, r2, r1
 8003ad8:	6139      	str	r1, [r7, #16]
 8003ada:	4649      	mov	r1, r9
 8003adc:	414b      	adcs	r3, r1
 8003ade:	617b      	str	r3, [r7, #20]
 8003ae0:	f04f 0200 	mov.w	r2, #0
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003aec:	4659      	mov	r1, fp
 8003aee:	00cb      	lsls	r3, r1, #3
 8003af0:	4651      	mov	r1, sl
 8003af2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003af6:	4651      	mov	r1, sl
 8003af8:	00ca      	lsls	r2, r1, #3
 8003afa:	4610      	mov	r0, r2
 8003afc:	4619      	mov	r1, r3
 8003afe:	4603      	mov	r3, r0
 8003b00:	4642      	mov	r2, r8
 8003b02:	189b      	adds	r3, r3, r2
 8003b04:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003b08:	464b      	mov	r3, r9
 8003b0a:	460a      	mov	r2, r1
 8003b0c:	eb42 0303 	adc.w	r3, r2, r3
 8003b10:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b18:	685b      	ldr	r3, [r3, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003b1e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003b20:	f04f 0200 	mov.w	r2, #0
 8003b24:	f04f 0300 	mov.w	r3, #0
 8003b28:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003b2c:	4649      	mov	r1, r9
 8003b2e:	008b      	lsls	r3, r1, #2
 8003b30:	4641      	mov	r1, r8
 8003b32:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003b36:	4641      	mov	r1, r8
 8003b38:	008a      	lsls	r2, r1, #2
 8003b3a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b3e:	f7fc fb49 	bl	80001d4 <__aeabi_uldivmod>
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4611      	mov	r1, r2
 8003b48:	4b38      	ldr	r3, [pc, #224]	@ (8003c2c <UART_SetConfig+0x4e4>)
 8003b4a:	fba3 2301 	umull	r2, r3, r3, r1
 8003b4e:	095b      	lsrs	r3, r3, #5
 8003b50:	2264      	movs	r2, #100	@ 0x64
 8003b52:	fb02 f303 	mul.w	r3, r2, r3
 8003b56:	1acb      	subs	r3, r1, r3
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	3332      	adds	r3, #50	@ 0x32
 8003b5c:	4a33      	ldr	r2, [pc, #204]	@ (8003c2c <UART_SetConfig+0x4e4>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	095b      	lsrs	r3, r3, #5
 8003b64:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b68:	441c      	add	r4, r3
 8003b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b6e:	2200      	movs	r2, #0
 8003b70:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b72:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b74:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b78:	4642      	mov	r2, r8
 8003b7a:	464b      	mov	r3, r9
 8003b7c:	1891      	adds	r1, r2, r2
 8003b7e:	60b9      	str	r1, [r7, #8]
 8003b80:	415b      	adcs	r3, r3
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b88:	4641      	mov	r1, r8
 8003b8a:	1851      	adds	r1, r2, r1
 8003b8c:	6039      	str	r1, [r7, #0]
 8003b8e:	4649      	mov	r1, r9
 8003b90:	414b      	adcs	r3, r1
 8003b92:	607b      	str	r3, [r7, #4]
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	f04f 0300 	mov.w	r3, #0
 8003b9c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003ba0:	4659      	mov	r1, fp
 8003ba2:	00cb      	lsls	r3, r1, #3
 8003ba4:	4651      	mov	r1, sl
 8003ba6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003baa:	4651      	mov	r1, sl
 8003bac:	00ca      	lsls	r2, r1, #3
 8003bae:	4610      	mov	r0, r2
 8003bb0:	4619      	mov	r1, r3
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	4642      	mov	r2, r8
 8003bb6:	189b      	adds	r3, r3, r2
 8003bb8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003bba:	464b      	mov	r3, r9
 8003bbc:	460a      	mov	r2, r1
 8003bbe:	eb42 0303 	adc.w	r3, r2, r3
 8003bc2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	663b      	str	r3, [r7, #96]	@ 0x60
 8003bce:	667a      	str	r2, [r7, #100]	@ 0x64
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003bdc:	4649      	mov	r1, r9
 8003bde:	008b      	lsls	r3, r1, #2
 8003be0:	4641      	mov	r1, r8
 8003be2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003be6:	4641      	mov	r1, r8
 8003be8:	008a      	lsls	r2, r1, #2
 8003bea:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003bee:	f7fc faf1 	bl	80001d4 <__aeabi_uldivmod>
 8003bf2:	4602      	mov	r2, r0
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c2c <UART_SetConfig+0x4e4>)
 8003bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8003bfc:	095b      	lsrs	r3, r3, #5
 8003bfe:	2164      	movs	r1, #100	@ 0x64
 8003c00:	fb01 f303 	mul.w	r3, r1, r3
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	3332      	adds	r3, #50	@ 0x32
 8003c0a:	4a08      	ldr	r2, [pc, #32]	@ (8003c2c <UART_SetConfig+0x4e4>)
 8003c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003c10:	095b      	lsrs	r3, r3, #5
 8003c12:	f003 020f 	and.w	r2, r3, #15
 8003c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	4422      	add	r2, r4
 8003c1e:	609a      	str	r2, [r3, #8]
}
 8003c20:	bf00      	nop
 8003c22:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003c26:	46bd      	mov	sp, r7
 8003c28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c2c:	51eb851f 	.word	0x51eb851f

08003c30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003c30:	b084      	sub	sp, #16
 8003c32:	b580      	push	{r7, lr}
 8003c34:	b084      	sub	sp, #16
 8003c36:	af00      	add	r7, sp, #0
 8003c38:	6078      	str	r0, [r7, #4]
 8003c3a:	f107 001c 	add.w	r0, r7, #28
 8003c3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003c42:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d123      	bne.n	8003c92 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8003c5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003c72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8003c76:	2b01      	cmp	r3, #1
 8003c78:	d105      	bne.n	8003c86 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f001 fae8 	bl	800525c <USB_CoreReset>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	73fb      	strb	r3, [r7, #15]
 8003c90:	e01b      	b.n	8003cca <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f001 fadc 	bl	800525c <USB_CoreReset>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003ca8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d106      	bne.n	8003cbe <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cb4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	639a      	str	r2, [r3, #56]	@ 0x38
 8003cbc:	e005      	b.n	8003cca <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cc2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003cca:	7fbb      	ldrb	r3, [r7, #30]
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	d10b      	bne.n	8003ce8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f043 0206 	orr.w	r2, r3, #6
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	f043 0220 	orr.w	r2, r3, #32
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3710      	adds	r7, #16
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003cf4:	b004      	add	sp, #16
 8003cf6:	4770      	bx	lr

08003cf8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b087      	sub	sp, #28
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	60f8      	str	r0, [r7, #12]
 8003d00:	60b9      	str	r1, [r7, #8]
 8003d02:	4613      	mov	r3, r2
 8003d04:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003d06:	79fb      	ldrb	r3, [r7, #7]
 8003d08:	2b02      	cmp	r3, #2
 8003d0a:	d165      	bne.n	8003dd8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	4a41      	ldr	r2, [pc, #260]	@ (8003e14 <USB_SetTurnaroundTime+0x11c>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d906      	bls.n	8003d22 <USB_SetTurnaroundTime+0x2a>
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	4a40      	ldr	r2, [pc, #256]	@ (8003e18 <USB_SetTurnaroundTime+0x120>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d202      	bcs.n	8003d22 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003d1c:	230f      	movs	r3, #15
 8003d1e:	617b      	str	r3, [r7, #20]
 8003d20:	e062      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	4a3c      	ldr	r2, [pc, #240]	@ (8003e18 <USB_SetTurnaroundTime+0x120>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d306      	bcc.n	8003d38 <USB_SetTurnaroundTime+0x40>
 8003d2a:	68bb      	ldr	r3, [r7, #8]
 8003d2c:	4a3b      	ldr	r2, [pc, #236]	@ (8003e1c <USB_SetTurnaroundTime+0x124>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d202      	bcs.n	8003d38 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003d32:	230e      	movs	r3, #14
 8003d34:	617b      	str	r3, [r7, #20]
 8003d36:	e057      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	4a38      	ldr	r2, [pc, #224]	@ (8003e1c <USB_SetTurnaroundTime+0x124>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d306      	bcc.n	8003d4e <USB_SetTurnaroundTime+0x56>
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	4a37      	ldr	r2, [pc, #220]	@ (8003e20 <USB_SetTurnaroundTime+0x128>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d202      	bcs.n	8003d4e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003d48:	230d      	movs	r3, #13
 8003d4a:	617b      	str	r3, [r7, #20]
 8003d4c:	e04c      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	4a33      	ldr	r2, [pc, #204]	@ (8003e20 <USB_SetTurnaroundTime+0x128>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d306      	bcc.n	8003d64 <USB_SetTurnaroundTime+0x6c>
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	4a32      	ldr	r2, [pc, #200]	@ (8003e24 <USB_SetTurnaroundTime+0x12c>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d802      	bhi.n	8003d64 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003d5e:	230c      	movs	r3, #12
 8003d60:	617b      	str	r3, [r7, #20]
 8003d62:	e041      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	4a2f      	ldr	r2, [pc, #188]	@ (8003e24 <USB_SetTurnaroundTime+0x12c>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d906      	bls.n	8003d7a <USB_SetTurnaroundTime+0x82>
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	4a2e      	ldr	r2, [pc, #184]	@ (8003e28 <USB_SetTurnaroundTime+0x130>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d802      	bhi.n	8003d7a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003d74:	230b      	movs	r3, #11
 8003d76:	617b      	str	r3, [r7, #20]
 8003d78:	e036      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	4a2a      	ldr	r2, [pc, #168]	@ (8003e28 <USB_SetTurnaroundTime+0x130>)
 8003d7e:	4293      	cmp	r3, r2
 8003d80:	d906      	bls.n	8003d90 <USB_SetTurnaroundTime+0x98>
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	4a29      	ldr	r2, [pc, #164]	@ (8003e2c <USB_SetTurnaroundTime+0x134>)
 8003d86:	4293      	cmp	r3, r2
 8003d88:	d802      	bhi.n	8003d90 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003d8a:	230a      	movs	r3, #10
 8003d8c:	617b      	str	r3, [r7, #20]
 8003d8e:	e02b      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4a26      	ldr	r2, [pc, #152]	@ (8003e2c <USB_SetTurnaroundTime+0x134>)
 8003d94:	4293      	cmp	r3, r2
 8003d96:	d906      	bls.n	8003da6 <USB_SetTurnaroundTime+0xae>
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	4a25      	ldr	r2, [pc, #148]	@ (8003e30 <USB_SetTurnaroundTime+0x138>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d202      	bcs.n	8003da6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003da0:	2309      	movs	r3, #9
 8003da2:	617b      	str	r3, [r7, #20]
 8003da4:	e020      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	4a21      	ldr	r2, [pc, #132]	@ (8003e30 <USB_SetTurnaroundTime+0x138>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d306      	bcc.n	8003dbc <USB_SetTurnaroundTime+0xc4>
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4a20      	ldr	r2, [pc, #128]	@ (8003e34 <USB_SetTurnaroundTime+0x13c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d802      	bhi.n	8003dbc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003db6:	2308      	movs	r3, #8
 8003db8:	617b      	str	r3, [r7, #20]
 8003dba:	e015      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8003e34 <USB_SetTurnaroundTime+0x13c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d906      	bls.n	8003dd2 <USB_SetTurnaroundTime+0xda>
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e38 <USB_SetTurnaroundTime+0x140>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d202      	bcs.n	8003dd2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003dcc:	2307      	movs	r3, #7
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	e00a      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003dd2:	2306      	movs	r3, #6
 8003dd4:	617b      	str	r3, [r7, #20]
 8003dd6:	e007      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003dd8:	79fb      	ldrb	r3, [r7, #7]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d102      	bne.n	8003de4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003dde:	2309      	movs	r3, #9
 8003de0:	617b      	str	r3, [r7, #20]
 8003de2:	e001      	b.n	8003de8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003de4:	2309      	movs	r3, #9
 8003de6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	68da      	ldr	r2, [r3, #12]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	029b      	lsls	r3, r3, #10
 8003dfc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003e00:	431a      	orrs	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003e06:	2300      	movs	r3, #0
}
 8003e08:	4618      	mov	r0, r3
 8003e0a:	371c      	adds	r7, #28
 8003e0c:	46bd      	mov	sp, r7
 8003e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e12:	4770      	bx	lr
 8003e14:	00d8acbf 	.word	0x00d8acbf
 8003e18:	00e4e1c0 	.word	0x00e4e1c0
 8003e1c:	00f42400 	.word	0x00f42400
 8003e20:	01067380 	.word	0x01067380
 8003e24:	011a499f 	.word	0x011a499f
 8003e28:	01312cff 	.word	0x01312cff
 8003e2c:	014ca43f 	.word	0x014ca43f
 8003e30:	016e3600 	.word	0x016e3600
 8003e34:	01a6ab1f 	.word	0x01a6ab1f
 8003e38:	01e84800 	.word	0x01e84800

08003e3c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f043 0201 	orr.w	r2, r3, #1
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e50:	2300      	movs	r3, #0
}
 8003e52:	4618      	mov	r0, r3
 8003e54:	370c      	adds	r7, #12
 8003e56:	46bd      	mov	sp, r7
 8003e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5c:	4770      	bx	lr

08003e5e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003e5e:	b480      	push	{r7}
 8003e60:	b083      	sub	sp, #12
 8003e62:	af00      	add	r7, sp, #0
 8003e64:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	f023 0201 	bic.w	r2, r3, #1
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003e72:	2300      	movs	r3, #0
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	370c      	adds	r7, #12
 8003e78:	46bd      	mov	sp, r7
 8003e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7e:	4770      	bx	lr

08003e80 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b084      	sub	sp, #16
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	460b      	mov	r3, r1
 8003e8a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003e9c:	78fb      	ldrb	r3, [r7, #3]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d115      	bne.n	8003ece <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	68db      	ldr	r3, [r3, #12]
 8003ea6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003eae:	200a      	movs	r0, #10
 8003eb0:	f7fc fee6 	bl	8000c80 <HAL_Delay>
      ms += 10U;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	330a      	adds	r3, #10
 8003eb8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f001 f93f 	bl	800513e <USB_GetMode>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d01e      	beq.n	8003f04 <USB_SetCurrentMode+0x84>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2bc7      	cmp	r3, #199	@ 0xc7
 8003eca:	d9f0      	bls.n	8003eae <USB_SetCurrentMode+0x2e>
 8003ecc:	e01a      	b.n	8003f04 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003ece:	78fb      	ldrb	r3, [r7, #3]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d115      	bne.n	8003f00 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8003ee0:	200a      	movs	r0, #10
 8003ee2:	f7fc fecd 	bl	8000c80 <HAL_Delay>
      ms += 10U;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	330a      	adds	r3, #10
 8003eea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f001 f926 	bl	800513e <USB_GetMode>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d005      	beq.n	8003f04 <USB_SetCurrentMode+0x84>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2bc7      	cmp	r3, #199	@ 0xc7
 8003efc:	d9f0      	bls.n	8003ee0 <USB_SetCurrentMode+0x60>
 8003efe:	e001      	b.n	8003f04 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	e005      	b.n	8003f10 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2bc8      	cmp	r3, #200	@ 0xc8
 8003f08:	d101      	bne.n	8003f0e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e000      	b.n	8003f10 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003f18:	b084      	sub	sp, #16
 8003f1a:	b580      	push	{r7, lr}
 8003f1c:	b086      	sub	sp, #24
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003f26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003f32:	2300      	movs	r3, #0
 8003f34:	613b      	str	r3, [r7, #16]
 8003f36:	e009      	b.n	8003f4c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	693b      	ldr	r3, [r7, #16]
 8003f3c:	3340      	adds	r3, #64	@ 0x40
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	4413      	add	r3, r2
 8003f42:	2200      	movs	r2, #0
 8003f44:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	613b      	str	r3, [r7, #16]
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	2b0e      	cmp	r3, #14
 8003f50:	d9f2      	bls.n	8003f38 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003f52:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d11c      	bne.n	8003f94 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f68:	f043 0302 	orr.w	r3, r3, #2
 8003f6c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f72:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f7e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f8a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	639a      	str	r2, [r3, #56]	@ 0x38
 8003f92:	e00b      	b.n	8003fac <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f98:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fa4:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003fb8:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d10d      	bne.n	8003fdc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003fc0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d104      	bne.n	8003fd2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003fc8:	2100      	movs	r1, #0
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 f968 	bl	80042a0 <USB_SetDevSpeed>
 8003fd0:	e008      	b.n	8003fe4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003fd2:	2101      	movs	r1, #1
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f963 	bl	80042a0 <USB_SetDevSpeed>
 8003fda:	e003      	b.n	8003fe4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003fdc:	2103      	movs	r1, #3
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f000 f95e 	bl	80042a0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003fe4:	2110      	movs	r1, #16
 8003fe6:	6878      	ldr	r0, [r7, #4]
 8003fe8:	f000 f8fa 	bl	80041e0 <USB_FlushTxFifo>
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d001      	beq.n	8003ff6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f924 	bl	8004244 <USB_FlushRxFifo>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d001      	beq.n	8004006 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800400c:	461a      	mov	r2, r3
 800400e:	2300      	movs	r3, #0
 8004010:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004018:	461a      	mov	r2, r3
 800401a:	2300      	movs	r3, #0
 800401c:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004024:	461a      	mov	r2, r3
 8004026:	2300      	movs	r3, #0
 8004028:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800402a:	2300      	movs	r3, #0
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	e043      	b.n	80040b8 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004042:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004046:	d118      	bne.n	800407a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8004048:	693b      	ldr	r3, [r7, #16]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	015a      	lsls	r2, r3, #5
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	4413      	add	r3, r2
 8004056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800405a:	461a      	mov	r2, r3
 800405c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004060:	6013      	str	r3, [r2, #0]
 8004062:	e013      	b.n	800408c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004070:	461a      	mov	r2, r3
 8004072:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004076:	6013      	str	r3, [r2, #0]
 8004078:	e008      	b.n	800408c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800407a:	693b      	ldr	r3, [r7, #16]
 800407c:	015a      	lsls	r2, r3, #5
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	4413      	add	r3, r2
 8004082:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004086:	461a      	mov	r2, r3
 8004088:	2300      	movs	r3, #0
 800408a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	015a      	lsls	r2, r3, #5
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4413      	add	r3, r2
 8004094:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004098:	461a      	mov	r2, r3
 800409a:	2300      	movs	r3, #0
 800409c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040aa:	461a      	mov	r2, r3
 80040ac:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80040b0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	3301      	adds	r3, #1
 80040b6:	613b      	str	r3, [r7, #16]
 80040b8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80040bc:	461a      	mov	r2, r3
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d3b5      	bcc.n	8004030 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80040c4:	2300      	movs	r3, #0
 80040c6:	613b      	str	r3, [r7, #16]
 80040c8:	e043      	b.n	8004152 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	015a      	lsls	r2, r3, #5
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4413      	add	r3, r2
 80040d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80040dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80040e0:	d118      	bne.n	8004114 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d10a      	bne.n	80040fe <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	015a      	lsls	r2, r3, #5
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	4413      	add	r3, r2
 80040f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80040f4:	461a      	mov	r2, r3
 80040f6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80040fa:	6013      	str	r3, [r2, #0]
 80040fc:	e013      	b.n	8004126 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	015a      	lsls	r2, r3, #5
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	4413      	add	r3, r2
 8004106:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800410a:	461a      	mov	r2, r3
 800410c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004110:	6013      	str	r3, [r2, #0]
 8004112:	e008      	b.n	8004126 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	015a      	lsls	r2, r3, #5
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4413      	add	r3, r2
 800411c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004120:	461a      	mov	r2, r3
 8004122:	2300      	movs	r3, #0
 8004124:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	015a      	lsls	r2, r3, #5
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	4413      	add	r3, r2
 800412e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004132:	461a      	mov	r2, r3
 8004134:	2300      	movs	r3, #0
 8004136:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	4413      	add	r3, r2
 8004140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004144:	461a      	mov	r2, r3
 8004146:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800414a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	3301      	adds	r3, #1
 8004150:	613b      	str	r3, [r7, #16]
 8004152:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004156:	461a      	mov	r2, r3
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	4293      	cmp	r3, r2
 800415c:	d3b5      	bcc.n	80040ca <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004164:	691b      	ldr	r3, [r3, #16]
 8004166:	68fa      	ldr	r2, [r7, #12]
 8004168:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800416c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004170:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800417e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004180:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004184:	2b00      	cmp	r3, #0
 8004186:	d105      	bne.n	8004194 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	f043 0210 	orr.w	r2, r3, #16
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699a      	ldr	r2, [r3, #24]
 8004198:	4b10      	ldr	r3, [pc, #64]	@ (80041dc <USB_DevInit+0x2c4>)
 800419a:	4313      	orrs	r3, r2
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80041a0:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d005      	beq.n	80041b4 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	699b      	ldr	r3, [r3, #24]
 80041ac:	f043 0208 	orr.w	r2, r3, #8
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80041b4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d107      	bne.n	80041cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80041c4:	f043 0304 	orr.w	r3, r3, #4
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80041cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80041ce:	4618      	mov	r0, r3
 80041d0:	3718      	adds	r7, #24
 80041d2:	46bd      	mov	sp, r7
 80041d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041d8:	b004      	add	sp, #16
 80041da:	4770      	bx	lr
 80041dc:	803c3800 	.word	0x803c3800

080041e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b085      	sub	sp, #20
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80041ea:	2300      	movs	r3, #0
 80041ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	3301      	adds	r3, #1
 80041f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80041fa:	d901      	bls.n	8004200 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80041fc:	2303      	movs	r3, #3
 80041fe:	e01b      	b.n	8004238 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	691b      	ldr	r3, [r3, #16]
 8004204:	2b00      	cmp	r3, #0
 8004206:	daf2      	bge.n	80041ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	019b      	lsls	r3, r3, #6
 8004210:	f043 0220 	orr.w	r2, r3, #32
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	3301      	adds	r3, #1
 800421c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004224:	d901      	bls.n	800422a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e006      	b.n	8004238 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	691b      	ldr	r3, [r3, #16]
 800422e:	f003 0320 	and.w	r3, r3, #32
 8004232:	2b20      	cmp	r3, #32
 8004234:	d0f0      	beq.n	8004218 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004236:	2300      	movs	r3, #0
}
 8004238:	4618      	mov	r0, r3
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800424c:	2300      	movs	r3, #0
 800424e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	3301      	adds	r3, #1
 8004254:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800425c:	d901      	bls.n	8004262 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e018      	b.n	8004294 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	2b00      	cmp	r3, #0
 8004268:	daf2      	bge.n	8004250 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800426a:	2300      	movs	r3, #0
 800426c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2210      	movs	r2, #16
 8004272:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	3301      	adds	r3, #1
 8004278:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004280:	d901      	bls.n	8004286 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004282:	2303      	movs	r3, #3
 8004284:	e006      	b.n	8004294 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	f003 0310 	and.w	r3, r3, #16
 800428e:	2b10      	cmp	r3, #16
 8004290:	d0f0      	beq.n	8004274 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004292:	2300      	movs	r3, #0
}
 8004294:	4618      	mov	r0, r3
 8004296:	3714      	adds	r7, #20
 8004298:	46bd      	mov	sp, r7
 800429a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429e:	4770      	bx	lr

080042a0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80042a0:	b480      	push	{r7}
 80042a2:	b085      	sub	sp, #20
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
 80042a8:	460b      	mov	r3, r1
 80042aa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	78fb      	ldrb	r3, [r7, #3]
 80042ba:	68f9      	ldr	r1, [r7, #12]
 80042bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80042c0:	4313      	orrs	r3, r2
 80042c2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3714      	adds	r7, #20
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr

080042d2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80042d2:	b480      	push	{r7}
 80042d4:	b087      	sub	sp, #28
 80042d6:	af00      	add	r7, sp, #0
 80042d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	f003 0306 	and.w	r3, r3, #6
 80042ea:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d102      	bne.n	80042f8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80042f2:	2300      	movs	r3, #0
 80042f4:	75fb      	strb	r3, [r7, #23]
 80042f6:	e00a      	b.n	800430e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d002      	beq.n	8004304 <USB_GetDevSpeed+0x32>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	2b06      	cmp	r3, #6
 8004302:	d102      	bne.n	800430a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004304:	2302      	movs	r3, #2
 8004306:	75fb      	strb	r3, [r7, #23]
 8004308:	e001      	b.n	800430e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800430a:	230f      	movs	r3, #15
 800430c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800430e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004310:	4618      	mov	r0, r3
 8004312:	371c      	adds	r7, #28
 8004314:	46bd      	mov	sp, r7
 8004316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431a:	4770      	bx	lr

0800431c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800431c:	b480      	push	{r7}
 800431e:	b085      	sub	sp, #20
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	785b      	ldrb	r3, [r3, #1]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d13a      	bne.n	80043ae <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	f003 030f 	and.w	r3, r3, #15
 8004348:	2101      	movs	r1, #1
 800434a:	fa01 f303 	lsl.w	r3, r1, r3
 800434e:	b29b      	uxth	r3, r3
 8004350:	68f9      	ldr	r1, [r7, #12]
 8004352:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004356:	4313      	orrs	r3, r2
 8004358:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800436c:	2b00      	cmp	r3, #0
 800436e:	d155      	bne.n	800441c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	4413      	add	r3, r2
 8004378:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	791b      	ldrb	r3, [r3, #4]
 800438a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800438c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	059b      	lsls	r3, r3, #22
 8004392:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004394:	4313      	orrs	r3, r2
 8004396:	68ba      	ldr	r2, [r7, #8]
 8004398:	0151      	lsls	r1, r2, #5
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	440a      	add	r2, r1
 800439e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043aa:	6013      	str	r3, [r2, #0]
 80043ac:	e036      	b.n	800441c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043b4:	69da      	ldr	r2, [r3, #28]
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	781b      	ldrb	r3, [r3, #0]
 80043ba:	f003 030f 	and.w	r3, r3, #15
 80043be:	2101      	movs	r1, #1
 80043c0:	fa01 f303 	lsl.w	r3, r1, r3
 80043c4:	041b      	lsls	r3, r3, #16
 80043c6:	68f9      	ldr	r1, [r7, #12]
 80043c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80043cc:	4313      	orrs	r3, r2
 80043ce:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	015a      	lsls	r2, r3, #5
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	4413      	add	r3, r2
 80043d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d11a      	bne.n	800441c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80043e6:	68bb      	ldr	r3, [r7, #8]
 80043e8:	015a      	lsls	r2, r3, #5
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4413      	add	r3, r2
 80043ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	791b      	ldrb	r3, [r3, #4]
 8004400:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004402:	430b      	orrs	r3, r1
 8004404:	4313      	orrs	r3, r2
 8004406:	68ba      	ldr	r2, [r7, #8]
 8004408:	0151      	lsls	r1, r2, #5
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	440a      	add	r2, r1
 800440e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004412:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004416:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800441a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3714      	adds	r7, #20
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	785b      	ldrb	r3, [r3, #1]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d161      	bne.n	800450c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800445a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800445e:	d11f      	bne.n	80044a0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	015a      	lsls	r2, r3, #5
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	4413      	add	r3, r2
 8004468:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	0151      	lsls	r1, r2, #5
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	440a      	add	r2, r1
 8004476:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800447a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800447e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	0151      	lsls	r1, r2, #5
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	440a      	add	r2, r1
 8004496:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800449a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800449e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044a6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	f003 030f 	and.w	r3, r3, #15
 80044b0:	2101      	movs	r1, #1
 80044b2:	fa01 f303 	lsl.w	r3, r1, r3
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	43db      	mvns	r3, r3
 80044ba:	68f9      	ldr	r1, [r7, #12]
 80044bc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044c0:	4013      	ands	r3, r2
 80044c2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044ca:	69da      	ldr	r2, [r3, #28]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	f003 030f 	and.w	r3, r3, #15
 80044d4:	2101      	movs	r1, #1
 80044d6:	fa01 f303 	lsl.w	r3, r1, r3
 80044da:	b29b      	uxth	r3, r3
 80044dc:	43db      	mvns	r3, r3
 80044de:	68f9      	ldr	r1, [r7, #12]
 80044e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80044e4:	4013      	ands	r3, r2
 80044e6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	015a      	lsls	r2, r3, #5
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4413      	add	r3, r2
 80044f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	0159      	lsls	r1, r3, #5
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	440b      	add	r3, r1
 80044fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004502:	4619      	mov	r1, r3
 8004504:	4b35      	ldr	r3, [pc, #212]	@ (80045dc <USB_DeactivateEndpoint+0x1b0>)
 8004506:	4013      	ands	r3, r2
 8004508:	600b      	str	r3, [r1, #0]
 800450a:	e060      	b.n	80045ce <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	015a      	lsls	r2, r3, #5
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	4413      	add	r3, r2
 8004514:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800451e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004522:	d11f      	bne.n	8004564 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	015a      	lsls	r2, r3, #5
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	4413      	add	r3, r2
 800452c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	0151      	lsls	r1, r2, #5
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	440a      	add	r2, r1
 800453a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800453e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004542:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	0151      	lsls	r1, r2, #5
 8004556:	68fa      	ldr	r2, [r7, #12]
 8004558:	440a      	add	r2, r1
 800455a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800455e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004562:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800456a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	f003 030f 	and.w	r3, r3, #15
 8004574:	2101      	movs	r1, #1
 8004576:	fa01 f303 	lsl.w	r3, r1, r3
 800457a:	041b      	lsls	r3, r3, #16
 800457c:	43db      	mvns	r3, r3
 800457e:	68f9      	ldr	r1, [r7, #12]
 8004580:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004584:	4013      	ands	r3, r2
 8004586:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800458e:	69da      	ldr	r2, [r3, #28]
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	f003 030f 	and.w	r3, r3, #15
 8004598:	2101      	movs	r1, #1
 800459a:	fa01 f303 	lsl.w	r3, r1, r3
 800459e:	041b      	lsls	r3, r3, #16
 80045a0:	43db      	mvns	r3, r3
 80045a2:	68f9      	ldr	r1, [r7, #12]
 80045a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80045a8:	4013      	ands	r3, r2
 80045aa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	015a      	lsls	r2, r3, #5
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	4413      	add	r3, r2
 80045b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045b8:	681a      	ldr	r2, [r3, #0]
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	0159      	lsls	r1, r3, #5
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	440b      	add	r3, r1
 80045c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045c6:	4619      	mov	r1, r3
 80045c8:	4b05      	ldr	r3, [pc, #20]	@ (80045e0 <USB_DeactivateEndpoint+0x1b4>)
 80045ca:	4013      	ands	r3, r2
 80045cc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80045ce:	2300      	movs	r3, #0
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3714      	adds	r7, #20
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr
 80045dc:	ec337800 	.word	0xec337800
 80045e0:	eff37800 	.word	0xeff37800

080045e4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b08a      	sub	sp, #40	@ 0x28
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	4613      	mov	r3, r2
 80045f0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	785b      	ldrb	r3, [r3, #1]
 8004600:	2b01      	cmp	r3, #1
 8004602:	f040 817f 	bne.w	8004904 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d132      	bne.n	8004674 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	015a      	lsls	r2, r3, #5
 8004612:	69fb      	ldr	r3, [r7, #28]
 8004614:	4413      	add	r3, r2
 8004616:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800461a:	691b      	ldr	r3, [r3, #16]
 800461c:	69ba      	ldr	r2, [r7, #24]
 800461e:	0151      	lsls	r1, r2, #5
 8004620:	69fa      	ldr	r2, [r7, #28]
 8004622:	440a      	add	r2, r1
 8004624:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004628:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800462c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004630:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	69fb      	ldr	r3, [r7, #28]
 8004638:	4413      	add	r3, r2
 800463a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	69ba      	ldr	r2, [r7, #24]
 8004642:	0151      	lsls	r1, r2, #5
 8004644:	69fa      	ldr	r2, [r7, #28]
 8004646:	440a      	add	r2, r1
 8004648:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800464c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004650:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004652:	69bb      	ldr	r3, [r7, #24]
 8004654:	015a      	lsls	r2, r3, #5
 8004656:	69fb      	ldr	r3, [r7, #28]
 8004658:	4413      	add	r3, r2
 800465a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	69ba      	ldr	r2, [r7, #24]
 8004662:	0151      	lsls	r1, r2, #5
 8004664:	69fa      	ldr	r2, [r7, #28]
 8004666:	440a      	add	r2, r1
 8004668:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800466c:	0cdb      	lsrs	r3, r3, #19
 800466e:	04db      	lsls	r3, r3, #19
 8004670:	6113      	str	r3, [r2, #16]
 8004672:	e097      	b.n	80047a4 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004674:	69bb      	ldr	r3, [r7, #24]
 8004676:	015a      	lsls	r2, r3, #5
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	4413      	add	r3, r2
 800467c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	69ba      	ldr	r2, [r7, #24]
 8004684:	0151      	lsls	r1, r2, #5
 8004686:	69fa      	ldr	r2, [r7, #28]
 8004688:	440a      	add	r2, r1
 800468a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800468e:	0cdb      	lsrs	r3, r3, #19
 8004690:	04db      	lsls	r3, r3, #19
 8004692:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004694:	69bb      	ldr	r3, [r7, #24]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	69ba      	ldr	r2, [r7, #24]
 80046a4:	0151      	lsls	r1, r2, #5
 80046a6:	69fa      	ldr	r2, [r7, #28]
 80046a8:	440a      	add	r2, r1
 80046aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046ae:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80046b2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80046b6:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d11a      	bne.n	80046f4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	691a      	ldr	r2, [r3, #16]
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	429a      	cmp	r2, r3
 80046c8:	d903      	bls.n	80046d2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	689a      	ldr	r2, [r3, #8]
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046d2:	69bb      	ldr	r3, [r7, #24]
 80046d4:	015a      	lsls	r2, r3, #5
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	4413      	add	r3, r2
 80046da:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046de:	691b      	ldr	r3, [r3, #16]
 80046e0:	69ba      	ldr	r2, [r7, #24]
 80046e2:	0151      	lsls	r1, r2, #5
 80046e4:	69fa      	ldr	r2, [r7, #28]
 80046e6:	440a      	add	r2, r1
 80046e8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046ec:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80046f0:	6113      	str	r3, [r2, #16]
 80046f2:	e044      	b.n	800477e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	691a      	ldr	r2, [r3, #16]
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	4413      	add	r3, r2
 80046fe:	1e5a      	subs	r2, r3, #1
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	fbb2 f3f3 	udiv	r3, r2, r3
 8004708:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	4413      	add	r3, r2
 8004712:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004716:	691a      	ldr	r2, [r3, #16]
 8004718:	8afb      	ldrh	r3, [r7, #22]
 800471a:	04d9      	lsls	r1, r3, #19
 800471c:	4ba4      	ldr	r3, [pc, #656]	@ (80049b0 <USB_EPStartXfer+0x3cc>)
 800471e:	400b      	ands	r3, r1
 8004720:	69b9      	ldr	r1, [r7, #24]
 8004722:	0148      	lsls	r0, r1, #5
 8004724:	69f9      	ldr	r1, [r7, #28]
 8004726:	4401      	add	r1, r0
 8004728:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800472c:	4313      	orrs	r3, r2
 800472e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	791b      	ldrb	r3, [r3, #4]
 8004734:	2b01      	cmp	r3, #1
 8004736:	d122      	bne.n	800477e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004738:	69bb      	ldr	r3, [r7, #24]
 800473a:	015a      	lsls	r2, r3, #5
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	4413      	add	r3, r2
 8004740:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	69ba      	ldr	r2, [r7, #24]
 8004748:	0151      	lsls	r1, r2, #5
 800474a:	69fa      	ldr	r2, [r7, #28]
 800474c:	440a      	add	r2, r1
 800474e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004752:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004756:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8004758:	69bb      	ldr	r3, [r7, #24]
 800475a:	015a      	lsls	r2, r3, #5
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	4413      	add	r3, r2
 8004760:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004764:	691a      	ldr	r2, [r3, #16]
 8004766:	8afb      	ldrh	r3, [r7, #22]
 8004768:	075b      	lsls	r3, r3, #29
 800476a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800476e:	69b9      	ldr	r1, [r7, #24]
 8004770:	0148      	lsls	r0, r1, #5
 8004772:	69f9      	ldr	r1, [r7, #28]
 8004774:	4401      	add	r1, r0
 8004776:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800477a:	4313      	orrs	r3, r2
 800477c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800477e:	69bb      	ldr	r3, [r7, #24]
 8004780:	015a      	lsls	r2, r3, #5
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	4413      	add	r3, r2
 8004786:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800478a:	691a      	ldr	r2, [r3, #16]
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004794:	69b9      	ldr	r1, [r7, #24]
 8004796:	0148      	lsls	r0, r1, #5
 8004798:	69f9      	ldr	r1, [r7, #28]
 800479a:	4401      	add	r1, r0
 800479c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80047a0:	4313      	orrs	r3, r2
 80047a2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80047a4:	79fb      	ldrb	r3, [r7, #7]
 80047a6:	2b01      	cmp	r3, #1
 80047a8:	d14b      	bne.n	8004842 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	69db      	ldr	r3, [r3, #28]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d009      	beq.n	80047c6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	015a      	lsls	r2, r3, #5
 80047b6:	69fb      	ldr	r3, [r7, #28]
 80047b8:	4413      	add	r3, r2
 80047ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047be:	461a      	mov	r2, r3
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	69db      	ldr	r3, [r3, #28]
 80047c4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	791b      	ldrb	r3, [r3, #4]
 80047ca:	2b01      	cmp	r3, #1
 80047cc:	d128      	bne.n	8004820 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d110      	bne.n	8004800 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80047de:	69bb      	ldr	r3, [r7, #24]
 80047e0:	015a      	lsls	r2, r3, #5
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	4413      	add	r3, r2
 80047e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	0151      	lsls	r1, r2, #5
 80047f0:	69fa      	ldr	r2, [r7, #28]
 80047f2:	440a      	add	r2, r1
 80047f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80047f8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	e00f      	b.n	8004820 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004800:	69bb      	ldr	r3, [r7, #24]
 8004802:	015a      	lsls	r2, r3, #5
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	4413      	add	r3, r2
 8004808:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	0151      	lsls	r1, r2, #5
 8004812:	69fa      	ldr	r2, [r7, #28]
 8004814:	440a      	add	r2, r1
 8004816:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800481a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800481e:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	015a      	lsls	r2, r3, #5
 8004824:	69fb      	ldr	r3, [r7, #28]
 8004826:	4413      	add	r3, r2
 8004828:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	0151      	lsls	r1, r2, #5
 8004832:	69fa      	ldr	r2, [r7, #28]
 8004834:	440a      	add	r2, r1
 8004836:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800483a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800483e:	6013      	str	r3, [r2, #0]
 8004840:	e166      	b.n	8004b10 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	0151      	lsls	r1, r2, #5
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	440a      	add	r2, r1
 8004858:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800485c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004860:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	791b      	ldrb	r3, [r3, #4]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d015      	beq.n	8004896 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	691b      	ldr	r3, [r3, #16]
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 814e 	beq.w	8004b10 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800487a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	781b      	ldrb	r3, [r3, #0]
 8004880:	f003 030f 	and.w	r3, r3, #15
 8004884:	2101      	movs	r1, #1
 8004886:	fa01 f303 	lsl.w	r3, r1, r3
 800488a:	69f9      	ldr	r1, [r7, #28]
 800488c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004890:	4313      	orrs	r3, r2
 8004892:	634b      	str	r3, [r1, #52]	@ 0x34
 8004894:	e13c      	b.n	8004b10 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d110      	bne.n	80048c8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	015a      	lsls	r2, r3, #5
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	4413      	add	r3, r2
 80048ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	0151      	lsls	r1, r2, #5
 80048b8:	69fa      	ldr	r2, [r7, #28]
 80048ba:	440a      	add	r2, r1
 80048bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048c0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80048c4:	6013      	str	r3, [r2, #0]
 80048c6:	e00f      	b.n	80048e8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80048c8:	69bb      	ldr	r3, [r7, #24]
 80048ca:	015a      	lsls	r2, r3, #5
 80048cc:	69fb      	ldr	r3, [r7, #28]
 80048ce:	4413      	add	r3, r2
 80048d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	69ba      	ldr	r2, [r7, #24]
 80048d8:	0151      	lsls	r1, r2, #5
 80048da:	69fa      	ldr	r2, [r7, #28]
 80048dc:	440a      	add	r2, r1
 80048de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80048e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80048e6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	68d9      	ldr	r1, [r3, #12]
 80048ec:	68bb      	ldr	r3, [r7, #8]
 80048ee:	781a      	ldrb	r2, [r3, #0]
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	691b      	ldr	r3, [r3, #16]
 80048f4:	b298      	uxth	r0, r3
 80048f6:	79fb      	ldrb	r3, [r7, #7]
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	4603      	mov	r3, r0
 80048fc:	68f8      	ldr	r0, [r7, #12]
 80048fe:	f000 f9b9 	bl	8004c74 <USB_WritePacket>
 8004902:	e105      	b.n	8004b10 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	015a      	lsls	r2, r3, #5
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	4413      	add	r3, r2
 800490c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	69ba      	ldr	r2, [r7, #24]
 8004914:	0151      	lsls	r1, r2, #5
 8004916:	69fa      	ldr	r2, [r7, #28]
 8004918:	440a      	add	r2, r1
 800491a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800491e:	0cdb      	lsrs	r3, r3, #19
 8004920:	04db      	lsls	r3, r3, #19
 8004922:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	69fb      	ldr	r3, [r7, #28]
 800492a:	4413      	add	r3, r2
 800492c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	69ba      	ldr	r2, [r7, #24]
 8004934:	0151      	lsls	r1, r2, #5
 8004936:	69fa      	ldr	r2, [r7, #28]
 8004938:	440a      	add	r2, r1
 800493a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800493e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004942:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004946:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8004948:	69bb      	ldr	r3, [r7, #24]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d132      	bne.n	80049b4 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8004956:	68bb      	ldr	r3, [r7, #8]
 8004958:	689a      	ldr	r2, [r3, #8]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004966:	69bb      	ldr	r3, [r7, #24]
 8004968:	015a      	lsls	r2, r3, #5
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	4413      	add	r3, r2
 800496e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	6a1b      	ldr	r3, [r3, #32]
 8004978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800497c:	69b9      	ldr	r1, [r7, #24]
 800497e:	0148      	lsls	r0, r1, #5
 8004980:	69f9      	ldr	r1, [r7, #28]
 8004982:	4401      	add	r1, r0
 8004984:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004988:	4313      	orrs	r3, r2
 800498a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	015a      	lsls	r2, r3, #5
 8004990:	69fb      	ldr	r3, [r7, #28]
 8004992:	4413      	add	r3, r2
 8004994:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004998:	691b      	ldr	r3, [r3, #16]
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	0151      	lsls	r1, r2, #5
 800499e:	69fa      	ldr	r2, [r7, #28]
 80049a0:	440a      	add	r2, r1
 80049a2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049a6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80049aa:	6113      	str	r3, [r2, #16]
 80049ac:	e062      	b.n	8004a74 <USB_EPStartXfer+0x490>
 80049ae:	bf00      	nop
 80049b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d123      	bne.n	8004a04 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80049bc:	69bb      	ldr	r3, [r7, #24]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049c8:	691a      	ldr	r2, [r3, #16]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049d2:	69b9      	ldr	r1, [r7, #24]
 80049d4:	0148      	lsls	r0, r1, #5
 80049d6:	69f9      	ldr	r1, [r7, #28]
 80049d8:	4401      	add	r1, r0
 80049da:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80049de:	4313      	orrs	r3, r2
 80049e0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	0151      	lsls	r1, r2, #5
 80049f4:	69fa      	ldr	r2, [r7, #28]
 80049f6:	440a      	add	r2, r1
 80049f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80049fc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004a00:	6113      	str	r3, [r2, #16]
 8004a02:	e037      	b.n	8004a74 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	691a      	ldr	r2, [r3, #16]
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	4413      	add	r3, r2
 8004a0e:	1e5a      	subs	r2, r3, #1
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a18:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8004a1a:	68bb      	ldr	r3, [r7, #8]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	8afa      	ldrh	r2, [r7, #22]
 8004a20:	fb03 f202 	mul.w	r2, r3, r2
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	015a      	lsls	r2, r3, #5
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	4413      	add	r3, r2
 8004a30:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a34:	691a      	ldr	r2, [r3, #16]
 8004a36:	8afb      	ldrh	r3, [r7, #22]
 8004a38:	04d9      	lsls	r1, r3, #19
 8004a3a:	4b38      	ldr	r3, [pc, #224]	@ (8004b1c <USB_EPStartXfer+0x538>)
 8004a3c:	400b      	ands	r3, r1
 8004a3e:	69b9      	ldr	r1, [r7, #24]
 8004a40:	0148      	lsls	r0, r1, #5
 8004a42:	69f9      	ldr	r1, [r7, #28]
 8004a44:	4401      	add	r1, r0
 8004a46:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	015a      	lsls	r2, r3, #5
 8004a52:	69fb      	ldr	r3, [r7, #28]
 8004a54:	4413      	add	r3, r2
 8004a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a64:	69b9      	ldr	r1, [r7, #24]
 8004a66:	0148      	lsls	r0, r1, #5
 8004a68:	69f9      	ldr	r1, [r7, #28]
 8004a6a:	4401      	add	r1, r0
 8004a6c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004a70:	4313      	orrs	r3, r2
 8004a72:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d10d      	bne.n	8004a96 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	68db      	ldr	r3, [r3, #12]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d009      	beq.n	8004a96 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	68d9      	ldr	r1, [r3, #12]
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	015a      	lsls	r2, r3, #5
 8004a8a:	69fb      	ldr	r3, [r7, #28]
 8004a8c:	4413      	add	r3, r2
 8004a8e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a92:	460a      	mov	r2, r1
 8004a94:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004a96:	68bb      	ldr	r3, [r7, #8]
 8004a98:	791b      	ldrb	r3, [r3, #4]
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d128      	bne.n	8004af0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aa4:	689b      	ldr	r3, [r3, #8]
 8004aa6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d110      	bne.n	8004ad0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004aae:	69bb      	ldr	r3, [r7, #24]
 8004ab0:	015a      	lsls	r2, r3, #5
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	4413      	add	r3, r2
 8004ab6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	69ba      	ldr	r2, [r7, #24]
 8004abe:	0151      	lsls	r1, r2, #5
 8004ac0:	69fa      	ldr	r2, [r7, #28]
 8004ac2:	440a      	add	r2, r1
 8004ac4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004ac8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004acc:	6013      	str	r3, [r2, #0]
 8004ace:	e00f      	b.n	8004af0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004ad0:	69bb      	ldr	r3, [r7, #24]
 8004ad2:	015a      	lsls	r2, r3, #5
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	69ba      	ldr	r2, [r7, #24]
 8004ae0:	0151      	lsls	r1, r2, #5
 8004ae2:	69fa      	ldr	r2, [r7, #28]
 8004ae4:	440a      	add	r2, r1
 8004ae6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004aea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004aee:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004af0:	69bb      	ldr	r3, [r7, #24]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	69ba      	ldr	r2, [r7, #24]
 8004b00:	0151      	lsls	r1, r2, #5
 8004b02:	69fa      	ldr	r2, [r7, #28]
 8004b04:	440a      	add	r2, r1
 8004b06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004b0a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004b0e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b10:	2300      	movs	r3, #0
}
 8004b12:	4618      	mov	r0, r3
 8004b14:	3720      	adds	r7, #32
 8004b16:	46bd      	mov	sp, r7
 8004b18:	bd80      	pop	{r7, pc}
 8004b1a:	bf00      	nop
 8004b1c:	1ff80000 	.word	0x1ff80000

08004b20 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b20:	b480      	push	{r7}
 8004b22:	b087      	sub	sp, #28
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
 8004b28:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b2a:	2300      	movs	r3, #0
 8004b2c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	785b      	ldrb	r3, [r3, #1]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d14a      	bne.n	8004bd4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	015a      	lsls	r2, r3, #5
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	4413      	add	r3, r2
 8004b48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b52:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b56:	f040 8086 	bne.w	8004c66 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	683a      	ldr	r2, [r7, #0]
 8004b6c:	7812      	ldrb	r2, [r2, #0]
 8004b6e:	0151      	lsls	r1, r2, #5
 8004b70:	693a      	ldr	r2, [r7, #16]
 8004b72:	440a      	add	r2, r1
 8004b74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b78:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004b7c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	015a      	lsls	r2, r3, #5
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	4413      	add	r3, r2
 8004b88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	683a      	ldr	r2, [r7, #0]
 8004b90:	7812      	ldrb	r2, [r2, #0]
 8004b92:	0151      	lsls	r1, r2, #5
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	440a      	add	r2, r1
 8004b98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004b9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004ba0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004bae:	4293      	cmp	r3, r2
 8004bb0:	d902      	bls.n	8004bb8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	75fb      	strb	r3, [r7, #23]
          break;
 8004bb6:	e056      	b.n	8004c66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004bcc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bd0:	d0e7      	beq.n	8004ba2 <USB_EPStopXfer+0x82>
 8004bd2:	e048      	b.n	8004c66 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004be8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004bec:	d13b      	bne.n	8004c66 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	015a      	lsls	r2, r3, #5
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	4413      	add	r3, r2
 8004bf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	683a      	ldr	r2, [r7, #0]
 8004c00:	7812      	ldrb	r2, [r2, #0]
 8004c02:	0151      	lsls	r1, r2, #5
 8004c04:	693a      	ldr	r2, [r7, #16]
 8004c06:	440a      	add	r2, r1
 8004c08:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c0c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004c10:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	781b      	ldrb	r3, [r3, #0]
 8004c16:	015a      	lsls	r2, r3, #5
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	4413      	add	r3, r2
 8004c1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	683a      	ldr	r2, [r7, #0]
 8004c24:	7812      	ldrb	r2, [r2, #0]
 8004c26:	0151      	lsls	r1, r2, #5
 8004c28:	693a      	ldr	r2, [r7, #16]
 8004c2a:	440a      	add	r2, r1
 8004c2c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	3301      	adds	r3, #1
 8004c3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d902      	bls.n	8004c4c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004c46:	2301      	movs	r3, #1
 8004c48:	75fb      	strb	r3, [r7, #23]
          break;
 8004c4a:	e00c      	b.n	8004c66 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	015a      	lsls	r2, r3, #5
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	4413      	add	r3, r2
 8004c56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004c60:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004c64:	d0e7      	beq.n	8004c36 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004c66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	371c      	adds	r7, #28
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr

08004c74 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b089      	sub	sp, #36	@ 0x24
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	60f8      	str	r0, [r7, #12]
 8004c7c:	60b9      	str	r1, [r7, #8]
 8004c7e:	4611      	mov	r1, r2
 8004c80:	461a      	mov	r2, r3
 8004c82:	460b      	mov	r3, r1
 8004c84:	71fb      	strb	r3, [r7, #7]
 8004c86:	4613      	mov	r3, r2
 8004c88:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004c92:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d123      	bne.n	8004ce2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004c9a:	88bb      	ldrh	r3, [r7, #4]
 8004c9c:	3303      	adds	r3, #3
 8004c9e:	089b      	lsrs	r3, r3, #2
 8004ca0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	61bb      	str	r3, [r7, #24]
 8004ca6:	e018      	b.n	8004cda <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ca8:	79fb      	ldrb	r3, [r7, #7]
 8004caa:	031a      	lsls	r2, r3, #12
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	69fb      	ldr	r3, [r7, #28]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	3301      	adds	r3, #1
 8004cc0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cc8:	69fb      	ldr	r3, [r7, #28]
 8004cca:	3301      	adds	r3, #1
 8004ccc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004cce:	69fb      	ldr	r3, [r7, #28]
 8004cd0:	3301      	adds	r3, #1
 8004cd2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	61bb      	str	r3, [r7, #24]
 8004cda:	69ba      	ldr	r2, [r7, #24]
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	429a      	cmp	r2, r3
 8004ce0:	d3e2      	bcc.n	8004ca8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3724      	adds	r7, #36	@ 0x24
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cee:	4770      	bx	lr

08004cf0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b08b      	sub	sp, #44	@ 0x2c
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004d02:	68bb      	ldr	r3, [r7, #8]
 8004d04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d06:	88fb      	ldrh	r3, [r7, #6]
 8004d08:	089b      	lsrs	r3, r3, #2
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d0e:	88fb      	ldrh	r3, [r7, #6]
 8004d10:	f003 0303 	and.w	r3, r3, #3
 8004d14:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d16:	2300      	movs	r3, #0
 8004d18:	623b      	str	r3, [r7, #32]
 8004d1a:	e014      	b.n	8004d46 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004d2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d30:	3301      	adds	r3, #1
 8004d32:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004d34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d36:	3301      	adds	r3, #1
 8004d38:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004d3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004d40:	6a3b      	ldr	r3, [r7, #32]
 8004d42:	3301      	adds	r3, #1
 8004d44:	623b      	str	r3, [r7, #32]
 8004d46:	6a3a      	ldr	r2, [r7, #32]
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	429a      	cmp	r2, r3
 8004d4c:	d3e6      	bcc.n	8004d1c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004d4e:	8bfb      	ldrh	r3, [r7, #30]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d01e      	beq.n	8004d92 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004d54:	2300      	movs	r3, #0
 8004d56:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f107 0310 	add.w	r3, r7, #16
 8004d64:	6812      	ldr	r2, [r2, #0]
 8004d66:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004d68:	693a      	ldr	r2, [r7, #16]
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	00db      	lsls	r3, r3, #3
 8004d70:	fa22 f303 	lsr.w	r3, r2, r3
 8004d74:	b2da      	uxtb	r2, r3
 8004d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d78:	701a      	strb	r2, [r3, #0]
      i++;
 8004d7a:	6a3b      	ldr	r3, [r7, #32]
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d82:	3301      	adds	r3, #1
 8004d84:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004d86:	8bfb      	ldrh	r3, [r7, #30]
 8004d88:	3b01      	subs	r3, #1
 8004d8a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004d8c:	8bfb      	ldrh	r3, [r7, #30]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d1ea      	bne.n	8004d68 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	372c      	adds	r7, #44	@ 0x2c
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b085      	sub	sp, #20
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	781b      	ldrb	r3, [r3, #0]
 8004db2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004db4:	683b      	ldr	r3, [r7, #0]
 8004db6:	785b      	ldrb	r3, [r3, #1]
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	d12c      	bne.n	8004e16 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	015a      	lsls	r2, r3, #5
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	4413      	add	r3, r2
 8004dc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	db12      	blt.n	8004df4 <USB_EPSetStall+0x54>
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00f      	beq.n	8004df4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	015a      	lsls	r2, r3, #5
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4413      	add	r3, r2
 8004ddc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68ba      	ldr	r2, [r7, #8]
 8004de4:	0151      	lsls	r1, r2, #5
 8004de6:	68fa      	ldr	r2, [r7, #12]
 8004de8:	440a      	add	r2, r1
 8004dea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004dee:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004df2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	015a      	lsls	r2, r3, #5
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	4413      	add	r3, r2
 8004dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68ba      	ldr	r2, [r7, #8]
 8004e04:	0151      	lsls	r1, r2, #5
 8004e06:	68fa      	ldr	r2, [r7, #12]
 8004e08:	440a      	add	r2, r1
 8004e0a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004e0e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e12:	6013      	str	r3, [r2, #0]
 8004e14:	e02b      	b.n	8004e6e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004e16:	68bb      	ldr	r3, [r7, #8]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	db12      	blt.n	8004e4e <USB_EPSetStall+0xae>
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d00f      	beq.n	8004e4e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	015a      	lsls	r2, r3, #5
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	4413      	add	r3, r2
 8004e36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68ba      	ldr	r2, [r7, #8]
 8004e3e:	0151      	lsls	r1, r2, #5
 8004e40:	68fa      	ldr	r2, [r7, #12]
 8004e42:	440a      	add	r2, r1
 8004e44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e48:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004e4c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	015a      	lsls	r2, r3, #5
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	4413      	add	r3, r2
 8004e56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68ba      	ldr	r2, [r7, #8]
 8004e5e:	0151      	lsls	r1, r2, #5
 8004e60:	68fa      	ldr	r2, [r7, #12]
 8004e62:	440a      	add	r2, r1
 8004e64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e68:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004e6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3714      	adds	r7, #20
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b085      	sub	sp, #20
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
 8004e84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	785b      	ldrb	r3, [r3, #1]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d128      	bne.n	8004eea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	015a      	lsls	r2, r3, #5
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	68ba      	ldr	r2, [r7, #8]
 8004ea8:	0151      	lsls	r1, r2, #5
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	440a      	add	r2, r1
 8004eae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004eb2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004eb6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	791b      	ldrb	r3, [r3, #4]
 8004ebc:	2b03      	cmp	r3, #3
 8004ebe:	d003      	beq.n	8004ec8 <USB_EPClearStall+0x4c>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	791b      	ldrb	r3, [r3, #4]
 8004ec4:	2b02      	cmp	r3, #2
 8004ec6:	d138      	bne.n	8004f3a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	015a      	lsls	r2, r3, #5
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	4413      	add	r3, r2
 8004ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68ba      	ldr	r2, [r7, #8]
 8004ed8:	0151      	lsls	r1, r2, #5
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	440a      	add	r2, r1
 8004ede:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ee2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ee6:	6013      	str	r3, [r2, #0]
 8004ee8:	e027      	b.n	8004f3a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	015a      	lsls	r2, r3, #5
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	4413      	add	r3, r2
 8004ef2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	68ba      	ldr	r2, [r7, #8]
 8004efa:	0151      	lsls	r1, r2, #5
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	440a      	add	r2, r1
 8004f00:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f04:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004f08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	791b      	ldrb	r3, [r3, #4]
 8004f0e:	2b03      	cmp	r3, #3
 8004f10:	d003      	beq.n	8004f1a <USB_EPClearStall+0x9e>
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	791b      	ldrb	r3, [r3, #4]
 8004f16:	2b02      	cmp	r3, #2
 8004f18:	d10f      	bne.n	8004f3a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004f1a:	68bb      	ldr	r3, [r7, #8]
 8004f1c:	015a      	lsls	r2, r3, #5
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	4413      	add	r3, r2
 8004f22:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	0151      	lsls	r1, r2, #5
 8004f2c:	68fa      	ldr	r2, [r7, #12]
 8004f2e:	440a      	add	r2, r1
 8004f30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004f34:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f38:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b085      	sub	sp, #20
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	460b      	mov	r3, r1
 8004f52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004f66:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004f6a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	78fb      	ldrb	r3, [r7, #3]
 8004f76:	011b      	lsls	r3, r3, #4
 8004f78:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004f7c:	68f9      	ldr	r1, [r7, #12]
 8004f7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004f82:	4313      	orrs	r3, r2
 8004f84:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004f86:	2300      	movs	r3, #0
}
 8004f88:	4618      	mov	r0, r3
 8004f8a:	3714      	adds	r7, #20
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f92:	4770      	bx	lr

08004f94 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004f94:	b480      	push	{r7}
 8004f96:	b085      	sub	sp, #20
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004fae:	f023 0303 	bic.w	r3, r3, #3
 8004fb2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	68fa      	ldr	r2, [r7, #12]
 8004fbe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fc2:	f023 0302 	bic.w	r3, r3, #2
 8004fc6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3714      	adds	r7, #20
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr

08004fd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b085      	sub	sp, #20
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004ff0:	f023 0303 	bic.w	r3, r3, #3
 8004ff4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005004:	f043 0302 	orr.w	r3, r3, #2
 8005008:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3714      	adds	r7, #20
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	695b      	ldr	r3, [r3, #20]
 8005024:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	68fa      	ldr	r2, [r7, #12]
 800502c:	4013      	ands	r3, r2
 800502e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005030:	68fb      	ldr	r3, [r7, #12]
}
 8005032:	4618      	mov	r0, r3
 8005034:	3714      	adds	r7, #20
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr

0800503e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800503e:	b480      	push	{r7}
 8005040:	b085      	sub	sp, #20
 8005042:	af00      	add	r7, sp, #0
 8005044:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	4013      	ands	r3, r2
 8005060:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	0c1b      	lsrs	r3, r3, #16
}
 8005066:	4618      	mov	r0, r3
 8005068:	3714      	adds	r7, #20
 800506a:	46bd      	mov	sp, r7
 800506c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005070:	4770      	bx	lr

08005072 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005072:	b480      	push	{r7}
 8005074:	b085      	sub	sp, #20
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800508e:	69db      	ldr	r3, [r3, #28]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	4013      	ands	r3, r2
 8005094:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	b29b      	uxth	r3, r3
}
 800509a:	4618      	mov	r0, r3
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr

080050a6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	6078      	str	r0, [r7, #4]
 80050ae:	460b      	mov	r3, r1
 80050b0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80050b6:	78fb      	ldrb	r3, [r7, #3]
 80050b8:	015a      	lsls	r2, r3, #5
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	4413      	add	r3, r2
 80050be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	68ba      	ldr	r2, [r7, #8]
 80050d0:	4013      	ands	r3, r2
 80050d2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80050d4:	68bb      	ldr	r3, [r7, #8]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3714      	adds	r7, #20
 80050da:	46bd      	mov	sp, r7
 80050dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e0:	4770      	bx	lr

080050e2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80050e2:	b480      	push	{r7}
 80050e4:	b087      	sub	sp, #28
 80050e6:	af00      	add	r7, sp, #0
 80050e8:	6078      	str	r0, [r7, #4]
 80050ea:	460b      	mov	r3, r1
 80050ec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80050f2:	697b      	ldr	r3, [r7, #20]
 80050f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005102:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005104:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005106:	78fb      	ldrb	r3, [r7, #3]
 8005108:	f003 030f 	and.w	r3, r3, #15
 800510c:	68fa      	ldr	r2, [r7, #12]
 800510e:	fa22 f303 	lsr.w	r3, r2, r3
 8005112:	01db      	lsls	r3, r3, #7
 8005114:	b2db      	uxtb	r3, r3
 8005116:	693a      	ldr	r2, [r7, #16]
 8005118:	4313      	orrs	r3, r2
 800511a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800511c:	78fb      	ldrb	r3, [r7, #3]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4013      	ands	r3, r2
 800512e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005130:	68bb      	ldr	r3, [r7, #8]
}
 8005132:	4618      	mov	r0, r3
 8005134:	371c      	adds	r7, #28
 8005136:	46bd      	mov	sp, r7
 8005138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513c:	4770      	bx	lr

0800513e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800513e:	b480      	push	{r7}
 8005140:	b083      	sub	sp, #12
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	f003 0301 	and.w	r3, r3, #1
}
 800514e:	4618      	mov	r0, r3
 8005150:	370c      	adds	r7, #12
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr

0800515a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800515a:	b480      	push	{r7}
 800515c:	b085      	sub	sp, #20
 800515e:	af00      	add	r7, sp, #0
 8005160:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005174:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005178:	f023 0307 	bic.w	r3, r3, #7
 800517c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	68fa      	ldr	r2, [r7, #12]
 8005188:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800518c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005190:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005192:	2300      	movs	r3, #0
}
 8005194:	4618      	mov	r0, r3
 8005196:	3714      	adds	r7, #20
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b087      	sub	sp, #28
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	460b      	mov	r3, r1
 80051aa:	607a      	str	r2, [r7, #4]
 80051ac:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	333c      	adds	r3, #60	@ 0x3c
 80051b6:	3304      	adds	r3, #4
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80051bc:	693b      	ldr	r3, [r7, #16]
 80051be:	4a26      	ldr	r2, [pc, #152]	@ (8005258 <USB_EP0_OutStart+0xb8>)
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d90a      	bls.n	80051da <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80051d0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80051d4:	d101      	bne.n	80051da <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80051d6:	2300      	movs	r3, #0
 80051d8:	e037      	b.n	800524a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051e0:	461a      	mov	r2, r3
 80051e2:	2300      	movs	r3, #0
 80051e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	697a      	ldr	r2, [r7, #20]
 80051f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051f4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80051f8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	697a      	ldr	r2, [r7, #20]
 8005204:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005208:	f043 0318 	orr.w	r3, r3, #24
 800520c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800520e:	697b      	ldr	r3, [r7, #20]
 8005210:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005214:	691b      	ldr	r3, [r3, #16]
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800521c:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005220:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005222:	7afb      	ldrb	r3, [r7, #11]
 8005224:	2b01      	cmp	r3, #1
 8005226:	d10f      	bne.n	8005248 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800522e:	461a      	mov	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	697a      	ldr	r2, [r7, #20]
 800523e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005242:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005246:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005248:	2300      	movs	r3, #0
}
 800524a:	4618      	mov	r0, r3
 800524c:	371c      	adds	r7, #28
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr
 8005256:	bf00      	nop
 8005258:	4f54300a 	.word	0x4f54300a

0800525c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800525c:	b480      	push	{r7}
 800525e:	b085      	sub	sp, #20
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005264:	2300      	movs	r3, #0
 8005266:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	3301      	adds	r3, #1
 800526c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005274:	d901      	bls.n	800527a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e022      	b.n	80052c0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	691b      	ldr	r3, [r3, #16]
 800527e:	2b00      	cmp	r3, #0
 8005280:	daf2      	bge.n	8005268 <USB_CoreReset+0xc>

  count = 10U;
 8005282:	230a      	movs	r3, #10
 8005284:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005286:	e002      	b.n	800528e <USB_CoreReset+0x32>
  {
    count--;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	3b01      	subs	r3, #1
 800528c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d1f9      	bne.n	8005288 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	f043 0201 	orr.w	r2, r3, #1
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	3301      	adds	r3, #1
 80052a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80052ac:	d901      	bls.n	80052b2 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e006      	b.n	80052c0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d0f0      	beq.n	80052a0 <USB_CoreReset+0x44>

  return HAL_OK;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3714      	adds	r7, #20
 80052c4:	46bd      	mov	sp, r7
 80052c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ca:	4770      	bx	lr

080052cc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
 80052d4:	460b      	mov	r3, r1
 80052d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80052d8:	2010      	movs	r0, #16
 80052da:	f002 f939 	bl	8007550 <USBD_static_malloc>
 80052de:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d109      	bne.n	80052fa <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	32b0      	adds	r2, #176	@ 0xb0
 80052f0:	2100      	movs	r1, #0
 80052f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80052f6:	2302      	movs	r3, #2
 80052f8:	e048      	b.n	800538c <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	32b0      	adds	r2, #176	@ 0xb0
 8005304:	68f9      	ldr	r1, [r7, #12]
 8005306:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	32b0      	adds	r2, #176	@ 0xb0
 8005314:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	7c1b      	ldrb	r3, [r3, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10d      	bne.n	8005342 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005326:	4b1b      	ldr	r3, [pc, #108]	@ (8005394 <USBD_HID_Init+0xc8>)
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	f003 020f 	and.w	r2, r3, #15
 800532e:	6879      	ldr	r1, [r7, #4]
 8005330:	4613      	mov	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	331c      	adds	r3, #28
 800533c:	2207      	movs	r2, #7
 800533e:	601a      	str	r2, [r3, #0]
 8005340:	e00c      	b.n	800535c <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005342:	4b14      	ldr	r3, [pc, #80]	@ (8005394 <USBD_HID_Init+0xc8>)
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	f003 020f 	and.w	r2, r3, #15
 800534a:	6879      	ldr	r1, [r7, #4]
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	440b      	add	r3, r1
 8005356:	331c      	adds	r3, #28
 8005358:	220a      	movs	r2, #10
 800535a:	601a      	str	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800535c:	4b0d      	ldr	r3, [pc, #52]	@ (8005394 <USBD_HID_Init+0xc8>)
 800535e:	7819      	ldrb	r1, [r3, #0]
 8005360:	2304      	movs	r3, #4
 8005362:	2203      	movs	r2, #3
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f001 ffe2 	bl	800732e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800536a:	4b0a      	ldr	r3, [pc, #40]	@ (8005394 <USBD_HID_Init+0xc8>)
 800536c:	781b      	ldrb	r3, [r3, #0]
 800536e:	f003 020f 	and.w	r2, r3, #15
 8005372:	6879      	ldr	r1, [r7, #4]
 8005374:	4613      	mov	r3, r2
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	4413      	add	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	440b      	add	r3, r1
 800537e:	3323      	adds	r3, #35	@ 0x23
 8005380:	2201      	movs	r2, #1
 8005382:	701a      	strb	r2, [r3, #0]

  hhid->state = USBD_HID_IDLE;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2200      	movs	r2, #0
 8005388:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}
 8005394:	200000bf 	.word	0x200000bf

08005398 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	460b      	mov	r3, r1
 80053a2:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80053a4:	4b1f      	ldr	r3, [pc, #124]	@ (8005424 <USBD_HID_DeInit+0x8c>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	4619      	mov	r1, r3
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f001 ffe5 	bl	800737a <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80053b0:	4b1c      	ldr	r3, [pc, #112]	@ (8005424 <USBD_HID_DeInit+0x8c>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	f003 020f 	and.w	r2, r3, #15
 80053b8:	6879      	ldr	r1, [r7, #4]
 80053ba:	4613      	mov	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	440b      	add	r3, r1
 80053c4:	3323      	adds	r3, #35	@ 0x23
 80053c6:	2200      	movs	r2, #0
 80053c8:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80053ca:	4b16      	ldr	r3, [pc, #88]	@ (8005424 <USBD_HID_DeInit+0x8c>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	f003 020f 	and.w	r2, r3, #15
 80053d2:	6879      	ldr	r1, [r7, #4]
 80053d4:	4613      	mov	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	009b      	lsls	r3, r3, #2
 80053dc:	440b      	add	r3, r1
 80053de:	331c      	adds	r3, #28
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	32b0      	adds	r2, #176	@ 0xb0
 80053ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d011      	beq.n	800541a <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	32b0      	adds	r2, #176	@ 0xb0
 8005400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005404:	4618      	mov	r0, r3
 8005406:	f002 f8b1 	bl	800756c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	32b0      	adds	r2, #176	@ 0xb0
 8005414:	2100      	movs	r1, #0
 8005416:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800541a:	2300      	movs	r3, #0
}
 800541c:	4618      	mov	r0, r3
 800541e:	3708      	adds	r7, #8
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	200000bf 	.word	0x200000bf

08005428 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b086      	sub	sp, #24
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
 8005430:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	32b0      	adds	r2, #176	@ 0xb0
 800543c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005440:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005446:	2300      	movs	r3, #0
 8005448:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005450:	2303      	movs	r3, #3
 8005452:	e0e8      	b.n	8005626 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	781b      	ldrb	r3, [r3, #0]
 8005458:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800545c:	2b00      	cmp	r3, #0
 800545e:	d046      	beq.n	80054ee <USBD_HID_Setup+0xc6>
 8005460:	2b20      	cmp	r3, #32
 8005462:	f040 80d8 	bne.w	8005616 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	785b      	ldrb	r3, [r3, #1]
 800546a:	3b02      	subs	r3, #2
 800546c:	2b09      	cmp	r3, #9
 800546e:	d836      	bhi.n	80054de <USBD_HID_Setup+0xb6>
 8005470:	a201      	add	r2, pc, #4	@ (adr r2, 8005478 <USBD_HID_Setup+0x50>)
 8005472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005476:	bf00      	nop
 8005478:	080054cf 	.word	0x080054cf
 800547c:	080054af 	.word	0x080054af
 8005480:	080054df 	.word	0x080054df
 8005484:	080054df 	.word	0x080054df
 8005488:	080054df 	.word	0x080054df
 800548c:	080054df 	.word	0x080054df
 8005490:	080054df 	.word	0x080054df
 8005494:	080054df 	.word	0x080054df
 8005498:	080054bd 	.word	0x080054bd
 800549c:	080054a1 	.word	0x080054a1
      {
        case USBD_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	885b      	ldrh	r3, [r3, #2]
 80054a4:	b2db      	uxtb	r3, r3
 80054a6:	461a      	mov	r2, r3
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	601a      	str	r2, [r3, #0]
          break;
 80054ac:	e01e      	b.n	80054ec <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2201      	movs	r2, #1
 80054b2:	4619      	mov	r1, r3
 80054b4:	6878      	ldr	r0, [r7, #4]
 80054b6:	f001 fbfb 	bl	8006cb0 <USBD_CtlSendData>
          break;
 80054ba:	e017      	b.n	80054ec <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	885b      	ldrh	r3, [r3, #2]
 80054c0:	0a1b      	lsrs	r3, r3, #8
 80054c2:	b29b      	uxth	r3, r3
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	461a      	mov	r2, r3
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	605a      	str	r2, [r3, #4]
          break;
 80054cc:	e00e      	b.n	80054ec <USBD_HID_Setup+0xc4>

        case USBD_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	3304      	adds	r3, #4
 80054d2:	2201      	movs	r2, #1
 80054d4:	4619      	mov	r1, r3
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f001 fbea 	bl	8006cb0 <USBD_CtlSendData>
          break;
 80054dc:	e006      	b.n	80054ec <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80054de:	6839      	ldr	r1, [r7, #0]
 80054e0:	6878      	ldr	r0, [r7, #4]
 80054e2:	f001 fb68 	bl	8006bb6 <USBD_CtlError>
          ret = USBD_FAIL;
 80054e6:	2303      	movs	r3, #3
 80054e8:	75fb      	strb	r3, [r7, #23]
          break;
 80054ea:	bf00      	nop
      }
      break;
 80054ec:	e09a      	b.n	8005624 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	785b      	ldrb	r3, [r3, #1]
 80054f2:	2b0b      	cmp	r3, #11
 80054f4:	f200 8086 	bhi.w	8005604 <USBD_HID_Setup+0x1dc>
 80054f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005500 <USBD_HID_Setup+0xd8>)
 80054fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fe:	bf00      	nop
 8005500:	08005531 	.word	0x08005531
 8005504:	08005613 	.word	0x08005613
 8005508:	08005605 	.word	0x08005605
 800550c:	08005605 	.word	0x08005605
 8005510:	08005605 	.word	0x08005605
 8005514:	08005605 	.word	0x08005605
 8005518:	0800555b 	.word	0x0800555b
 800551c:	08005605 	.word	0x08005605
 8005520:	08005605 	.word	0x08005605
 8005524:	08005605 	.word	0x08005605
 8005528:	080055b3 	.word	0x080055b3
 800552c:	080055dd 	.word	0x080055dd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005536:	b2db      	uxtb	r3, r3
 8005538:	2b03      	cmp	r3, #3
 800553a:	d107      	bne.n	800554c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800553c:	f107 030a 	add.w	r3, r7, #10
 8005540:	2202      	movs	r2, #2
 8005542:	4619      	mov	r1, r3
 8005544:	6878      	ldr	r0, [r7, #4]
 8005546:	f001 fbb3 	bl	8006cb0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800554a:	e063      	b.n	8005614 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800554c:	6839      	ldr	r1, [r7, #0]
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f001 fb31 	bl	8006bb6 <USBD_CtlError>
            ret = USBD_FAIL;
 8005554:	2303      	movs	r3, #3
 8005556:	75fb      	strb	r3, [r7, #23]
          break;
 8005558:	e05c      	b.n	8005614 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	885b      	ldrh	r3, [r3, #2]
 800555e:	0a1b      	lsrs	r3, r3, #8
 8005560:	b29b      	uxth	r3, r3
 8005562:	2b22      	cmp	r3, #34	@ 0x22
 8005564:	d108      	bne.n	8005578 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	88db      	ldrh	r3, [r3, #6]
 800556a:	2b3f      	cmp	r3, #63	@ 0x3f
 800556c:	bf28      	it	cs
 800556e:	233f      	movcs	r3, #63	@ 0x3f
 8005570:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005572:	4b2f      	ldr	r3, [pc, #188]	@ (8005630 <USBD_HID_Setup+0x208>)
 8005574:	613b      	str	r3, [r7, #16]
 8005576:	e015      	b.n	80055a4 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	885b      	ldrh	r3, [r3, #2]
 800557c:	0a1b      	lsrs	r3, r3, #8
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b21      	cmp	r3, #33	@ 0x21
 8005582:	d108      	bne.n	8005596 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005584:	4b2b      	ldr	r3, [pc, #172]	@ (8005634 <USBD_HID_Setup+0x20c>)
 8005586:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	88db      	ldrh	r3, [r3, #6]
 800558c:	2b09      	cmp	r3, #9
 800558e:	bf28      	it	cs
 8005590:	2309      	movcs	r3, #9
 8005592:	82bb      	strh	r3, [r7, #20]
 8005594:	e006      	b.n	80055a4 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005596:	6839      	ldr	r1, [r7, #0]
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f001 fb0c 	bl	8006bb6 <USBD_CtlError>
            ret = USBD_FAIL;
 800559e:	2303      	movs	r3, #3
 80055a0:	75fb      	strb	r3, [r7, #23]
            break;
 80055a2:	e037      	b.n	8005614 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80055a4:	8abb      	ldrh	r3, [r7, #20]
 80055a6:	461a      	mov	r2, r3
 80055a8:	6939      	ldr	r1, [r7, #16]
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f001 fb80 	bl	8006cb0 <USBD_CtlSendData>
          break;
 80055b0:	e030      	b.n	8005614 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055b8:	b2db      	uxtb	r3, r3
 80055ba:	2b03      	cmp	r3, #3
 80055bc:	d107      	bne.n	80055ce <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	3308      	adds	r3, #8
 80055c2:	2201      	movs	r2, #1
 80055c4:	4619      	mov	r1, r3
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f001 fb72 	bl	8006cb0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055cc:	e022      	b.n	8005614 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80055ce:	6839      	ldr	r1, [r7, #0]
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f001 faf0 	bl	8006bb6 <USBD_CtlError>
            ret = USBD_FAIL;
 80055d6:	2303      	movs	r3, #3
 80055d8:	75fb      	strb	r3, [r7, #23]
          break;
 80055da:	e01b      	b.n	8005614 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055e2:	b2db      	uxtb	r3, r3
 80055e4:	2b03      	cmp	r3, #3
 80055e6:	d106      	bne.n	80055f6 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	885b      	ldrh	r3, [r3, #2]
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	461a      	mov	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80055f4:	e00e      	b.n	8005614 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80055f6:	6839      	ldr	r1, [r7, #0]
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f001 fadc 	bl	8006bb6 <USBD_CtlError>
            ret = USBD_FAIL;
 80055fe:	2303      	movs	r3, #3
 8005600:	75fb      	strb	r3, [r7, #23]
          break;
 8005602:	e007      	b.n	8005614 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005604:	6839      	ldr	r1, [r7, #0]
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f001 fad5 	bl	8006bb6 <USBD_CtlError>
          ret = USBD_FAIL;
 800560c:	2303      	movs	r3, #3
 800560e:	75fb      	strb	r3, [r7, #23]
          break;
 8005610:	e000      	b.n	8005614 <USBD_HID_Setup+0x1ec>
          break;
 8005612:	bf00      	nop
      }
      break;
 8005614:	e006      	b.n	8005624 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005616:	6839      	ldr	r1, [r7, #0]
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f001 facc 	bl	8006bb6 <USBD_CtlError>
      ret = USBD_FAIL;
 800561e:	2303      	movs	r3, #3
 8005620:	75fb      	strb	r3, [r7, #23]
      break;
 8005622:	bf00      	nop
  }

  return (uint8_t)ret;
 8005624:	7dfb      	ldrb	r3, [r7, #23]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3718      	adds	r7, #24
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	20000080 	.word	0x20000080
 8005634:	20000068 	.word	0x20000068

08005638 <USBD_HID_SendReport>:
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len, uint8_t ClassId)
{
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005638:	b580      	push	{r7, lr}
 800563a:	b086      	sub	sp, #24
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	4613      	mov	r3, r2
 8005644:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	32b0      	adds	r2, #176	@ 0xb0
 8005650:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005654:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hhid == NULL)
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d101      	bne.n	8005660 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800565c:	2303      	movs	r3, #3
 800565e:	e014      	b.n	800568a <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, ClassId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005666:	b2db      	uxtb	r3, r3
 8005668:	2b03      	cmp	r3, #3
 800566a:	d10d      	bne.n	8005688 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == USBD_HID_IDLE)
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	7b1b      	ldrb	r3, [r3, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d109      	bne.n	8005688 <USBD_HID_SendReport+0x50>
    {
      hhid->state = USBD_HID_BUSY;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	2201      	movs	r2, #1
 8005678:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800567a:	4b06      	ldr	r3, [pc, #24]	@ (8005694 <USBD_HID_SendReport+0x5c>)
 800567c:	7819      	ldrb	r1, [r3, #0]
 800567e:	88fb      	ldrh	r3, [r7, #6]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f001 ff21 	bl	80074ca <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3718      	adds	r7, #24
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	200000bf 	.word	0x200000bf

08005698 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80056a0:	2181      	movs	r1, #129	@ 0x81
 80056a2:	4809      	ldr	r0, [pc, #36]	@ (80056c8 <USBD_HID_GetFSCfgDesc+0x30>)
 80056a4:	f000 fc4e 	bl	8005f44 <USBD_GetEpDesc>
 80056a8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d002      	beq.n	80056b6 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	220a      	movs	r2, #10
 80056b4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2222      	movs	r2, #34	@ 0x22
 80056ba:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80056bc:	4b02      	ldr	r3, [pc, #8]	@ (80056c8 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3710      	adds	r7, #16
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20000044 	.word	0x20000044

080056cc <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b084      	sub	sp, #16
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80056d4:	2181      	movs	r1, #129	@ 0x81
 80056d6:	4809      	ldr	r0, [pc, #36]	@ (80056fc <USBD_HID_GetHSCfgDesc+0x30>)
 80056d8:	f000 fc34 	bl	8005f44 <USBD_GetEpDesc>
 80056dc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d002      	beq.n	80056ea <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2207      	movs	r2, #7
 80056e8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2222      	movs	r2, #34	@ 0x22
 80056ee:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80056f0:	4b02      	ldr	r3, [pc, #8]	@ (80056fc <USBD_HID_GetHSCfgDesc+0x30>)
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3710      	adds	r7, #16
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}
 80056fa:	bf00      	nop
 80056fc:	20000044 	.word	0x20000044

08005700 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005708:	2181      	movs	r1, #129	@ 0x81
 800570a:	4809      	ldr	r0, [pc, #36]	@ (8005730 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800570c:	f000 fc1a 	bl	8005f44 <USBD_GetEpDesc>
 8005710:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	220a      	movs	r2, #10
 800571c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2222      	movs	r2, #34	@ 0x22
 8005722:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005724:	4b02      	ldr	r3, [pc, #8]	@ (8005730 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005726:	4618      	mov	r0, r3
 8005728:	3710      	adds	r7, #16
 800572a:	46bd      	mov	sp, r7
 800572c:	bd80      	pop	{r7, pc}
 800572e:	bf00      	nop
 8005730:	20000044 	.word	0x20000044

08005734 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	460b      	mov	r3, r1
 800573e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = USBD_HID_IDLE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	32b0      	adds	r2, #176	@ 0xb0
 800574a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800574e:	2200      	movs	r2, #0
 8005750:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	220a      	movs	r2, #10
 800576c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800576e:	4b03      	ldr	r3, [pc, #12]	@ (800577c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005770:	4618      	mov	r0, r3
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	20000074 	.word	0x20000074

08005780 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b086      	sub	sp, #24
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	4613      	mov	r3, r2
 800578c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005794:	2303      	movs	r3, #3
 8005796:	e01f      	b.n	80057d8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	2200      	movs	r2, #0
 80057a4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	68ba      	ldr	r2, [r7, #8]
 80057ba:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	2201      	movs	r2, #1
 80057c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	79fa      	ldrb	r2, [r7, #7]
 80057ca:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f001 fd47 	bl	8007260 <USBD_LL_Init>
 80057d2:	4603      	mov	r3, r0
 80057d4:	75fb      	strb	r3, [r7, #23]

  return ret;
 80057d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}

080057e0 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
 80057e8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80057ea:	2300      	movs	r3, #0
 80057ec:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d101      	bne.n	80057f8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80057f4:	2303      	movs	r3, #3
 80057f6:	e025      	b.n	8005844 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	683a      	ldr	r2, [r7, #0]
 80057fc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	32ae      	adds	r2, #174	@ 0xae
 800580a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800580e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005810:	2b00      	cmp	r3, #0
 8005812:	d00f      	beq.n	8005834 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	32ae      	adds	r2, #174	@ 0xae
 800581e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005824:	f107 020e 	add.w	r2, r7, #14
 8005828:	4610      	mov	r0, r2
 800582a:	4798      	blx	r3
 800582c:	4602      	mov	r2, r0
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8005842:	2300      	movs	r3, #0
}
 8005844:	4618      	mov	r0, r3
 8005846:	3710      	adds	r7, #16
 8005848:	46bd      	mov	sp, r7
 800584a:	bd80      	pop	{r7, pc}

0800584c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f001 fd4f 	bl	80072f8 <USBD_LL_Start>
 800585a:	4603      	mov	r3, r0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3708      	adds	r7, #8
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005864:	b480      	push	{r7}
 8005866:	b083      	sub	sp, #12
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800586c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800586e:	4618      	mov	r0, r3
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr

0800587a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800587a:	b580      	push	{r7, lr}
 800587c:	b084      	sub	sp, #16
 800587e:	af00      	add	r7, sp, #0
 8005880:	6078      	str	r0, [r7, #4]
 8005882:	460b      	mov	r3, r1
 8005884:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005890:	2b00      	cmp	r3, #0
 8005892:	d009      	beq.n	80058a8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	78fa      	ldrb	r2, [r7, #3]
 800589e:	4611      	mov	r1, r2
 80058a0:	6878      	ldr	r0, [r7, #4]
 80058a2:	4798      	blx	r3
 80058a4:	4603      	mov	r3, r0
 80058a6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80058a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b084      	sub	sp, #16
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	460b      	mov	r3, r1
 80058bc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80058c8:	685b      	ldr	r3, [r3, #4]
 80058ca:	78fa      	ldrb	r2, [r7, #3]
 80058cc:	4611      	mov	r1, r2
 80058ce:	6878      	ldr	r0, [r7, #4]
 80058d0:	4798      	blx	r3
 80058d2:	4603      	mov	r3, r0
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d001      	beq.n	80058dc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80058d8:	2303      	movs	r3, #3
 80058da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80058dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3710      	adds	r7, #16
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}

080058e6 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80058e6:	b580      	push	{r7, lr}
 80058e8:	b084      	sub	sp, #16
 80058ea:	af00      	add	r7, sp, #0
 80058ec:	6078      	str	r0, [r7, #4]
 80058ee:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 80058f6:	6839      	ldr	r1, [r7, #0]
 80058f8:	4618      	mov	r0, r3
 80058fa:	f001 f922 	bl	8006b42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800590c:	461a      	mov	r2, r3
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800591a:	f003 031f 	and.w	r3, r3, #31
 800591e:	2b02      	cmp	r3, #2
 8005920:	d01a      	beq.n	8005958 <USBD_LL_SetupStage+0x72>
 8005922:	2b02      	cmp	r3, #2
 8005924:	d822      	bhi.n	800596c <USBD_LL_SetupStage+0x86>
 8005926:	2b00      	cmp	r3, #0
 8005928:	d002      	beq.n	8005930 <USBD_LL_SetupStage+0x4a>
 800592a:	2b01      	cmp	r3, #1
 800592c:	d00a      	beq.n	8005944 <USBD_LL_SetupStage+0x5e>
 800592e:	e01d      	b.n	800596c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005936:	4619      	mov	r1, r3
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fb77 	bl	800602c <USBD_StdDevReq>
 800593e:	4603      	mov	r3, r0
 8005940:	73fb      	strb	r3, [r7, #15]
      break;
 8005942:	e020      	b.n	8005986 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800594a:	4619      	mov	r1, r3
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f000 fbdf 	bl	8006110 <USBD_StdItfReq>
 8005952:	4603      	mov	r3, r0
 8005954:	73fb      	strb	r3, [r7, #15]
      break;
 8005956:	e016      	b.n	8005986 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800595e:	4619      	mov	r1, r3
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f000 fc41 	bl	80061e8 <USBD_StdEPReq>
 8005966:	4603      	mov	r3, r0
 8005968:	73fb      	strb	r3, [r7, #15]
      break;
 800596a:	e00c      	b.n	8005986 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005972:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005976:	b2db      	uxtb	r3, r3
 8005978:	4619      	mov	r1, r3
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f001 fd1c 	bl	80073b8 <USBD_LL_StallEP>
 8005980:	4603      	mov	r3, r0
 8005982:	73fb      	strb	r3, [r7, #15]
      break;
 8005984:	bf00      	nop
  }

  return ret;
 8005986:	7bfb      	ldrb	r3, [r7, #15]
}
 8005988:	4618      	mov	r0, r3
 800598a:	3710      	adds	r7, #16
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
 8005996:	60f8      	str	r0, [r7, #12]
 8005998:	460b      	mov	r3, r1
 800599a:	607a      	str	r2, [r7, #4]
 800599c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800599e:	2300      	movs	r3, #0
 80059a0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80059a2:	7afb      	ldrb	r3, [r7, #11]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d177      	bne.n	8005a98 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80059ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	f040 80a1 	bne.w	8005afe <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	685b      	ldr	r3, [r3, #4]
 80059c0:	693a      	ldr	r2, [r7, #16]
 80059c2:	8992      	ldrh	r2, [r2, #12]
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d91c      	bls.n	8005a02 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	8992      	ldrh	r2, [r2, #12]
 80059d0:	1a9a      	subs	r2, r3, r2
 80059d2:	693b      	ldr	r3, [r7, #16]
 80059d4:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	691b      	ldr	r3, [r3, #16]
 80059da:	693a      	ldr	r2, [r7, #16]
 80059dc:	8992      	ldrh	r2, [r2, #12]
 80059de:	441a      	add	r2, r3
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	6919      	ldr	r1, [r3, #16]
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	899b      	ldrh	r3, [r3, #12]
 80059ec:	461a      	mov	r2, r3
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	4293      	cmp	r3, r2
 80059f4:	bf38      	it	cc
 80059f6:	4613      	movcc	r3, r2
 80059f8:	461a      	mov	r2, r3
 80059fa:	68f8      	ldr	r0, [r7, #12]
 80059fc:	f001 f987 	bl	8006d0e <USBD_CtlContinueRx>
 8005a00:	e07d      	b.n	8005afe <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005a08:	f003 031f 	and.w	r3, r3, #31
 8005a0c:	2b02      	cmp	r3, #2
 8005a0e:	d014      	beq.n	8005a3a <USBD_LL_DataOutStage+0xaa>
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d81d      	bhi.n	8005a50 <USBD_LL_DataOutStage+0xc0>
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d002      	beq.n	8005a1e <USBD_LL_DataOutStage+0x8e>
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d003      	beq.n	8005a24 <USBD_LL_DataOutStage+0x94>
 8005a1c:	e018      	b.n	8005a50 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	75bb      	strb	r3, [r7, #22]
            break;
 8005a22:	e018      	b.n	8005a56 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005a2a:	b2db      	uxtb	r3, r3
 8005a2c:	4619      	mov	r1, r3
 8005a2e:	68f8      	ldr	r0, [r7, #12]
 8005a30:	f000 fa6e 	bl	8005f10 <USBD_CoreFindIF>
 8005a34:	4603      	mov	r3, r0
 8005a36:	75bb      	strb	r3, [r7, #22]
            break;
 8005a38:	e00d      	b.n	8005a56 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	4619      	mov	r1, r3
 8005a44:	68f8      	ldr	r0, [r7, #12]
 8005a46:	f000 fa70 	bl	8005f2a <USBD_CoreFindEP>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	75bb      	strb	r3, [r7, #22]
            break;
 8005a4e:	e002      	b.n	8005a56 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	75bb      	strb	r3, [r7, #22]
            break;
 8005a54:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005a56:	7dbb      	ldrb	r3, [r7, #22]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d119      	bne.n	8005a90 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b03      	cmp	r3, #3
 8005a66:	d113      	bne.n	8005a90 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005a68:	7dba      	ldrb	r2, [r7, #22]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	32ae      	adds	r2, #174	@ 0xae
 8005a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d00b      	beq.n	8005a90 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8005a78:	7dba      	ldrb	r2, [r7, #22]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005a80:	7dba      	ldrb	r2, [r7, #22]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	32ae      	adds	r2, #174	@ 0xae
 8005a86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	68f8      	ldr	r0, [r7, #12]
 8005a8e:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f001 f94d 	bl	8006d30 <USBD_CtlSendStatus>
 8005a96:	e032      	b.n	8005afe <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005a98:	7afb      	ldrb	r3, [r7, #11]
 8005a9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005a9e:	b2db      	uxtb	r3, r3
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 fa41 	bl	8005f2a <USBD_CoreFindEP>
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005aac:	7dbb      	ldrb	r3, [r7, #22]
 8005aae:	2bff      	cmp	r3, #255	@ 0xff
 8005ab0:	d025      	beq.n	8005afe <USBD_LL_DataOutStage+0x16e>
 8005ab2:	7dbb      	ldrb	r3, [r7, #22]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d122      	bne.n	8005afe <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005abe:	b2db      	uxtb	r3, r3
 8005ac0:	2b03      	cmp	r3, #3
 8005ac2:	d117      	bne.n	8005af4 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005ac4:	7dba      	ldrb	r2, [r7, #22]
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	32ae      	adds	r2, #174	@ 0xae
 8005aca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ace:	699b      	ldr	r3, [r3, #24]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00f      	beq.n	8005af4 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 8005ad4:	7dba      	ldrb	r2, [r7, #22]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005adc:	7dba      	ldrb	r2, [r7, #22]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	32ae      	adds	r2, #174	@ 0xae
 8005ae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	7afa      	ldrb	r2, [r7, #11]
 8005aea:	4611      	mov	r1, r2
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	4798      	blx	r3
 8005af0:	4603      	mov	r3, r0
 8005af2:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005af4:	7dfb      	ldrb	r3, [r7, #23]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d001      	beq.n	8005afe <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8005afa:	7dfb      	ldrb	r3, [r7, #23]
 8005afc:	e000      	b.n	8005b00 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b086      	sub	sp, #24
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	460b      	mov	r3, r1
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 8005b16:	7afb      	ldrb	r3, [r7, #11]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d178      	bne.n	8005c0e <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	3314      	adds	r3, #20
 8005b20:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005b28:	2b02      	cmp	r3, #2
 8005b2a:	d163      	bne.n	8005bf4 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	693a      	ldr	r2, [r7, #16]
 8005b32:	8992      	ldrh	r2, [r2, #12]
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d91c      	bls.n	8005b72 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8005b38:	693b      	ldr	r3, [r7, #16]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	693a      	ldr	r2, [r7, #16]
 8005b3e:	8992      	ldrh	r2, [r2, #12]
 8005b40:	1a9a      	subs	r2, r3, r2
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	693a      	ldr	r2, [r7, #16]
 8005b4c:	8992      	ldrh	r2, [r2, #12]
 8005b4e:	441a      	add	r2, r3
 8005b50:	693b      	ldr	r3, [r7, #16]
 8005b52:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 8005b54:	693b      	ldr	r3, [r7, #16]
 8005b56:	6919      	ldr	r1, [r3, #16]
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	461a      	mov	r2, r3
 8005b5e:	68f8      	ldr	r0, [r7, #12]
 8005b60:	f001 f8c4 	bl	8006cec <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005b64:	2300      	movs	r3, #0
 8005b66:	2200      	movs	r2, #0
 8005b68:	2100      	movs	r1, #0
 8005b6a:	68f8      	ldr	r0, [r7, #12]
 8005b6c:	f001 fcce 	bl	800750c <USBD_LL_PrepareReceive>
 8005b70:	e040      	b.n	8005bf4 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	899b      	ldrh	r3, [r3, #12]
 8005b76:	461a      	mov	r2, r3
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	685b      	ldr	r3, [r3, #4]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d11c      	bne.n	8005bba <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	693a      	ldr	r2, [r7, #16]
 8005b86:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d316      	bcc.n	8005bba <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 8005b8c:	693b      	ldr	r3, [r7, #16]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005b96:	429a      	cmp	r2, r3
 8005b98:	d20f      	bcs.n	8005bba <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	2100      	movs	r1, #0
 8005b9e:	68f8      	ldr	r0, [r7, #12]
 8005ba0:	f001 f8a4 	bl	8006cec <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005bac:	2300      	movs	r3, #0
 8005bae:	2200      	movs	r2, #0
 8005bb0:	2100      	movs	r1, #0
 8005bb2:	68f8      	ldr	r0, [r7, #12]
 8005bb4:	f001 fcaa 	bl	800750c <USBD_LL_PrepareReceive>
 8005bb8:	e01c      	b.n	8005bf4 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b03      	cmp	r3, #3
 8005bc4:	d10f      	bne.n	8005be6 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005bcc:	68db      	ldr	r3, [r3, #12]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d009      	beq.n	8005be6 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	68f8      	ldr	r0, [r7, #12]
 8005be4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005be6:	2180      	movs	r1, #128	@ 0x80
 8005be8:	68f8      	ldr	r0, [r7, #12]
 8005bea:	f001 fbe5 	bl	80073b8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	f001 f8b1 	bl	8006d56 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d03a      	beq.n	8005c74 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8005bfe:	68f8      	ldr	r0, [r7, #12]
 8005c00:	f7ff fe30 	bl	8005864 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005c0c:	e032      	b.n	8005c74 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005c0e:	7afb      	ldrb	r3, [r7, #11]
 8005c10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	4619      	mov	r1, r3
 8005c18:	68f8      	ldr	r0, [r7, #12]
 8005c1a:	f000 f986 	bl	8005f2a <USBD_CoreFindEP>
 8005c1e:	4603      	mov	r3, r0
 8005c20:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c22:	7dfb      	ldrb	r3, [r7, #23]
 8005c24:	2bff      	cmp	r3, #255	@ 0xff
 8005c26:	d025      	beq.n	8005c74 <USBD_LL_DataInStage+0x16c>
 8005c28:	7dfb      	ldrb	r3, [r7, #23]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d122      	bne.n	8005c74 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b03      	cmp	r3, #3
 8005c38:	d11c      	bne.n	8005c74 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005c3a:	7dfa      	ldrb	r2, [r7, #23]
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	32ae      	adds	r2, #174	@ 0xae
 8005c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d014      	beq.n	8005c74 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8005c4a:	7dfa      	ldrb	r2, [r7, #23]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005c52:	7dfa      	ldrb	r2, [r7, #23]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	32ae      	adds	r2, #174	@ 0xae
 8005c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	7afa      	ldrb	r2, [r7, #11]
 8005c60:	4611      	mov	r1, r2
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	4798      	blx	r3
 8005c66:	4603      	mov	r3, r0
 8005c68:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005c6a:	7dbb      	ldrb	r3, [r7, #22]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d001      	beq.n	8005c74 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8005c70:	7dbb      	ldrb	r3, [r7, #22]
 8005c72:	e000      	b.n	8005c76 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3718      	adds	r7, #24
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005c7e:	b580      	push	{r7, lr}
 8005c80:	b084      	sub	sp, #16
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c86:	2300      	movs	r3, #0
 8005c88:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2200      	movs	r2, #0
 8005c9e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d014      	beq.n	8005ce4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00e      	beq.n	8005ce4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	6852      	ldr	r2, [r2, #4]
 8005cd2:	b2d2      	uxtb	r2, r2
 8005cd4:	4611      	mov	r1, r2
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	4798      	blx	r3
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ce4:	2340      	movs	r3, #64	@ 0x40
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	2100      	movs	r1, #0
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f001 fb1f 	bl	800732e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2240      	movs	r2, #64	@ 0x40
 8005cfc:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005d00:	2340      	movs	r3, #64	@ 0x40
 8005d02:	2200      	movs	r2, #0
 8005d04:	2180      	movs	r1, #128	@ 0x80
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f001 fb11 	bl	800732e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2201      	movs	r2, #1
 8005d10:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2240      	movs	r2, #64	@ 0x40
 8005d18:	841a      	strh	r2, [r3, #32]

  return ret;
 8005d1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3710      	adds	r7, #16
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b083      	sub	sp, #12
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	78fa      	ldrb	r2, [r7, #3]
 8005d34:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b083      	sub	sp, #12
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b04      	cmp	r3, #4
 8005d56:	d006      	beq.n	8005d66 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d5e:	b2da      	uxtb	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	2204      	movs	r2, #4
 8005d6a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005d6e:	2300      	movs	r3, #0
}
 8005d70:	4618      	mov	r0, r3
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr

08005d7c <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	b083      	sub	sp, #12
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	2b04      	cmp	r3, #4
 8005d8e:	d106      	bne.n	8005d9e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005d96:	b2da      	uxtb	r2, r3
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005d9e:	2300      	movs	r3, #0
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b082      	sub	sp, #8
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	2b03      	cmp	r3, #3
 8005dbe:	d110      	bne.n	8005de2 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00b      	beq.n	8005de2 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005dd0:	69db      	ldr	r3, [r3, #28]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d005      	beq.n	8005de2 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ddc:	69db      	ldr	r3, [r3, #28]
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005de2:	2300      	movs	r3, #0
}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3708      	adds	r7, #8
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b082      	sub	sp, #8
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	32ae      	adds	r2, #174	@ 0xae
 8005e02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d101      	bne.n	8005e0e <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e01c      	b.n	8005e48 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e14:	b2db      	uxtb	r3, r3
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d115      	bne.n	8005e46 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	32ae      	adds	r2, #174	@ 0xae
 8005e24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e28:	6a1b      	ldr	r3, [r3, #32]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00b      	beq.n	8005e46 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	32ae      	adds	r2, #174	@ 0xae
 8005e38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e3c:	6a1b      	ldr	r3, [r3, #32]
 8005e3e:	78fa      	ldrb	r2, [r7, #3]
 8005e40:	4611      	mov	r1, r2
 8005e42:	6878      	ldr	r0, [r7, #4]
 8005e44:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005e46:	2300      	movs	r3, #0
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3708      	adds	r7, #8
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
 8005e58:	460b      	mov	r3, r1
 8005e5a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	32ae      	adds	r2, #174	@ 0xae
 8005e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d101      	bne.n	8005e72 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e01c      	b.n	8005eac <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	2b03      	cmp	r3, #3
 8005e7c:	d115      	bne.n	8005eaa <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	32ae      	adds	r2, #174	@ 0xae
 8005e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00b      	beq.n	8005eaa <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	32ae      	adds	r2, #174	@ 0xae
 8005e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ea2:	78fa      	ldrb	r2, [r7, #3]
 8005ea4:	4611      	mov	r1, r2
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005eaa:	2300      	movs	r3, #0
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3708      	adds	r7, #8
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	370c      	adds	r7, #12
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec8:	4770      	bx	lr

08005eca <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00e      	beq.n	8005f06 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005eee:	685b      	ldr	r3, [r3, #4]
 8005ef0:	687a      	ldr	r2, [r7, #4]
 8005ef2:	6852      	ldr	r2, [r2, #4]
 8005ef4:	b2d2      	uxtb	r2, r2
 8005ef6:	4611      	mov	r1, r2
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	4798      	blx	r3
 8005efc:	4603      	mov	r3, r0
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005f02:	2303      	movs	r3, #3
 8005f04:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	460b      	mov	r3, r1
 8005f1a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f1c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	370c      	adds	r7, #12
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005f2a:	b480      	push	{r7}
 8005f2c:	b083      	sub	sp, #12
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	460b      	mov	r3, r1
 8005f34:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005f36:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005f38:	4618      	mov	r0, r3
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005f44:	b580      	push	{r7, lr}
 8005f46:	b086      	sub	sp, #24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	885b      	ldrh	r3, [r3, #2]
 8005f60:	b29b      	uxth	r3, r3
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	7812      	ldrb	r2, [r2, #0]
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d91f      	bls.n	8005faa <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005f70:	e013      	b.n	8005f9a <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005f72:	f107 030a 	add.w	r3, r7, #10
 8005f76:	4619      	mov	r1, r3
 8005f78:	6978      	ldr	r0, [r7, #20]
 8005f7a:	f000 f81b 	bl	8005fb4 <USBD_GetNextDesc>
 8005f7e:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005f80:	697b      	ldr	r3, [r7, #20]
 8005f82:	785b      	ldrb	r3, [r3, #1]
 8005f84:	2b05      	cmp	r3, #5
 8005f86:	d108      	bne.n	8005f9a <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	789b      	ldrb	r3, [r3, #2]
 8005f90:	78fa      	ldrb	r2, [r7, #3]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d008      	beq.n	8005fa8 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005f96:	2300      	movs	r3, #0
 8005f98:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	885b      	ldrh	r3, [r3, #2]
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	897b      	ldrh	r3, [r7, #10]
 8005fa2:	429a      	cmp	r2, r3
 8005fa4:	d8e5      	bhi.n	8005f72 <USBD_GetEpDesc+0x2e>
 8005fa6:	e000      	b.n	8005faa <USBD_GetEpDesc+0x66>
          break;
 8005fa8:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005faa:	693b      	ldr	r3, [r7, #16]
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3718      	adds	r7, #24
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	bd80      	pop	{r7, pc}

08005fb4 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	b085      	sub	sp, #20
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	881b      	ldrh	r3, [r3, #0]
 8005fc6:	68fa      	ldr	r2, [r7, #12]
 8005fc8:	7812      	ldrb	r2, [r2, #0]
 8005fca:	4413      	add	r3, r2
 8005fcc:	b29a      	uxth	r2, r3
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	781b      	ldrb	r3, [r3, #0]
 8005fd6:	461a      	mov	r2, r3
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	4413      	add	r3, r2
 8005fdc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005fde:	68fb      	ldr	r3, [r7, #12]
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3714      	adds	r7, #20
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr

08005fec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b087      	sub	sp, #28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	781b      	ldrb	r3, [r3, #0]
 8005ffc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005ffe:	697b      	ldr	r3, [r7, #20]
 8006000:	3301      	adds	r3, #1
 8006002:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800600a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800600e:	021b      	lsls	r3, r3, #8
 8006010:	b21a      	sxth	r2, r3
 8006012:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006016:	4313      	orrs	r3, r2
 8006018:	b21b      	sxth	r3, r3
 800601a:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800601c:	89fb      	ldrh	r3, [r7, #14]
}
 800601e:	4618      	mov	r0, r3
 8006020:	371c      	adds	r7, #28
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr
	...

0800602c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006042:	2b40      	cmp	r3, #64	@ 0x40
 8006044:	d005      	beq.n	8006052 <USBD_StdDevReq+0x26>
 8006046:	2b40      	cmp	r3, #64	@ 0x40
 8006048:	d857      	bhi.n	80060fa <USBD_StdDevReq+0xce>
 800604a:	2b00      	cmp	r3, #0
 800604c:	d00f      	beq.n	800606e <USBD_StdDevReq+0x42>
 800604e:	2b20      	cmp	r3, #32
 8006050:	d153      	bne.n	80060fa <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	32ae      	adds	r2, #174	@ 0xae
 800605c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	6839      	ldr	r1, [r7, #0]
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	4798      	blx	r3
 8006068:	4603      	mov	r3, r0
 800606a:	73fb      	strb	r3, [r7, #15]
      break;
 800606c:	e04a      	b.n	8006104 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	785b      	ldrb	r3, [r3, #1]
 8006072:	2b09      	cmp	r3, #9
 8006074:	d83b      	bhi.n	80060ee <USBD_StdDevReq+0xc2>
 8006076:	a201      	add	r2, pc, #4	@ (adr r2, 800607c <USBD_StdDevReq+0x50>)
 8006078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800607c:	080060d1 	.word	0x080060d1
 8006080:	080060e5 	.word	0x080060e5
 8006084:	080060ef 	.word	0x080060ef
 8006088:	080060db 	.word	0x080060db
 800608c:	080060ef 	.word	0x080060ef
 8006090:	080060af 	.word	0x080060af
 8006094:	080060a5 	.word	0x080060a5
 8006098:	080060ef 	.word	0x080060ef
 800609c:	080060c7 	.word	0x080060c7
 80060a0:	080060b9 	.word	0x080060b9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80060a4:	6839      	ldr	r1, [r7, #0]
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fa3e 	bl	8006528 <USBD_GetDescriptor>
          break;
 80060ac:	e024      	b.n	80060f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80060ae:	6839      	ldr	r1, [r7, #0]
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 fba3 	bl	80067fc <USBD_SetAddress>
          break;
 80060b6:	e01f      	b.n	80060f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80060b8:	6839      	ldr	r1, [r7, #0]
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 fbe2 	bl	8006884 <USBD_SetConfig>
 80060c0:	4603      	mov	r3, r0
 80060c2:	73fb      	strb	r3, [r7, #15]
          break;
 80060c4:	e018      	b.n	80060f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80060c6:	6839      	ldr	r1, [r7, #0]
 80060c8:	6878      	ldr	r0, [r7, #4]
 80060ca:	f000 fc85 	bl	80069d8 <USBD_GetConfig>
          break;
 80060ce:	e013      	b.n	80060f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80060d0:	6839      	ldr	r1, [r7, #0]
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fcb6 	bl	8006a44 <USBD_GetStatus>
          break;
 80060d8:	e00e      	b.n	80060f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80060da:	6839      	ldr	r1, [r7, #0]
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fce5 	bl	8006aac <USBD_SetFeature>
          break;
 80060e2:	e009      	b.n	80060f8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80060e4:	6839      	ldr	r1, [r7, #0]
 80060e6:	6878      	ldr	r0, [r7, #4]
 80060e8:	f000 fd09 	bl	8006afe <USBD_ClrFeature>
          break;
 80060ec:	e004      	b.n	80060f8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80060ee:	6839      	ldr	r1, [r7, #0]
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fd60 	bl	8006bb6 <USBD_CtlError>
          break;
 80060f6:	bf00      	nop
      }
      break;
 80060f8:	e004      	b.n	8006104 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80060fa:	6839      	ldr	r1, [r7, #0]
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fd5a 	bl	8006bb6 <USBD_CtlError>
      break;
 8006102:	bf00      	nop
  }

  return ret;
 8006104:	7bfb      	ldrb	r3, [r7, #15]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop

08006110 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800611a:	2300      	movs	r3, #0
 800611c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006126:	2b40      	cmp	r3, #64	@ 0x40
 8006128:	d005      	beq.n	8006136 <USBD_StdItfReq+0x26>
 800612a:	2b40      	cmp	r3, #64	@ 0x40
 800612c:	d852      	bhi.n	80061d4 <USBD_StdItfReq+0xc4>
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <USBD_StdItfReq+0x26>
 8006132:	2b20      	cmp	r3, #32
 8006134:	d14e      	bne.n	80061d4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800613c:	b2db      	uxtb	r3, r3
 800613e:	3b01      	subs	r3, #1
 8006140:	2b02      	cmp	r3, #2
 8006142:	d840      	bhi.n	80061c6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	889b      	ldrh	r3, [r3, #4]
 8006148:	b2db      	uxtb	r3, r3
 800614a:	2b01      	cmp	r3, #1
 800614c:	d836      	bhi.n	80061bc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	889b      	ldrh	r3, [r3, #4]
 8006152:	b2db      	uxtb	r3, r3
 8006154:	4619      	mov	r1, r3
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7ff feda 	bl	8005f10 <USBD_CoreFindIF>
 800615c:	4603      	mov	r3, r0
 800615e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006160:	7bbb      	ldrb	r3, [r7, #14]
 8006162:	2bff      	cmp	r3, #255	@ 0xff
 8006164:	d01d      	beq.n	80061a2 <USBD_StdItfReq+0x92>
 8006166:	7bbb      	ldrb	r3, [r7, #14]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d11a      	bne.n	80061a2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800616c:	7bba      	ldrb	r2, [r7, #14]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	32ae      	adds	r2, #174	@ 0xae
 8006172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00f      	beq.n	800619c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800617c:	7bba      	ldrb	r2, [r7, #14]
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006184:	7bba      	ldrb	r2, [r7, #14]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	32ae      	adds	r2, #174	@ 0xae
 800618a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800618e:	689b      	ldr	r3, [r3, #8]
 8006190:	6839      	ldr	r1, [r7, #0]
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	4798      	blx	r3
 8006196:	4603      	mov	r3, r0
 8006198:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800619a:	e004      	b.n	80061a6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800619c:	2303      	movs	r3, #3
 800619e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80061a0:	e001      	b.n	80061a6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80061a2:	2303      	movs	r3, #3
 80061a4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	88db      	ldrh	r3, [r3, #6]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d110      	bne.n	80061d0 <USBD_StdItfReq+0xc0>
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d10d      	bne.n	80061d0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fdbb 	bl	8006d30 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80061ba:	e009      	b.n	80061d0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fcf9 	bl	8006bb6 <USBD_CtlError>
          break;
 80061c4:	e004      	b.n	80061d0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80061c6:	6839      	ldr	r1, [r7, #0]
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fcf4 	bl	8006bb6 <USBD_CtlError>
          break;
 80061ce:	e000      	b.n	80061d2 <USBD_StdItfReq+0xc2>
          break;
 80061d0:	bf00      	nop
      }
      break;
 80061d2:	e004      	b.n	80061de <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80061d4:	6839      	ldr	r1, [r7, #0]
 80061d6:	6878      	ldr	r0, [r7, #4]
 80061d8:	f000 fced 	bl	8006bb6 <USBD_CtlError>
      break;
 80061dc:	bf00      	nop
  }

  return ret;
 80061de:	7bfb      	ldrb	r3, [r7, #15]
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3710      	adds	r7, #16
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	889b      	ldrh	r3, [r3, #4]
 80061fa:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006204:	2b40      	cmp	r3, #64	@ 0x40
 8006206:	d007      	beq.n	8006218 <USBD_StdEPReq+0x30>
 8006208:	2b40      	cmp	r3, #64	@ 0x40
 800620a:	f200 8181 	bhi.w	8006510 <USBD_StdEPReq+0x328>
 800620e:	2b00      	cmp	r3, #0
 8006210:	d02a      	beq.n	8006268 <USBD_StdEPReq+0x80>
 8006212:	2b20      	cmp	r3, #32
 8006214:	f040 817c 	bne.w	8006510 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006218:	7bbb      	ldrb	r3, [r7, #14]
 800621a:	4619      	mov	r1, r3
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f7ff fe84 	bl	8005f2a <USBD_CoreFindEP>
 8006222:	4603      	mov	r3, r0
 8006224:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006226:	7b7b      	ldrb	r3, [r7, #13]
 8006228:	2bff      	cmp	r3, #255	@ 0xff
 800622a:	f000 8176 	beq.w	800651a <USBD_StdEPReq+0x332>
 800622e:	7b7b      	ldrb	r3, [r7, #13]
 8006230:	2b00      	cmp	r3, #0
 8006232:	f040 8172 	bne.w	800651a <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8006236:	7b7a      	ldrb	r2, [r7, #13]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800623e:	7b7a      	ldrb	r2, [r7, #13]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	32ae      	adds	r2, #174	@ 0xae
 8006244:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006248:	689b      	ldr	r3, [r3, #8]
 800624a:	2b00      	cmp	r3, #0
 800624c:	f000 8165 	beq.w	800651a <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006250:	7b7a      	ldrb	r2, [r7, #13]
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	32ae      	adds	r2, #174	@ 0xae
 8006256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800625a:	689b      	ldr	r3, [r3, #8]
 800625c:	6839      	ldr	r1, [r7, #0]
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	4798      	blx	r3
 8006262:	4603      	mov	r3, r0
 8006264:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006266:	e158      	b.n	800651a <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	785b      	ldrb	r3, [r3, #1]
 800626c:	2b03      	cmp	r3, #3
 800626e:	d008      	beq.n	8006282 <USBD_StdEPReq+0x9a>
 8006270:	2b03      	cmp	r3, #3
 8006272:	f300 8147 	bgt.w	8006504 <USBD_StdEPReq+0x31c>
 8006276:	2b00      	cmp	r3, #0
 8006278:	f000 809b 	beq.w	80063b2 <USBD_StdEPReq+0x1ca>
 800627c:	2b01      	cmp	r3, #1
 800627e:	d03c      	beq.n	80062fa <USBD_StdEPReq+0x112>
 8006280:	e140      	b.n	8006504 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006288:	b2db      	uxtb	r3, r3
 800628a:	2b02      	cmp	r3, #2
 800628c:	d002      	beq.n	8006294 <USBD_StdEPReq+0xac>
 800628e:	2b03      	cmp	r3, #3
 8006290:	d016      	beq.n	80062c0 <USBD_StdEPReq+0xd8>
 8006292:	e02c      	b.n	80062ee <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006294:	7bbb      	ldrb	r3, [r7, #14]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d00d      	beq.n	80062b6 <USBD_StdEPReq+0xce>
 800629a:	7bbb      	ldrb	r3, [r7, #14]
 800629c:	2b80      	cmp	r3, #128	@ 0x80
 800629e:	d00a      	beq.n	80062b6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80062a0:	7bbb      	ldrb	r3, [r7, #14]
 80062a2:	4619      	mov	r1, r3
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f001 f887 	bl	80073b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80062aa:	2180      	movs	r1, #128	@ 0x80
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f001 f883 	bl	80073b8 <USBD_LL_StallEP>
 80062b2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80062b4:	e020      	b.n	80062f8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80062b6:	6839      	ldr	r1, [r7, #0]
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 fc7c 	bl	8006bb6 <USBD_CtlError>
              break;
 80062be:	e01b      	b.n	80062f8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	885b      	ldrh	r3, [r3, #2]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d10e      	bne.n	80062e6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80062c8:	7bbb      	ldrb	r3, [r7, #14]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d00b      	beq.n	80062e6 <USBD_StdEPReq+0xfe>
 80062ce:	7bbb      	ldrb	r3, [r7, #14]
 80062d0:	2b80      	cmp	r3, #128	@ 0x80
 80062d2:	d008      	beq.n	80062e6 <USBD_StdEPReq+0xfe>
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	88db      	ldrh	r3, [r3, #6]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d104      	bne.n	80062e6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80062dc:	7bbb      	ldrb	r3, [r7, #14]
 80062de:	4619      	mov	r1, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f001 f869 	bl	80073b8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 fd22 	bl	8006d30 <USBD_CtlSendStatus>

              break;
 80062ec:	e004      	b.n	80062f8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80062ee:	6839      	ldr	r1, [r7, #0]
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fc60 	bl	8006bb6 <USBD_CtlError>
              break;
 80062f6:	bf00      	nop
          }
          break;
 80062f8:	e109      	b.n	800650e <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b02      	cmp	r3, #2
 8006304:	d002      	beq.n	800630c <USBD_StdEPReq+0x124>
 8006306:	2b03      	cmp	r3, #3
 8006308:	d016      	beq.n	8006338 <USBD_StdEPReq+0x150>
 800630a:	e04b      	b.n	80063a4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800630c:	7bbb      	ldrb	r3, [r7, #14]
 800630e:	2b00      	cmp	r3, #0
 8006310:	d00d      	beq.n	800632e <USBD_StdEPReq+0x146>
 8006312:	7bbb      	ldrb	r3, [r7, #14]
 8006314:	2b80      	cmp	r3, #128	@ 0x80
 8006316:	d00a      	beq.n	800632e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006318:	7bbb      	ldrb	r3, [r7, #14]
 800631a:	4619      	mov	r1, r3
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f001 f84b 	bl	80073b8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006322:	2180      	movs	r1, #128	@ 0x80
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f001 f847 	bl	80073b8 <USBD_LL_StallEP>
 800632a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800632c:	e040      	b.n	80063b0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800632e:	6839      	ldr	r1, [r7, #0]
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fc40 	bl	8006bb6 <USBD_CtlError>
              break;
 8006336:	e03b      	b.n	80063b0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	885b      	ldrh	r3, [r3, #2]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d136      	bne.n	80063ae <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006340:	7bbb      	ldrb	r3, [r7, #14]
 8006342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006346:	2b00      	cmp	r3, #0
 8006348:	d004      	beq.n	8006354 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800634a:	7bbb      	ldrb	r3, [r7, #14]
 800634c:	4619      	mov	r1, r3
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f001 f851 	bl	80073f6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fceb 	bl	8006d30 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800635a:	7bbb      	ldrb	r3, [r7, #14]
 800635c:	4619      	mov	r1, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7ff fde3 	bl	8005f2a <USBD_CoreFindEP>
 8006364:	4603      	mov	r3, r0
 8006366:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006368:	7b7b      	ldrb	r3, [r7, #13]
 800636a:	2bff      	cmp	r3, #255	@ 0xff
 800636c:	d01f      	beq.n	80063ae <USBD_StdEPReq+0x1c6>
 800636e:	7b7b      	ldrb	r3, [r7, #13]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d11c      	bne.n	80063ae <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006374:	7b7a      	ldrb	r2, [r7, #13]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800637c:	7b7a      	ldrb	r2, [r7, #13]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	32ae      	adds	r2, #174	@ 0xae
 8006382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d010      	beq.n	80063ae <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800638c:	7b7a      	ldrb	r2, [r7, #13]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	32ae      	adds	r2, #174	@ 0xae
 8006392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	6839      	ldr	r1, [r7, #0]
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	4798      	blx	r3
 800639e:	4603      	mov	r3, r0
 80063a0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80063a2:	e004      	b.n	80063ae <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fc05 	bl	8006bb6 <USBD_CtlError>
              break;
 80063ac:	e000      	b.n	80063b0 <USBD_StdEPReq+0x1c8>
              break;
 80063ae:	bf00      	nop
          }
          break;
 80063b0:	e0ad      	b.n	800650e <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	2b02      	cmp	r3, #2
 80063bc:	d002      	beq.n	80063c4 <USBD_StdEPReq+0x1dc>
 80063be:	2b03      	cmp	r3, #3
 80063c0:	d033      	beq.n	800642a <USBD_StdEPReq+0x242>
 80063c2:	e099      	b.n	80064f8 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063c4:	7bbb      	ldrb	r3, [r7, #14]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d007      	beq.n	80063da <USBD_StdEPReq+0x1f2>
 80063ca:	7bbb      	ldrb	r3, [r7, #14]
 80063cc:	2b80      	cmp	r3, #128	@ 0x80
 80063ce:	d004      	beq.n	80063da <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80063d0:	6839      	ldr	r1, [r7, #0]
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 fbef 	bl	8006bb6 <USBD_CtlError>
                break;
 80063d8:	e093      	b.n	8006502 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80063da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	da0b      	bge.n	80063fa <USBD_StdEPReq+0x212>
 80063e2:	7bbb      	ldrb	r3, [r7, #14]
 80063e4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80063e8:	4613      	mov	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	4413      	add	r3, r2
 80063ee:	009b      	lsls	r3, r3, #2
 80063f0:	3310      	adds	r3, #16
 80063f2:	687a      	ldr	r2, [r7, #4]
 80063f4:	4413      	add	r3, r2
 80063f6:	3304      	adds	r3, #4
 80063f8:	e00b      	b.n	8006412 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80063fa:	7bbb      	ldrb	r3, [r7, #14]
 80063fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006400:	4613      	mov	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800640c:	687a      	ldr	r2, [r7, #4]
 800640e:	4413      	add	r3, r2
 8006410:	3304      	adds	r3, #4
 8006412:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	2200      	movs	r2, #0
 8006418:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800641a:	68bb      	ldr	r3, [r7, #8]
 800641c:	330e      	adds	r3, #14
 800641e:	2202      	movs	r2, #2
 8006420:	4619      	mov	r1, r3
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 fc44 	bl	8006cb0 <USBD_CtlSendData>
              break;
 8006428:	e06b      	b.n	8006502 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800642a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800642e:	2b00      	cmp	r3, #0
 8006430:	da11      	bge.n	8006456 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006432:	7bbb      	ldrb	r3, [r7, #14]
 8006434:	f003 020f 	and.w	r2, r3, #15
 8006438:	6879      	ldr	r1, [r7, #4]
 800643a:	4613      	mov	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4413      	add	r3, r2
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	440b      	add	r3, r1
 8006444:	3323      	adds	r3, #35	@ 0x23
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d117      	bne.n	800647c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800644c:	6839      	ldr	r1, [r7, #0]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fbb1 	bl	8006bb6 <USBD_CtlError>
                  break;
 8006454:	e055      	b.n	8006502 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006456:	7bbb      	ldrb	r3, [r7, #14]
 8006458:	f003 020f 	and.w	r2, r3, #15
 800645c:	6879      	ldr	r1, [r7, #4]
 800645e:	4613      	mov	r3, r2
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	440b      	add	r3, r1
 8006468:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800646c:	781b      	ldrb	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d104      	bne.n	800647c <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8006472:	6839      	ldr	r1, [r7, #0]
 8006474:	6878      	ldr	r0, [r7, #4]
 8006476:	f000 fb9e 	bl	8006bb6 <USBD_CtlError>
                  break;
 800647a:	e042      	b.n	8006502 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800647c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006480:	2b00      	cmp	r3, #0
 8006482:	da0b      	bge.n	800649c <USBD_StdEPReq+0x2b4>
 8006484:	7bbb      	ldrb	r3, [r7, #14]
 8006486:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800648a:	4613      	mov	r3, r2
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	4413      	add	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	3310      	adds	r3, #16
 8006494:	687a      	ldr	r2, [r7, #4]
 8006496:	4413      	add	r3, r2
 8006498:	3304      	adds	r3, #4
 800649a:	e00b      	b.n	80064b4 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800649c:	7bbb      	ldrb	r3, [r7, #14]
 800649e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064a2:	4613      	mov	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	4413      	add	r3, r2
 80064b2:	3304      	adds	r3, #4
 80064b4:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80064b6:	7bbb      	ldrb	r3, [r7, #14]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <USBD_StdEPReq+0x2da>
 80064bc:	7bbb      	ldrb	r3, [r7, #14]
 80064be:	2b80      	cmp	r3, #128	@ 0x80
 80064c0:	d103      	bne.n	80064ca <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	2200      	movs	r2, #0
 80064c6:	739a      	strb	r2, [r3, #14]
 80064c8:	e00e      	b.n	80064e8 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80064ca:	7bbb      	ldrb	r3, [r7, #14]
 80064cc:	4619      	mov	r1, r3
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 ffb0 	bl	8007434 <USBD_LL_IsStallEP>
 80064d4:	4603      	mov	r3, r0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d003      	beq.n	80064e2 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	2201      	movs	r2, #1
 80064de:	739a      	strb	r2, [r3, #14]
 80064e0:	e002      	b.n	80064e8 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2200      	movs	r2, #0
 80064e6:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	330e      	adds	r3, #14
 80064ec:	2202      	movs	r2, #2
 80064ee:	4619      	mov	r1, r3
 80064f0:	6878      	ldr	r0, [r7, #4]
 80064f2:	f000 fbdd 	bl	8006cb0 <USBD_CtlSendData>
              break;
 80064f6:	e004      	b.n	8006502 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 80064f8:	6839      	ldr	r1, [r7, #0]
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fb5b 	bl	8006bb6 <USBD_CtlError>
              break;
 8006500:	bf00      	nop
          }
          break;
 8006502:	e004      	b.n	800650e <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 fb55 	bl	8006bb6 <USBD_CtlError>
          break;
 800650c:	bf00      	nop
      }
      break;
 800650e:	e005      	b.n	800651c <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8006510:	6839      	ldr	r1, [r7, #0]
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fb4f 	bl	8006bb6 <USBD_CtlError>
      break;
 8006518:	e000      	b.n	800651c <USBD_StdEPReq+0x334>
      break;
 800651a:	bf00      	nop
  }

  return ret;
 800651c:	7bfb      	ldrb	r3, [r7, #15]
}
 800651e:	4618      	mov	r0, r3
 8006520:	3710      	adds	r7, #16
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
	...

08006528 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006536:	2300      	movs	r3, #0
 8006538:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800653a:	2300      	movs	r3, #0
 800653c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	885b      	ldrh	r3, [r3, #2]
 8006542:	0a1b      	lsrs	r3, r3, #8
 8006544:	b29b      	uxth	r3, r3
 8006546:	3b01      	subs	r3, #1
 8006548:	2b06      	cmp	r3, #6
 800654a:	f200 8128 	bhi.w	800679e <USBD_GetDescriptor+0x276>
 800654e:	a201      	add	r2, pc, #4	@ (adr r2, 8006554 <USBD_GetDescriptor+0x2c>)
 8006550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006554:	08006571 	.word	0x08006571
 8006558:	08006589 	.word	0x08006589
 800655c:	080065c9 	.word	0x080065c9
 8006560:	0800679f 	.word	0x0800679f
 8006564:	0800679f 	.word	0x0800679f
 8006568:	0800673f 	.word	0x0800673f
 800656c:	0800676b 	.word	0x0800676b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	7c12      	ldrb	r2, [r2, #16]
 800657c:	f107 0108 	add.w	r1, r7, #8
 8006580:	4610      	mov	r0, r2
 8006582:	4798      	blx	r3
 8006584:	60f8      	str	r0, [r7, #12]
      break;
 8006586:	e112      	b.n	80067ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	7c1b      	ldrb	r3, [r3, #16]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10d      	bne.n	80065ac <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006596:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006598:	f107 0208 	add.w	r2, r7, #8
 800659c:	4610      	mov	r0, r2
 800659e:	4798      	blx	r3
 80065a0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	3301      	adds	r3, #1
 80065a6:	2202      	movs	r2, #2
 80065a8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80065aa:	e100      	b.n	80067ae <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b4:	f107 0208 	add.w	r2, r7, #8
 80065b8:	4610      	mov	r0, r2
 80065ba:	4798      	blx	r3
 80065bc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	3301      	adds	r3, #1
 80065c2:	2202      	movs	r2, #2
 80065c4:	701a      	strb	r2, [r3, #0]
      break;
 80065c6:	e0f2      	b.n	80067ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	885b      	ldrh	r3, [r3, #2]
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b05      	cmp	r3, #5
 80065d0:	f200 80ac 	bhi.w	800672c <USBD_GetDescriptor+0x204>
 80065d4:	a201      	add	r2, pc, #4	@ (adr r2, 80065dc <USBD_GetDescriptor+0xb4>)
 80065d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065da:	bf00      	nop
 80065dc:	080065f5 	.word	0x080065f5
 80065e0:	08006629 	.word	0x08006629
 80065e4:	0800665d 	.word	0x0800665d
 80065e8:	08006691 	.word	0x08006691
 80065ec:	080066c5 	.word	0x080066c5
 80065f0:	080066f9 	.word	0x080066f9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d00b      	beq.n	8006618 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	687a      	ldr	r2, [r7, #4]
 800660a:	7c12      	ldrb	r2, [r2, #16]
 800660c:	f107 0108 	add.w	r1, r7, #8
 8006610:	4610      	mov	r0, r2
 8006612:	4798      	blx	r3
 8006614:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006616:	e091      	b.n	800673c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006618:	6839      	ldr	r1, [r7, #0]
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f000 facb 	bl	8006bb6 <USBD_CtlError>
            err++;
 8006620:	7afb      	ldrb	r3, [r7, #11]
 8006622:	3301      	adds	r3, #1
 8006624:	72fb      	strb	r3, [r7, #11]
          break;
 8006626:	e089      	b.n	800673c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800662e:	689b      	ldr	r3, [r3, #8]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d00b      	beq.n	800664c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800663a:	689b      	ldr	r3, [r3, #8]
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	7c12      	ldrb	r2, [r2, #16]
 8006640:	f107 0108 	add.w	r1, r7, #8
 8006644:	4610      	mov	r0, r2
 8006646:	4798      	blx	r3
 8006648:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800664a:	e077      	b.n	800673c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800664c:	6839      	ldr	r1, [r7, #0]
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fab1 	bl	8006bb6 <USBD_CtlError>
            err++;
 8006654:	7afb      	ldrb	r3, [r7, #11]
 8006656:	3301      	adds	r3, #1
 8006658:	72fb      	strb	r3, [r7, #11]
          break;
 800665a:	e06f      	b.n	800673c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006662:	68db      	ldr	r3, [r3, #12]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d00b      	beq.n	8006680 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	687a      	ldr	r2, [r7, #4]
 8006672:	7c12      	ldrb	r2, [r2, #16]
 8006674:	f107 0108 	add.w	r1, r7, #8
 8006678:	4610      	mov	r0, r2
 800667a:	4798      	blx	r3
 800667c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800667e:	e05d      	b.n	800673c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006680:	6839      	ldr	r1, [r7, #0]
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 fa97 	bl	8006bb6 <USBD_CtlError>
            err++;
 8006688:	7afb      	ldrb	r3, [r7, #11]
 800668a:	3301      	adds	r3, #1
 800668c:	72fb      	strb	r3, [r7, #11]
          break;
 800668e:	e055      	b.n	800673c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006696:	691b      	ldr	r3, [r3, #16]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d00b      	beq.n	80066b4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066a2:	691b      	ldr	r3, [r3, #16]
 80066a4:	687a      	ldr	r2, [r7, #4]
 80066a6:	7c12      	ldrb	r2, [r2, #16]
 80066a8:	f107 0108 	add.w	r1, r7, #8
 80066ac:	4610      	mov	r0, r2
 80066ae:	4798      	blx	r3
 80066b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066b2:	e043      	b.n	800673c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066b4:	6839      	ldr	r1, [r7, #0]
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fa7d 	bl	8006bb6 <USBD_CtlError>
            err++;
 80066bc:	7afb      	ldrb	r3, [r7, #11]
 80066be:	3301      	adds	r3, #1
 80066c0:	72fb      	strb	r3, [r7, #11]
          break;
 80066c2:	e03b      	b.n	800673c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00b      	beq.n	80066e8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066d6:	695b      	ldr	r3, [r3, #20]
 80066d8:	687a      	ldr	r2, [r7, #4]
 80066da:	7c12      	ldrb	r2, [r2, #16]
 80066dc:	f107 0108 	add.w	r1, r7, #8
 80066e0:	4610      	mov	r0, r2
 80066e2:	4798      	blx	r3
 80066e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066e6:	e029      	b.n	800673c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066e8:	6839      	ldr	r1, [r7, #0]
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 fa63 	bl	8006bb6 <USBD_CtlError>
            err++;
 80066f0:	7afb      	ldrb	r3, [r7, #11]
 80066f2:	3301      	adds	r3, #1
 80066f4:	72fb      	strb	r3, [r7, #11]
          break;
 80066f6:	e021      	b.n	800673c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066fe:	699b      	ldr	r3, [r3, #24]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d00b      	beq.n	800671c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	687a      	ldr	r2, [r7, #4]
 800670e:	7c12      	ldrb	r2, [r2, #16]
 8006710:	f107 0108 	add.w	r1, r7, #8
 8006714:	4610      	mov	r0, r2
 8006716:	4798      	blx	r3
 8006718:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800671a:	e00f      	b.n	800673c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800671c:	6839      	ldr	r1, [r7, #0]
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f000 fa49 	bl	8006bb6 <USBD_CtlError>
            err++;
 8006724:	7afb      	ldrb	r3, [r7, #11]
 8006726:	3301      	adds	r3, #1
 8006728:	72fb      	strb	r3, [r7, #11]
          break;
 800672a:	e007      	b.n	800673c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800672c:	6839      	ldr	r1, [r7, #0]
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fa41 	bl	8006bb6 <USBD_CtlError>
          err++;
 8006734:	7afb      	ldrb	r3, [r7, #11]
 8006736:	3301      	adds	r3, #1
 8006738:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800673a:	bf00      	nop
      }
      break;
 800673c:	e037      	b.n	80067ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	7c1b      	ldrb	r3, [r3, #16]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d109      	bne.n	800675a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800674c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800674e:	f107 0208 	add.w	r2, r7, #8
 8006752:	4610      	mov	r0, r2
 8006754:	4798      	blx	r3
 8006756:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006758:	e029      	b.n	80067ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800675a:	6839      	ldr	r1, [r7, #0]
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fa2a 	bl	8006bb6 <USBD_CtlError>
        err++;
 8006762:	7afb      	ldrb	r3, [r7, #11]
 8006764:	3301      	adds	r3, #1
 8006766:	72fb      	strb	r3, [r7, #11]
      break;
 8006768:	e021      	b.n	80067ae <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	7c1b      	ldrb	r3, [r3, #16]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d10d      	bne.n	800678e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006778:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800677a:	f107 0208 	add.w	r2, r7, #8
 800677e:	4610      	mov	r0, r2
 8006780:	4798      	blx	r3
 8006782:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	3301      	adds	r3, #1
 8006788:	2207      	movs	r2, #7
 800678a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800678c:	e00f      	b.n	80067ae <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800678e:	6839      	ldr	r1, [r7, #0]
 8006790:	6878      	ldr	r0, [r7, #4]
 8006792:	f000 fa10 	bl	8006bb6 <USBD_CtlError>
        err++;
 8006796:	7afb      	ldrb	r3, [r7, #11]
 8006798:	3301      	adds	r3, #1
 800679a:	72fb      	strb	r3, [r7, #11]
      break;
 800679c:	e007      	b.n	80067ae <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800679e:	6839      	ldr	r1, [r7, #0]
 80067a0:	6878      	ldr	r0, [r7, #4]
 80067a2:	f000 fa08 	bl	8006bb6 <USBD_CtlError>
      err++;
 80067a6:	7afb      	ldrb	r3, [r7, #11]
 80067a8:	3301      	adds	r3, #1
 80067aa:	72fb      	strb	r3, [r7, #11]
      break;
 80067ac:	bf00      	nop
  }

  if (err != 0U)
 80067ae:	7afb      	ldrb	r3, [r7, #11]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d11e      	bne.n	80067f2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	88db      	ldrh	r3, [r3, #6]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d016      	beq.n	80067ea <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80067bc:	893b      	ldrh	r3, [r7, #8]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00e      	beq.n	80067e0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	88da      	ldrh	r2, [r3, #6]
 80067c6:	893b      	ldrh	r3, [r7, #8]
 80067c8:	4293      	cmp	r3, r2
 80067ca:	bf28      	it	cs
 80067cc:	4613      	movcs	r3, r2
 80067ce:	b29b      	uxth	r3, r3
 80067d0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80067d2:	893b      	ldrh	r3, [r7, #8]
 80067d4:	461a      	mov	r2, r3
 80067d6:	68f9      	ldr	r1, [r7, #12]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	f000 fa69 	bl	8006cb0 <USBD_CtlSendData>
 80067de:	e009      	b.n	80067f4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80067e0:	6839      	ldr	r1, [r7, #0]
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f9e7 	bl	8006bb6 <USBD_CtlError>
 80067e8:	e004      	b.n	80067f4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 faa0 	bl	8006d30 <USBD_CtlSendStatus>
 80067f0:	e000      	b.n	80067f4 <USBD_GetDescriptor+0x2cc>
    return;
 80067f2:	bf00      	nop
  }
}
 80067f4:	3710      	adds	r7, #16
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop

080067fc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b084      	sub	sp, #16
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006806:	683b      	ldr	r3, [r7, #0]
 8006808:	889b      	ldrh	r3, [r3, #4]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d131      	bne.n	8006872 <USBD_SetAddress+0x76>
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	88db      	ldrh	r3, [r3, #6]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d12d      	bne.n	8006872 <USBD_SetAddress+0x76>
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	885b      	ldrh	r3, [r3, #2]
 800681a:	2b7f      	cmp	r3, #127	@ 0x7f
 800681c:	d829      	bhi.n	8006872 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	885b      	ldrh	r3, [r3, #2]
 8006822:	b2db      	uxtb	r3, r3
 8006824:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006828:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b03      	cmp	r3, #3
 8006834:	d104      	bne.n	8006840 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006836:	6839      	ldr	r1, [r7, #0]
 8006838:	6878      	ldr	r0, [r7, #4]
 800683a:	f000 f9bc 	bl	8006bb6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800683e:	e01d      	b.n	800687c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	7bfa      	ldrb	r2, [r7, #15]
 8006844:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006848:	7bfb      	ldrb	r3, [r7, #15]
 800684a:	4619      	mov	r1, r3
 800684c:	6878      	ldr	r0, [r7, #4]
 800684e:	f000 fe1d 	bl	800748c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fa6c 	bl	8006d30 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d004      	beq.n	8006868 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2202      	movs	r2, #2
 8006862:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006866:	e009      	b.n	800687c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006870:	e004      	b.n	800687c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 f99e 	bl	8006bb6 <USBD_CtlError>
  }
}
 800687a:	bf00      	nop
 800687c:	bf00      	nop
 800687e:	3710      	adds	r7, #16
 8006880:	46bd      	mov	sp, r7
 8006882:	bd80      	pop	{r7, pc}

08006884 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	885b      	ldrh	r3, [r3, #2]
 8006896:	b2da      	uxtb	r2, r3
 8006898:	4b4e      	ldr	r3, [pc, #312]	@ (80069d4 <USBD_SetConfig+0x150>)
 800689a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800689c:	4b4d      	ldr	r3, [pc, #308]	@ (80069d4 <USBD_SetConfig+0x150>)
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d905      	bls.n	80068b0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80068a4:	6839      	ldr	r1, [r7, #0]
 80068a6:	6878      	ldr	r0, [r7, #4]
 80068a8:	f000 f985 	bl	8006bb6 <USBD_CtlError>
    return USBD_FAIL;
 80068ac:	2303      	movs	r3, #3
 80068ae:	e08c      	b.n	80069ca <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068b6:	b2db      	uxtb	r3, r3
 80068b8:	2b02      	cmp	r3, #2
 80068ba:	d002      	beq.n	80068c2 <USBD_SetConfig+0x3e>
 80068bc:	2b03      	cmp	r3, #3
 80068be:	d029      	beq.n	8006914 <USBD_SetConfig+0x90>
 80068c0:	e075      	b.n	80069ae <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80068c2:	4b44      	ldr	r3, [pc, #272]	@ (80069d4 <USBD_SetConfig+0x150>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d020      	beq.n	800690c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80068ca:	4b42      	ldr	r3, [pc, #264]	@ (80069d4 <USBD_SetConfig+0x150>)
 80068cc:	781b      	ldrb	r3, [r3, #0]
 80068ce:	461a      	mov	r2, r3
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80068d4:	4b3f      	ldr	r3, [pc, #252]	@ (80069d4 <USBD_SetConfig+0x150>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	4619      	mov	r1, r3
 80068da:	6878      	ldr	r0, [r7, #4]
 80068dc:	f7fe ffcd 	bl	800587a <USBD_SetClassConfig>
 80068e0:	4603      	mov	r3, r0
 80068e2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80068e4:	7bfb      	ldrb	r3, [r7, #15]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d008      	beq.n	80068fc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80068ea:	6839      	ldr	r1, [r7, #0]
 80068ec:	6878      	ldr	r0, [r7, #4]
 80068ee:	f000 f962 	bl	8006bb6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2202      	movs	r2, #2
 80068f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80068fa:	e065      	b.n	80069c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80068fc:	6878      	ldr	r0, [r7, #4]
 80068fe:	f000 fa17 	bl	8006d30 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2203      	movs	r2, #3
 8006906:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800690a:	e05d      	b.n	80069c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 fa0f 	bl	8006d30 <USBD_CtlSendStatus>
      break;
 8006912:	e059      	b.n	80069c8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006914:	4b2f      	ldr	r3, [pc, #188]	@ (80069d4 <USBD_SetConfig+0x150>)
 8006916:	781b      	ldrb	r3, [r3, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d112      	bne.n	8006942 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	2202      	movs	r2, #2
 8006920:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8006924:	4b2b      	ldr	r3, [pc, #172]	@ (80069d4 <USBD_SetConfig+0x150>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	461a      	mov	r2, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800692e:	4b29      	ldr	r3, [pc, #164]	@ (80069d4 <USBD_SetConfig+0x150>)
 8006930:	781b      	ldrb	r3, [r3, #0]
 8006932:	4619      	mov	r1, r3
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f7fe ffbc 	bl	80058b2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 f9f8 	bl	8006d30 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006940:	e042      	b.n	80069c8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006942:	4b24      	ldr	r3, [pc, #144]	@ (80069d4 <USBD_SetConfig+0x150>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	461a      	mov	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	429a      	cmp	r2, r3
 800694e:	d02a      	beq.n	80069a6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	685b      	ldr	r3, [r3, #4]
 8006954:	b2db      	uxtb	r3, r3
 8006956:	4619      	mov	r1, r3
 8006958:	6878      	ldr	r0, [r7, #4]
 800695a:	f7fe ffaa 	bl	80058b2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800695e:	4b1d      	ldr	r3, [pc, #116]	@ (80069d4 <USBD_SetConfig+0x150>)
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006968:	4b1a      	ldr	r3, [pc, #104]	@ (80069d4 <USBD_SetConfig+0x150>)
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	4619      	mov	r1, r3
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7fe ff83 	bl	800587a <USBD_SetClassConfig>
 8006974:	4603      	mov	r3, r0
 8006976:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006978:	7bfb      	ldrb	r3, [r7, #15]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00f      	beq.n	800699e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800697e:	6839      	ldr	r1, [r7, #0]
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f000 f918 	bl	8006bb6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	b2db      	uxtb	r3, r3
 800698c:	4619      	mov	r1, r3
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f7fe ff8f 	bl	80058b2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	2202      	movs	r2, #2
 8006998:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800699c:	e014      	b.n	80069c8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 f9c6 	bl	8006d30 <USBD_CtlSendStatus>
      break;
 80069a4:	e010      	b.n	80069c8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80069a6:	6878      	ldr	r0, [r7, #4]
 80069a8:	f000 f9c2 	bl	8006d30 <USBD_CtlSendStatus>
      break;
 80069ac:	e00c      	b.n	80069c8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80069ae:	6839      	ldr	r1, [r7, #0]
 80069b0:	6878      	ldr	r0, [r7, #4]
 80069b2:	f000 f900 	bl	8006bb6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80069b6:	4b07      	ldr	r3, [pc, #28]	@ (80069d4 <USBD_SetConfig+0x150>)
 80069b8:	781b      	ldrb	r3, [r3, #0]
 80069ba:	4619      	mov	r1, r3
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f7fe ff78 	bl	80058b2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80069c2:	2303      	movs	r3, #3
 80069c4:	73fb      	strb	r3, [r7, #15]
      break;
 80069c6:	bf00      	nop
  }

  return ret;
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	200001c8 	.word	0x200001c8

080069d8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b082      	sub	sp, #8
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	88db      	ldrh	r3, [r3, #6]
 80069e6:	2b01      	cmp	r3, #1
 80069e8:	d004      	beq.n	80069f4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80069ea:	6839      	ldr	r1, [r7, #0]
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 f8e2 	bl	8006bb6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80069f2:	e023      	b.n	8006a3c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	2b02      	cmp	r3, #2
 80069fe:	dc02      	bgt.n	8006a06 <USBD_GetConfig+0x2e>
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	dc03      	bgt.n	8006a0c <USBD_GetConfig+0x34>
 8006a04:	e015      	b.n	8006a32 <USBD_GetConfig+0x5a>
 8006a06:	2b03      	cmp	r3, #3
 8006a08:	d00b      	beq.n	8006a22 <USBD_GetConfig+0x4a>
 8006a0a:	e012      	b.n	8006a32 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	3308      	adds	r3, #8
 8006a16:	2201      	movs	r2, #1
 8006a18:	4619      	mov	r1, r3
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 f948 	bl	8006cb0 <USBD_CtlSendData>
        break;
 8006a20:	e00c      	b.n	8006a3c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	3304      	adds	r3, #4
 8006a26:	2201      	movs	r2, #1
 8006a28:	4619      	mov	r1, r3
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 f940 	bl	8006cb0 <USBD_CtlSendData>
        break;
 8006a30:	e004      	b.n	8006a3c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006a32:	6839      	ldr	r1, [r7, #0]
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f8be 	bl	8006bb6 <USBD_CtlError>
        break;
 8006a3a:	bf00      	nop
}
 8006a3c:	bf00      	nop
 8006a3e:	3708      	adds	r7, #8
 8006a40:	46bd      	mov	sp, r7
 8006a42:	bd80      	pop	{r7, pc}

08006a44 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a44:	b580      	push	{r7, lr}
 8006a46:	b082      	sub	sp, #8
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	3b01      	subs	r3, #1
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d81e      	bhi.n	8006a9a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	88db      	ldrh	r3, [r3, #6]
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d004      	beq.n	8006a6e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 f8a5 	bl	8006bb6 <USBD_CtlError>
        break;
 8006a6c:	e01a      	b.n	8006aa4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d005      	beq.n	8006a8a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	f043 0202 	orr.w	r2, r3, #2
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	330c      	adds	r3, #12
 8006a8e:	2202      	movs	r2, #2
 8006a90:	4619      	mov	r1, r3
 8006a92:	6878      	ldr	r0, [r7, #4]
 8006a94:	f000 f90c 	bl	8006cb0 <USBD_CtlSendData>
      break;
 8006a98:	e004      	b.n	8006aa4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f000 f88a 	bl	8006bb6 <USBD_CtlError>
      break;
 8006aa2:	bf00      	nop
  }
}
 8006aa4:	bf00      	nop
 8006aa6:	3708      	adds	r7, #8
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}

08006aac <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	885b      	ldrh	r3, [r3, #2]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d107      	bne.n	8006ace <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f932 	bl	8006d30 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006acc:	e013      	b.n	8006af6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006ace:	683b      	ldr	r3, [r7, #0]
 8006ad0:	885b      	ldrh	r3, [r3, #2]
 8006ad2:	2b02      	cmp	r3, #2
 8006ad4:	d10b      	bne.n	8006aee <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	889b      	ldrh	r3, [r3, #4]
 8006ada:	0a1b      	lsrs	r3, r3, #8
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f000 f922 	bl	8006d30 <USBD_CtlSendStatus>
}
 8006aec:	e003      	b.n	8006af6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006aee:	6839      	ldr	r1, [r7, #0]
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f000 f860 	bl	8006bb6 <USBD_CtlError>
}
 8006af6:	bf00      	nop
 8006af8:	3708      	adds	r7, #8
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}

08006afe <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006afe:	b580      	push	{r7, lr}
 8006b00:	b082      	sub	sp, #8
 8006b02:	af00      	add	r7, sp, #0
 8006b04:	6078      	str	r0, [r7, #4]
 8006b06:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	3b01      	subs	r3, #1
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d80b      	bhi.n	8006b2e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	885b      	ldrh	r3, [r3, #2]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d10c      	bne.n	8006b38 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f902 	bl	8006d30 <USBD_CtlSendStatus>
      }
      break;
 8006b2c:	e004      	b.n	8006b38 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006b2e:	6839      	ldr	r1, [r7, #0]
 8006b30:	6878      	ldr	r0, [r7, #4]
 8006b32:	f000 f840 	bl	8006bb6 <USBD_CtlError>
      break;
 8006b36:	e000      	b.n	8006b3a <USBD_ClrFeature+0x3c>
      break;
 8006b38:	bf00      	nop
  }
}
 8006b3a:	bf00      	nop
 8006b3c:	3708      	adds	r7, #8
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	bd80      	pop	{r7, pc}

08006b42 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006b42:	b580      	push	{r7, lr}
 8006b44:	b084      	sub	sp, #16
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006b4c:	683b      	ldr	r3, [r7, #0]
 8006b4e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	781a      	ldrb	r2, [r3, #0]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	3301      	adds	r3, #1
 8006b5c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	781a      	ldrb	r2, [r3, #0]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	3301      	adds	r3, #1
 8006b6a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006b6c:	68f8      	ldr	r0, [r7, #12]
 8006b6e:	f7ff fa3d 	bl	8005fec <SWAPBYTE>
 8006b72:	4603      	mov	r3, r0
 8006b74:	461a      	mov	r2, r3
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	3301      	adds	r3, #1
 8006b7e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	3301      	adds	r3, #1
 8006b84:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f7ff fa30 	bl	8005fec <SWAPBYTE>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	461a      	mov	r2, r3
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	3301      	adds	r3, #1
 8006b98:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	3301      	adds	r3, #1
 8006b9e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006ba0:	68f8      	ldr	r0, [r7, #12]
 8006ba2:	f7ff fa23 	bl	8005fec <SWAPBYTE>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	461a      	mov	r2, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	80da      	strh	r2, [r3, #6]
}
 8006bae:	bf00      	nop
 8006bb0:	3710      	adds	r7, #16
 8006bb2:	46bd      	mov	sp, r7
 8006bb4:	bd80      	pop	{r7, pc}

08006bb6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bb6:	b580      	push	{r7, lr}
 8006bb8:	b082      	sub	sp, #8
 8006bba:	af00      	add	r7, sp, #0
 8006bbc:	6078      	str	r0, [r7, #4]
 8006bbe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006bc0:	2180      	movs	r1, #128	@ 0x80
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fbf8 	bl	80073b8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006bc8:	2100      	movs	r1, #0
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f000 fbf4 	bl	80073b8 <USBD_LL_StallEP>
}
 8006bd0:	bf00      	nop
 8006bd2:	3708      	adds	r7, #8
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}

08006bd8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b086      	sub	sp, #24
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	60f8      	str	r0, [r7, #12]
 8006be0:	60b9      	str	r1, [r7, #8]
 8006be2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006be4:	2300      	movs	r3, #0
 8006be6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d042      	beq.n	8006c74 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 8006bf2:	6938      	ldr	r0, [r7, #16]
 8006bf4:	f000 f842 	bl	8006c7c <USBD_GetLen>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	3301      	adds	r3, #1
 8006bfc:	005b      	lsls	r3, r3, #1
 8006bfe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c02:	d808      	bhi.n	8006c16 <USBD_GetString+0x3e>
 8006c04:	6938      	ldr	r0, [r7, #16]
 8006c06:	f000 f839 	bl	8006c7c <USBD_GetLen>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	3301      	adds	r3, #1
 8006c0e:	b29b      	uxth	r3, r3
 8006c10:	005b      	lsls	r3, r3, #1
 8006c12:	b29a      	uxth	r2, r3
 8006c14:	e001      	b.n	8006c1a <USBD_GetString+0x42>
 8006c16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006c1e:	7dfb      	ldrb	r3, [r7, #23]
 8006c20:	68ba      	ldr	r2, [r7, #8]
 8006c22:	4413      	add	r3, r2
 8006c24:	687a      	ldr	r2, [r7, #4]
 8006c26:	7812      	ldrb	r2, [r2, #0]
 8006c28:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c2a:	7dfb      	ldrb	r3, [r7, #23]
 8006c2c:	3301      	adds	r3, #1
 8006c2e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006c30:	7dfb      	ldrb	r3, [r7, #23]
 8006c32:	68ba      	ldr	r2, [r7, #8]
 8006c34:	4413      	add	r3, r2
 8006c36:	2203      	movs	r2, #3
 8006c38:	701a      	strb	r2, [r3, #0]
  idx++;
 8006c3a:	7dfb      	ldrb	r3, [r7, #23]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006c40:	e013      	b.n	8006c6a <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 8006c42:	7dfb      	ldrb	r3, [r7, #23]
 8006c44:	68ba      	ldr	r2, [r7, #8]
 8006c46:	4413      	add	r3, r2
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	7812      	ldrb	r2, [r2, #0]
 8006c4c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006c4e:	693b      	ldr	r3, [r7, #16]
 8006c50:	3301      	adds	r3, #1
 8006c52:	613b      	str	r3, [r7, #16]
    idx++;
 8006c54:	7dfb      	ldrb	r3, [r7, #23]
 8006c56:	3301      	adds	r3, #1
 8006c58:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006c5a:	7dfb      	ldrb	r3, [r7, #23]
 8006c5c:	68ba      	ldr	r2, [r7, #8]
 8006c5e:	4413      	add	r3, r2
 8006c60:	2200      	movs	r2, #0
 8006c62:	701a      	strb	r2, [r3, #0]
    idx++;
 8006c64:	7dfb      	ldrb	r3, [r7, #23]
 8006c66:	3301      	adds	r3, #1
 8006c68:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1e7      	bne.n	8006c42 <USBD_GetString+0x6a>
 8006c72:	e000      	b.n	8006c76 <USBD_GetString+0x9e>
    return;
 8006c74:	bf00      	nop
  }
}
 8006c76:	3718      	adds	r7, #24
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006c8c:	e005      	b.n	8006c9a <USBD_GetLen+0x1e>
  {
    len++;
 8006c8e:	7bfb      	ldrb	r3, [r7, #15]
 8006c90:	3301      	adds	r3, #1
 8006c92:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	3301      	adds	r3, #1
 8006c98:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	781b      	ldrb	r3, [r3, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d1f5      	bne.n	8006c8e <USBD_GetLen+0x12>
  }

  return len;
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3714      	adds	r7, #20
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cae:	4770      	bx	lr

08006cb0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	60f8      	str	r0, [r7, #12]
 8006cb8:	60b9      	str	r1, [r7, #8]
 8006cba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2202      	movs	r2, #2
 8006cc0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	687a      	ldr	r2, [r7, #4]
 8006cc8:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	2100      	movs	r1, #0
 8006cdc:	68f8      	ldr	r0, [r7, #12]
 8006cde:	f000 fbf4 	bl	80074ca <USBD_LL_Transmit>

  return USBD_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}

08006cec <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b084      	sub	sp, #16
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	60f8      	str	r0, [r7, #12]
 8006cf4:	60b9      	str	r1, [r7, #8]
 8006cf6:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	68f8      	ldr	r0, [r7, #12]
 8006d00:	f000 fbe3 	bl	80074ca <USBD_LL_Transmit>

  return USBD_OK;
 8006d04:	2300      	movs	r3, #0
}
 8006d06:	4618      	mov	r0, r3
 8006d08:	3710      	adds	r7, #16
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	bd80      	pop	{r7, pc}

08006d0e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006d0e:	b580      	push	{r7, lr}
 8006d10:	b084      	sub	sp, #16
 8006d12:	af00      	add	r7, sp, #0
 8006d14:	60f8      	str	r0, [r7, #12]
 8006d16:	60b9      	str	r1, [r7, #8]
 8006d18:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68ba      	ldr	r2, [r7, #8]
 8006d1e:	2100      	movs	r1, #0
 8006d20:	68f8      	ldr	r0, [r7, #12]
 8006d22:	f000 fbf3 	bl	800750c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d26:	2300      	movs	r3, #0
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3710      	adds	r7, #16
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2204      	movs	r2, #4
 8006d3c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006d40:	2300      	movs	r3, #0
 8006d42:	2200      	movs	r2, #0
 8006d44:	2100      	movs	r1, #0
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fbbf 	bl	80074ca <USBD_LL_Transmit>

  return USBD_OK;
 8006d4c:	2300      	movs	r3, #0
}
 8006d4e:	4618      	mov	r0, r3
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b082      	sub	sp, #8
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	2205      	movs	r2, #5
 8006d62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d66:	2300      	movs	r3, #0
 8006d68:	2200      	movs	r2, #0
 8006d6a:	2100      	movs	r1, #0
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 fbcd 	bl	800750c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006d72:	2300      	movs	r3, #0
}
 8006d74:	4618      	mov	r0, r3
 8006d76:	3708      	adds	r7, #8
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}

08006d7c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006d80:	2200      	movs	r2, #0
 8006d82:	490e      	ldr	r1, [pc, #56]	@ (8006dbc <MX_USB_DEVICE_Init+0x40>)
 8006d84:	480e      	ldr	r0, [pc, #56]	@ (8006dc0 <MX_USB_DEVICE_Init+0x44>)
 8006d86:	f7fe fcfb 	bl	8005780 <USBD_Init>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d001      	beq.n	8006d94 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006d90:	f7f9 fdd4 	bl	800093c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006d94:	490b      	ldr	r1, [pc, #44]	@ (8006dc4 <MX_USB_DEVICE_Init+0x48>)
 8006d96:	480a      	ldr	r0, [pc, #40]	@ (8006dc0 <MX_USB_DEVICE_Init+0x44>)
 8006d98:	f7fe fd22 	bl	80057e0 <USBD_RegisterClass>
 8006d9c:	4603      	mov	r3, r0
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d001      	beq.n	8006da6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006da2:	f7f9 fdcb 	bl	800093c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006da6:	4806      	ldr	r0, [pc, #24]	@ (8006dc0 <MX_USB_DEVICE_Init+0x44>)
 8006da8:	f7fe fd50 	bl	800584c <USBD_Start>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006db2:	f7f9 fdc3 	bl	800093c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006db6:	bf00      	nop
 8006db8:	bd80      	pop	{r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	200000c0 	.word	0x200000c0
 8006dc0:	200001cc 	.word	0x200001cc
 8006dc4:	2000000c 	.word	0x2000000c

08006dc8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b083      	sub	sp, #12
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	4603      	mov	r3, r0
 8006dd0:	6039      	str	r1, [r7, #0]
 8006dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	2212      	movs	r2, #18
 8006dd8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006dda:	4b03      	ldr	r3, [pc, #12]	@ (8006de8 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	370c      	adds	r7, #12
 8006de0:	46bd      	mov	sp, r7
 8006de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de6:	4770      	bx	lr
 8006de8:	200000dc 	.word	0x200000dc

08006dec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b083      	sub	sp, #12
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	4603      	mov	r3, r0
 8006df4:	6039      	str	r1, [r7, #0]
 8006df6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	2204      	movs	r2, #4
 8006dfc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006dfe:	4b03      	ldr	r3, [pc, #12]	@ (8006e0c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	200000f0 	.word	0x200000f0

08006e10 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	4603      	mov	r3, r0
 8006e18:	6039      	str	r1, [r7, #0]
 8006e1a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006e1c:	79fb      	ldrb	r3, [r7, #7]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d105      	bne.n	8006e2e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e22:	683a      	ldr	r2, [r7, #0]
 8006e24:	4907      	ldr	r1, [pc, #28]	@ (8006e44 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e26:	4808      	ldr	r0, [pc, #32]	@ (8006e48 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e28:	f7ff fed6 	bl	8006bd8 <USBD_GetString>
 8006e2c:	e004      	b.n	8006e38 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	4904      	ldr	r1, [pc, #16]	@ (8006e44 <USBD_FS_ProductStrDescriptor+0x34>)
 8006e32:	4805      	ldr	r0, [pc, #20]	@ (8006e48 <USBD_FS_ProductStrDescriptor+0x38>)
 8006e34:	f7ff fed0 	bl	8006bd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006e38:	4b02      	ldr	r3, [pc, #8]	@ (8006e44 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	200004a8 	.word	0x200004a8
 8006e48:	08007648 	.word	0x08007648

08006e4c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	4603      	mov	r3, r0
 8006e54:	6039      	str	r1, [r7, #0]
 8006e56:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006e58:	683a      	ldr	r2, [r7, #0]
 8006e5a:	4904      	ldr	r1, [pc, #16]	@ (8006e6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006e5c:	4804      	ldr	r0, [pc, #16]	@ (8006e70 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006e5e:	f7ff febb 	bl	8006bd8 <USBD_GetString>
  return USBD_StrDesc;
 8006e62:	4b02      	ldr	r3, [pc, #8]	@ (8006e6c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	200004a8 	.word	0x200004a8
 8006e70:	08007660 	.word	0x08007660

08006e74 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	6039      	str	r1, [r7, #0]
 8006e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	221a      	movs	r2, #26
 8006e84:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006e86:	f000 f843 	bl	8006f10 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006e8a:	4b02      	ldr	r3, [pc, #8]	@ (8006e94 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3708      	adds	r7, #8
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}
 8006e94:	200000f4 	.word	0x200000f4

08006e98 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b082      	sub	sp, #8
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	6039      	str	r1, [r7, #0]
 8006ea2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006ea4:	79fb      	ldrb	r3, [r7, #7]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d105      	bne.n	8006eb6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006eaa:	683a      	ldr	r2, [r7, #0]
 8006eac:	4907      	ldr	r1, [pc, #28]	@ (8006ecc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006eae:	4808      	ldr	r0, [pc, #32]	@ (8006ed0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006eb0:	f7ff fe92 	bl	8006bd8 <USBD_GetString>
 8006eb4:	e004      	b.n	8006ec0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006eb6:	683a      	ldr	r2, [r7, #0]
 8006eb8:	4904      	ldr	r1, [pc, #16]	@ (8006ecc <USBD_FS_ConfigStrDescriptor+0x34>)
 8006eba:	4805      	ldr	r0, [pc, #20]	@ (8006ed0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006ebc:	f7ff fe8c 	bl	8006bd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006ec0:	4b02      	ldr	r3, [pc, #8]	@ (8006ecc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}
 8006eca:	bf00      	nop
 8006ecc:	200004a8 	.word	0x200004a8
 8006ed0:	08007674 	.word	0x08007674

08006ed4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b082      	sub	sp, #8
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	4603      	mov	r3, r0
 8006edc:	6039      	str	r1, [r7, #0]
 8006ede:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006ee0:	79fb      	ldrb	r3, [r7, #7]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d105      	bne.n	8006ef2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ee6:	683a      	ldr	r2, [r7, #0]
 8006ee8:	4907      	ldr	r1, [pc, #28]	@ (8006f08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006eea:	4808      	ldr	r0, [pc, #32]	@ (8006f0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006eec:	f7ff fe74 	bl	8006bd8 <USBD_GetString>
 8006ef0:	e004      	b.n	8006efc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006ef2:	683a      	ldr	r2, [r7, #0]
 8006ef4:	4904      	ldr	r1, [pc, #16]	@ (8006f08 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006ef6:	4805      	ldr	r0, [pc, #20]	@ (8006f0c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006ef8:	f7ff fe6e 	bl	8006bd8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006efc:	4b02      	ldr	r3, [pc, #8]	@ (8006f08 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3708      	adds	r7, #8
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	bf00      	nop
 8006f08:	200004a8 	.word	0x200004a8
 8006f0c:	08007680 	.word	0x08007680

08006f10 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006f16:	4b0f      	ldr	r3, [pc, #60]	@ (8006f54 <Get_SerialNum+0x44>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8006f58 <Get_SerialNum+0x48>)
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006f22:	4b0e      	ldr	r3, [pc, #56]	@ (8006f5c <Get_SerialNum+0x4c>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006f28:	68fa      	ldr	r2, [r7, #12]
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d009      	beq.n	8006f4a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006f36:	2208      	movs	r2, #8
 8006f38:	4909      	ldr	r1, [pc, #36]	@ (8006f60 <Get_SerialNum+0x50>)
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 f814 	bl	8006f68 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006f40:	2204      	movs	r2, #4
 8006f42:	4908      	ldr	r1, [pc, #32]	@ (8006f64 <Get_SerialNum+0x54>)
 8006f44:	68b8      	ldr	r0, [r7, #8]
 8006f46:	f000 f80f 	bl	8006f68 <IntToUnicode>
  }
}
 8006f4a:	bf00      	nop
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}
 8006f52:	bf00      	nop
 8006f54:	1fff7a10 	.word	0x1fff7a10
 8006f58:	1fff7a14 	.word	0x1fff7a14
 8006f5c:	1fff7a18 	.word	0x1fff7a18
 8006f60:	200000f6 	.word	0x200000f6
 8006f64:	20000106 	.word	0x20000106

08006f68 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b087      	sub	sp, #28
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	60f8      	str	r0, [r7, #12]
 8006f70:	60b9      	str	r1, [r7, #8]
 8006f72:	4613      	mov	r3, r2
 8006f74:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006f76:	2300      	movs	r3, #0
 8006f78:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	75fb      	strb	r3, [r7, #23]
 8006f7e:	e027      	b.n	8006fd0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	0f1b      	lsrs	r3, r3, #28
 8006f84:	2b09      	cmp	r3, #9
 8006f86:	d80b      	bhi.n	8006fa0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	0f1b      	lsrs	r3, r3, #28
 8006f8c:	b2da      	uxtb	r2, r3
 8006f8e:	7dfb      	ldrb	r3, [r7, #23]
 8006f90:	005b      	lsls	r3, r3, #1
 8006f92:	4619      	mov	r1, r3
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	440b      	add	r3, r1
 8006f98:	3230      	adds	r2, #48	@ 0x30
 8006f9a:	b2d2      	uxtb	r2, r2
 8006f9c:	701a      	strb	r2, [r3, #0]
 8006f9e:	e00a      	b.n	8006fb6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	0f1b      	lsrs	r3, r3, #28
 8006fa4:	b2da      	uxtb	r2, r3
 8006fa6:	7dfb      	ldrb	r3, [r7, #23]
 8006fa8:	005b      	lsls	r3, r3, #1
 8006faa:	4619      	mov	r1, r3
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	440b      	add	r3, r1
 8006fb0:	3237      	adds	r2, #55	@ 0x37
 8006fb2:	b2d2      	uxtb	r2, r2
 8006fb4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	011b      	lsls	r3, r3, #4
 8006fba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006fbc:	7dfb      	ldrb	r3, [r7, #23]
 8006fbe:	005b      	lsls	r3, r3, #1
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	4413      	add	r3, r2
 8006fc6:	2200      	movs	r2, #0
 8006fc8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006fca:	7dfb      	ldrb	r3, [r7, #23]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	75fb      	strb	r3, [r7, #23]
 8006fd0:	7dfa      	ldrb	r2, [r7, #23]
 8006fd2:	79fb      	ldrb	r3, [r7, #7]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	d3d3      	bcc.n	8006f80 <IntToUnicode+0x18>
  }
}
 8006fd8:	bf00      	nop
 8006fda:	bf00      	nop
 8006fdc:	371c      	adds	r7, #28
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
	...

08006fe8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b08a      	sub	sp, #40	@ 0x28
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ff0:	f107 0314 	add.w	r3, r7, #20
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	601a      	str	r2, [r3, #0]
 8006ff8:	605a      	str	r2, [r3, #4]
 8006ffa:	609a      	str	r2, [r3, #8]
 8006ffc:	60da      	str	r2, [r3, #12]
 8006ffe:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007008:	d13a      	bne.n	8007080 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800700a:	2300      	movs	r3, #0
 800700c:	613b      	str	r3, [r7, #16]
 800700e:	4b1e      	ldr	r3, [pc, #120]	@ (8007088 <HAL_PCD_MspInit+0xa0>)
 8007010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007012:	4a1d      	ldr	r2, [pc, #116]	@ (8007088 <HAL_PCD_MspInit+0xa0>)
 8007014:	f043 0301 	orr.w	r3, r3, #1
 8007018:	6313      	str	r3, [r2, #48]	@ 0x30
 800701a:	4b1b      	ldr	r3, [pc, #108]	@ (8007088 <HAL_PCD_MspInit+0xa0>)
 800701c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800701e:	f003 0301 	and.w	r3, r3, #1
 8007022:	613b      	str	r3, [r7, #16]
 8007024:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007026:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800702a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800702c:	2302      	movs	r3, #2
 800702e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007030:	2300      	movs	r3, #0
 8007032:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007034:	2303      	movs	r3, #3
 8007036:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007038:	230a      	movs	r3, #10
 800703a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800703c:	f107 0314 	add.w	r3, r7, #20
 8007040:	4619      	mov	r1, r3
 8007042:	4812      	ldr	r0, [pc, #72]	@ (800708c <HAL_PCD_MspInit+0xa4>)
 8007044:	f7fa fb00 	bl	8001648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007048:	4b0f      	ldr	r3, [pc, #60]	@ (8007088 <HAL_PCD_MspInit+0xa0>)
 800704a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800704c:	4a0e      	ldr	r2, [pc, #56]	@ (8007088 <HAL_PCD_MspInit+0xa0>)
 800704e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007052:	6353      	str	r3, [r2, #52]	@ 0x34
 8007054:	2300      	movs	r3, #0
 8007056:	60fb      	str	r3, [r7, #12]
 8007058:	4b0b      	ldr	r3, [pc, #44]	@ (8007088 <HAL_PCD_MspInit+0xa0>)
 800705a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800705c:	4a0a      	ldr	r2, [pc, #40]	@ (8007088 <HAL_PCD_MspInit+0xa0>)
 800705e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007062:	6453      	str	r3, [r2, #68]	@ 0x44
 8007064:	4b08      	ldr	r3, [pc, #32]	@ (8007088 <HAL_PCD_MspInit+0xa0>)
 8007066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007068:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800706c:	60fb      	str	r3, [r7, #12]
 800706e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007070:	2200      	movs	r2, #0
 8007072:	2100      	movs	r1, #0
 8007074:	2043      	movs	r0, #67	@ 0x43
 8007076:	f7fa fab0 	bl	80015da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800707a:	2043      	movs	r0, #67	@ 0x43
 800707c:	f7fa fac9 	bl	8001612 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007080:	bf00      	nop
 8007082:	3728      	adds	r7, #40	@ 0x28
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	40023800 	.word	0x40023800
 800708c:	40020000 	.word	0x40020000

08007090 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b082      	sub	sp, #8
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80070a4:	4619      	mov	r1, r3
 80070a6:	4610      	mov	r0, r2
 80070a8:	f7fe fc1d 	bl	80058e6 <USBD_LL_SetupStage>
}
 80070ac:	bf00      	nop
 80070ae:	3708      	adds	r7, #8
 80070b0:	46bd      	mov	sp, r7
 80070b2:	bd80      	pop	{r7, pc}

080070b4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b082      	sub	sp, #8
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
 80070bc:	460b      	mov	r3, r1
 80070be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80070c6:	78fa      	ldrb	r2, [r7, #3]
 80070c8:	6879      	ldr	r1, [r7, #4]
 80070ca:	4613      	mov	r3, r2
 80070cc:	00db      	lsls	r3, r3, #3
 80070ce:	4413      	add	r3, r2
 80070d0:	009b      	lsls	r3, r3, #2
 80070d2:	440b      	add	r3, r1
 80070d4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	78fb      	ldrb	r3, [r7, #3]
 80070dc:	4619      	mov	r1, r3
 80070de:	f7fe fc57 	bl	8005990 <USBD_LL_DataOutStage>
}
 80070e2:	bf00      	nop
 80070e4:	3708      	adds	r7, #8
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}

080070ea <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80070ea:	b580      	push	{r7, lr}
 80070ec:	b082      	sub	sp, #8
 80070ee:	af00      	add	r7, sp, #0
 80070f0:	6078      	str	r0, [r7, #4]
 80070f2:	460b      	mov	r3, r1
 80070f4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 80070fc:	78fa      	ldrb	r2, [r7, #3]
 80070fe:	6879      	ldr	r1, [r7, #4]
 8007100:	4613      	mov	r3, r2
 8007102:	00db      	lsls	r3, r3, #3
 8007104:	4413      	add	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	440b      	add	r3, r1
 800710a:	3320      	adds	r3, #32
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	78fb      	ldrb	r3, [r7, #3]
 8007110:	4619      	mov	r1, r3
 8007112:	f7fe fcf9 	bl	8005b08 <USBD_LL_DataInStage>
}
 8007116:	bf00      	nop
 8007118:	3708      	adds	r7, #8
 800711a:	46bd      	mov	sp, r7
 800711c:	bd80      	pop	{r7, pc}

0800711e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800711e:	b580      	push	{r7, lr}
 8007120:	b082      	sub	sp, #8
 8007122:	af00      	add	r7, sp, #0
 8007124:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800712c:	4618      	mov	r0, r3
 800712e:	f7fe fe3d 	bl	8005dac <USBD_LL_SOF>
}
 8007132:	bf00      	nop
 8007134:	3708      	adds	r7, #8
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}

0800713a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800713a:	b580      	push	{r7, lr}
 800713c:	b084      	sub	sp, #16
 800713e:	af00      	add	r7, sp, #0
 8007140:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007142:	2301      	movs	r3, #1
 8007144:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	79db      	ldrb	r3, [r3, #7]
 800714a:	2b02      	cmp	r3, #2
 800714c:	d001      	beq.n	8007152 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800714e:	f7f9 fbf5 	bl	800093c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007158:	7bfa      	ldrb	r2, [r7, #15]
 800715a:	4611      	mov	r1, r2
 800715c:	4618      	mov	r0, r3
 800715e:	f7fe fde1 	bl	8005d24 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007168:	4618      	mov	r0, r3
 800716a:	f7fe fd88 	bl	8005c7e <USBD_LL_Reset>
}
 800716e:	bf00      	nop
 8007170:	3710      	adds	r7, #16
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
	...

08007178 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe fddc 	bl	8005d44 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	687a      	ldr	r2, [r7, #4]
 8007198:	6812      	ldr	r2, [r2, #0]
 800719a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800719e:	f043 0301 	orr.w	r3, r3, #1
 80071a2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	7adb      	ldrb	r3, [r3, #11]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d005      	beq.n	80071b8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80071ac:	4b04      	ldr	r3, [pc, #16]	@ (80071c0 <HAL_PCD_SuspendCallback+0x48>)
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	4a03      	ldr	r2, [pc, #12]	@ (80071c0 <HAL_PCD_SuspendCallback+0x48>)
 80071b2:	f043 0306 	orr.w	r3, r3, #6
 80071b6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80071b8:	bf00      	nop
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}
 80071c0:	e000ed00 	.word	0xe000ed00

080071c4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071c4:	b580      	push	{r7, lr}
 80071c6:	b082      	sub	sp, #8
 80071c8:	af00      	add	r7, sp, #0
 80071ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071d2:	4618      	mov	r0, r3
 80071d4:	f7fe fdd2 	bl	8005d7c <USBD_LL_Resume>
}
 80071d8:	bf00      	nop
 80071da:	3708      	adds	r7, #8
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b082      	sub	sp, #8
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	460b      	mov	r3, r1
 80071ea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80071f2:	78fa      	ldrb	r2, [r7, #3]
 80071f4:	4611      	mov	r1, r2
 80071f6:	4618      	mov	r0, r3
 80071f8:	f7fe fe2a 	bl	8005e50 <USBD_LL_IsoOUTIncomplete>
}
 80071fc:	bf00      	nop
 80071fe:	3708      	adds	r7, #8
 8007200:	46bd      	mov	sp, r7
 8007202:	bd80      	pop	{r7, pc}

08007204 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
 800720c:	460b      	mov	r3, r1
 800720e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007216:	78fa      	ldrb	r2, [r7, #3]
 8007218:	4611      	mov	r1, r2
 800721a:	4618      	mov	r0, r3
 800721c:	f7fe fde6 	bl	8005dec <USBD_LL_IsoINIncomplete>
}
 8007220:	bf00      	nop
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007236:	4618      	mov	r0, r3
 8007238:	f7fe fe3c 	bl	8005eb4 <USBD_LL_DevConnected>
}
 800723c:	bf00      	nop
 800723e:	3708      	adds	r7, #8
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007252:	4618      	mov	r0, r3
 8007254:	f7fe fe39 	bl	8005eca <USBD_LL_DevDisconnected>
}
 8007258:	bf00      	nop
 800725a:	3708      	adds	r7, #8
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	b082      	sub	sp, #8
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d13c      	bne.n	80072ea <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007270:	4a20      	ldr	r2, [pc, #128]	@ (80072f4 <USBD_LL_Init+0x94>)
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	4a1e      	ldr	r2, [pc, #120]	@ (80072f4 <USBD_LL_Init+0x94>)
 800727c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007280:	4b1c      	ldr	r3, [pc, #112]	@ (80072f4 <USBD_LL_Init+0x94>)
 8007282:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007286:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007288:	4b1a      	ldr	r3, [pc, #104]	@ (80072f4 <USBD_LL_Init+0x94>)
 800728a:	2204      	movs	r2, #4
 800728c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800728e:	4b19      	ldr	r3, [pc, #100]	@ (80072f4 <USBD_LL_Init+0x94>)
 8007290:	2202      	movs	r2, #2
 8007292:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007294:	4b17      	ldr	r3, [pc, #92]	@ (80072f4 <USBD_LL_Init+0x94>)
 8007296:	2200      	movs	r2, #0
 8007298:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800729a:	4b16      	ldr	r3, [pc, #88]	@ (80072f4 <USBD_LL_Init+0x94>)
 800729c:	2202      	movs	r2, #2
 800729e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80072a0:	4b14      	ldr	r3, [pc, #80]	@ (80072f4 <USBD_LL_Init+0x94>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80072a6:	4b13      	ldr	r3, [pc, #76]	@ (80072f4 <USBD_LL_Init+0x94>)
 80072a8:	2200      	movs	r2, #0
 80072aa:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80072ac:	4b11      	ldr	r3, [pc, #68]	@ (80072f4 <USBD_LL_Init+0x94>)
 80072ae:	2200      	movs	r2, #0
 80072b0:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80072b2:	4b10      	ldr	r3, [pc, #64]	@ (80072f4 <USBD_LL_Init+0x94>)
 80072b4:	2200      	movs	r2, #0
 80072b6:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80072b8:	4b0e      	ldr	r3, [pc, #56]	@ (80072f4 <USBD_LL_Init+0x94>)
 80072ba:	2200      	movs	r2, #0
 80072bc:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80072be:	480d      	ldr	r0, [pc, #52]	@ (80072f4 <USBD_LL_Init+0x94>)
 80072c0:	f7fa fb5f 	bl	8001982 <HAL_PCD_Init>
 80072c4:	4603      	mov	r3, r0
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d001      	beq.n	80072ce <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80072ca:	f7f9 fb37 	bl	800093c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80072ce:	2180      	movs	r1, #128	@ 0x80
 80072d0:	4808      	ldr	r0, [pc, #32]	@ (80072f4 <USBD_LL_Init+0x94>)
 80072d2:	f7fb fd74 	bl	8002dbe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80072d6:	2240      	movs	r2, #64	@ 0x40
 80072d8:	2100      	movs	r1, #0
 80072da:	4806      	ldr	r0, [pc, #24]	@ (80072f4 <USBD_LL_Init+0x94>)
 80072dc:	f7fb fd28 	bl	8002d30 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80072e0:	2280      	movs	r2, #128	@ 0x80
 80072e2:	2101      	movs	r1, #1
 80072e4:	4803      	ldr	r0, [pc, #12]	@ (80072f4 <USBD_LL_Init+0x94>)
 80072e6:	f7fb fd23 	bl	8002d30 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80072ea:	2300      	movs	r3, #0
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3708      	adds	r7, #8
 80072f0:	46bd      	mov	sp, r7
 80072f2:	bd80      	pop	{r7, pc}
 80072f4:	200006a8 	.word	0x200006a8

080072f8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007304:	2300      	movs	r3, #0
 8007306:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800730e:	4618      	mov	r0, r3
 8007310:	f7fa fc46 	bl	8001ba0 <HAL_PCD_Start>
 8007314:	4603      	mov	r3, r0
 8007316:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	4618      	mov	r0, r3
 800731c:	f000 f930 	bl	8007580 <USBD_Get_USB_Status>
 8007320:	4603      	mov	r3, r0
 8007322:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007324:	7bbb      	ldrb	r3, [r7, #14]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3710      	adds	r7, #16
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}

0800732e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800732e:	b580      	push	{r7, lr}
 8007330:	b084      	sub	sp, #16
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
 8007336:	4608      	mov	r0, r1
 8007338:	4611      	mov	r1, r2
 800733a:	461a      	mov	r2, r3
 800733c:	4603      	mov	r3, r0
 800733e:	70fb      	strb	r3, [r7, #3]
 8007340:	460b      	mov	r3, r1
 8007342:	70bb      	strb	r3, [r7, #2]
 8007344:	4613      	mov	r3, r2
 8007346:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007348:	2300      	movs	r3, #0
 800734a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8007356:	78bb      	ldrb	r3, [r7, #2]
 8007358:	883a      	ldrh	r2, [r7, #0]
 800735a:	78f9      	ldrb	r1, [r7, #3]
 800735c:	f7fb f91a 	bl	8002594 <HAL_PCD_EP_Open>
 8007360:	4603      	mov	r3, r0
 8007362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007364:	7bfb      	ldrb	r3, [r7, #15]
 8007366:	4618      	mov	r0, r3
 8007368:	f000 f90a 	bl	8007580 <USBD_Get_USB_Status>
 800736c:	4603      	mov	r3, r0
 800736e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007370:	7bbb      	ldrb	r3, [r7, #14]
}
 8007372:	4618      	mov	r0, r3
 8007374:	3710      	adds	r7, #16
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}

0800737a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b084      	sub	sp, #16
 800737e:	af00      	add	r7, sp, #0
 8007380:	6078      	str	r0, [r7, #4]
 8007382:	460b      	mov	r3, r1
 8007384:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007386:	2300      	movs	r3, #0
 8007388:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007394:	78fa      	ldrb	r2, [r7, #3]
 8007396:	4611      	mov	r1, r2
 8007398:	4618      	mov	r0, r3
 800739a:	f7fb f965 	bl	8002668 <HAL_PCD_EP_Close>
 800739e:	4603      	mov	r3, r0
 80073a0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073a2:	7bfb      	ldrb	r3, [r7, #15]
 80073a4:	4618      	mov	r0, r3
 80073a6:	f000 f8eb 	bl	8007580 <USBD_Get_USB_Status>
 80073aa:	4603      	mov	r3, r0
 80073ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073ae:	7bbb      	ldrb	r3, [r7, #14]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3710      	adds	r7, #16
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}

080073b8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b084      	sub	sp, #16
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
 80073c0:	460b      	mov	r3, r1
 80073c2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073c4:	2300      	movs	r3, #0
 80073c6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80073c8:	2300      	movs	r3, #0
 80073ca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80073d2:	78fa      	ldrb	r2, [r7, #3]
 80073d4:	4611      	mov	r1, r2
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fb fa05 	bl	80027e6 <HAL_PCD_EP_SetStall>
 80073dc:	4603      	mov	r3, r0
 80073de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80073e0:	7bfb      	ldrb	r3, [r7, #15]
 80073e2:	4618      	mov	r0, r3
 80073e4:	f000 f8cc 	bl	8007580 <USBD_Get_USB_Status>
 80073e8:	4603      	mov	r3, r0
 80073ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073ec:	7bbb      	ldrb	r3, [r7, #14]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}

080073f6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80073f6:	b580      	push	{r7, lr}
 80073f8:	b084      	sub	sp, #16
 80073fa:	af00      	add	r7, sp, #0
 80073fc:	6078      	str	r0, [r7, #4]
 80073fe:	460b      	mov	r3, r1
 8007400:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007402:	2300      	movs	r3, #0
 8007404:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007406:	2300      	movs	r3, #0
 8007408:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007410:	78fa      	ldrb	r2, [r7, #3]
 8007412:	4611      	mov	r1, r2
 8007414:	4618      	mov	r0, r3
 8007416:	f7fb fa49 	bl	80028ac <HAL_PCD_EP_ClrStall>
 800741a:	4603      	mov	r3, r0
 800741c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800741e:	7bfb      	ldrb	r3, [r7, #15]
 8007420:	4618      	mov	r0, r3
 8007422:	f000 f8ad 	bl	8007580 <USBD_Get_USB_Status>
 8007426:	4603      	mov	r3, r0
 8007428:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800742a:	7bbb      	ldrb	r3, [r7, #14]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	460b      	mov	r3, r1
 800743e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007446:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007448:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800744c:	2b00      	cmp	r3, #0
 800744e:	da0b      	bge.n	8007468 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007456:	68f9      	ldr	r1, [r7, #12]
 8007458:	4613      	mov	r3, r2
 800745a:	00db      	lsls	r3, r3, #3
 800745c:	4413      	add	r3, r2
 800745e:	009b      	lsls	r3, r3, #2
 8007460:	440b      	add	r3, r1
 8007462:	3316      	adds	r3, #22
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	e00b      	b.n	8007480 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007468:	78fb      	ldrb	r3, [r7, #3]
 800746a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800746e:	68f9      	ldr	r1, [r7, #12]
 8007470:	4613      	mov	r3, r2
 8007472:	00db      	lsls	r3, r3, #3
 8007474:	4413      	add	r3, r2
 8007476:	009b      	lsls	r3, r3, #2
 8007478:	440b      	add	r3, r1
 800747a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800747e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007480:	4618      	mov	r0, r3
 8007482:	3714      	adds	r7, #20
 8007484:	46bd      	mov	sp, r7
 8007486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800748a:	4770      	bx	lr

0800748c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800748c:	b580      	push	{r7, lr}
 800748e:	b084      	sub	sp, #16
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	460b      	mov	r3, r1
 8007496:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007498:	2300      	movs	r3, #0
 800749a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80074a6:	78fa      	ldrb	r2, [r7, #3]
 80074a8:	4611      	mov	r1, r2
 80074aa:	4618      	mov	r0, r3
 80074ac:	f7fb f84e 	bl	800254c <HAL_PCD_SetAddress>
 80074b0:	4603      	mov	r3, r0
 80074b2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074b4:	7bfb      	ldrb	r3, [r7, #15]
 80074b6:	4618      	mov	r0, r3
 80074b8:	f000 f862 	bl	8007580 <USBD_Get_USB_Status>
 80074bc:	4603      	mov	r3, r0
 80074be:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074c0:	7bbb      	ldrb	r3, [r7, #14]
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3710      	adds	r7, #16
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b086      	sub	sp, #24
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	60f8      	str	r0, [r7, #12]
 80074d2:	607a      	str	r2, [r7, #4]
 80074d4:	603b      	str	r3, [r7, #0]
 80074d6:	460b      	mov	r3, r1
 80074d8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80074e8:	7af9      	ldrb	r1, [r7, #11]
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	687a      	ldr	r2, [r7, #4]
 80074ee:	f7fb f940 	bl	8002772 <HAL_PCD_EP_Transmit>
 80074f2:	4603      	mov	r3, r0
 80074f4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074f6:	7dfb      	ldrb	r3, [r7, #23]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 f841 	bl	8007580 <USBD_Get_USB_Status>
 80074fe:	4603      	mov	r3, r0
 8007500:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007502:	7dbb      	ldrb	r3, [r7, #22]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3718      	adds	r7, #24
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b086      	sub	sp, #24
 8007510:	af00      	add	r7, sp, #0
 8007512:	60f8      	str	r0, [r7, #12]
 8007514:	607a      	str	r2, [r7, #4]
 8007516:	603b      	str	r3, [r7, #0]
 8007518:	460b      	mov	r3, r1
 800751a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007520:	2300      	movs	r3, #0
 8007522:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800752a:	7af9      	ldrb	r1, [r7, #11]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	f7fb f8e4 	bl	80026fc <HAL_PCD_EP_Receive>
 8007534:	4603      	mov	r3, r0
 8007536:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007538:	7dfb      	ldrb	r3, [r7, #23]
 800753a:	4618      	mov	r0, r3
 800753c:	f000 f820 	bl	8007580 <USBD_Get_USB_Status>
 8007540:	4603      	mov	r3, r0
 8007542:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007544:	7dbb      	ldrb	r3, [r7, #22]
}
 8007546:	4618      	mov	r0, r3
 8007548:	3718      	adds	r7, #24
 800754a:	46bd      	mov	sp, r7
 800754c:	bd80      	pop	{r7, pc}
	...

08007550 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007558:	4b03      	ldr	r3, [pc, #12]	@ (8007568 <USBD_static_malloc+0x18>)
}
 800755a:	4618      	mov	r0, r3
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	20000b8c 	.word	0x20000b8c

0800756c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]

}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007580:	b480      	push	{r7}
 8007582:	b085      	sub	sp, #20
 8007584:	af00      	add	r7, sp, #0
 8007586:	4603      	mov	r3, r0
 8007588:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800758a:	2300      	movs	r3, #0
 800758c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800758e:	79fb      	ldrb	r3, [r7, #7]
 8007590:	2b03      	cmp	r3, #3
 8007592:	d817      	bhi.n	80075c4 <USBD_Get_USB_Status+0x44>
 8007594:	a201      	add	r2, pc, #4	@ (adr r2, 800759c <USBD_Get_USB_Status+0x1c>)
 8007596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800759a:	bf00      	nop
 800759c:	080075ad 	.word	0x080075ad
 80075a0:	080075b3 	.word	0x080075b3
 80075a4:	080075b9 	.word	0x080075b9
 80075a8:	080075bf 	.word	0x080075bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80075ac:	2300      	movs	r3, #0
 80075ae:	73fb      	strb	r3, [r7, #15]
    break;
 80075b0:	e00b      	b.n	80075ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80075b2:	2303      	movs	r3, #3
 80075b4:	73fb      	strb	r3, [r7, #15]
    break;
 80075b6:	e008      	b.n	80075ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80075b8:	2301      	movs	r3, #1
 80075ba:	73fb      	strb	r3, [r7, #15]
    break;
 80075bc:	e005      	b.n	80075ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80075be:	2303      	movs	r3, #3
 80075c0:	73fb      	strb	r3, [r7, #15]
    break;
 80075c2:	e002      	b.n	80075ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80075c4:	2303      	movs	r3, #3
 80075c6:	73fb      	strb	r3, [r7, #15]
    break;
 80075c8:	bf00      	nop
  }
  return usb_status;
 80075ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3714      	adds	r7, #20
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <memset>:
 80075d8:	4402      	add	r2, r0
 80075da:	4603      	mov	r3, r0
 80075dc:	4293      	cmp	r3, r2
 80075de:	d100      	bne.n	80075e2 <memset+0xa>
 80075e0:	4770      	bx	lr
 80075e2:	f803 1b01 	strb.w	r1, [r3], #1
 80075e6:	e7f9      	b.n	80075dc <memset+0x4>

080075e8 <__libc_init_array>:
 80075e8:	b570      	push	{r4, r5, r6, lr}
 80075ea:	4d0d      	ldr	r5, [pc, #52]	@ (8007620 <__libc_init_array+0x38>)
 80075ec:	4c0d      	ldr	r4, [pc, #52]	@ (8007624 <__libc_init_array+0x3c>)
 80075ee:	1b64      	subs	r4, r4, r5
 80075f0:	10a4      	asrs	r4, r4, #2
 80075f2:	2600      	movs	r6, #0
 80075f4:	42a6      	cmp	r6, r4
 80075f6:	d109      	bne.n	800760c <__libc_init_array+0x24>
 80075f8:	4d0b      	ldr	r5, [pc, #44]	@ (8007628 <__libc_init_array+0x40>)
 80075fa:	4c0c      	ldr	r4, [pc, #48]	@ (800762c <__libc_init_array+0x44>)
 80075fc:	f000 f818 	bl	8007630 <_init>
 8007600:	1b64      	subs	r4, r4, r5
 8007602:	10a4      	asrs	r4, r4, #2
 8007604:	2600      	movs	r6, #0
 8007606:	42a6      	cmp	r6, r4
 8007608:	d105      	bne.n	8007616 <__libc_init_array+0x2e>
 800760a:	bd70      	pop	{r4, r5, r6, pc}
 800760c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007610:	4798      	blx	r3
 8007612:	3601      	adds	r6, #1
 8007614:	e7ee      	b.n	80075f4 <__libc_init_array+0xc>
 8007616:	f855 3b04 	ldr.w	r3, [r5], #4
 800761a:	4798      	blx	r3
 800761c:	3601      	adds	r6, #1
 800761e:	e7f2      	b.n	8007606 <__libc_init_array+0x1e>
 8007620:	080076b0 	.word	0x080076b0
 8007624:	080076b0 	.word	0x080076b0
 8007628:	080076b0 	.word	0x080076b0
 800762c:	080076b4 	.word	0x080076b4

08007630 <_init>:
 8007630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007632:	bf00      	nop
 8007634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007636:	bc08      	pop	{r3}
 8007638:	469e      	mov	lr, r3
 800763a:	4770      	bx	lr

0800763c <_fini>:
 800763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763e:	bf00      	nop
 8007640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007642:	bc08      	pop	{r3}
 8007644:	469e      	mov	lr, r3
 8007646:	4770      	bx	lr
